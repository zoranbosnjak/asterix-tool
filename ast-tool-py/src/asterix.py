#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is generated, DO NOT EDIT!
# For more details, see:
#    - https://github.com/zoranbosnjak/comet
#    - https://github.com/zoranbosnjak/asterix-specs
"""Asterix data manipulation routines, generic code.
"""

from dataclasses import dataclass
from typing import *
from functools import reduce, total_ordering, partial
import math
from abc import *
from binascii import hexlify, unhexlify
import re

Raw : TypeAlias = int
ItemName : TypeAlias = str

class AsterixError(Exception):
    """Base class for asterix related errors."""
    def __init__(self, msg : Optional[str]=None):
        if msg is None:
            msg = self.__class__.__name__
        super().__init__(msg)

class AsterixOverflow(AsterixError):
    """Raised when no sufficient data is available."""

@dataclass
class RawDatablock:
    """Size verified raw datablock."""
    bs : bytes

    @classmethod
    def parse_single(cls, s : bytes) -> Tuple['RawDatablock', bytes]:
        """Parse the first level of asterix and the remaining, that is:
        [cat|len|records...|cat|len|records...|...]
        -------------------|-----------------------
            ^--result           ^--remaining
        """
        if len(s) < 3:
            raise AsterixOverflow('datablock header')
        n = int.from_bytes(s[1:3], 'big')
        if len(s) < n:
            raise AsterixOverflow('datablock records')
        (a,b) = (s[0:n], s[n:])
        return(cls(a), b)

    @classmethod
    def parse(cls, s : bytes) -> List['RawDatablock']:
        """Parse the first level of asterix to the list of results."""
        def go(acc : List['RawDatablock'], val : bytes) -> Tuple[List['RawDatablock'], bytes]:
            if len(val) == 0:
                return (acc, val)
            (db, rest) = cls.parse_single(val)
            return go(acc+[db], rest)
        return go([], s)[0]

    def unparse(self) -> bytes:
        return self.bs

    @property
    def category(self) -> int:
        return self.bs[0]

    @property
    def length(self) -> int:
        return int.from_bytes(self.bs[1:3], 'big')

    @property
    def raw_records(self) -> bytes:
        return self.bs[3:]

@dataclass
class Bits:
    """Bit string, a wrapper around bytes (bytes, offset, size)."""
    bs          : bytes
    bit_offset  : int
    bit_size    : int

    @classmethod
    def empty(cls) -> 'Bits':
        return cls(b'', 0, 0)

    @classmethod
    def from_bytes(cls, val : bytes) -> 'Bits':
        return cls(val, 0, len(val)*8)

    @classmethod
    def from_uinteger(cls, raw : int, o : int, n : int) -> 'Bits':
        (a,b) = divmod(o+n, 8)
        rem = 8-b if b else 0
        if b:
            a += 1
            raw *= pow(2, rem)
        raw = raw % pow(2, a*8)
        bs = raw.to_bytes(a, 'big')
        return Bits(bs, o, n)

    @classmethod
    def fx(cls, val : bool) -> 'Bits':
        return cls.from_uinteger(1 if val else 0, 7, 1)

    def __len__(self) -> int:
        return self.bit_size

    def __iter__(self) -> Iterator[bool]:
        o = self.bit_offset
        n = self.bit_size
        (a,b) = divmod(o, 8)
        m = math.ceil(n/8)
        bs = self.bs[a:a+m]
        s2 = ''.join([bin(i)[2:].zfill(8) for i in bs])
        o2 = o%8
        s3 = s2[o2:o2+n]
        for i in s3:
            yield False if i=='0' else True

    def __eq__(self, other : Any) -> bool:
        return list(self) == list(other)

    def _compact(self) -> bytes:
        (a, b) = divmod(self.bit_offset, 8)
        n = self.bit_offset + self.bit_size
        (c, d) = divmod(n, 8)
        if d: c += 1
        return self.bs[a:c]

    def __str__(self) -> str:
        bs = self._compact()
        o = self.bit_offset % 8
        mask = [i >= o and i < (o + self.bit_size) for i in range(len(bs)*8)]
        bits = ''.join([bin(i)[2:].zfill(8) for i in bs])
        out = ''.join([b if m else '.' for (b,m) in zip(bits, mask)])
        return ' '.join(re.findall('........', out))

    def split_at(self, n : int) -> Tuple['Bits', 'Bits']:
        assert n >= 0
        if n > self.bit_size:
            raise AsterixOverflow
        a = self.__class__(self.bs, self.bit_offset, n)
        b = self.__class__(self.bs, self.bit_offset + n, self.bit_size - n)
        return (a,b)

    def take(self, x : int) -> 'Bits':
        return self.split_at(x)[0]

    def drop(self, x : int) -> 'Bits':
        return self.split_at(x)[1]

    def __add__(self, other : 'Bits') -> 'Bits':
        o = other.bit_offset % 8
        assert ((self.bit_offset + self.bit_size) % 8) == o, "Bits alignment error"
        n1 = self.bit_size
        n2 = other.bit_size
        bs1 = self._compact()
        bs2 = other._compact()
        if o:
            (a1, x1) = bs1[:-1], bs1[-1]
            (x2, b2) = bs2[0], bs2[1:]
            mask2 = 0xff >> o
            mask1 = 0xff - mask2
            x = (x1 & mask1) | (x2 & mask2)
            bs = a1 + x.to_bytes(1, 'big') + b2
            return self.__class__(bs, self.bit_offset % 8, n1+n2)
        else:
            return self.__class__(bs1 + bs2, self.bit_offset % 8, n1+n2)

    def to_bytes(self) -> bytes:
        (a,o) = divmod(self.bit_offset, 8)
        assert o == 0
        (b,o) = divmod(self.bit_size, 8)
        assert o == 0
        return self.bs[a:a+b]

    def to_uinteger(self) -> int:
        (a,o) = divmod(self.bit_offset, 8)
        bs = self.bs[a:]
        if o != 0:
            x = bs[0] & (0xff >> o)
            bs = x.to_bytes(1, 'big') + bs[1:]
        (c,d) = divmod(o + self.bit_size, 8)
        if d == 0:
            return int.from_bytes(bs[0:c], 'big')
        else:
            return (int.from_bytes(bs[0:(c+1)], 'big') >> (8-d))

    @classmethod
    def join(cls, lst : List['Bits']) -> 'Bits':
        if len(lst) == 0: return Bits.empty()
        if len(lst) == 1: return lst[0]
        # TODO: optimize...
        #   - try to avoid bytes concatination
        #   - create groups of the same 'bs'
        #   - use b''.join(...) instead if (+)
        return reduce(lambda a,b: a+b, lst)

def mk_item(t : Any, val : Any) -> Any:
    """Helper function to create item, either by
        - using t(val)
        - or val itself if it's of the correct type already.
    """
    if not isinstance(val, t):
        val = t(val)
    return val

@dataclass
class Spare:
    """Spare bits."""
    bit_offset8 : int
    bit_size : int

    def parse_bits(self, s : Bits) -> Any:
        n = self.bit_size
        if s.take(n).to_uinteger() != 0:
            raise AsterixError('unexpected non-zero spare item')
        return n

    def unparse_bits(self) -> Bits:
        return Bits.from_uinteger(0, self.bit_offset8, self.bit_size)

class StringType:
    """Baseclass for 'String' types"""
    n : int

    @classmethod
    @abstractmethod
    def from_char(cls, ch : str) -> Raw: ...

    @classmethod
    @abstractmethod
    def to_char(cls, x : Raw) -> str: ...

    @classmethod
    def from_string(cls, s : str) -> Raw:
        p = pow(2, cls.n)
        acc = 0
        for (ix, ch) in enumerate(reversed(s)):
            acc += cls.from_char(ch) * pow(p, ix)
        return acc

    @classmethod
    def to_string(cls, x : Raw, bit_size : int) -> str:
        p = pow(2, cls.n)
        n = bit_size // cls.n
        acc = ''
        for i in range(n):
            (x, i) = divmod(x, p)
            acc = cls.to_char(i) + acc
        return acc

class StringAscii(StringType):
    """Ascii string."""

    n = 8

    @classmethod
    def from_char(cls, ch : str) -> Raw:
        return ord(ch)

    @classmethod
    def to_char(cls, x : Raw) -> str:
        return chr(x)

class StringICAO(StringType):
    """
    Valid range is:
        - 'A'..'Z'  -> [0x01..]
        - space     -> 0x20
        - '0'..'9'  -> [0x30..]
    """

    n = 6

    @classmethod
    def from_char(cls, ch : str) -> Raw:
        if ch >= 'A' and ch <= 'Z':
            return 0x01 + ord(ch) - ord('A')
        if ch == ' ':
            return 0x20
        if ch >= '0' and ch <= '9':
            return 0x30 + ord(ch) - ord('0')
        return 0

    @classmethod
    def to_char(cls, x : Raw) -> str:
        if x >= 0x01 and x <= 0x1A:
            return chr(ord('A') + x - 0x01)
        if x == 0x20:
            return ' '
        if x >= 0x30 and x <= 0x39:
            return chr(ord('0') + x - 0x30)
        return ''

class StringOctal(StringType):
    """Valid character range: ['0'..'7']"""
    n = 3

    @classmethod
    def from_char(cls, ch : str) -> Raw:
        return ord(ch) - ord('0')

    @classmethod
    def to_char(cls, x : Raw) -> str:
        return chr(ord('0') + x)

class Quantity:
    """Quantity helper class."""
    def __init__(self, sig : Literal['Signed', 'Unsigned'], scal : float, k : int, unit : str):
        self.sig = sig
        self.scal = scal
        self.k = k
        self.unit = unit

    @property
    def lsb(self) -> float:
        return self.scal / float(pow(2, self.k))

class Variation:
    """Baseclass for all variations."""
    variation : str

    def __init__(self, val : Bits):
        self._val = val

    def unparse_bits(self) -> Bits:
        return self._val

    def __eq__(self, other : object) -> bool:
        if not isinstance(other, Variation):
            return NotImplemented
        return self._val == other._val

    def to_uinteger(self) -> int:
        return self._val.to_uinteger()

class Element(Variation):
    bit_offset8 : int
    bit_size : int
    string_type : StringType
    quantity : Quantity

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        n = cls.bit_size
        (a,b) = s.split_at(n)
        return (cls(a), b)

    def _from_raw(self, raw : Raw) -> Bits:
        o = self.__class__.bit_offset8
        n = self.__class__.bit_size
        assert (o >= 0) and (o < 8)
        assert n > 0
        return Bits.from_uinteger(raw, o, n)

    def _from_string(self, s : str) -> Bits:
        st = self.__class__.string_type
        return self._from_raw(st.from_string(s))

    def _sig(self, x : int) -> int:
        sig = self.__class__.quantity.sig
        if sig == 'Signed':
            half = pow(2, self.__class__.bit_size-1)
            if x < half:
                return x
            else:
                return (x - int(2*half))
        if sig == 'Unsigned':
            return x
        assert_never(sig)

    def _from_float(self, val : float) -> Bits:
        x = round(val/self.quantity.lsb)
        return self._from_raw(x)

    def _to_string(self) -> str:
        st = self.__class__.string_type
        x = self.to_uinteger()
        return st.to_string(x, self.__class__.bit_size)

    def _to_quantity(self) -> float:
        x = self._sig(self.to_uinteger())
        return (x * self.quantity.lsb)

def _items_to_group(lst : List[Union[Spare, Tuple[ItemName, Any]]], args : Any, fx : Optional[bool]) -> Tuple[Bits, Dict[ItemName, Element]]:
    """Helper function for 'Group' and 'Extended'."""
    bits : List[Bits] = []
    items : Dict[ItemName, Element] = {}
    for x in lst:
        if isinstance(x, Spare):
            bits.append(x.unparse_bits())
            continue
        if isinstance(x, tuple):
            name, t = x
            i = mk_item(t, args[name])
            items[name] = i
            bits.append(i.unparse_bits())
            continue
        assert_never(x)
    if fx is not None:
        bits.append(Bits.fx(fx))
    return (Bits.join(bits), items)

def _raw_to_items(lst : List[Union[Spare, Tuple[ItemName, Any]]], raw : Raw) -> Dict[ItemName, Element]:
    """Helper function for 'Group' and 'Extended'."""
    items : Dict[ItemName, Element] = {}
    for x in reversed(lst):
        if isinstance(x, Spare):
            raw, ignore = divmod(raw, pow(2, x.bit_size))
            continue
        if isinstance(x, tuple):
            name, t = x
            raw, val = divmod(raw, pow(2, t.bit_size))
            items[name] = val
            continue
        assert_never(x)
    return items

def _parse_group(s, lst):   # type: ignore
    """Helper function for 'Group' and 'Extended'."""
    reminder = s
    items = {}
    n = 0
    for i in lst:
        if isinstance(i, Spare):
            result = i.parse_bits(reminder)
            reminder = reminder.drop(result)
            n += result
        else:
            (item, reminder) = i[1].parse_bits(reminder)
            items[i[0]] = item
            n += len(item.unparse_bits())
    return (n, items)

class Group(Variation):
    subitems_list : List[Union[Spare, Tuple[ItemName, Any]]]
    subitems_dict : Dict[ItemName, Tuple[str, Any, int, int]]

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        (n, items) = _parse_group(s, cls.subitems_list) # type: ignore
        (a, b) = s.split_at(n)
        return (cls((a, items)), b) # type: ignore

    def __init__(self, val : Bits, items : Dict[ItemName, Any]):
        self._val = val
        self._items = items

    def _from_items(self, args : Any) -> Tuple[Bits, Dict[ItemName, Element]]:
        return _items_to_group(self.__class__.subitems_list, args, fx=None)

    def _from_raw(self, raw : Raw) -> Tuple[Bits, Dict[ItemName, Element]]:
        return self._from_items(_raw_to_items(self.__class__.subitems_list, raw))

    def _get_item(self, name : Any) -> Any:
        return self._items[name]

    def _set_item(self, name : Any, val : Any) -> Any:
        items = self._items.copy()
        items[name] = val
        return self.__class__(items) # type: ignore

class Extended(Variation):
    no_trailing_fx : bool # See [ref:extended-no-trailing-fx].
    prim_bit_size : int
    ext_bit_size : int
    groups_bit_sizes : List[int]
    subitems_list : List[List[Union[Spare, Tuple[ItemName, Any]]]]
    subitems_dict : Dict[ItemName, Tuple[str, Any, int, int]]

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        def is_last(grp : List[Any]) -> bool:
            return grp == cls.subitems_list[-1]
        reminder = s
        items = {}
        n = 0
        for grp in cls.subitems_list:
            (m, sub) = _parse_group(reminder, grp) # type: ignore
            reminder = reminder.drop(m)
            items.update(sub)
            if is_last(grp) and cls.no_trailing_fx:
                n += m
                break
            else:
                (fx,reminder) = reminder.split_at(1)
                n += (m+1)
                if fx.to_uinteger() == 0:
                    break
        (a,b) = s.split_at(n)
        return (cls((a, items)), b) # type: ignore

    def __init__(self, val : Bits, items : Dict[ItemName, Element]):
        self._val = val
        self._items = items

    def _concat(self, lst : List[Any]) -> Tuple[Any, Any]:
        bits = Bits.join([a for (a,_b) in lst])
        items = {}
        for (_a,b) in lst:
            items.update(b)
        return (bits, items)

    def _from_single_int(self, ix: int, val : int, fx : Optional[bool]) -> Tuple[Bits, Dict[ItemName, Element]]:
        lst = self.__class__.subitems_list[ix]
        items = _raw_to_items(lst, val)
        return _items_to_group(lst, items, fx)

    def _fx_absent(self, group_list : List[Any]) -> bool:
        return all ([
            self.__class__.no_trailing_fx,
            len(group_list) >= len(self.__class__.subitems_list) ])

    def _from_tuple_int(self, val : Any) -> Tuple[Bits, Dict[ItemName, Element]]:
        val = list(enumerate(val))
        a = val[:-1] # fx=True
        b = val[-1]  # fx=False or absent

        result = [self._from_single_int(ix, x, fx=True) for (ix, x) in a]
        trailing_fx = None if self._fx_absent(val) else False
        result += [self._from_single_int(b[0], b[1], fx=trailing_fx)]

        return self._concat(result)

    def _from_dict(self, n : int, arg : Any) -> Tuple[Bits, Dict[ItemName, Element]]:
        def mk_names(lst : List[Any]) -> Any:
            for i in lst:
                if not isinstance(i, Spare):
                    yield i[0]
        subitems = [mk_names(lst) for lst in self.__class__.subitems_list]
        def mk_group(lst : Any) -> Any:
            return {k: arg[k] for k in lst}
        groups = list(map(mk_group, subitems[0:n]))
        trailing_fx = None if self._fx_absent(groups) else False
        a = groups[:-1]    # fx=True
        b = groups[-1]     # fx=False
        groups = [(x, True) for x in a]
        groups.append((b, trailing_fx))
        result = []
        for (ix, (items, fx)) in enumerate(groups):
            lst = self.__class__.subitems_list[ix]
            result.append(_items_to_group(lst, items, fx))
        return self._concat(result)

    def _get_item(self, name : Any) -> Any:
        return self._items.get(name)

class Repetitive(Variation):
    rep_byte_size : int
    variation_bit_size : int
    variation_type : Any

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        rbs = cls.rep_byte_size * 8
        n = rbs
        items = []
        (m,reminder) = s.split_at(rbs)
        for i in range(m.to_uinteger()):
            (item, reminder) = cls.variation_type.parse_bits(reminder)
            items.append(item)
            n += len(item.unparse_bits())
        (a,b) = s.split_at(n)
        return (cls((a, items)), b) # type: ignore

    def __init__(self, val : Bits, items : List[Variation]):
        self._val = val
        self._items = items

    def _from_list(self, lst : List[Any]) -> Tuple[Bits, Any]:
        cls = self.__class__.variation_type
        items = [mk_item(cls,arg) for arg in lst]
        bits = Bits.join([i.unparse_bits() for i in items])
        n = Bits.from_uinteger(len(lst), 0, self.__class__.rep_byte_size*8)
        return(n+bits, items)

    def __len__(self) -> Any:
        return len(self._items)

    def __iter__(self) -> Any:
        return iter(self._items)

    def __getitem__(self, ix : int) -> Any:
        return self._items[ix]

class Explicit(Variation):

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        (a,b) = s.split_at(8)
        n = a.to_uinteger() * 8
        (a,b) = s.split_at(n)
        raw = a.drop(8).to_bytes()
        return (cls((a, raw)), b) # type: ignore

    def __init__(self, val : Bits, raw : bytes):
        self._val = val
        self._raw = raw

    def _from_bytes(self, arg : bytes) -> Tuple[Bits, bytes]:
        n = len(arg) + 1
        bits = Bits.from_uinteger(n, 0, 8) + Bits.from_bytes(arg)
        return (bits, arg)

    @property
    def raw(self) -> bytes:
        return self._raw

class Compound(Variation):
    fspec_fx : bool
    fspec_max_bytes : int
    subitems_list : List[Optional[Tuple[ItemName, Any]]]
    subitems_dict : Dict[ItemName, Tuple[Any, int]]

    @classmethod
    def _parse_fspec(cls, s : Bits) -> Any:
        reminder = s
        if cls.fspec_fx:
            cnt = 0
            flags = []
            while True:
                if cnt >= cls.fspec_max_bytes:
                    raise AsterixError('fspec max bytes exceeded')
                cnt += 1
                (a, reminder) = reminder.split_at(8)
                flags.extend(list(a.take(7)))
                fx = a.drop(7).take(1).to_uinteger()
                if fx == 0:
                    break
            return (cnt*8, flags)
        else:
            n = cls.fspec_max_bytes * 8
            return (n, list(s.take(n)))

    @classmethod
    def parse_bits(cls, s : Bits) -> Any:
        result = cls._parse_fspec(s)
        (n,fspec) = result
        items = {}
        reminder = s.drop(n)
        for (flag, i) in zip(fspec, cls.subitems_list):
            if not flag:
                continue
            if i is None:
                raise AsterixError('fx bit set for non-defined item')
            (subname, subcls) = i
            result = subcls.parse_bits(reminder)
            (subitem, reminder) = result
            items[subname] = subitem
            n += len(subitem.unparse_bits())
        return (cls((s.take(n), items)), reminder) # type: ignore

    def __init__(self, val : Bits = Bits.empty(), items : Dict[ItemName, Variation] = {}) -> None:
        self._val = val
        self._items = items

    def __bool__(self) -> bool:
        return bool(self._items)

    def _fspec(self, parts : List[ItemName]) -> Bits:
        d = self.__class__.subitems_dict
        fspec = reduce(lambda a,b: a|b, [d[name][1] for name in parts], 0)
        n = self.__class__.fspec_max_bytes
        if self.__class__.fspec_fx:
            while (((fspec % 256) == 0) and (n>0)):
                fspec = fspec // 256
                n -= 1
        return Bits.from_bytes(fspec.to_bytes(n, 'big'))

    def _recreate(self, items : Any) -> Any:
        bits : List[Bits] = []
        fspec = self._fspec(list(items.keys()))
        bits.append(fspec)
        for x in self.__class__.subitems_list:
            if isinstance(x, tuple):
                name, ignore = x
                i = items.get(name)
                if i is not None:
                    bits.append(i.unparse_bits())
        obj = self.__class__()
        obj._val = Bits.join(bits)
        obj._items = items
        return obj

    def _set_item(self, name : ItemName, val : Any) -> Any:
        t, fspec_bit = self.__class__.subitems_dict[name]
        i = mk_item(t, val)
        items = self._items.copy()
        items[name] = i
        return self._recreate(items)

    def _update(self, args : Any) -> Any:
        obj = self
        for name, val in args.items():
            obj = obj._set_item(name, val)
        self._val = obj._val
        self._items = obj._items

    def _del_item(self, name : ItemName) -> Any:
        items = self._items.copy()
        items.pop(name, None)
        return self._recreate(items)

    def _get_item(self, name : ItemName) -> Any:
        return self._items.get(name)

T = TypeVar('T')
class Datablock(Generic[T]):
    """Correctly constructed/parsed datablock."""
    def __init__(self, cat : int, lst : Union[T, List[T]], val : Optional[bytes] = None):
        self.cat = cat
        if not isinstance(lst, list):
            lst = [lst]
        self.lst = lst
        raw = b''.join([rec.unparse_bits().to_bytes() for rec in lst]) # type: ignore
        if val is None:
            val = b''.join([
                cat.to_bytes(1, 'big'),             # CAT
                (3 + len(raw)).to_bytes(2, 'big'),  # LEN
                raw])
        self.val = val

    def unparse(self) -> bytes:
        return self.val

    def __eq__(self, other : Any) -> bool:
        return self.val == other.val # type: ignore

    @property
    def records(self) -> List[T]:
        return self.lst

class AsterixSpec:
    """Asterix base class."""
    cat : int

class Basic(AsterixSpec):
    variation : Any
    uaps : Any
    uap_selector_item : Any
    uap_selector_table : Any

    @classmethod
    def _parse(cls, raw_db : RawDatablock, uap : Optional[str] = None) -> Any:
        if raw_db.category != cls.cat:
            raise AsterixError('Wrong category')
        s = Bits.from_bytes(raw_db.raw_records)
        records = []
        while len(s) > 0:
            if hasattr(cls, 'variation'):
                (rec, s) = cls.variation.parse_bits(s)
            elif hasattr(cls, 'uaps'):
                result = None
                # UAP is not specified, try each in sequence
                if uap is None:
                    for (name, var) in cls.uaps.items():
                        try:
                            (rec, s2) = var.parse_bits(s)
                            # parsing alone is not sufficient,
                            # need to confirm UAP selector
                            if cls._is_valid(rec):
                                (result, s) = (rec, s2)
                                break
                        except AsterixError:
                            pass
                    if result is None:
                        raise AsterixError('unable to parse with any UAP')
                # use specified UAP
                else:
                    var = cls.uaps[uap]
                    (rec, s) = var.parse_bits(s)
                    # if selector is available, validate
                    if not cls.uap_selector_item is None:
                        if not cls._is_valid(rec):
                            raise AsterixError('incompatible UAP')
            else:
                raise RuntimeError('should not be here')
            records.append(rec)
        return Datablock(cls.cat, records, raw_db.bs)

    @classmethod
    def _is_valid(cls, rec : Any) -> bool:
        i = rec
        for subitem in cls.uap_selector_item:
            i = i.get_item(subitem)
            if i is None:
                return False
        val = i.to_uinteger()
        uap_name = cls.uap_selector_table[val]
        actual_var = cls.uaps[uap_name]
        return actual_var == rec.__class__ # type: ignore

class Expansion(AsterixSpec):
    variation : Any

# --- Generated code ---

Variation_0_Arg : TypeAlias = Raw
class Variation_0(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8

    def __init__(self, arg : Variation_0_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_1_Arg_Group = TypedDict('Variation_1_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
})
Variation_1_Arg : TypeAlias = Union[Raw, Variation_1_Arg_Group]
class Variation_1(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('System Area Code', Variation_0, 0, 8),
        'SIC': ('System Identification Code', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_1_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_2_Arg : TypeAlias = Raw
class Variation_2(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Plot',
        1: 'Track',
    }

    def __init__(self, arg : Variation_2_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_3_Arg : TypeAlias = Raw
class Variation_3(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Actual plot or track',
        1: 'Simulated plot or track',
    }

    def __init__(self, arg : Variation_3_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_4_Arg : TypeAlias = Raw
class Variation_4(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'No detection',
        1: 'Sole primary detection',
        2: 'Sole secondary detection',
        3: 'Combined primary and secondary detection',
    }

    def __init__(self, arg : Variation_4_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_5_Arg : TypeAlias = Raw
class Variation_5(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Target report from antenna 1',
        1: 'Target report from antenna 2',
    }

    def __init__(self, arg : Variation_5_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_6_Arg : TypeAlias = Raw
class Variation_6(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Special Position Identification',
    }

    def __init__(self, arg : Variation_6_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_7_Arg : TypeAlias = Raw
class Variation_7(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Plot or track from a fixed transponder',
    }

    def __init__(self, arg : Variation_7_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_8_Arg : TypeAlias = Raw
class Variation_8(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Test target indicator',
    }

    def __init__(self, arg : Variation_8_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_9_Arg : TypeAlias = Raw
class Variation_9(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Default',
        1: 'Unlawful interference (code 7500)',
        2: 'Radio-communication failure (code 7600)',
        3: 'Emergency (code 7700)',
    }

    def __init__(self, arg : Variation_9_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_10_Arg : TypeAlias = Raw
class Variation_10(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Military emergency',
    }

    def __init__(self, arg : Variation_10_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_11_Arg : TypeAlias = Raw
class Variation_11(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Military identification',
    }

    def __init__(self, arg : Variation_11_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_12_Arg_Group_1 = TypedDict('Variation_12_Arg_Group_1', {
    'TYP': Union[Variation_2, Variation_2_Arg],
    'SIM': Union[Variation_3, Variation_3_Arg],
    'SSRPSR': Union[Variation_4, Variation_4_Arg],
    'ANT': Union[Variation_5, Variation_5_Arg],
    'SPI': Union[Variation_6, Variation_6_Arg],
    'RAB': Union[Variation_7, Variation_7_Arg],
})
Variation_12_Arg_Group_2 = TypedDict('Variation_12_Arg_Group_2', {
    'TYP': Union[Variation_2, Variation_2_Arg],
    'SIM': Union[Variation_3, Variation_3_Arg],
    'SSRPSR': Union[Variation_4, Variation_4_Arg],
    'ANT': Union[Variation_5, Variation_5_Arg],
    'SPI': Union[Variation_6, Variation_6_Arg],
    'RAB': Union[Variation_7, Variation_7_Arg],
    'TST': Union[Variation_8, Variation_8_Arg],
    'DS1DS2': Union[Variation_9, Variation_9_Arg],
    'ME': Union[Variation_10, Variation_10_Arg],
    'MI': Union[Variation_11, Variation_11_Arg],
})
Variation_12_Arg : TypeAlias = Union[
    int,
    Variation_12_Arg_Group_1,
    Tuple[int],
    Variation_12_Arg_Group_2,
    Tuple[int,int],
]
class Variation_12(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('TYP', Variation_2),
            ('SIM', Variation_3),
            ('SSRPSR', Variation_4),
            ('ANT', Variation_5),
            ('SPI', Variation_6),
            ('RAB', Variation_7),
        ],
        [
            ('TST', Variation_8),
            ('DS1DS2', Variation_9),
            ('ME', Variation_10),
            ('MI', Variation_11),
            Spare(5, 2),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_2, 0, 1),
        'SIM': ('', Variation_3, 1, 1),
        'SSRPSR': ('Radar Detection in Last Antenna Scan', Variation_4, 2, 2),
        'ANT': ('', Variation_5, 4, 1),
        'SPI': ('', Variation_6, 5, 1),
        'RAB': ('', Variation_7, 6, 1),
        'TST': ('', Variation_8, 0, 1),
        'DS1DS2': ('Radar Detection in Last Antenna Scan', Variation_9, 1, 2),
        'ME': ('', Variation_10, 3, 1),
        'MI': ('', Variation_11, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_2]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_3]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSRPSR']) -> Type[Variation_4]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ANT']) -> Type[Variation_5]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_6]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_7]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_8]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DS1DS2']) -> Type[Variation_9]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_10]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_11]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['SIM'], Literal['SSRPSR'], Literal['ANT'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['DS1DS2'], Literal['ME'], Literal['MI']]) -> Union[Type['Variation_2'], Type['Variation_3'], Type['Variation_4'], Type['Variation_5'], Type['Variation_6'], Type['Variation_7'], Type['Variation_8'], Type['Variation_9'], Type['Variation_10'], Type['Variation_11']]:
        if key == 'TYP':
            return Variation_2
        if key == 'SIM':
            return Variation_3
        if key == 'SSRPSR':
            return Variation_4
        if key == 'ANT':
            return Variation_5
        if key == 'SPI':
            return Variation_6
        if key == 'RAB':
            return Variation_7
        if key == 'TST':
            return Variation_8
        if key == 'DS1DS2':
            return Variation_9
        if key == 'ME':
            return Variation_10
        if key == 'MI':
            return Variation_11
        assert_never(key)

    def __init__(self, arg : Variation_12_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_12_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_12_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_2:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_3:
        ...

    @overload
    def get_item(self, name : Literal['SSRPSR']) -> Variation_4:
        ...

    @overload
    def get_item(self, name : Literal['ANT']) -> Variation_5:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_6:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_7:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_8:
        ...

    @overload
    def get_item(self, name : Literal['DS1DS2']) -> Variation_9:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_10:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_11:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['SIM'], Literal['SSRPSR'], Literal['ANT'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['DS1DS2'], Literal['ME'], Literal['MI']]) -> Any:
        return self._get_item(name)

Variation_13_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_13(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 7, 'NM')

    def __init__(self, arg : Variation_13_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_14_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_14(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 360.0, 16, '°')

    def __init__(self, arg : Variation_14_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_15_Arg_Group = TypedDict('Variation_15_Arg_Group', {
    'RHO': Union[Variation_13, Variation_13_Arg],
    'THETA': Union[Variation_14, Variation_14_Arg],
})
Variation_15_Arg : TypeAlias = Union[Raw, Variation_15_Arg_Group]
class Variation_15(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('RHO', Variation_13),
        ('THETA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RHO': ('', Variation_13, 0, 16),
        'THETA': ('', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RHO']) -> Type[Variation_13]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['THETA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RHO'], Literal['THETA']]) -> Union[Type['Variation_13'], Type['Variation_14']]:
        if key == 'RHO':
            return Variation_13
        if key == 'THETA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_15_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RHO']) -> Variation_13:
        ...

    @overload
    def get_item(self, name : Literal['THETA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RHO'], Literal['THETA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RHO'], val : Union[Variation_13, Variation_13_Arg]) -> 'Variation_15':
        ...

    @overload
    def set_item(self, name : Literal['THETA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_15':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_16_Arg : TypeAlias = Raw
class Variation_16(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Code validated',
        1: 'Code not validated',
    }

    def __init__(self, arg : Variation_16_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_17_Arg : TypeAlias = Raw
class Variation_17(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Garbled code',
    }

    def __init__(self, arg : Variation_17_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_18_Arg : TypeAlias = Raw
class Variation_18(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-3/A code derived from the reply of the transponder',
        1: 'Smoothed Mode-3/A code as provided by a local tracker',
    }

    def __init__(self, arg : Variation_18_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_19_Arg : TypeAlias = Union[Raw,str]
class Variation_19(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    string_type = StringOctal()

    def __init__(self, arg : Variation_19_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_20_Arg_Group = TypedDict('Variation_20_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_18, Variation_18_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_20_Arg : TypeAlias = Union[Raw, Variation_20_Arg_Group]
class Variation_20(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_18),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_18, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_18]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_18'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_18
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_20_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_18:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_20':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_20':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_18, Variation_18_Arg]) -> 'Variation_20':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_20':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_21_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_21(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 14
    quantity = Quantity('Signed', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_21_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_22_Arg_Group = TypedDict('Variation_22_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'HGT': Union[Variation_21, Variation_21_Arg],
})
Variation_22_Arg : TypeAlias = Union[Raw, Variation_22_Arg_Group]
class Variation_22(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('HGT', Variation_21),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'HGT': ('Mode-C HEIGHT', Variation_21, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HGT']) -> Type[Variation_21]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['HGT']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_21']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'HGT':
            return Variation_21
        assert_never(key)

    def __init__(self, arg : Variation_22_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['HGT']) -> Variation_21:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['HGT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_22':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_22':
        ...

    @overload
    def set_item(self, name : Literal['HGT'], val : Union[Variation_21, Variation_21_Arg]) -> 'Variation_22':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_23_Arg : TypeAlias = Raw
class Variation_23(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7

    def __init__(self, arg : Variation_23_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_24_Arg_Group_1 = TypedDict('Variation_24_Arg_Group_1', {
    'IND': Union[Variation_23, Variation_23_Arg],
})
Variation_24_Arg : TypeAlias = Union[
    int,
    Variation_24_Arg_Group_1,
    Tuple[int],
]
class Variation_24(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('IND', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'IND': ('Indicator', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['IND']]) -> Union[Type['Variation_23']]:
        if key == 'IND':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_24_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_24_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['IND']) -> Any:
        return self._get_item(name)

Variation_25_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_25(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 7, 's')

    def __init__(self, arg : Variation_25_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_26_Arg : TypeAlias = Raw
class Variation_26(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-2 code as derived from the reply of the transponder',
        1: 'Smoothed Mode-2 code as provided by a local tracker',
    }

    def __init__(self, arg : Variation_26_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_27_Arg_Group = TypedDict('Variation_27_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_26, Variation_26_Arg],
    'MODE2': Union[Variation_19, Variation_19_Arg],
})
Variation_27_Arg : TypeAlias = Union[Raw, Variation_27_Arg_Group]
class Variation_27(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_26),
        Spare(3, 1),
        ('MODE2', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_26, 2, 1),
        'MODE2': ('Mode-2 Code in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_26]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE2']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE2']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_26'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_26
        if key == 'MODE2':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_27_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_26:
        ...

    @overload
    def get_item(self, name : Literal['MODE2']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_27':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_27':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_26, Variation_26_Arg]) -> 'Variation_27':
        ...

    @overload
    def set_item(self, name : Literal['MODE2'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_27':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_28_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM/s']]]
class Variation_28(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 8, 'NM/s')

    def __init__(self, arg : Variation_28_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_29_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['dBm']]]
class Variation_29(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 0, 'dBm')

    def __init__(self, arg : Variation_29_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_30_Arg : TypeAlias = Raw
class Variation_30(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'High quality pulse A4',
        1: 'Low quality pulse A4',
    }

    def __init__(self, arg : Variation_30_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_31_Arg : TypeAlias = Raw
class Variation_31(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'High quality pulse A2',
        1: 'Low quality pulse A2',
    }

    def __init__(self, arg : Variation_31_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_32_Arg : TypeAlias = Raw
class Variation_32(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'High quality pulse A1',
        1: 'Low quality pulse A1',
    }

    def __init__(self, arg : Variation_32_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_33_Arg : TypeAlias = Raw
class Variation_33(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'High quality pulse B4',
        1: 'Low quality pulse B4',
    }

    def __init__(self, arg : Variation_33_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_34_Arg : TypeAlias = Raw
class Variation_34(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'High quality pulse B2',
        1: 'Low quality pulse B2',
    }

    def __init__(self, arg : Variation_34_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_35_Arg : TypeAlias = Raw
class Variation_35(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'High quality pulse B1',
        1: 'Low quality pulse B1',
    }

    def __init__(self, arg : Variation_35_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_36_Arg : TypeAlias = Raw
class Variation_36(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'High quality pulse C4',
        1: 'Low quality pulse C4',
    }

    def __init__(self, arg : Variation_36_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_37_Arg : TypeAlias = Raw
class Variation_37(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'High quality pulse C2',
        1: 'Low quality pulse C2',
    }

    def __init__(self, arg : Variation_37_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_38_Arg : TypeAlias = Raw
class Variation_38(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'High quality pulse C1',
        1: 'Low quality pulse C1',
    }

    def __init__(self, arg : Variation_38_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_39_Arg : TypeAlias = Raw
class Variation_39(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'High quality pulse D4',
        1: 'Low quality pulse D4',
    }

    def __init__(self, arg : Variation_39_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_40_Arg : TypeAlias = Raw
class Variation_40(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'High quality pulse D2',
        1: 'Low quality pulse D2',
    }

    def __init__(self, arg : Variation_40_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_41_Arg : TypeAlias = Raw
class Variation_41(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'High quality pulse D1',
        1: 'Low quality pulse D1',
    }

    def __init__(self, arg : Variation_41_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_42_Arg_Group = TypedDict('Variation_42_Arg_Group', {
    'QA4': Union[Variation_30, Variation_30_Arg],
    'QA2': Union[Variation_31, Variation_31_Arg],
    'QA1': Union[Variation_32, Variation_32_Arg],
    'QB4': Union[Variation_33, Variation_33_Arg],
    'QB2': Union[Variation_34, Variation_34_Arg],
    'QB1': Union[Variation_35, Variation_35_Arg],
    'QC4': Union[Variation_36, Variation_36_Arg],
    'QC2': Union[Variation_37, Variation_37_Arg],
    'QC1': Union[Variation_38, Variation_38_Arg],
    'QD4': Union[Variation_39, Variation_39_Arg],
    'QD2': Union[Variation_40, Variation_40_Arg],
    'QD1': Union[Variation_41, Variation_41_Arg],
})
Variation_42_Arg : TypeAlias = Union[Raw, Variation_42_Arg_Group]
class Variation_42(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('QA4', Variation_30),
        ('QA2', Variation_31),
        ('QA1', Variation_32),
        ('QB4', Variation_33),
        ('QB2', Variation_34),
        ('QB1', Variation_35),
        ('QC4', Variation_36),
        ('QC2', Variation_37),
        ('QC1', Variation_38),
        ('QD4', Variation_39),
        ('QD2', Variation_40),
        ('QD1', Variation_41),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QA4': ('', Variation_30, 4, 1),
        'QA2': ('', Variation_31, 5, 1),
        'QA1': ('', Variation_32, 6, 1),
        'QB4': ('', Variation_33, 7, 1),
        'QB2': ('', Variation_34, 8, 1),
        'QB1': ('', Variation_35, 9, 1),
        'QC4': ('', Variation_36, 10, 1),
        'QC2': ('', Variation_37, 11, 1),
        'QC1': ('', Variation_38, 12, 1),
        'QD4': ('', Variation_39, 13, 1),
        'QD2': ('', Variation_40, 14, 1),
        'QD1': ('', Variation_41, 15, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['QA4']) -> Type[Variation_30]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA2']) -> Type[Variation_31]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA1']) -> Type[Variation_32]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB4']) -> Type[Variation_33]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB2']) -> Type[Variation_34]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB1']) -> Type[Variation_35]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC4']) -> Type[Variation_36]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC2']) -> Type[Variation_37]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC1']) -> Type[Variation_38]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD4']) -> Type[Variation_39]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD2']) -> Type[Variation_40]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD1']) -> Type[Variation_41]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['QA4'], Literal['QA2'], Literal['QA1'], Literal['QB4'], Literal['QB2'], Literal['QB1'], Literal['QC4'], Literal['QC2'], Literal['QC1'], Literal['QD4'], Literal['QD2'], Literal['QD1']]) -> Union[Type['Variation_30'], Type['Variation_31'], Type['Variation_32'], Type['Variation_33'], Type['Variation_34'], Type['Variation_35'], Type['Variation_36'], Type['Variation_37'], Type['Variation_38'], Type['Variation_39'], Type['Variation_40'], Type['Variation_41']]:
        if key == 'QA4':
            return Variation_30
        if key == 'QA2':
            return Variation_31
        if key == 'QA1':
            return Variation_32
        if key == 'QB4':
            return Variation_33
        if key == 'QB2':
            return Variation_34
        if key == 'QB1':
            return Variation_35
        if key == 'QC4':
            return Variation_36
        if key == 'QC2':
            return Variation_37
        if key == 'QC1':
            return Variation_38
        if key == 'QD4':
            return Variation_39
        if key == 'QD2':
            return Variation_40
        if key == 'QD1':
            return Variation_41
        assert_never(key)

    def __init__(self, arg : Variation_42_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['QA4']) -> Variation_30:
        ...

    @overload
    def get_item(self, name : Literal['QA2']) -> Variation_31:
        ...

    @overload
    def get_item(self, name : Literal['QA1']) -> Variation_32:
        ...

    @overload
    def get_item(self, name : Literal['QB4']) -> Variation_33:
        ...

    @overload
    def get_item(self, name : Literal['QB2']) -> Variation_34:
        ...

    @overload
    def get_item(self, name : Literal['QB1']) -> Variation_35:
        ...

    @overload
    def get_item(self, name : Literal['QC4']) -> Variation_36:
        ...

    @overload
    def get_item(self, name : Literal['QC2']) -> Variation_37:
        ...

    @overload
    def get_item(self, name : Literal['QC1']) -> Variation_38:
        ...

    @overload
    def get_item(self, name : Literal['QD4']) -> Variation_39:
        ...

    @overload
    def get_item(self, name : Literal['QD2']) -> Variation_40:
        ...

    @overload
    def get_item(self, name : Literal['QD1']) -> Variation_41:
        ...

    def get_item(self, name : Union[Literal['QA4'], Literal['QA2'], Literal['QA1'], Literal['QB4'], Literal['QB2'], Literal['QB1'], Literal['QC4'], Literal['QC2'], Literal['QC1'], Literal['QD4'], Literal['QD2'], Literal['QD1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['QA4'], val : Union[Variation_30, Variation_30_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QA2'], val : Union[Variation_31, Variation_31_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QA1'], val : Union[Variation_32, Variation_32_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QB4'], val : Union[Variation_33, Variation_33_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QB2'], val : Union[Variation_34, Variation_34_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QB1'], val : Union[Variation_35, Variation_35_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QC4'], val : Union[Variation_36, Variation_36_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QC2'], val : Union[Variation_37, Variation_37_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QC1'], val : Union[Variation_38, Variation_38_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QD4'], val : Union[Variation_39, Variation_39_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QD2'], val : Union[Variation_40, Variation_40_Arg]) -> 'Variation_42':
        ...

    @overload
    def set_item(self, name : Literal['QD1'], val : Union[Variation_41, Variation_41_Arg]) -> 'Variation_42':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_43_Arg : TypeAlias = Raw
class Variation_43(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12

    def __init__(self, arg : Variation_43_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_44_Arg : TypeAlias = Raw
class Variation_44(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'High quality pulse A1',
        1: 'Low quality pulse A1',
    }

    def __init__(self, arg : Variation_44_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_45_Arg : TypeAlias = Raw
class Variation_45(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'High quality pulse C2',
        1: 'Low quality pulse C2',
    }

    def __init__(self, arg : Variation_45_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_46_Arg : TypeAlias = Raw
class Variation_46(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'High quality pulse A2',
        1: 'Low quality pulse A2',
    }

    def __init__(self, arg : Variation_46_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_47_Arg : TypeAlias = Raw
class Variation_47(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'High quality pulse C4',
        1: 'Low quality pulse C4',
    }

    def __init__(self, arg : Variation_47_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_48_Arg : TypeAlias = Raw
class Variation_48(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'High quality pulse A4',
        1: 'Low quality pulse A4',
    }

    def __init__(self, arg : Variation_48_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_49_Arg : TypeAlias = Raw
class Variation_49(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'High quality pulse B1',
        1: 'Low quality pulse B1',
    }

    def __init__(self, arg : Variation_49_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_50_Arg : TypeAlias = Raw
class Variation_50(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'High quality pulse D1',
        1: 'Low quality pulse D1',
    }

    def __init__(self, arg : Variation_50_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_51_Arg : TypeAlias = Raw
class Variation_51(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'High quality pulse B2',
        1: 'Low quality pulse B2',
    }

    def __init__(self, arg : Variation_51_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_52_Arg : TypeAlias = Raw
class Variation_52(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'High quality pulse D2',
        1: 'Low quality pulse D2',
    }

    def __init__(self, arg : Variation_52_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_53_Arg : TypeAlias = Raw
class Variation_53(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'High quality pulse B4',
        1: 'Low quality pulse B4',
    }

    def __init__(self, arg : Variation_53_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_54_Arg : TypeAlias = Raw
class Variation_54(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'High quality pulse D4',
        1: 'Low quality pulse D4',
    }

    def __init__(self, arg : Variation_54_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_55_Arg_Group = TypedDict('Variation_55_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'MODEC': Union[Variation_43, Variation_43_Arg],
    'QC1': Union[Variation_38, Variation_38_Arg],
    'QA1': Union[Variation_44, Variation_44_Arg],
    'QC2': Union[Variation_45, Variation_45_Arg],
    'QA2': Union[Variation_46, Variation_46_Arg],
    'QC4': Union[Variation_47, Variation_47_Arg],
    'QA4': Union[Variation_48, Variation_48_Arg],
    'QB1': Union[Variation_49, Variation_49_Arg],
    'QD1': Union[Variation_50, Variation_50_Arg],
    'QB2': Union[Variation_51, Variation_51_Arg],
    'QD2': Union[Variation_52, Variation_52_Arg],
    'QB4': Union[Variation_53, Variation_53_Arg],
    'QD4': Union[Variation_54, Variation_54_Arg],
})
Variation_55_Arg : TypeAlias = Union[Raw, Variation_55_Arg_Group]
class Variation_55(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        Spare(2, 2),
        ('MODEC', Variation_43),
        Spare(0, 4),
        ('QC1', Variation_38),
        ('QA1', Variation_44),
        ('QC2', Variation_45),
        ('QA2', Variation_46),
        ('QC4', Variation_47),
        ('QA4', Variation_48),
        ('QB1', Variation_49),
        ('QD1', Variation_50),
        ('QB2', Variation_51),
        ('QD2', Variation_52),
        ('QB4', Variation_53),
        ('QD4', Variation_54),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'MODEC': ('Mode-C Reply in Gray Notation', Variation_43, 4, 12),
        'QC1': ('', Variation_38, 20, 1),
        'QA1': ('', Variation_44, 21, 1),
        'QC2': ('', Variation_45, 22, 1),
        'QA2': ('', Variation_46, 23, 1),
        'QC4': ('', Variation_47, 24, 1),
        'QA4': ('', Variation_48, 25, 1),
        'QB1': ('', Variation_49, 26, 1),
        'QD1': ('', Variation_50, 27, 1),
        'QB2': ('', Variation_51, 28, 1),
        'QD2': ('', Variation_52, 29, 1),
        'QB4': ('', Variation_53, 30, 1),
        'QD4': ('', Variation_54, 31, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODEC']) -> Type[Variation_43]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC1']) -> Type[Variation_38]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA1']) -> Type[Variation_44]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC2']) -> Type[Variation_45]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA2']) -> Type[Variation_46]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC4']) -> Type[Variation_47]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA4']) -> Type[Variation_48]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB1']) -> Type[Variation_49]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD1']) -> Type[Variation_50]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB2']) -> Type[Variation_51]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD2']) -> Type[Variation_52]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB4']) -> Type[Variation_53]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD4']) -> Type[Variation_54]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['MODEC'], Literal['QC1'], Literal['QA1'], Literal['QC2'], Literal['QA2'], Literal['QC4'], Literal['QA4'], Literal['QB1'], Literal['QD1'], Literal['QB2'], Literal['QD2'], Literal['QB4'], Literal['QD4']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_43'], Type['Variation_38'], Type['Variation_44'], Type['Variation_45'], Type['Variation_46'], Type['Variation_47'], Type['Variation_48'], Type['Variation_49'], Type['Variation_50'], Type['Variation_51'], Type['Variation_52'], Type['Variation_53'], Type['Variation_54']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'MODEC':
            return Variation_43
        if key == 'QC1':
            return Variation_38
        if key == 'QA1':
            return Variation_44
        if key == 'QC2':
            return Variation_45
        if key == 'QA2':
            return Variation_46
        if key == 'QC4':
            return Variation_47
        if key == 'QA4':
            return Variation_48
        if key == 'QB1':
            return Variation_49
        if key == 'QD1':
            return Variation_50
        if key == 'QB2':
            return Variation_51
        if key == 'QD2':
            return Variation_52
        if key == 'QB4':
            return Variation_53
        if key == 'QD4':
            return Variation_54
        assert_never(key)

    def __init__(self, arg : Variation_55_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['MODEC']) -> Variation_43:
        ...

    @overload
    def get_item(self, name : Literal['QC1']) -> Variation_38:
        ...

    @overload
    def get_item(self, name : Literal['QA1']) -> Variation_44:
        ...

    @overload
    def get_item(self, name : Literal['QC2']) -> Variation_45:
        ...

    @overload
    def get_item(self, name : Literal['QA2']) -> Variation_46:
        ...

    @overload
    def get_item(self, name : Literal['QC4']) -> Variation_47:
        ...

    @overload
    def get_item(self, name : Literal['QA4']) -> Variation_48:
        ...

    @overload
    def get_item(self, name : Literal['QB1']) -> Variation_49:
        ...

    @overload
    def get_item(self, name : Literal['QD1']) -> Variation_50:
        ...

    @overload
    def get_item(self, name : Literal['QB2']) -> Variation_51:
        ...

    @overload
    def get_item(self, name : Literal['QD2']) -> Variation_52:
        ...

    @overload
    def get_item(self, name : Literal['QB4']) -> Variation_53:
        ...

    @overload
    def get_item(self, name : Literal['QD4']) -> Variation_54:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['MODEC'], Literal['QC1'], Literal['QA1'], Literal['QC2'], Literal['QA2'], Literal['QC4'], Literal['QA4'], Literal['QB1'], Literal['QD1'], Literal['QB2'], Literal['QD2'], Literal['QB4'], Literal['QD4']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['MODEC'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QC1'], val : Union[Variation_38, Variation_38_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QA1'], val : Union[Variation_44, Variation_44_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QC2'], val : Union[Variation_45, Variation_45_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QA2'], val : Union[Variation_46, Variation_46_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QC4'], val : Union[Variation_47, Variation_47_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QA4'], val : Union[Variation_48, Variation_48_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QB1'], val : Union[Variation_49, Variation_49_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QD1'], val : Union[Variation_50, Variation_50_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QB2'], val : Union[Variation_51, Variation_51_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QD2'], val : Union[Variation_52, Variation_52_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QB4'], val : Union[Variation_53, Variation_53_Arg]) -> 'Variation_55':
        ...

    @overload
    def set_item(self, name : Literal['QD4'], val : Union[Variation_54, Variation_54_Arg]) -> 'Variation_55':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_56_Arg : TypeAlias = Raw
class Variation_56(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        0: 'No warning nor error condition',
        1: 'Garbled reply',
        2: 'Reflection',
        3: 'Sidelobe reply',
        4: 'Split plot',
        5: 'Second time around reply',
        6: 'Angels',
        7: 'Terrestrial vehicles',
        64: 'Possible wrong code in Mode-3/A',
        65: 'Possible wrong altitude information, transmitted when the Code C credibility check fails together with the Mode-C code in binary notation',
        66: 'Possible phantom MSSR plot',
        80: 'Fixed PSR plot',
        81: 'Slow PSR plot',
        82: 'Low quality PSR plot',
    }

    def __init__(self, arg : Variation_56_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_57_Arg_Group_1 = TypedDict('Variation_57_Arg_Group_1', {
    'WE': Union[Variation_56, Variation_56_Arg],
})
Variation_57_Arg : TypeAlias = Union[
    int,
    Variation_57_Arg_Group_1,
    Tuple[int],
]
class Variation_57(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('WE', Variation_56),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'WE': ('WEVALUE', Variation_56, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['WE']]) -> Union[Type['Variation_56']]:
        if key == 'WE':
            return Variation_56
        assert_never(key)

    def __init__(self, arg : Variation_57_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_57_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['WE']) -> Any:
        return self._get_item(name)

Variation_58_Arg : TypeAlias = Raw
class Variation_58(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'X-pulse received in Mode-3/A reply',
    }

    def __init__(self, arg : Variation_58_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_59_Arg : TypeAlias = Raw
class Variation_59(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'X-pulse received in Mode-C reply',
    }

    def __init__(self, arg : Variation_59_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_60_Arg : TypeAlias = Raw
class Variation_60(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'X-pulse received in Mode-2 reply',
    }

    def __init__(self, arg : Variation_60_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_61_Arg_Group = TypedDict('Variation_61_Arg_Group', {
    'XA': Union[Variation_58, Variation_58_Arg],
    'XC': Union[Variation_59, Variation_59_Arg],
    'X2': Union[Variation_60, Variation_60_Arg],
})
Variation_61_Arg : TypeAlias = Union[Raw, Variation_61_Arg_Group]
class Variation_61(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('XA', Variation_58),
        Spare(1, 1),
        ('XC', Variation_59),
        Spare(3, 2),
        ('X2', Variation_60),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'XA': ('', Variation_58, 0, 1),
        'XC': ('', Variation_59, 2, 1),
        'X2': ('', Variation_60, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['XA']) -> Type[Variation_58]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XC']) -> Type[Variation_59]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X2']) -> Type[Variation_60]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['XA'], Literal['XC'], Literal['X2']]) -> Union[Type['Variation_58'], Type['Variation_59'], Type['Variation_60']]:
        if key == 'XA':
            return Variation_58
        if key == 'XC':
            return Variation_59
        if key == 'X2':
            return Variation_60
        assert_never(key)

    def __init__(self, arg : Variation_61_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['XA']) -> Variation_58:
        ...

    @overload
    def get_item(self, name : Literal['XC']) -> Variation_59:
        ...

    @overload
    def get_item(self, name : Literal['X2']) -> Variation_60:
        ...

    def get_item(self, name : Union[Literal['XA'], Literal['XC'], Literal['X2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['XA'], val : Union[Variation_58, Variation_58_Arg]) -> 'Variation_61':
        ...

    @overload
    def set_item(self, name : Literal['XC'], val : Union[Variation_59, Variation_59_Arg]) -> 'Variation_61':
        ...

    @overload
    def set_item(self, name : Literal['X2'], val : Union[Variation_60, Variation_60_Arg]) -> 'Variation_61':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_62_Arg : TypeAlias = bytes
class Variation_62(Explicit):
    variation = 'Explicit'

    def __init__(self, arg : bytes) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, bytes):
            super().__init__(*self._from_bytes(arg)); return
        assert_never(arg)

Variation_63_Arg = TypedDict('Variation_63_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '020': Union[Variation_12, Variation_12_Arg],
    '040': Union[Variation_15, Variation_15_Arg],
    '070': Union[Variation_20, Variation_20_Arg],
    '090': Union[Variation_22, Variation_22_Arg],
    '130': Union[Variation_24, Variation_24_Arg],
    '141': Union[Variation_25, Variation_25_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '120': Union[Variation_28, Variation_28_Arg],
    '131': Union[Variation_29, Variation_29_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    '030': Union[Variation_57, Variation_57_Arg],
    '150': Union[Variation_61, Variation_61_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RFS': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_63(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 3

    subitems_list = [
        ('010', Variation_1),
        ('020', Variation_12),
        ('040', Variation_15),
        ('070', Variation_20),
        ('090', Variation_22),
        ('130', Variation_24),
        ('141', Variation_25),
        ('050', Variation_27),
        ('120', Variation_28),
        ('131', Variation_29),
        ('080', Variation_42),
        ('100', Variation_55),
        ('060', Variation_42),
        ('030', Variation_57),
        ('150', Variation_61),
        None,
        None,
        None,
        None,
        ('SP', Variation_62),
        ('RFS', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x800000),
        '020': (Variation_12, 0x400000),
        '040': (Variation_15, 0x200000),
        '070': (Variation_20, 0x100000),
        '090': (Variation_22, 0x080000),
        '130': (Variation_24, 0x040000),
        '141': (Variation_25, 0x020000),
        '050': (Variation_27, 0x018000),
        '120': (Variation_28, 0x014000),
        '131': (Variation_29, 0x012000),
        '080': (Variation_42, 0x011000),
        '100': (Variation_55, 0x010800),
        '060': (Variation_42, 0x010400),
        '030': (Variation_57, 0x010200),
        '150': (Variation_61, 0x010180),
        'SP': (Variation_62, 0x010104),
        'RFS': (Variation_62, 0x010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_12]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_15]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_20]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_22]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_24]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['141']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_28]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_57]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_61]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RFS']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['020'], Literal['040'], Literal['070'], Literal['090'], Literal['130'], Literal['141'], Literal['050'], Literal['120'], Literal['131'], Literal['080'], Literal['100'], Literal['060'], Literal['030'], Literal['150'], Literal['SP'], Literal['RFS']]) -> Union[Type['Variation_1'], Type['Variation_12'], Type['Variation_15'], Type['Variation_20'], Type['Variation_22'], Type['Variation_24'], Type['Variation_25'], Type['Variation_27'], Type['Variation_28'], Type['Variation_29'], Type['Variation_42'], Type['Variation_55'], Type['Variation_42'], Type['Variation_57'], Type['Variation_61'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '020':
            return Variation_12
        if key == '040':
            return Variation_15
        if key == '070':
            return Variation_20
        if key == '090':
            return Variation_22
        if key == '130':
            return Variation_24
        if key == '141':
            return Variation_25
        if key == '050':
            return Variation_27
        if key == '120':
            return Variation_28
        if key == '131':
            return Variation_29
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '060':
            return Variation_42
        if key == '030':
            return Variation_57
        if key == '150':
            return Variation_61
        if key == 'SP':
            return Variation_62
        if key == 'RFS':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_63_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_12, Variation_12_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_15, Variation_15_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_20, Variation_20_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_22, Variation_22_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_24, Variation_24_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['141'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_28, Variation_28_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_57, Variation_57_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_61, Variation_61_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_63':
        ...

    @overload
    def set_item(self, name : Literal['RFS'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_63':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['141']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_63':
        ...

    @overload
    def del_item(self, name : Literal['RFS']) -> 'Variation_63':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_12:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_15:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_20:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_22:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_24:
        ...

    @overload
    def get_item(self, name : Literal['141']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_28:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_57:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_61:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RFS']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_64_Arg : TypeAlias = Raw
class Variation_64(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16

    def __init__(self, arg : Variation_64_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_65_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_65(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 6, 'NM')

    def __init__(self, arg : Variation_65_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_66_Arg_Group = TypedDict('Variation_66_Arg_Group', {
    'X': Union[Variation_65, Variation_65_Arg],
    'Y': Union[Variation_65, Variation_65_Arg],
})
Variation_66_Arg : TypeAlias = Union[Raw, Variation_66_Arg_Group]
class Variation_66(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_65),
        ('Y', Variation_65),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-Component', Variation_65, 0, 16),
        'Y': ('Y-Component', Variation_65, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_65]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_65]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_65'], Type['Variation_65']]:
        if key == 'X':
            return Variation_65
        if key == 'Y':
            return Variation_65
        assert_never(key)

    def __init__(self, arg : Variation_66_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_65:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_65:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_65, Variation_65_Arg]) -> 'Variation_66':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_65, Variation_65_Arg]) -> 'Variation_66':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_67_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM/s']]]
class Variation_67(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 14, 'NM/s')

    def __init__(self, arg : Variation_67_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_68_Arg_Group = TypedDict('Variation_68_Arg_Group', {
    'GSP': Union[Variation_67, Variation_67_Arg],
    'HDG': Union[Variation_14, Variation_14_Arg],
})
Variation_68_Arg : TypeAlias = Union[Raw, Variation_68_Arg_Group]
class Variation_68(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('GSP', Variation_67),
        ('HDG', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GSP': ('Calculated Groundspeed', Variation_67, 0, 16),
        'HDG': ('Calculated Heading', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GSP']) -> Type[Variation_67]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HDG']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GSP'], Literal['HDG']]) -> Union[Type['Variation_67'], Type['Variation_14']]:
        if key == 'GSP':
            return Variation_67
        if key == 'HDG':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_68_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GSP']) -> Variation_67:
        ...

    @overload
    def get_item(self, name : Literal['HDG']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['GSP'], Literal['HDG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GSP'], val : Union[Variation_67, Variation_67_Arg]) -> 'Variation_68':
        ...

    @overload
    def set_item(self, name : Literal['HDG'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_68':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_69_Arg : TypeAlias = Raw
class Variation_69(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Confirmed Track',
        1: 'Track in initialisation phase',
    }

    def __init__(self, arg : Variation_69_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_70_Arg : TypeAlias = Raw
class Variation_70(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Primary track',
        1: 'SSR/Combined track',
    }

    def __init__(self, arg : Variation_70_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_71_Arg : TypeAlias = Raw
class Variation_71(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Aircraft manoeuvring',
    }

    def __init__(self, arg : Variation_71_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_72_Arg : TypeAlias = Raw
class Variation_72(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Doubtful plot to track association',
    }

    def __init__(self, arg : Variation_72_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_73_Arg : TypeAlias = Raw
class Variation_73(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'RDP Chain 1',
        1: 'RDP Chain 2',
    }

    def __init__(self, arg : Variation_73_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_74_Arg : TypeAlias = Raw
class Variation_74(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Ghost track',
    }

    def __init__(self, arg : Variation_74_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_75_Arg : TypeAlias = Raw
class Variation_75(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Last report for a track',
    }

    def __init__(self, arg : Variation_75_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_76_Arg_Group_1 = TypedDict('Variation_76_Arg_Group_1', {
    'CON': Union[Variation_69, Variation_69_Arg],
    'RAD': Union[Variation_70, Variation_70_Arg],
    'MAN': Union[Variation_71, Variation_71_Arg],
    'DOU': Union[Variation_72, Variation_72_Arg],
    'RDPC': Union[Variation_73, Variation_73_Arg],
    'GHO': Union[Variation_74, Variation_74_Arg],
})
Variation_76_Arg_Group_2 = TypedDict('Variation_76_Arg_Group_2', {
    'CON': Union[Variation_69, Variation_69_Arg],
    'RAD': Union[Variation_70, Variation_70_Arg],
    'MAN': Union[Variation_71, Variation_71_Arg],
    'DOU': Union[Variation_72, Variation_72_Arg],
    'RDPC': Union[Variation_73, Variation_73_Arg],
    'GHO': Union[Variation_74, Variation_74_Arg],
    'TRE': Union[Variation_75, Variation_75_Arg],
})
Variation_76_Arg : TypeAlias = Union[
    int,
    Variation_76_Arg_Group_1,
    Tuple[int],
    Variation_76_Arg_Group_2,
    Tuple[int,int],
]
class Variation_76(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('CON', Variation_69),
            ('RAD', Variation_70),
            ('MAN', Variation_71),
            ('DOU', Variation_72),
            ('RDPC', Variation_73),
            Spare(5, 1),
            ('GHO', Variation_74),
        ],
        [
            ('TRE', Variation_75),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CON': ('', Variation_69, 0, 1),
        'RAD': ('', Variation_70, 1, 1),
        'MAN': ('', Variation_71, 2, 1),
        'DOU': ('', Variation_72, 3, 1),
        'RDPC': ('Radar Data Processing Chain', Variation_73, 4, 1),
        'GHO': ('', Variation_74, 6, 1),
        'TRE': ('', Variation_75, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CON']) -> Type[Variation_69]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAD']) -> Type[Variation_70]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAN']) -> Type[Variation_71]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DOU']) -> Type[Variation_72]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDPC']) -> Type[Variation_73]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GHO']) -> Type[Variation_74]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRE']) -> Type[Variation_75]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CON'], Literal['RAD'], Literal['MAN'], Literal['DOU'], Literal['RDPC'], Literal['GHO'], Literal['TRE']]) -> Union[Type['Variation_69'], Type['Variation_70'], Type['Variation_71'], Type['Variation_72'], Type['Variation_73'], Type['Variation_74'], Type['Variation_75']]:
        if key == 'CON':
            return Variation_69
        if key == 'RAD':
            return Variation_70
        if key == 'MAN':
            return Variation_71
        if key == 'DOU':
            return Variation_72
        if key == 'RDPC':
            return Variation_73
        if key == 'GHO':
            return Variation_74
        if key == 'TRE':
            return Variation_75
        assert_never(key)

    def __init__(self, arg : Variation_76_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_76_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_76_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CON']) -> Variation_69:
        ...

    @overload
    def get_item(self, name : Literal['RAD']) -> Variation_70:
        ...

    @overload
    def get_item(self, name : Literal['MAN']) -> Variation_71:
        ...

    @overload
    def get_item(self, name : Literal['DOU']) -> Variation_72:
        ...

    @overload
    def get_item(self, name : Literal['RDPC']) -> Variation_73:
        ...

    @overload
    def get_item(self, name : Literal['GHO']) -> Variation_74:
        ...

    @overload
    def get_item(self, name : Literal['TRE']) -> Variation_75:
        ...

    def get_item(self, name : Union[Literal['CON'], Literal['RAD'], Literal['MAN'], Literal['DOU'], Literal['RDPC'], Literal['GHO'], Literal['TRE']]) -> Any:
        return self._get_item(name)

Variation_77_Arg_Group_1 = TypedDict('Variation_77_Arg_Group_1', {
    'QI': Union[Variation_23, Variation_23_Arg],
})
Variation_77_Arg : TypeAlias = Union[
    int,
    Variation_77_Arg_Group_1,
    Tuple[int],
]
class Variation_77(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('QI', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QI': ('Relative Track Quality', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['QI']]) -> Union[Type['Variation_23']]:
        if key == 'QI':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_77_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_77_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['QI']) -> Any:
        return self._get_item(name)

Variation_78_Arg = TypedDict('Variation_78_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '020': Union[Variation_12, Variation_12_Arg],
    '161': Union[Variation_64, Variation_64_Arg],
    '040': Union[Variation_15, Variation_15_Arg],
    '042': Union[Variation_66, Variation_66_Arg],
    '200': Union[Variation_68, Variation_68_Arg],
    '070': Union[Variation_20, Variation_20_Arg],
    '090': Union[Variation_22, Variation_22_Arg],
    '141': Union[Variation_25, Variation_25_Arg],
    '130': Union[Variation_24, Variation_24_Arg],
    '131': Union[Variation_29, Variation_29_Arg],
    '120': Union[Variation_28, Variation_28_Arg],
    '170': Union[Variation_76, Variation_76_Arg],
    '210': Union[Variation_77, Variation_77_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    '030': Union[Variation_57, Variation_57_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RFS': Union[Variation_62, Variation_62_Arg],
    '150': Union[Variation_61, Variation_61_Arg],
}, total=False)
class Variation_78(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('020', Variation_12),
        ('161', Variation_64),
        ('040', Variation_15),
        ('042', Variation_66),
        ('200', Variation_68),
        ('070', Variation_20),
        ('090', Variation_22),
        ('141', Variation_25),
        ('130', Variation_24),
        ('131', Variation_29),
        ('120', Variation_28),
        ('170', Variation_76),
        ('210', Variation_77),
        ('050', Variation_27),
        ('080', Variation_42),
        ('100', Variation_55),
        ('060', Variation_42),
        ('030', Variation_57),
        ('SP', Variation_62),
        ('RFS', Variation_62),
        ('150', Variation_61),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '020': (Variation_12, 0x40000000),
        '161': (Variation_64, 0x20000000),
        '040': (Variation_15, 0x10000000),
        '042': (Variation_66, 0x08000000),
        '200': (Variation_68, 0x04000000),
        '070': (Variation_20, 0x02000000),
        '090': (Variation_22, 0x01800000),
        '141': (Variation_25, 0x01400000),
        '130': (Variation_24, 0x01200000),
        '131': (Variation_29, 0x01100000),
        '120': (Variation_28, 0x01080000),
        '170': (Variation_76, 0x01040000),
        '210': (Variation_77, 0x01020000),
        '050': (Variation_27, 0x01018000),
        '080': (Variation_42, 0x01014000),
        '100': (Variation_55, 0x01012000),
        '060': (Variation_42, 0x01011000),
        '030': (Variation_57, 0x01010800),
        'SP': (Variation_62, 0x01010400),
        'RFS': (Variation_62, 0x01010200),
        '150': (Variation_61, 0x01010180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_12]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_15]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_66]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_68]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_20]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_22]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['141']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_24]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_28]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_76]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_77]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_57]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RFS']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_61]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['020'], Literal['161'], Literal['040'], Literal['042'], Literal['200'], Literal['070'], Literal['090'], Literal['141'], Literal['130'], Literal['131'], Literal['120'], Literal['170'], Literal['210'], Literal['050'], Literal['080'], Literal['100'], Literal['060'], Literal['030'], Literal['SP'], Literal['RFS'], Literal['150']]) -> Union[Type['Variation_1'], Type['Variation_12'], Type['Variation_64'], Type['Variation_15'], Type['Variation_66'], Type['Variation_68'], Type['Variation_20'], Type['Variation_22'], Type['Variation_25'], Type['Variation_24'], Type['Variation_29'], Type['Variation_28'], Type['Variation_76'], Type['Variation_77'], Type['Variation_27'], Type['Variation_42'], Type['Variation_55'], Type['Variation_42'], Type['Variation_57'], Type['Variation_62'], Type['Variation_62'], Type['Variation_61']]:
        if key == '010':
            return Variation_1
        if key == '020':
            return Variation_12
        if key == '161':
            return Variation_64
        if key == '040':
            return Variation_15
        if key == '042':
            return Variation_66
        if key == '200':
            return Variation_68
        if key == '070':
            return Variation_20
        if key == '090':
            return Variation_22
        if key == '141':
            return Variation_25
        if key == '130':
            return Variation_24
        if key == '131':
            return Variation_29
        if key == '120':
            return Variation_28
        if key == '170':
            return Variation_76
        if key == '210':
            return Variation_77
        if key == '050':
            return Variation_27
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '060':
            return Variation_42
        if key == '030':
            return Variation_57
        if key == 'SP':
            return Variation_62
        if key == 'RFS':
            return Variation_62
        if key == '150':
            return Variation_61
        assert_never(key)

    def __init__(self, arg : Optional[Variation_78_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_12, Variation_12_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_15, Variation_15_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_66, Variation_66_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_68, Variation_68_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_20, Variation_20_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_22, Variation_22_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['141'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_24, Variation_24_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_28, Variation_28_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_76, Variation_76_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_77, Variation_77_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_57, Variation_57_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['RFS'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_78':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_61, Variation_61_Arg]) -> 'Variation_78':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['141']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['RFS']) -> 'Variation_78':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_78':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_12:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_15:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_66:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_68:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_20:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_22:
        ...

    @overload
    def get_item(self, name : Literal['141']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_24:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_28:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_76:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_77:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_57:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RFS']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_61:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_79_Arg : TypeAlias = Raw
class Variation_79(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'North marker message',
        2: 'Sector crossing message',
        3: 'South marker message',
        8: 'Activation of blind zone filtering',
        9: 'Stop of blind zone filtering',
    }

    def __init__(self, arg : Variation_79_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_80_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_80(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 360.0, 8, '°')

    def __init__(self, arg : Variation_80_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_81_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_81(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 1.0, 7, 's')

    def __init__(self, arg : Variation_81_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_82_Arg_Group_1 = TypedDict('Variation_82_Arg_Group_1', {
    'SCS': Union[Variation_23, Variation_23_Arg],
})
Variation_82_Arg : TypeAlias = Union[
    int,
    Variation_82_Arg_Group_1,
    Tuple[int],
]
class Variation_82(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('SCS', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SCS': ('', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['SCS']]) -> Union[Type['Variation_23']]:
        if key == 'SCS':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_82_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_82_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['SCS']) -> Any:
        return self._get_item(name)

Variation_83_Arg_Group_1 = TypedDict('Variation_83_Arg_Group_1', {
    'SPM': Union[Variation_23, Variation_23_Arg],
})
Variation_83_Arg : TypeAlias = Union[
    int,
    Variation_83_Arg_Group_1,
    Tuple[int],
]
class Variation_83(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('SPM', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SPM': ('', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['SPM']]) -> Union[Type['Variation_23']]:
        if key == 'SPM':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_83_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_83_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['SPM']) -> Any:
        return self._get_item(name)

Variation_84_Arg : TypeAlias = Raw
class Variation_84(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Counter for antenna 1',
        1: 'Counter for antenna 2',
    }

    def __init__(self, arg : Variation_84_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_85_Arg : TypeAlias = Raw
class Variation_85(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 5
    table = {
        1: 'Sole primary plots',
        2: 'Sole SSR plots',
        3: 'Combined plots',
    }

    def __init__(self, arg : Variation_85_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_86_Arg : TypeAlias = Raw
class Variation_86(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 10

    def __init__(self, arg : Variation_86_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_87_Arg_Group = TypedDict('Variation_87_Arg_Group', {
    'A': Union[Variation_84, Variation_84_Arg],
    'IDENT': Union[Variation_85, Variation_85_Arg],
    'COUNTER': Union[Variation_86, Variation_86_Arg],
})
Variation_87_Arg : TypeAlias = Union[Raw, Variation_87_Arg_Group]
class Variation_87(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('A', Variation_84),
        ('IDENT', Variation_85),
        ('COUNTER', Variation_86),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'A': ('Aerial Identification', Variation_84, 0, 1),
        'IDENT': ('', Variation_85, 1, 5),
        'COUNTER': ('', Variation_86, 6, 10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['A']) -> Type[Variation_84]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IDENT']) -> Type[Variation_85]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COUNTER']) -> Type[Variation_86]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['A'], Literal['IDENT'], Literal['COUNTER']]) -> Union[Type['Variation_84'], Type['Variation_85'], Type['Variation_86']]:
        if key == 'A':
            return Variation_84
        if key == 'IDENT':
            return Variation_85
        if key == 'COUNTER':
            return Variation_86
        assert_never(key)

    def __init__(self, arg : Variation_87_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['A']) -> Variation_84:
        ...

    @overload
    def get_item(self, name : Literal['IDENT']) -> Variation_85:
        ...

    @overload
    def get_item(self, name : Literal['COUNTER']) -> Variation_86:
        ...

    def get_item(self, name : Union[Literal['A'], Literal['IDENT'], Literal['COUNTER']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['A'], val : Union[Variation_84, Variation_84_Arg]) -> 'Variation_87':
        ...

    @overload
    def set_item(self, name : Literal['IDENT'], val : Union[Variation_85, Variation_85_Arg]) -> 'Variation_87':
        ...

    @overload
    def set_item(self, name : Literal['COUNTER'], val : Union[Variation_86, Variation_86_Arg]) -> 'Variation_87':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_88_Arg : TypeAlias = List[Union[Variation_87, Variation_87_Arg]]
class Variation_88(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_87

    @classmethod
    def spec(cls) -> Type[Variation_87]:
        return Variation_87

    def __init__(self, arg : List[Union[Variation_87, Variation_87_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_89_Arg_Group = TypedDict('Variation_89_Arg_Group', {
    'RS': Union[Variation_13, Variation_13_Arg],
    'RE': Union[Variation_13, Variation_13_Arg],
    'TS': Union[Variation_14, Variation_14_Arg],
    'TE': Union[Variation_14, Variation_14_Arg],
})
Variation_89_Arg : TypeAlias = Union[Raw, Variation_89_Arg_Group]
class Variation_89(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('RS', Variation_13),
        ('RE', Variation_13),
        ('TS', Variation_14),
        ('TE', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RS': ('Rho Start', Variation_13, 0, 16),
        'RE': ('Rho End', Variation_13, 16, 16),
        'TS': ('Theta Start', Variation_14, 32, 16),
        'TE': ('Theta End', Variation_14, 48, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RS']) -> Type[Variation_13]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_13]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TS']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TE']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RS'], Literal['RE'], Literal['TS'], Literal['TE']]) -> Union[Type['Variation_13'], Type['Variation_13'], Type['Variation_14'], Type['Variation_14']]:
        if key == 'RS':
            return Variation_13
        if key == 'RE':
            return Variation_13
        if key == 'TS':
            return Variation_14
        if key == 'TE':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_89_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RS']) -> Variation_13:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_13:
        ...

    @overload
    def get_item(self, name : Literal['TS']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['TE']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RS'], Literal['RE'], Literal['TS'], Literal['TE']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RS'], val : Union[Variation_13, Variation_13_Arg]) -> 'Variation_89':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_13, Variation_13_Arg]) -> 'Variation_89':
        ...

    @overload
    def set_item(self, name : Literal['TS'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_89':
        ...

    @overload
    def set_item(self, name : Literal['TE'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_89':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_90_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_90(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 7, 'NM')

    def __init__(self, arg : Variation_90_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_91_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_91(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 360.0, 14, '°')

    def __init__(self, arg : Variation_91_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_92_Arg_Group = TypedDict('Variation_92_Arg_Group', {
    'RE': Union[Variation_90, Variation_90_Arg],
    'AE': Union[Variation_91, Variation_91_Arg],
})
Variation_92_Arg : TypeAlias = Union[Raw, Variation_92_Arg_Group]
class Variation_92(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RE', Variation_90),
        ('AE', Variation_91),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RE': ('Range Error', Variation_90, 0, 8),
        'AE': ('Azimuth Error', Variation_91, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_90]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AE']) -> Type[Variation_91]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RE'], Literal['AE']]) -> Union[Type['Variation_90'], Type['Variation_91']]:
        if key == 'RE':
            return Variation_90
        if key == 'AE':
            return Variation_91
        assert_never(key)

    def __init__(self, arg : Variation_92_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_90:
        ...

    @overload
    def get_item(self, name : Literal['AE']) -> Variation_91:
        ...

    def get_item(self, name : Union[Literal['RE'], Literal['AE']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_90, Variation_90_Arg]) -> 'Variation_92':
        ...

    @overload
    def set_item(self, name : Literal['AE'], val : Union[Variation_91, Variation_91_Arg]) -> 'Variation_92':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_93_Arg_Group_1 = TypedDict('Variation_93_Arg_Group_1', {
    'WE': Union[Variation_23, Variation_23_Arg],
})
Variation_93_Arg : TypeAlias = Union[
    int,
    Variation_93_Arg_Group_1,
    Tuple[int],
]
class Variation_93(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('WE', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'WE': ('W/E Value', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['WE']]) -> Union[Type['Variation_23']]:
        if key == 'WE':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_93_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_93_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['WE']) -> Any:
        return self._get_item(name)

Variation_94_Arg = TypedDict('Variation_94_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_79, Variation_79_Arg],
    '020': Union[Variation_80, Variation_80_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_25, Variation_25_Arg],
    '050': Union[Variation_82, Variation_82_Arg],
    '060': Union[Variation_83, Variation_83_Arg],
    '070': Union[Variation_88, Variation_88_Arg],
    '100': Union[Variation_89, Variation_89_Arg],
    '090': Union[Variation_92, Variation_92_Arg],
    '080': Union[Variation_93, Variation_93_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RFS': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_94(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_79),
        ('020', Variation_80),
        ('030', Variation_81),
        ('041', Variation_25),
        ('050', Variation_82),
        ('060', Variation_83),
        ('070', Variation_88),
        ('100', Variation_89),
        ('090', Variation_92),
        ('080', Variation_93),
        None,
        ('SP', Variation_62),
        ('RFS', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_79, 0x4000),
        '020': (Variation_80, 0x2000),
        '030': (Variation_81, 0x1000),
        '041': (Variation_25, 0x0800),
        '050': (Variation_82, 0x0400),
        '060': (Variation_83, 0x0200),
        '070': (Variation_88, 0x0180),
        '100': (Variation_89, 0x0140),
        '090': (Variation_92, 0x0120),
        '080': (Variation_93, 0x0110),
        'SP': (Variation_62, 0x0104),
        'RFS': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_79]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_80]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_82]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_83]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_88]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_89]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_92]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_93]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RFS']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['020'], Literal['030'], Literal['041'], Literal['050'], Literal['060'], Literal['070'], Literal['100'], Literal['090'], Literal['080'], Literal['SP'], Literal['RFS']]) -> Union[Type['Variation_1'], Type['Variation_79'], Type['Variation_80'], Type['Variation_81'], Type['Variation_25'], Type['Variation_82'], Type['Variation_83'], Type['Variation_88'], Type['Variation_89'], Type['Variation_92'], Type['Variation_93'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_79
        if key == '020':
            return Variation_80
        if key == '030':
            return Variation_81
        if key == '041':
            return Variation_25
        if key == '050':
            return Variation_82
        if key == '060':
            return Variation_83
        if key == '070':
            return Variation_88
        if key == '100':
            return Variation_89
        if key == '090':
            return Variation_92
        if key == '080':
            return Variation_93
        if key == 'SP':
            return Variation_62
        if key == 'RFS':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_94_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_79, Variation_79_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_80, Variation_80_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_82, Variation_82_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_83, Variation_83_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_88, Variation_88_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_89, Variation_89_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_92, Variation_92_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_93, Variation_93_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_94':
        ...

    @overload
    def set_item(self, name : Literal['RFS'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_94':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_94':
        ...

    @overload
    def del_item(self, name : Literal['RFS']) -> 'Variation_94':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_79:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_80:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_82:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_83:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_88:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_89:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_92:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_93:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RFS']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_95_Arg : TypeAlias = Raw
class Variation_95(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Alive Message (AM)',
        2: 'Route Adherence Monitor Longitudinal Deviation (RAMLD)',
        3: 'Route Adherence Monitor Heading Deviation (RAMHD)',
        4: 'Minimum Safe Altitude Warning (MSAW)',
        5: 'Area Proximity Warning (APW)',
        6: 'Clearance Level Adherence Monitor (CLAM)',
        7: 'Short Term Conflict Alert (STCA)',
        8: 'Approach Path Monitor (APM)',
        9: 'RIMCAS Arrival / Landing Monitor (ALM)',
        10: 'RIMCAS Arrival / Departure Wrong Runway Alert (WRA)',
        11: 'RIMCAS Arrival / Departure Opposite Traffic Alert (OTA)',
        12: 'RIMCAS Departure Monitor (RDM)',
        13: 'RIMCAS Runway / Taxiway Crossing Monitor (RCM)',
        14: 'RIMCAS Taxiway Separation Monitor (TSM)',
        15: 'RIMCAS Unauthorized Taxiway Movement Monitor(UTMM)',
        16: 'RIMCAS Stop Bar Overrun Alert (SBOA)',
        17: 'End Of Conflict (EOC)',
        18: 'ACAS Resolution Advisory (ACASRA)',
        19: 'Near Term Conflict Alert (NTCA)',
        20: 'Downlinked Barometric Pressure Setting Monitor (DBPSM)',
        21: 'Speed Adherence Monitor (SAM)',
        22: 'Outside Controlled Airspace Tool (OCAT)',
        23: 'Vertical Conflict Detection (VCD)',
        24: 'Vertical Rate Adherence Monitor (VRAM)',
        25: 'Cleared Heading Adherence Monitor (CHAM)',
        26: 'Downlinked Selected Altitude Monitor (DSAM)',
        27: 'Holding Adherence Monitor (HAM)',
        28: 'Vertical Path Monitor (VPM)',
        29: 'RIMCAS Taxiway Traffic Alert (TTA)',
        30: 'RIMCAS Arrival/Departure Close Runway Alert (CRA)',
        31: 'RIMCAS Arrival/Departure Aircraft Separation Monitor (ASM)',
        32: 'RIMCAS ILS Area Violation Monitor (IAVM)',
        33: 'Final Target Distance Indicator (FTD)',
        34: 'Initial Target Distance Indicator (ITD)',
        35: 'Wake Vortex Indicator Infringement Alert (IIA)',
        36: 'Sequence Warning (SQW)',
        37: 'Catch Up Warning (CUW)',
        38: 'Conflicting ATC Clearances (CATC)',
        39: 'No ATC Clearance (NOCLR)',
        40: 'Aircraft Not Moving despite ATC Clearance (NOMOV)',
        41: 'Aircraft leaving/entering the aerodrome area without proper handover (NOH)',
        42: 'Wrong Runway or Taxiway Type (WRTY)',
        43: 'Stand Occupied (STOCC)',
        44: 'Ongoing Alert (ONGOING)',
        97: 'Lost Track Warning (LTW)',
        98: 'Holding Volume Infringement (HVI)',
        99: 'Airspace Infringement Warning (AIW)',
    }

    def __init__(self, arg : Variation_95_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_96_Arg : TypeAlias = List[Union[Variation_1, Variation_1_Arg]]
class Variation_96(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_1

    @classmethod
    def spec(cls) -> Type[Variation_1]:
        return Variation_1

    def __init__(self, arg : List[Union[Variation_1, Variation_1_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_97_Arg : TypeAlias = Raw
class Variation_97(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3

    def __init__(self, arg : Variation_97_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_98_Arg_Group = TypedDict('Variation_98_Arg_Group', {
    'STAT': Union[Variation_97, Variation_97_Arg],
})
Variation_98_Arg : TypeAlias = Union[Raw, Variation_98_Arg_Group]
class Variation_98(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 4),
        ('STAT', Variation_97),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STAT': ('Status of the Alert', Variation_97, 4, 3),
    }

    @classmethod
    def spec(cls, key : Union[Literal['STAT']]) -> Union[Type['Variation_97']]:
        if key == 'STAT':
            return Variation_97
        assert_never(key)

    def __init__(self, arg : Variation_98_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['STAT']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['STAT'], val : Union[Variation_97, Variation_97_Arg]) -> 'Variation_98':
        return self._set_item(name, val) # type: ignore

Variation_99_Arg : TypeAlias = Raw
class Variation_99(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'MRVA function',
    }

    def __init__(self, arg : Variation_99_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_100_Arg : TypeAlias = Raw
class Variation_100(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'RAMLD function',
    }

    def __init__(self, arg : Variation_100_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_101_Arg : TypeAlias = Raw
class Variation_101(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'RAMHD function',
    }

    def __init__(self, arg : Variation_101_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_102_Arg : TypeAlias = Raw
class Variation_102(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'MSAW function',
    }

    def __init__(self, arg : Variation_102_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_103_Arg : TypeAlias = Raw
class Variation_103(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'APW function',
    }

    def __init__(self, arg : Variation_103_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_104_Arg : TypeAlias = Raw
class Variation_104(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'CLAM function',
    }

    def __init__(self, arg : Variation_104_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_105_Arg : TypeAlias = Raw
class Variation_105(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'STCA function',
    }

    def __init__(self, arg : Variation_105_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_106_Arg : TypeAlias = Raw
class Variation_106(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'APM function',
    }

    def __init__(self, arg : Variation_106_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_107_Arg : TypeAlias = Raw
class Variation_107(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'RIMCA function',
    }

    def __init__(self, arg : Variation_107_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_108_Arg : TypeAlias = Raw
class Variation_108(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'ACAS RA function',
    }

    def __init__(self, arg : Variation_108_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_109_Arg : TypeAlias = Raw
class Variation_109(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'NTCA function',
    }

    def __init__(self, arg : Variation_109_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_110_Arg : TypeAlias = Raw
class Variation_110(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'System degraded',
    }

    def __init__(self, arg : Variation_110_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_111_Arg : TypeAlias = Raw
class Variation_111(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Overflow error',
    }

    def __init__(self, arg : Variation_111_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_112_Arg : TypeAlias = Raw
class Variation_112(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Overload error',
    }

    def __init__(self, arg : Variation_112_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_113_Arg : TypeAlias = Raw
class Variation_113(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'AIW function',
    }

    def __init__(self, arg : Variation_113_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_114_Arg : TypeAlias = Raw
class Variation_114(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'PAIW function',
    }

    def __init__(self, arg : Variation_114_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_115_Arg : TypeAlias = Raw
class Variation_115(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'OCAT function',
    }

    def __init__(self, arg : Variation_115_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_116_Arg : TypeAlias = Raw
class Variation_116(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'SAM function',
    }

    def __init__(self, arg : Variation_116_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_117_Arg : TypeAlias = Raw
class Variation_117(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'VCD function',
    }

    def __init__(self, arg : Variation_117_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_118_Arg : TypeAlias = Raw
class Variation_118(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'CHAM function',
    }

    def __init__(self, arg : Variation_118_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_119_Arg : TypeAlias = Raw
class Variation_119(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'DSAM function',
    }

    def __init__(self, arg : Variation_119_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_120_Arg : TypeAlias = Raw
class Variation_120(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'DBPSM ARR sub-function',
    }

    def __init__(self, arg : Variation_120_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_121_Arg : TypeAlias = Raw
class Variation_121(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'DBPSM DEP sub-function',
    }

    def __init__(self, arg : Variation_121_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_122_Arg : TypeAlias = Raw
class Variation_122(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'DBPSM TL sub-function',
    }

    def __init__(self, arg : Variation_122_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_123_Arg : TypeAlias = Raw
class Variation_123(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'VRAM CRM sub-function',
    }

    def __init__(self, arg : Variation_123_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_124_Arg : TypeAlias = Raw
class Variation_124(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'VRAM VTM sub-function',
    }

    def __init__(self, arg : Variation_124_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_125_Arg : TypeAlias = Raw
class Variation_125(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'VRAM VRM sub-function',
    }

    def __init__(self, arg : Variation_125_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_126_Arg : TypeAlias = Raw
class Variation_126(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'HAM HD sub-function',
    }

    def __init__(self, arg : Variation_126_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_127_Arg : TypeAlias = Raw
class Variation_127(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'HAM RD sub-function',
    }

    def __init__(self, arg : Variation_127_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_128_Arg : TypeAlias = Raw
class Variation_128(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'HAM VD sub-function',
    }

    def __init__(self, arg : Variation_128_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_129_Arg : TypeAlias = Raw
class Variation_129(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'HVI function',
    }

    def __init__(self, arg : Variation_129_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_130_Arg : TypeAlias = Raw
class Variation_130(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'LTW function',
    }

    def __init__(self, arg : Variation_130_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_131_Arg : TypeAlias = Raw
class Variation_131(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'VPM function',
    }

    def __init__(self, arg : Variation_131_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_132_Arg : TypeAlias = Raw
class Variation_132(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'TTA function',
    }

    def __init__(self, arg : Variation_132_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_133_Arg : TypeAlias = Raw
class Variation_133(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'CRA function',
    }

    def __init__(self, arg : Variation_133_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_134_Arg : TypeAlias = Raw
class Variation_134(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'ASM sub-function',
    }

    def __init__(self, arg : Variation_134_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_135_Arg : TypeAlias = Raw
class Variation_135(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'IAVM sub-function',
    }

    def __init__(self, arg : Variation_135_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_136_Arg : TypeAlias = Raw
class Variation_136(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'FTD Function',
    }

    def __init__(self, arg : Variation_136_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_137_Arg : TypeAlias = Raw
class Variation_137(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'ITD function',
    }

    def __init__(self, arg : Variation_137_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_138_Arg : TypeAlias = Raw
class Variation_138(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'IIA function',
    }

    def __init__(self, arg : Variation_138_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_139_Arg : TypeAlias = Raw
class Variation_139(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'SQW function',
    }

    def __init__(self, arg : Variation_139_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_140_Arg : TypeAlias = Raw
class Variation_140(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'CUW function',
    }

    def __init__(self, arg : Variation_140_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_141_Arg : TypeAlias = Raw
class Variation_141(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'CATC function',
    }

    def __init__(self, arg : Variation_141_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_142_Arg : TypeAlias = Raw
class Variation_142(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'NOCLR sub-function',
    }

    def __init__(self, arg : Variation_142_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_143_Arg : TypeAlias = Raw
class Variation_143(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'NOMOV Function',
    }

    def __init__(self, arg : Variation_143_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_144_Arg : TypeAlias = Raw
class Variation_144(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'NOH function',
    }

    def __init__(self, arg : Variation_144_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_145_Arg : TypeAlias = Raw
class Variation_145(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'WRTY function',
    }

    def __init__(self, arg : Variation_145_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_146_Arg : TypeAlias = Raw
class Variation_146(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'STOCC function',
    }

    def __init__(self, arg : Variation_146_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_147_Arg : TypeAlias = Raw
class Variation_147(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'ONGOING function',
    }

    def __init__(self, arg : Variation_147_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_148_Arg_Group_1 = TypedDict('Variation_148_Arg_Group_1', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
})
Variation_148_Arg_Group_2 = TypedDict('Variation_148_Arg_Group_2', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
})
Variation_148_Arg_Group_3 = TypedDict('Variation_148_Arg_Group_3', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
    'AIW': Union[Variation_113, Variation_113_Arg],
    'PAIW': Union[Variation_114, Variation_114_Arg],
    'OCAT': Union[Variation_115, Variation_115_Arg],
    'SAM': Union[Variation_116, Variation_116_Arg],
    'VCD': Union[Variation_117, Variation_117_Arg],
    'CHAM': Union[Variation_118, Variation_118_Arg],
    'DSAM': Union[Variation_119, Variation_119_Arg],
})
Variation_148_Arg_Group_4 = TypedDict('Variation_148_Arg_Group_4', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
    'AIW': Union[Variation_113, Variation_113_Arg],
    'PAIW': Union[Variation_114, Variation_114_Arg],
    'OCAT': Union[Variation_115, Variation_115_Arg],
    'SAM': Union[Variation_116, Variation_116_Arg],
    'VCD': Union[Variation_117, Variation_117_Arg],
    'CHAM': Union[Variation_118, Variation_118_Arg],
    'DSAM': Union[Variation_119, Variation_119_Arg],
    'DBPSMARR': Union[Variation_120, Variation_120_Arg],
    'DBPSMDEP': Union[Variation_121, Variation_121_Arg],
    'DBPSMTL': Union[Variation_122, Variation_122_Arg],
    'VRAMCRM': Union[Variation_123, Variation_123_Arg],
    'VRAMVTM': Union[Variation_124, Variation_124_Arg],
    'VRAMVRM': Union[Variation_125, Variation_125_Arg],
    'HAMHD': Union[Variation_126, Variation_126_Arg],
})
Variation_148_Arg_Group_5 = TypedDict('Variation_148_Arg_Group_5', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
    'AIW': Union[Variation_113, Variation_113_Arg],
    'PAIW': Union[Variation_114, Variation_114_Arg],
    'OCAT': Union[Variation_115, Variation_115_Arg],
    'SAM': Union[Variation_116, Variation_116_Arg],
    'VCD': Union[Variation_117, Variation_117_Arg],
    'CHAM': Union[Variation_118, Variation_118_Arg],
    'DSAM': Union[Variation_119, Variation_119_Arg],
    'DBPSMARR': Union[Variation_120, Variation_120_Arg],
    'DBPSMDEP': Union[Variation_121, Variation_121_Arg],
    'DBPSMTL': Union[Variation_122, Variation_122_Arg],
    'VRAMCRM': Union[Variation_123, Variation_123_Arg],
    'VRAMVTM': Union[Variation_124, Variation_124_Arg],
    'VRAMVRM': Union[Variation_125, Variation_125_Arg],
    'HAMHD': Union[Variation_126, Variation_126_Arg],
    'HAMRD': Union[Variation_127, Variation_127_Arg],
    'HAMVD': Union[Variation_128, Variation_128_Arg],
    'HVI': Union[Variation_129, Variation_129_Arg],
    'LTW': Union[Variation_130, Variation_130_Arg],
    'VPM': Union[Variation_131, Variation_131_Arg],
    'TTA': Union[Variation_132, Variation_132_Arg],
    'CRA': Union[Variation_133, Variation_133_Arg],
})
Variation_148_Arg_Group_6 = TypedDict('Variation_148_Arg_Group_6', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
    'AIW': Union[Variation_113, Variation_113_Arg],
    'PAIW': Union[Variation_114, Variation_114_Arg],
    'OCAT': Union[Variation_115, Variation_115_Arg],
    'SAM': Union[Variation_116, Variation_116_Arg],
    'VCD': Union[Variation_117, Variation_117_Arg],
    'CHAM': Union[Variation_118, Variation_118_Arg],
    'DSAM': Union[Variation_119, Variation_119_Arg],
    'DBPSMARR': Union[Variation_120, Variation_120_Arg],
    'DBPSMDEP': Union[Variation_121, Variation_121_Arg],
    'DBPSMTL': Union[Variation_122, Variation_122_Arg],
    'VRAMCRM': Union[Variation_123, Variation_123_Arg],
    'VRAMVTM': Union[Variation_124, Variation_124_Arg],
    'VRAMVRM': Union[Variation_125, Variation_125_Arg],
    'HAMHD': Union[Variation_126, Variation_126_Arg],
    'HAMRD': Union[Variation_127, Variation_127_Arg],
    'HAMVD': Union[Variation_128, Variation_128_Arg],
    'HVI': Union[Variation_129, Variation_129_Arg],
    'LTW': Union[Variation_130, Variation_130_Arg],
    'VPM': Union[Variation_131, Variation_131_Arg],
    'TTA': Union[Variation_132, Variation_132_Arg],
    'CRA': Union[Variation_133, Variation_133_Arg],
    'ASM': Union[Variation_134, Variation_134_Arg],
    'IAVM': Union[Variation_135, Variation_135_Arg],
    'FTD': Union[Variation_136, Variation_136_Arg],
    'ITD': Union[Variation_137, Variation_137_Arg],
    'IIA': Union[Variation_138, Variation_138_Arg],
    'SQW': Union[Variation_139, Variation_139_Arg],
    'CUW': Union[Variation_140, Variation_140_Arg],
})
Variation_148_Arg_Group_7 = TypedDict('Variation_148_Arg_Group_7', {
    'MRVA': Union[Variation_99, Variation_99_Arg],
    'RAMLD': Union[Variation_100, Variation_100_Arg],
    'RAMHD': Union[Variation_101, Variation_101_Arg],
    'MSAW': Union[Variation_102, Variation_102_Arg],
    'APW': Union[Variation_103, Variation_103_Arg],
    'CLAM': Union[Variation_104, Variation_104_Arg],
    'STCA': Union[Variation_105, Variation_105_Arg],
    'APM': Union[Variation_106, Variation_106_Arg],
    'RIMCA': Union[Variation_107, Variation_107_Arg],
    'ACASRA': Union[Variation_108, Variation_108_Arg],
    'NTCA': Union[Variation_109, Variation_109_Arg],
    'DG': Union[Variation_110, Variation_110_Arg],
    'OF': Union[Variation_111, Variation_111_Arg],
    'OL': Union[Variation_112, Variation_112_Arg],
    'AIW': Union[Variation_113, Variation_113_Arg],
    'PAIW': Union[Variation_114, Variation_114_Arg],
    'OCAT': Union[Variation_115, Variation_115_Arg],
    'SAM': Union[Variation_116, Variation_116_Arg],
    'VCD': Union[Variation_117, Variation_117_Arg],
    'CHAM': Union[Variation_118, Variation_118_Arg],
    'DSAM': Union[Variation_119, Variation_119_Arg],
    'DBPSMARR': Union[Variation_120, Variation_120_Arg],
    'DBPSMDEP': Union[Variation_121, Variation_121_Arg],
    'DBPSMTL': Union[Variation_122, Variation_122_Arg],
    'VRAMCRM': Union[Variation_123, Variation_123_Arg],
    'VRAMVTM': Union[Variation_124, Variation_124_Arg],
    'VRAMVRM': Union[Variation_125, Variation_125_Arg],
    'HAMHD': Union[Variation_126, Variation_126_Arg],
    'HAMRD': Union[Variation_127, Variation_127_Arg],
    'HAMVD': Union[Variation_128, Variation_128_Arg],
    'HVI': Union[Variation_129, Variation_129_Arg],
    'LTW': Union[Variation_130, Variation_130_Arg],
    'VPM': Union[Variation_131, Variation_131_Arg],
    'TTA': Union[Variation_132, Variation_132_Arg],
    'CRA': Union[Variation_133, Variation_133_Arg],
    'ASM': Union[Variation_134, Variation_134_Arg],
    'IAVM': Union[Variation_135, Variation_135_Arg],
    'FTD': Union[Variation_136, Variation_136_Arg],
    'ITD': Union[Variation_137, Variation_137_Arg],
    'IIA': Union[Variation_138, Variation_138_Arg],
    'SQW': Union[Variation_139, Variation_139_Arg],
    'CUW': Union[Variation_140, Variation_140_Arg],
    'CATC': Union[Variation_141, Variation_141_Arg],
    'NOCLR': Union[Variation_142, Variation_142_Arg],
    'NOMOV': Union[Variation_143, Variation_143_Arg],
    'NOH': Union[Variation_144, Variation_144_Arg],
    'WRTY': Union[Variation_145, Variation_145_Arg],
    'STOCC': Union[Variation_146, Variation_146_Arg],
    'ONGOING': Union[Variation_147, Variation_147_Arg],
})
Variation_148_Arg : TypeAlias = Union[
    int,
    Variation_148_Arg_Group_1,
    Tuple[int],
    Variation_148_Arg_Group_2,
    Tuple[int,int],
    Variation_148_Arg_Group_3,
    Tuple[int,int,int],
    Variation_148_Arg_Group_4,
    Tuple[int,int,int,int],
    Variation_148_Arg_Group_5,
    Tuple[int,int,int,int,int],
    Variation_148_Arg_Group_6,
    Tuple[int,int,int,int,int,int],
    Variation_148_Arg_Group_7,
    Tuple[int,int,int,int,int,int,int],
]
class Variation_148(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MRVA', Variation_99),
            ('RAMLD', Variation_100),
            ('RAMHD', Variation_101),
            ('MSAW', Variation_102),
            ('APW', Variation_103),
            ('CLAM', Variation_104),
            ('STCA', Variation_105),
        ],
        [
            ('APM', Variation_106),
            ('RIMCA', Variation_107),
            ('ACASRA', Variation_108),
            ('NTCA', Variation_109),
            ('DG', Variation_110),
            ('OF', Variation_111),
            ('OL', Variation_112),
        ],
        [
            ('AIW', Variation_113),
            ('PAIW', Variation_114),
            ('OCAT', Variation_115),
            ('SAM', Variation_116),
            ('VCD', Variation_117),
            ('CHAM', Variation_118),
            ('DSAM', Variation_119),
        ],
        [
            ('DBPSMARR', Variation_120),
            ('DBPSMDEP', Variation_121),
            ('DBPSMTL', Variation_122),
            ('VRAMCRM', Variation_123),
            ('VRAMVTM', Variation_124),
            ('VRAMVRM', Variation_125),
            ('HAMHD', Variation_126),
        ],
        [
            ('HAMRD', Variation_127),
            ('HAMVD', Variation_128),
            ('HVI', Variation_129),
            ('LTW', Variation_130),
            ('VPM', Variation_131),
            ('TTA', Variation_132),
            ('CRA', Variation_133),
        ],
        [
            ('ASM', Variation_134),
            ('IAVM', Variation_135),
            ('FTD', Variation_136),
            ('ITD', Variation_137),
            ('IIA', Variation_138),
            ('SQW', Variation_139),
            ('CUW', Variation_140),
        ],
        [
            ('CATC', Variation_141),
            ('NOCLR', Variation_142),
            ('NOMOV', Variation_143),
            ('NOH', Variation_144),
            ('WRTY', Variation_145),
            ('STOCC', Variation_146),
            ('ONGOING', Variation_147),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MRVA': ('', Variation_99, 0, 1),
        'RAMLD': ('', Variation_100, 1, 1),
        'RAMHD': ('', Variation_101, 2, 1),
        'MSAW': ('', Variation_102, 3, 1),
        'APW': ('', Variation_103, 4, 1),
        'CLAM': ('', Variation_104, 5, 1),
        'STCA': ('', Variation_105, 6, 1),
        'APM': ('', Variation_106, 0, 1),
        'RIMCA': ('', Variation_107, 1, 1),
        'ACASRA': ('', Variation_108, 2, 1),
        'NTCA': ('', Variation_109, 3, 1),
        'DG': ('', Variation_110, 4, 1),
        'OF': ('', Variation_111, 5, 1),
        'OL': ('', Variation_112, 6, 1),
        'AIW': ('', Variation_113, 0, 1),
        'PAIW': ('', Variation_114, 1, 1),
        'OCAT': ('', Variation_115, 2, 1),
        'SAM': ('', Variation_116, 3, 1),
        'VCD': ('', Variation_117, 4, 1),
        'CHAM': ('', Variation_118, 5, 1),
        'DSAM': ('', Variation_119, 6, 1),
        'DBPSMARR': ('', Variation_120, 0, 1),
        'DBPSMDEP': ('', Variation_121, 1, 1),
        'DBPSMTL': ('', Variation_122, 2, 1),
        'VRAMCRM': ('', Variation_123, 3, 1),
        'VRAMVTM': ('', Variation_124, 4, 1),
        'VRAMVRM': ('', Variation_125, 5, 1),
        'HAMHD': ('', Variation_126, 6, 1),
        'HAMRD': ('', Variation_127, 0, 1),
        'HAMVD': ('', Variation_128, 1, 1),
        'HVI': ('', Variation_129, 2, 1),
        'LTW': ('', Variation_130, 3, 1),
        'VPM': ('', Variation_131, 4, 1),
        'TTA': ('', Variation_132, 5, 1),
        'CRA': ('', Variation_133, 6, 1),
        'ASM': ('', Variation_134, 0, 1),
        'IAVM': ('', Variation_135, 1, 1),
        'FTD': ('', Variation_136, 2, 1),
        'ITD': ('', Variation_137, 3, 1),
        'IIA': ('', Variation_138, 4, 1),
        'SQW': ('', Variation_139, 5, 1),
        'CUW': ('', Variation_140, 6, 1),
        'CATC': ('', Variation_141, 0, 1),
        'NOCLR': ('', Variation_142, 1, 1),
        'NOMOV': ('', Variation_143, 2, 1),
        'NOH': ('', Variation_144, 3, 1),
        'WRTY': ('', Variation_145, 4, 1),
        'STOCC': ('', Variation_146, 5, 1),
        'ONGOING': ('', Variation_147, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MRVA']) -> Type[Variation_99]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAMLD']) -> Type[Variation_100]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAMHD']) -> Type[Variation_101]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSAW']) -> Type[Variation_102]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['APW']) -> Type[Variation_103]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CLAM']) -> Type[Variation_104]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STCA']) -> Type[Variation_105]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['APM']) -> Type[Variation_106]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RIMCA']) -> Type[Variation_107]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACASRA']) -> Type[Variation_108]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NTCA']) -> Type[Variation_109]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DG']) -> Type[Variation_110]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OF']) -> Type[Variation_111]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OL']) -> Type[Variation_112]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIW']) -> Type[Variation_113]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PAIW']) -> Type[Variation_114]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OCAT']) -> Type[Variation_115]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAM']) -> Type[Variation_116]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VCD']) -> Type[Variation_117]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHAM']) -> Type[Variation_118]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DSAM']) -> Type[Variation_119]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMARR']) -> Type[Variation_120]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMDEP']) -> Type[Variation_121]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMTL']) -> Type[Variation_122]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMCRM']) -> Type[Variation_123]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMVTM']) -> Type[Variation_124]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMVRM']) -> Type[Variation_125]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMHD']) -> Type[Variation_126]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMRD']) -> Type[Variation_127]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMVD']) -> Type[Variation_128]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HVI']) -> Type[Variation_129]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LTW']) -> Type[Variation_130]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VPM']) -> Type[Variation_131]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTA']) -> Type[Variation_132]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CRA']) -> Type[Variation_133]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ASM']) -> Type[Variation_134]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAVM']) -> Type[Variation_135]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FTD']) -> Type[Variation_136]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ITD']) -> Type[Variation_137]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IIA']) -> Type[Variation_138]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SQW']) -> Type[Variation_139]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CUW']) -> Type[Variation_140]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CATC']) -> Type[Variation_141]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOCLR']) -> Type[Variation_142]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOMOV']) -> Type[Variation_143]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOH']) -> Type[Variation_144]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WRTY']) -> Type[Variation_145]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STOCC']) -> Type[Variation_146]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ONGOING']) -> Type[Variation_147]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MRVA'], Literal['RAMLD'], Literal['RAMHD'], Literal['MSAW'], Literal['APW'], Literal['CLAM'], Literal['STCA'], Literal['APM'], Literal['RIMCA'], Literal['ACASRA'], Literal['NTCA'], Literal['DG'], Literal['OF'], Literal['OL'], Literal['AIW'], Literal['PAIW'], Literal['OCAT'], Literal['SAM'], Literal['VCD'], Literal['CHAM'], Literal['DSAM'], Literal['DBPSMARR'], Literal['DBPSMDEP'], Literal['DBPSMTL'], Literal['VRAMCRM'], Literal['VRAMVTM'], Literal['VRAMVRM'], Literal['HAMHD'], Literal['HAMRD'], Literal['HAMVD'], Literal['HVI'], Literal['LTW'], Literal['VPM'], Literal['TTA'], Literal['CRA'], Literal['ASM'], Literal['IAVM'], Literal['FTD'], Literal['ITD'], Literal['IIA'], Literal['SQW'], Literal['CUW'], Literal['CATC'], Literal['NOCLR'], Literal['NOMOV'], Literal['NOH'], Literal['WRTY'], Literal['STOCC'], Literal['ONGOING']]) -> Union[Type['Variation_99'], Type['Variation_100'], Type['Variation_101'], Type['Variation_102'], Type['Variation_103'], Type['Variation_104'], Type['Variation_105'], Type['Variation_106'], Type['Variation_107'], Type['Variation_108'], Type['Variation_109'], Type['Variation_110'], Type['Variation_111'], Type['Variation_112'], Type['Variation_113'], Type['Variation_114'], Type['Variation_115'], Type['Variation_116'], Type['Variation_117'], Type['Variation_118'], Type['Variation_119'], Type['Variation_120'], Type['Variation_121'], Type['Variation_122'], Type['Variation_123'], Type['Variation_124'], Type['Variation_125'], Type['Variation_126'], Type['Variation_127'], Type['Variation_128'], Type['Variation_129'], Type['Variation_130'], Type['Variation_131'], Type['Variation_132'], Type['Variation_133'], Type['Variation_134'], Type['Variation_135'], Type['Variation_136'], Type['Variation_137'], Type['Variation_138'], Type['Variation_139'], Type['Variation_140'], Type['Variation_141'], Type['Variation_142'], Type['Variation_143'], Type['Variation_144'], Type['Variation_145'], Type['Variation_146'], Type['Variation_147']]:
        if key == 'MRVA':
            return Variation_99
        if key == 'RAMLD':
            return Variation_100
        if key == 'RAMHD':
            return Variation_101
        if key == 'MSAW':
            return Variation_102
        if key == 'APW':
            return Variation_103
        if key == 'CLAM':
            return Variation_104
        if key == 'STCA':
            return Variation_105
        if key == 'APM':
            return Variation_106
        if key == 'RIMCA':
            return Variation_107
        if key == 'ACASRA':
            return Variation_108
        if key == 'NTCA':
            return Variation_109
        if key == 'DG':
            return Variation_110
        if key == 'OF':
            return Variation_111
        if key == 'OL':
            return Variation_112
        if key == 'AIW':
            return Variation_113
        if key == 'PAIW':
            return Variation_114
        if key == 'OCAT':
            return Variation_115
        if key == 'SAM':
            return Variation_116
        if key == 'VCD':
            return Variation_117
        if key == 'CHAM':
            return Variation_118
        if key == 'DSAM':
            return Variation_119
        if key == 'DBPSMARR':
            return Variation_120
        if key == 'DBPSMDEP':
            return Variation_121
        if key == 'DBPSMTL':
            return Variation_122
        if key == 'VRAMCRM':
            return Variation_123
        if key == 'VRAMVTM':
            return Variation_124
        if key == 'VRAMVRM':
            return Variation_125
        if key == 'HAMHD':
            return Variation_126
        if key == 'HAMRD':
            return Variation_127
        if key == 'HAMVD':
            return Variation_128
        if key == 'HVI':
            return Variation_129
        if key == 'LTW':
            return Variation_130
        if key == 'VPM':
            return Variation_131
        if key == 'TTA':
            return Variation_132
        if key == 'CRA':
            return Variation_133
        if key == 'ASM':
            return Variation_134
        if key == 'IAVM':
            return Variation_135
        if key == 'FTD':
            return Variation_136
        if key == 'ITD':
            return Variation_137
        if key == 'IIA':
            return Variation_138
        if key == 'SQW':
            return Variation_139
        if key == 'CUW':
            return Variation_140
        if key == 'CATC':
            return Variation_141
        if key == 'NOCLR':
            return Variation_142
        if key == 'NOMOV':
            return Variation_143
        if key == 'NOH':
            return Variation_144
        if key == 'WRTY':
            return Variation_145
        if key == 'STOCC':
            return Variation_146
        if key == 'ONGOING':
            return Variation_147
        assert_never(key)

    def __init__(self, arg : Variation_148_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_148_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_148_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_148_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_148_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            if Variation_148_Arg_Group_5.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(5, arg)); return
            if Variation_148_Arg_Group_6.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(6, arg)); return
            if Variation_148_Arg_Group_7.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(7, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MRVA']) -> Variation_99:
        ...

    @overload
    def get_item(self, name : Literal['RAMLD']) -> Variation_100:
        ...

    @overload
    def get_item(self, name : Literal['RAMHD']) -> Variation_101:
        ...

    @overload
    def get_item(self, name : Literal['MSAW']) -> Variation_102:
        ...

    @overload
    def get_item(self, name : Literal['APW']) -> Variation_103:
        ...

    @overload
    def get_item(self, name : Literal['CLAM']) -> Variation_104:
        ...

    @overload
    def get_item(self, name : Literal['STCA']) -> Variation_105:
        ...

    @overload
    def get_item(self, name : Literal['APM']) -> Variation_106:
        ...

    @overload
    def get_item(self, name : Literal['RIMCA']) -> Variation_107:
        ...

    @overload
    def get_item(self, name : Literal['ACASRA']) -> Variation_108:
        ...

    @overload
    def get_item(self, name : Literal['NTCA']) -> Variation_109:
        ...

    @overload
    def get_item(self, name : Literal['DG']) -> Variation_110:
        ...

    @overload
    def get_item(self, name : Literal['OF']) -> Variation_111:
        ...

    @overload
    def get_item(self, name : Literal['OL']) -> Variation_112:
        ...

    @overload
    def get_item(self, name : Literal['AIW']) -> Variation_113:
        ...

    @overload
    def get_item(self, name : Literal['PAIW']) -> Variation_114:
        ...

    @overload
    def get_item(self, name : Literal['OCAT']) -> Variation_115:
        ...

    @overload
    def get_item(self, name : Literal['SAM']) -> Variation_116:
        ...

    @overload
    def get_item(self, name : Literal['VCD']) -> Variation_117:
        ...

    @overload
    def get_item(self, name : Literal['CHAM']) -> Variation_118:
        ...

    @overload
    def get_item(self, name : Literal['DSAM']) -> Variation_119:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMARR']) -> Variation_120:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMDEP']) -> Variation_121:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMTL']) -> Variation_122:
        ...

    @overload
    def get_item(self, name : Literal['VRAMCRM']) -> Variation_123:
        ...

    @overload
    def get_item(self, name : Literal['VRAMVTM']) -> Variation_124:
        ...

    @overload
    def get_item(self, name : Literal['VRAMVRM']) -> Variation_125:
        ...

    @overload
    def get_item(self, name : Literal['HAMHD']) -> Variation_126:
        ...

    @overload
    def get_item(self, name : Literal['HAMRD']) -> Variation_127:
        ...

    @overload
    def get_item(self, name : Literal['HAMVD']) -> Variation_128:
        ...

    @overload
    def get_item(self, name : Literal['HVI']) -> Variation_129:
        ...

    @overload
    def get_item(self, name : Literal['LTW']) -> Variation_130:
        ...

    @overload
    def get_item(self, name : Literal['VPM']) -> Variation_131:
        ...

    @overload
    def get_item(self, name : Literal['TTA']) -> Variation_132:
        ...

    @overload
    def get_item(self, name : Literal['CRA']) -> Variation_133:
        ...

    @overload
    def get_item(self, name : Literal['ASM']) -> Variation_134:
        ...

    @overload
    def get_item(self, name : Literal['IAVM']) -> Variation_135:
        ...

    @overload
    def get_item(self, name : Literal['FTD']) -> Variation_136:
        ...

    @overload
    def get_item(self, name : Literal['ITD']) -> Variation_137:
        ...

    @overload
    def get_item(self, name : Literal['IIA']) -> Variation_138:
        ...

    @overload
    def get_item(self, name : Literal['SQW']) -> Variation_139:
        ...

    @overload
    def get_item(self, name : Literal['CUW']) -> Variation_140:
        ...

    @overload
    def get_item(self, name : Literal['CATC']) -> Variation_141:
        ...

    @overload
    def get_item(self, name : Literal['NOCLR']) -> Variation_142:
        ...

    @overload
    def get_item(self, name : Literal['NOMOV']) -> Variation_143:
        ...

    @overload
    def get_item(self, name : Literal['NOH']) -> Variation_144:
        ...

    @overload
    def get_item(self, name : Literal['WRTY']) -> Variation_145:
        ...

    @overload
    def get_item(self, name : Literal['STOCC']) -> Variation_146:
        ...

    @overload
    def get_item(self, name : Literal['ONGOING']) -> Variation_147:
        ...

    def get_item(self, name : Union[Literal['MRVA'], Literal['RAMLD'], Literal['RAMHD'], Literal['MSAW'], Literal['APW'], Literal['CLAM'], Literal['STCA'], Literal['APM'], Literal['RIMCA'], Literal['ACASRA'], Literal['NTCA'], Literal['DG'], Literal['OF'], Literal['OL'], Literal['AIW'], Literal['PAIW'], Literal['OCAT'], Literal['SAM'], Literal['VCD'], Literal['CHAM'], Literal['DSAM'], Literal['DBPSMARR'], Literal['DBPSMDEP'], Literal['DBPSMTL'], Literal['VRAMCRM'], Literal['VRAMVTM'], Literal['VRAMVRM'], Literal['HAMHD'], Literal['HAMRD'], Literal['HAMVD'], Literal['HVI'], Literal['LTW'], Literal['VPM'], Literal['TTA'], Literal['CRA'], Literal['ASM'], Literal['IAVM'], Literal['FTD'], Literal['ITD'], Literal['IIA'], Literal['SQW'], Literal['CUW'], Literal['CATC'], Literal['NOCLR'], Literal['NOMOV'], Literal['NOH'], Literal['WRTY'], Literal['STOCC'], Literal['ONGOING']]) -> Any:
        return self._get_item(name)

Variation_149_Arg : TypeAlias = Union[Raw,str]
class Variation_149(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 56
    string_type = StringAscii()

    def __init__(self, arg : Variation_149_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_150_Arg_Group = TypedDict('Variation_150_Arg_Group', {
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_150_Arg : TypeAlias = Union[Raw, Variation_150_Arg_Group]
class Variation_150(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MODE3A': ('Mode-3/A Code (Converted Into Octal Representation) of Aircraft 1 Involved in the Conflict', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MODE3A']]) -> Union[Type['Variation_19']]:
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_150_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MODE3A']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_150':
        return self._set_item(name, val) # type: ignore

Variation_151_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_151(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 180.0, 25, '°')

    def __init__(self, arg : Variation_151_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_152_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_152(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 25.0, 0, 'ft')

    def __init__(self, arg : Variation_152_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_153_Arg_Group = TypedDict('Variation_153_Arg_Group', {
    'LAT': Union[Variation_151, Variation_151_Arg],
    'LON': Union[Variation_151, Variation_151_Arg],
    'ALT': Union[Variation_152, Variation_152_Arg],
})
Variation_153_Arg : TypeAlias = Union[Raw, Variation_153_Arg_Group]
class Variation_153(Group):
    variation = 'Group'

    bit_size = 96

    subitems_list = [
        ('LAT', Variation_151),
        ('LON', Variation_151),
        ('ALT', Variation_152),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('In WGS-84 in Two’s Complement', Variation_151, 0, 32),
        'LON': ('In WGS-84 in Two’s Complement', Variation_151, 32, 32),
        'ALT': ('Altitude of Predicted Conflict', Variation_152, 64, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_152]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON'], Literal['ALT']]) -> Union[Type['Variation_151'], Type['Variation_151'], Type['Variation_152']]:
        if key == 'LAT':
            return Variation_151
        if key == 'LON':
            return Variation_151
        if key == 'ALT':
            return Variation_152
        assert_never(key)

    def __init__(self, arg : Variation_153_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_151:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_151:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_152:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_151, Variation_151_Arg]) -> 'Variation_153':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_151, Variation_151_Arg]) -> 'Variation_153':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_152, Variation_152_Arg]) -> 'Variation_153':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_154_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_154(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 1.0, 1, 'm')

    def __init__(self, arg : Variation_154_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_155_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_155(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 25.0, 0, 'ft')

    def __init__(self, arg : Variation_155_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_156_Arg_Group = TypedDict('Variation_156_Arg_Group', {
    'X': Union[Variation_154, Variation_154_Arg],
    'Y': Union[Variation_154, Variation_154_Arg],
    'Z': Union[Variation_155, Variation_155_Arg],
})
Variation_156_Arg : TypeAlias = Union[Raw, Variation_156_Arg_Group]
class Variation_156(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('X', Variation_154),
        ('Y', Variation_154),
        ('Z', Variation_155),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('Starting X-position of the Conflict', Variation_154, 0, 24),
        'Y': ('Starting Y-position of the Conflict', Variation_154, 24, 24),
        'Z': ('Starting Z-position of the Conflict', Variation_155, 48, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Z']) -> Type[Variation_155]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['Z']]) -> Union[Type['Variation_154'], Type['Variation_154'], Type['Variation_155']]:
        if key == 'X':
            return Variation_154
        if key == 'Y':
            return Variation_154
        if key == 'Z':
            return Variation_155
        assert_never(key)

    def __init__(self, arg : Variation_156_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_154:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_154:
        ...

    @overload
    def get_item(self, name : Literal['Z']) -> Variation_155:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['Z']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_156':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_156':
        ...

    @overload
    def set_item(self, name : Literal['Z'], val : Union[Variation_155, Variation_155_Arg]) -> 'Variation_156':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_157_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_157(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 1, 'm')

    def __init__(self, arg : Variation_157_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_158_Arg : TypeAlias = Raw
class Variation_158(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'General Air Traffic',
        2: 'Operational Air Traffic',
        3: 'Not applicable',
    }

    def __init__(self, arg : Variation_158_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_159_Arg : TypeAlias = Raw
class Variation_159(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Instrument Flight Rules',
        1: 'Visual Flight rules',
        2: 'Not applicable',
        3: 'Controlled Visual Flight Rules',
    }

    def __init__(self, arg : Variation_159_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_160_Arg : TypeAlias = Raw
class Variation_160(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Approved',
        2: 'Exempt',
        3: 'Not Approved',
    }

    def __init__(self, arg : Variation_160_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_161_Arg : TypeAlias = Raw
class Variation_161(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Normal Priority Flight',
        1: 'High Priority Flight',
    }

    def __init__(self, arg : Variation_161_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_162_Arg : TypeAlias = Raw
class Variation_162(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Maintaining',
        1: 'Climbing',
        2: 'Descending',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_162_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_163_Arg : TypeAlias = Raw
class Variation_163(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Non primary target',
        1: 'Primary target',
    }

    def __init__(self, arg : Variation_163_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_164_Arg : TypeAlias = Raw
class Variation_164(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Ground Vehicle',
    }

    def __init__(self, arg : Variation_164_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_165_Arg_Group_1 = TypedDict('Variation_165_Arg_Group_1', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_159, Variation_159_Arg],
    'RVSM': Union[Variation_160, Variation_160_Arg],
    'HPR': Union[Variation_161, Variation_161_Arg],
})
Variation_165_Arg_Group_2 = TypedDict('Variation_165_Arg_Group_2', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_159, Variation_159_Arg],
    'RVSM': Union[Variation_160, Variation_160_Arg],
    'HPR': Union[Variation_161, Variation_161_Arg],
    'CDM': Union[Variation_162, Variation_162_Arg],
    'PRI': Union[Variation_163, Variation_163_Arg],
    'GV': Union[Variation_164, Variation_164_Arg],
})
Variation_165_Arg : TypeAlias = Union[
    int,
    Variation_165_Arg_Group_1,
    Tuple[int],
    Variation_165_Arg_Group_2,
    Tuple[int,int],
]
class Variation_165(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('GATOAT', Variation_158),
            ('FR1FR2', Variation_159),
            ('RVSM', Variation_160),
            ('HPR', Variation_161),
        ],
        [
            ('CDM', Variation_162),
            ('PRI', Variation_163),
            ('GV', Variation_164),
            Spare(4, 3),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GATOAT': ('Identification of Conflict Categories Definition Table', Variation_158, 0, 2),
        'FR1FR2': ('Flight Rules', Variation_159, 2, 2),
        'RVSM': ('', Variation_160, 4, 2),
        'HPR': ('', Variation_161, 6, 1),
        'CDM': ('Climbing/Descending Mode', Variation_162, 0, 2),
        'PRI': ('', Variation_163, 2, 1),
        'GV': ('', Variation_164, 3, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GATOAT']) -> Type[Variation_158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR1FR2']) -> Type[Variation_159]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RVSM']) -> Type[Variation_160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_161]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDM']) -> Type[Variation_162]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PRI']) -> Type[Variation_163]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GV']) -> Type[Variation_164]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR'], Literal['CDM'], Literal['PRI'], Literal['GV']]) -> Union[Type['Variation_158'], Type['Variation_159'], Type['Variation_160'], Type['Variation_161'], Type['Variation_162'], Type['Variation_163'], Type['Variation_164']]:
        if key == 'GATOAT':
            return Variation_158
        if key == 'FR1FR2':
            return Variation_159
        if key == 'RVSM':
            return Variation_160
        if key == 'HPR':
            return Variation_161
        if key == 'CDM':
            return Variation_162
        if key == 'PRI':
            return Variation_163
        if key == 'GV':
            return Variation_164
        assert_never(key)

    def __init__(self, arg : Variation_165_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_165_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_165_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GATOAT']) -> Variation_158:
        ...

    @overload
    def get_item(self, name : Literal['FR1FR2']) -> Variation_159:
        ...

    @overload
    def get_item(self, name : Literal['RVSM']) -> Variation_160:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_161:
        ...

    @overload
    def get_item(self, name : Literal['CDM']) -> Variation_162:
        ...

    @overload
    def get_item(self, name : Literal['PRI']) -> Variation_163:
        ...

    @overload
    def get_item(self, name : Literal['GV']) -> Variation_164:
        ...

    def get_item(self, name : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR'], Literal['CDM'], Literal['PRI'], Literal['GV']]) -> Any:
        return self._get_item(name)

Variation_166_Arg : TypeAlias = Union[Raw,str]
class Variation_166(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 48
    string_type = StringAscii()

    def __init__(self, arg : Variation_166_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_167_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_167(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 27
    quantity = Quantity('Unsigned', 1.0, 0, '')

    def __init__(self, arg : Variation_167_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_168_Arg_Group = TypedDict('Variation_168_Arg_Group', {
    'NBR': Union[Variation_167, Variation_167_Arg],
})
Variation_168_Arg : TypeAlias = Union[Raw, Variation_168_Arg_Group]
class Variation_168(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        Spare(0, 5),
        ('NBR', Variation_167),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NBR': ('', Variation_167, 5, 27),
    }

    @classmethod
    def spec(cls, key : Union[Literal['NBR']]) -> Union[Type['Variation_167']]:
        if key == 'NBR':
            return Variation_167
        assert_never(key)

    def __init__(self, arg : Variation_168_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['NBR']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['NBR'], val : Union[Variation_167, Variation_167_Arg]) -> 'Variation_168':
        return self._set_item(name, val) # type: ignore

Variation_169_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_169(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_169_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_170_Arg = TypedDict('Variation_170_Arg', {
    'AI1': Union[Variation_149, Variation_149_Arg],
    'M31': Union[Variation_150, Variation_150_Arg],
    'CPW': Union[Variation_153, Variation_153_Arg],
    'CPC': Union[Variation_156, Variation_156_Arg],
    'TT1': Union[Variation_81, Variation_81_Arg],
    'DT1': Union[Variation_157, Variation_157_Arg],
    'AC1': Union[Variation_165, Variation_165_Arg],
    'MS1': Union[Variation_166, Variation_166_Arg],
    'FP1': Union[Variation_168, Variation_168_Arg],
    'CF1': Union[Variation_169, Variation_169_Arg],
}, total=False)
class Variation_170(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('AI1', Variation_149),
        ('M31', Variation_150),
        ('CPW', Variation_153),
        ('CPC', Variation_156),
        ('TT1', Variation_81),
        ('DT1', Variation_157),
        ('AC1', Variation_165),
        ('MS1', Variation_166),
        ('FP1', Variation_168),
        ('CF1', Variation_169),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AI1': (Variation_149, 0x8000),
        'M31': (Variation_150, 0x4000),
        'CPW': (Variation_153, 0x2000),
        'CPC': (Variation_156, 0x1000),
        'TT1': (Variation_81, 0x0800),
        'DT1': (Variation_157, 0x0400),
        'AC1': (Variation_165, 0x0200),
        'MS1': (Variation_166, 0x0180),
        'FP1': (Variation_168, 0x0140),
        'CF1': (Variation_169, 0x0120),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AI1']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M31']) -> Type[Variation_150]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPW']) -> Type[Variation_153]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPC']) -> Type[Variation_156]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TT1']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DT1']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AC1']) -> Type[Variation_165]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MS1']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FP1']) -> Type[Variation_168]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CF1']) -> Type[Variation_169]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AI1'], Literal['M31'], Literal['CPW'], Literal['CPC'], Literal['TT1'], Literal['DT1'], Literal['AC1'], Literal['MS1'], Literal['FP1'], Literal['CF1']]) -> Union[Type['Variation_149'], Type['Variation_150'], Type['Variation_153'], Type['Variation_156'], Type['Variation_81'], Type['Variation_157'], Type['Variation_165'], Type['Variation_166'], Type['Variation_168'], Type['Variation_169']]:
        if key == 'AI1':
            return Variation_149
        if key == 'M31':
            return Variation_150
        if key == 'CPW':
            return Variation_153
        if key == 'CPC':
            return Variation_156
        if key == 'TT1':
            return Variation_81
        if key == 'DT1':
            return Variation_157
        if key == 'AC1':
            return Variation_165
        if key == 'MS1':
            return Variation_166
        if key == 'FP1':
            return Variation_168
        if key == 'CF1':
            return Variation_169
        assert_never(key)

    def __init__(self, arg : Optional[Variation_170_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AI1'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['M31'], val : Union[Variation_150, Variation_150_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['CPW'], val : Union[Variation_153, Variation_153_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['CPC'], val : Union[Variation_156, Variation_156_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['TT1'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['DT1'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['AC1'], val : Union[Variation_165, Variation_165_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['MS1'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['FP1'], val : Union[Variation_168, Variation_168_Arg]) -> 'Variation_170':
        ...

    @overload
    def set_item(self, name : Literal['CF1'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_170':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AI1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['M31']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['CPW']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['CPC']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['TT1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['DT1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['AC1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['MS1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['FP1']) -> 'Variation_170':
        ...

    @overload
    def del_item(self, name : Literal['CF1']) -> 'Variation_170':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AI1']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['M31']) -> Variation_150:
        ...

    @overload
    def get_item(self, name : Literal['CPW']) -> Variation_153:
        ...

    @overload
    def get_item(self, name : Literal['CPC']) -> Variation_156:
        ...

    @overload
    def get_item(self, name : Literal['TT1']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['DT1']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['AC1']) -> Variation_165:
        ...

    @overload
    def get_item(self, name : Literal['MS1']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['FP1']) -> Variation_168:
        ...

    @overload
    def get_item(self, name : Literal['CF1']) -> Variation_169:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_171_Arg : TypeAlias = Raw
class Variation_171(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Conflict not predicted to occur in military airspace',
        1: 'Conflict predicted to occur in military airspace',
    }

    def __init__(self, arg : Variation_171_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_172_Arg : TypeAlias = Raw
class Variation_172(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Conflict not predicted to occur in civil airspace',
        1: 'Conflict predicted to occur in civil airspace',
    }

    def __init__(self, arg : Variation_172_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_173_Arg : TypeAlias = Raw
class Variation_173(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Aircraft are not fast diverging laterally at current time',
        1: 'Aircraft are fast diverging laterally at current time',
    }

    def __init__(self, arg : Variation_173_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_174_Arg : TypeAlias = Raw
class Variation_174(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Aircraft are not fast diverging vertically at current time',
        1: 'Aircraft are fast diverging vertically at current time',
    }

    def __init__(self, arg : Variation_174_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_175_Arg : TypeAlias = Raw
class Variation_175(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Minor separation infringement',
        1: 'Major separation infringement',
    }

    def __init__(self, arg : Variation_175_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_176_Arg : TypeAlias = Raw
class Variation_176(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Aircraft have not crossed at starting time of conflict',
        1: 'Aircraft have crossed at starting time of conflict',
    }

    def __init__(self, arg : Variation_176_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_177_Arg : TypeAlias = Raw
class Variation_177(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Aircraft are not diverging at starting time of conflict',
        1: 'Aircraft are diverging at starting time of conflict',
    }

    def __init__(self, arg : Variation_177_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_178_Arg : TypeAlias = Raw
class Variation_178(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Runway/Runway Crossing',
    }

    def __init__(self, arg : Variation_178_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_179_Arg : TypeAlias = Raw
class Variation_179(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Runway/Taxiway Crossing',
    }

    def __init__(self, arg : Variation_179_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_180_Arg : TypeAlias = Raw
class Variation_180(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 4 (MSAW) indicates MRVA',
    }

    def __init__(self, arg : Variation_180_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_181_Arg : TypeAlias = Raw
class Variation_181(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 25 (VRAM) indicates CRM',
    }

    def __init__(self, arg : Variation_181_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_182_Arg : TypeAlias = Raw
class Variation_182(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 25 (VRAM) indicates VRM',
    }

    def __init__(self, arg : Variation_182_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_183_Arg : TypeAlias = Raw
class Variation_183(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 25 (VRAM) indicates VTM',
    }

    def __init__(self, arg : Variation_183_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_184_Arg : TypeAlias = Raw
class Variation_184(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 29 (HAM) indicates HD',
    }

    def __init__(self, arg : Variation_184_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_185_Arg : TypeAlias = Raw
class Variation_185(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 29 (HAM) indicates RD',
    }

    def __init__(self, arg : Variation_185_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_186_Arg : TypeAlias = Raw
class Variation_186(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 29 (HAM) indicates VD',
    }

    def __init__(self, arg : Variation_186_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_187_Arg : TypeAlias = Raw
class Variation_187(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 20 (DBPSM) indicates ARR',
    }

    def __init__(self, arg : Variation_187_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_188_Arg : TypeAlias = Raw
class Variation_188(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 20 (DBPSM) indicates DEP',
    }

    def __init__(self, arg : Variation_188_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_189_Arg : TypeAlias = Raw
class Variation_189(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 20 (DBPSM) indicates above TL',
    }

    def __init__(self, arg : Variation_189_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_190_Arg : TypeAlias = Raw
class Variation_190(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Msg Type 99 (AIW) indicates pAIW Alert',
    }

    def __init__(self, arg : Variation_190_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_191_Arg_Group_1 = TypedDict('Variation_191_Arg_Group_1', {
    'MAS': Union[Variation_171, Variation_171_Arg],
    'CAS': Union[Variation_172, Variation_172_Arg],
    'FLD': Union[Variation_173, Variation_173_Arg],
    'FVD': Union[Variation_174, Variation_174_Arg],
    'TYPE': Union[Variation_175, Variation_175_Arg],
    'CROSS': Union[Variation_176, Variation_176_Arg],
    'DIV': Union[Variation_177, Variation_177_Arg],
})
Variation_191_Arg_Group_2 = TypedDict('Variation_191_Arg_Group_2', {
    'MAS': Union[Variation_171, Variation_171_Arg],
    'CAS': Union[Variation_172, Variation_172_Arg],
    'FLD': Union[Variation_173, Variation_173_Arg],
    'FVD': Union[Variation_174, Variation_174_Arg],
    'TYPE': Union[Variation_175, Variation_175_Arg],
    'CROSS': Union[Variation_176, Variation_176_Arg],
    'DIV': Union[Variation_177, Variation_177_Arg],
    'RRC': Union[Variation_178, Variation_178_Arg],
    'RTC': Union[Variation_179, Variation_179_Arg],
    'MRVA': Union[Variation_180, Variation_180_Arg],
    'VRAMCRM': Union[Variation_181, Variation_181_Arg],
    'VRAMVRM': Union[Variation_182, Variation_182_Arg],
    'VRAMVTM': Union[Variation_183, Variation_183_Arg],
    'HAMHD': Union[Variation_184, Variation_184_Arg],
})
Variation_191_Arg_Group_3 = TypedDict('Variation_191_Arg_Group_3', {
    'MAS': Union[Variation_171, Variation_171_Arg],
    'CAS': Union[Variation_172, Variation_172_Arg],
    'FLD': Union[Variation_173, Variation_173_Arg],
    'FVD': Union[Variation_174, Variation_174_Arg],
    'TYPE': Union[Variation_175, Variation_175_Arg],
    'CROSS': Union[Variation_176, Variation_176_Arg],
    'DIV': Union[Variation_177, Variation_177_Arg],
    'RRC': Union[Variation_178, Variation_178_Arg],
    'RTC': Union[Variation_179, Variation_179_Arg],
    'MRVA': Union[Variation_180, Variation_180_Arg],
    'VRAMCRM': Union[Variation_181, Variation_181_Arg],
    'VRAMVRM': Union[Variation_182, Variation_182_Arg],
    'VRAMVTM': Union[Variation_183, Variation_183_Arg],
    'HAMHD': Union[Variation_184, Variation_184_Arg],
    'HAMRD': Union[Variation_185, Variation_185_Arg],
    'HAMVD': Union[Variation_186, Variation_186_Arg],
    'DBPSMARR': Union[Variation_187, Variation_187_Arg],
    'DBPSMDEP': Union[Variation_188, Variation_188_Arg],
    'DBPSMTL': Union[Variation_189, Variation_189_Arg],
    'AIW': Union[Variation_190, Variation_190_Arg],
})
Variation_191_Arg : TypeAlias = Union[
    int,
    Variation_191_Arg_Group_1,
    Tuple[int],
    Variation_191_Arg_Group_2,
    Tuple[int,int],
    Variation_191_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_191(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MAS', Variation_171),
            ('CAS', Variation_172),
            ('FLD', Variation_173),
            ('FVD', Variation_174),
            ('TYPE', Variation_175),
            ('CROSS', Variation_176),
            ('DIV', Variation_177),
        ],
        [
            ('RRC', Variation_178),
            ('RTC', Variation_179),
            ('MRVA', Variation_180),
            ('VRAMCRM', Variation_181),
            ('VRAMVRM', Variation_182),
            ('VRAMVTM', Variation_183),
            ('HAMHD', Variation_184),
        ],
        [
            ('HAMRD', Variation_185),
            ('HAMVD', Variation_186),
            ('DBPSMARR', Variation_187),
            ('DBPSMDEP', Variation_188),
            ('DBPSMTL', Variation_189),
            ('AIW', Variation_190),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MAS': ('Conflict Location in Military Airspace', Variation_171, 0, 1),
        'CAS': ('Conflict Location in Civil Airspace', Variation_172, 1, 1),
        'FLD': ('Fast Lateral Divergence', Variation_173, 2, 1),
        'FVD': ('Fast Vertical Divergence', Variation_174, 3, 1),
        'TYPE': ('Type of Separation Infringement', Variation_175, 4, 1),
        'CROSS': ('Crossing Test', Variation_176, 5, 1),
        'DIV': ('Divergence Test', Variation_177, 6, 1),
        'RRC': ('Runway/Runway Crossing in RIMCAS', Variation_178, 0, 1),
        'RTC': ('Runway/Taxiway Crossing in RIMCAS', Variation_179, 1, 1),
        'MRVA': ('', Variation_180, 2, 1),
        'VRAMCRM': ('', Variation_181, 3, 1),
        'VRAMVRM': ('', Variation_182, 4, 1),
        'VRAMVTM': ('', Variation_183, 5, 1),
        'HAMHD': ('', Variation_184, 6, 1),
        'HAMRD': ('', Variation_185, 0, 1),
        'HAMVD': ('', Variation_186, 1, 1),
        'DBPSMARR': ('', Variation_187, 2, 1),
        'DBPSMDEP': ('', Variation_188, 3, 1),
        'DBPSMTL': ('', Variation_189, 4, 1),
        'AIW': ('', Variation_190, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MAS']) -> Type[Variation_171]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CAS']) -> Type[Variation_172]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FLD']) -> Type[Variation_173]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FVD']) -> Type[Variation_174]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TYPE']) -> Type[Variation_175]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CROSS']) -> Type[Variation_176]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DIV']) -> Type[Variation_177]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RRC']) -> Type[Variation_178]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RTC']) -> Type[Variation_179]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRVA']) -> Type[Variation_180]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMCRM']) -> Type[Variation_181]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMVRM']) -> Type[Variation_182]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VRAMVTM']) -> Type[Variation_183]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMHD']) -> Type[Variation_184]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMRD']) -> Type[Variation_185]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HAMVD']) -> Type[Variation_186]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMARR']) -> Type[Variation_187]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMDEP']) -> Type[Variation_188]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DBPSMTL']) -> Type[Variation_189]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIW']) -> Type[Variation_190]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MAS'], Literal['CAS'], Literal['FLD'], Literal['FVD'], Literal['TYPE'], Literal['CROSS'], Literal['DIV'], Literal['RRC'], Literal['RTC'], Literal['MRVA'], Literal['VRAMCRM'], Literal['VRAMVRM'], Literal['VRAMVTM'], Literal['HAMHD'], Literal['HAMRD'], Literal['HAMVD'], Literal['DBPSMARR'], Literal['DBPSMDEP'], Literal['DBPSMTL'], Literal['AIW']]) -> Union[Type['Variation_171'], Type['Variation_172'], Type['Variation_173'], Type['Variation_174'], Type['Variation_175'], Type['Variation_176'], Type['Variation_177'], Type['Variation_178'], Type['Variation_179'], Type['Variation_180'], Type['Variation_181'], Type['Variation_182'], Type['Variation_183'], Type['Variation_184'], Type['Variation_185'], Type['Variation_186'], Type['Variation_187'], Type['Variation_188'], Type['Variation_189'], Type['Variation_190']]:
        if key == 'MAS':
            return Variation_171
        if key == 'CAS':
            return Variation_172
        if key == 'FLD':
            return Variation_173
        if key == 'FVD':
            return Variation_174
        if key == 'TYPE':
            return Variation_175
        if key == 'CROSS':
            return Variation_176
        if key == 'DIV':
            return Variation_177
        if key == 'RRC':
            return Variation_178
        if key == 'RTC':
            return Variation_179
        if key == 'MRVA':
            return Variation_180
        if key == 'VRAMCRM':
            return Variation_181
        if key == 'VRAMVRM':
            return Variation_182
        if key == 'VRAMVTM':
            return Variation_183
        if key == 'HAMHD':
            return Variation_184
        if key == 'HAMRD':
            return Variation_185
        if key == 'HAMVD':
            return Variation_186
        if key == 'DBPSMARR':
            return Variation_187
        if key == 'DBPSMDEP':
            return Variation_188
        if key == 'DBPSMTL':
            return Variation_189
        if key == 'AIW':
            return Variation_190
        assert_never(key)

    def __init__(self, arg : Variation_191_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_191_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_191_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_191_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MAS']) -> Variation_171:
        ...

    @overload
    def get_item(self, name : Literal['CAS']) -> Variation_172:
        ...

    @overload
    def get_item(self, name : Literal['FLD']) -> Variation_173:
        ...

    @overload
    def get_item(self, name : Literal['FVD']) -> Variation_174:
        ...

    @overload
    def get_item(self, name : Literal['TYPE']) -> Variation_175:
        ...

    @overload
    def get_item(self, name : Literal['CROSS']) -> Variation_176:
        ...

    @overload
    def get_item(self, name : Literal['DIV']) -> Variation_177:
        ...

    @overload
    def get_item(self, name : Literal['RRC']) -> Variation_178:
        ...

    @overload
    def get_item(self, name : Literal['RTC']) -> Variation_179:
        ...

    @overload
    def get_item(self, name : Literal['MRVA']) -> Variation_180:
        ...

    @overload
    def get_item(self, name : Literal['VRAMCRM']) -> Variation_181:
        ...

    @overload
    def get_item(self, name : Literal['VRAMVRM']) -> Variation_182:
        ...

    @overload
    def get_item(self, name : Literal['VRAMVTM']) -> Variation_183:
        ...

    @overload
    def get_item(self, name : Literal['HAMHD']) -> Variation_184:
        ...

    @overload
    def get_item(self, name : Literal['HAMRD']) -> Variation_185:
        ...

    @overload
    def get_item(self, name : Literal['HAMVD']) -> Variation_186:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMARR']) -> Variation_187:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMDEP']) -> Variation_188:
        ...

    @overload
    def get_item(self, name : Literal['DBPSMTL']) -> Variation_189:
        ...

    @overload
    def get_item(self, name : Literal['AIW']) -> Variation_190:
        ...

    def get_item(self, name : Union[Literal['MAS'], Literal['CAS'], Literal['FLD'], Literal['FVD'], Literal['TYPE'], Literal['CROSS'], Literal['DIV'], Literal['RRC'], Literal['RTC'], Literal['MRVA'], Literal['VRAMCRM'], Literal['VRAMVRM'], Literal['VRAMVTM'], Literal['HAMHD'], Literal['HAMRD'], Literal['HAMVD'], Literal['DBPSMARR'], Literal['DBPSMDEP'], Literal['DBPSMTL'], Literal['AIW']]) -> Any:
        return self._get_item(name)

Variation_192_Arg : TypeAlias = Raw
class Variation_192(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 4

    def __init__(self, arg : Variation_192_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_193_Arg : TypeAlias = Raw
class Variation_193(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'LOW',
        1: 'HIGH',
    }

    def __init__(self, arg : Variation_193_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_194_Arg_Group = TypedDict('Variation_194_Arg_Group', {
    'TID': Union[Variation_192, Variation_192_Arg],
    'CP': Union[Variation_97, Variation_97_Arg],
    'CS': Union[Variation_193, Variation_193_Arg],
})
Variation_194_Arg : TypeAlias = Union[Raw, Variation_194_Arg_Group]
class Variation_194(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TID', Variation_192),
        ('CP', Variation_97),
        ('CS', Variation_193),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TID': ('Identification of Conflict Categories Definition Table', Variation_192, 0, 4),
        'CP': ('Conflict Properties Class', Variation_97, 4, 3),
        'CS': ('Conflict Severity', Variation_193, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CP']) -> Type[Variation_97]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CS']) -> Type[Variation_193]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TID'], Literal['CP'], Literal['CS']]) -> Union[Type['Variation_192'], Type['Variation_97'], Type['Variation_193']]:
        if key == 'TID':
            return Variation_192
        if key == 'CP':
            return Variation_97
        if key == 'CS':
            return Variation_193
        assert_never(key)

    def __init__(self, arg : Variation_194_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['CP']) -> Variation_97:
        ...

    @overload
    def get_item(self, name : Literal['CS']) -> Variation_193:
        ...

    def get_item(self, name : Union[Literal['TID'], Literal['CP'], Literal['CS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_194':
        ...

    @overload
    def set_item(self, name : Literal['CP'], val : Union[Variation_97, Variation_97_Arg]) -> 'Variation_194':
        ...

    @overload
    def set_item(self, name : Literal['CS'], val : Union[Variation_193, Variation_193_Arg]) -> 'Variation_194':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_195_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['%']]]
class Variation_195(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 1, '%')

    def __init__(self, arg : Variation_195_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_196_Arg = TypedDict('Variation_196_Arg', {
    'CN': Union[Variation_191, Variation_191_Arg],
    'CC': Union[Variation_194, Variation_194_Arg],
    'CP': Union[Variation_195, Variation_195_Arg],
    'CD': Union[Variation_81, Variation_81_Arg],
}, total=False)
class Variation_196(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('CN', Variation_191),
        ('CC', Variation_194),
        ('CP', Variation_195),
        ('CD', Variation_81),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'CN': (Variation_191, 0x80),
        'CC': (Variation_194, 0x40),
        'CP': (Variation_195, 0x20),
        'CD': (Variation_81, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CN']) -> Type[Variation_191]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CC']) -> Type[Variation_194]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CP']) -> Type[Variation_195]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CD']) -> Type[Variation_81]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CN'], Literal['CC'], Literal['CP'], Literal['CD']]) -> Union[Type['Variation_191'], Type['Variation_194'], Type['Variation_195'], Type['Variation_81']]:
        if key == 'CN':
            return Variation_191
        if key == 'CC':
            return Variation_194
        if key == 'CP':
            return Variation_195
        if key == 'CD':
            return Variation_81
        assert_never(key)

    def __init__(self, arg : Optional[Variation_196_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['CN'], val : Union[Variation_191, Variation_191_Arg]) -> 'Variation_196':
        ...

    @overload
    def set_item(self, name : Literal['CC'], val : Union[Variation_194, Variation_194_Arg]) -> 'Variation_196':
        ...

    @overload
    def set_item(self, name : Literal['CP'], val : Union[Variation_195, Variation_195_Arg]) -> 'Variation_196':
        ...

    @overload
    def set_item(self, name : Literal['CD'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_196':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['CN']) -> 'Variation_196':
        ...

    @overload
    def del_item(self, name : Literal['CC']) -> 'Variation_196':
        ...

    @overload
    def del_item(self, name : Literal['CP']) -> 'Variation_196':
        ...

    @overload
    def del_item(self, name : Literal['CD']) -> 'Variation_196':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['CN']) -> Variation_191:
        ...

    @overload
    def get_item(self, name : Literal['CC']) -> Variation_194:
        ...

    @overload
    def get_item(self, name : Literal['CP']) -> Variation_195:
        ...

    @overload
    def get_item(self, name : Literal['CD']) -> Variation_81:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_197_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_197(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 1.0, 1, 'm')

    def __init__(self, arg : Variation_197_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_198_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_198(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 25.0, 0, 'ft')

    def __init__(self, arg : Variation_198_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_199_Arg = TypedDict('Variation_199_Arg', {
    'TC': Union[Variation_81, Variation_81_Arg],
    'TCA': Union[Variation_81, Variation_81_Arg],
    'CHS': Union[Variation_197, Variation_197_Arg],
    'MHS': Union[Variation_157, Variation_157_Arg],
    'CVS': Union[Variation_198, Variation_198_Arg],
    'MVS': Union[Variation_198, Variation_198_Arg],
}, total=False)
class Variation_199(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('TC', Variation_81),
        ('TCA', Variation_81),
        ('CHS', Variation_197),
        ('MHS', Variation_157),
        ('CVS', Variation_198),
        ('MVS', Variation_198),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'TC': (Variation_81, 0x80),
        'TCA': (Variation_81, 0x40),
        'CHS': (Variation_197, 0x20),
        'MHS': (Variation_157, 0x10),
        'CVS': (Variation_198, 0x08),
        'MVS': (Variation_198, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TC']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TCA']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHS']) -> Type[Variation_197]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MHS']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CVS']) -> Type[Variation_198]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MVS']) -> Type[Variation_198]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TC'], Literal['TCA'], Literal['CHS'], Literal['MHS'], Literal['CVS'], Literal['MVS']]) -> Union[Type['Variation_81'], Type['Variation_81'], Type['Variation_197'], Type['Variation_157'], Type['Variation_198'], Type['Variation_198']]:
        if key == 'TC':
            return Variation_81
        if key == 'TCA':
            return Variation_81
        if key == 'CHS':
            return Variation_197
        if key == 'MHS':
            return Variation_157
        if key == 'CVS':
            return Variation_198
        if key == 'MVS':
            return Variation_198
        assert_never(key)

    def __init__(self, arg : Optional[Variation_199_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['TC'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_199':
        ...

    @overload
    def set_item(self, name : Literal['TCA'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_199':
        ...

    @overload
    def set_item(self, name : Literal['CHS'], val : Union[Variation_197, Variation_197_Arg]) -> 'Variation_199':
        ...

    @overload
    def set_item(self, name : Literal['MHS'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_199':
        ...

    @overload
    def set_item(self, name : Literal['CVS'], val : Union[Variation_198, Variation_198_Arg]) -> 'Variation_199':
        ...

    @overload
    def set_item(self, name : Literal['MVS'], val : Union[Variation_198, Variation_198_Arg]) -> 'Variation_199':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['TC']) -> 'Variation_199':
        ...

    @overload
    def del_item(self, name : Literal['TCA']) -> 'Variation_199':
        ...

    @overload
    def del_item(self, name : Literal['CHS']) -> 'Variation_199':
        ...

    @overload
    def del_item(self, name : Literal['MHS']) -> 'Variation_199':
        ...

    @overload
    def del_item(self, name : Literal['CVS']) -> 'Variation_199':
        ...

    @overload
    def del_item(self, name : Literal['MVS']) -> 'Variation_199':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['TC']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['TCA']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['CHS']) -> Variation_197:
        ...

    @overload
    def get_item(self, name : Literal['MHS']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['CVS']) -> Variation_198:
        ...

    @overload
    def get_item(self, name : Literal['MVS']) -> Variation_198:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_200_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_200(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 32.0, 0, 'm')

    def __init__(self, arg : Variation_200_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_201_Arg : TypeAlias = Union[Raw,str]
class Variation_201(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 48
    string_type = StringICAO()

    def __init__(self, arg : Variation_201_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_202_Arg = TypedDict('Variation_202_Arg', {
    'AN': Union[Variation_201, Variation_201_Arg],
    'CAN': Union[Variation_149, Variation_149_Arg],
    'RT1': Union[Variation_149, Variation_149_Arg],
    'RT2': Union[Variation_149, Variation_149_Arg],
    'SB': Union[Variation_149, Variation_149_Arg],
    'G': Union[Variation_149, Variation_149_Arg],
}, total=False)
class Variation_202(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('AN', Variation_201),
        ('CAN', Variation_149),
        ('RT1', Variation_149),
        ('RT2', Variation_149),
        ('SB', Variation_149),
        ('G', Variation_149),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AN': (Variation_201, 0x80),
        'CAN': (Variation_149, 0x40),
        'RT1': (Variation_149, 0x20),
        'RT2': (Variation_149, 0x10),
        'SB': (Variation_149, 0x08),
        'G': (Variation_149, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AN']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CAN']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RT1']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RT2']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SB']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_149]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AN'], Literal['CAN'], Literal['RT1'], Literal['RT2'], Literal['SB'], Literal['G']]) -> Union[Type['Variation_201'], Type['Variation_149'], Type['Variation_149'], Type['Variation_149'], Type['Variation_149'], Type['Variation_149']]:
        if key == 'AN':
            return Variation_201
        if key == 'CAN':
            return Variation_149
        if key == 'RT1':
            return Variation_149
        if key == 'RT2':
            return Variation_149
        if key == 'SB':
            return Variation_149
        if key == 'G':
            return Variation_149
        assert_never(key)

    def __init__(self, arg : Optional[Variation_202_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AN'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_202':
        ...

    @overload
    def set_item(self, name : Literal['CAN'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_202':
        ...

    @overload
    def set_item(self, name : Literal['RT1'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_202':
        ...

    @overload
    def set_item(self, name : Literal['RT2'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_202':
        ...

    @overload
    def set_item(self, name : Literal['SB'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_202':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_202':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AN']) -> 'Variation_202':
        ...

    @overload
    def del_item(self, name : Literal['CAN']) -> 'Variation_202':
        ...

    @overload
    def del_item(self, name : Literal['RT1']) -> 'Variation_202':
        ...

    @overload
    def del_item(self, name : Literal['RT2']) -> 'Variation_202':
        ...

    @overload
    def del_item(self, name : Literal['SB']) -> 'Variation_202':
        ...

    @overload
    def del_item(self, name : Literal['G']) -> 'Variation_202':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AN']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['CAN']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['RT1']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['RT2']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['SB']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_149:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_203_Arg_Group = TypedDict('Variation_203_Arg_Group', {
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_203_Arg : TypeAlias = Union[Raw, Variation_203_Arg_Group]
class Variation_203(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MODE3A': ('Mode-3/A Code (Converted Into Octal Representation) of Aircraft 2 Involved in the Conflict', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MODE3A']]) -> Union[Type['Variation_19']]:
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_203_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MODE3A']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_203':
        return self._set_item(name, val) # type: ignore

Variation_204_Arg = TypedDict('Variation_204_Arg', {
    'AI2': Union[Variation_149, Variation_149_Arg],
    'M32': Union[Variation_203, Variation_203_Arg],
    'CPW': Union[Variation_153, Variation_153_Arg],
    'CPL': Union[Variation_156, Variation_156_Arg],
    'TT2': Union[Variation_81, Variation_81_Arg],
    'DT2': Union[Variation_157, Variation_157_Arg],
    'AC2': Union[Variation_165, Variation_165_Arg],
    'MS2': Union[Variation_166, Variation_166_Arg],
    'FP2': Union[Variation_168, Variation_168_Arg],
    'CF2': Union[Variation_169, Variation_169_Arg],
}, total=False)
class Variation_204(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('AI2', Variation_149),
        ('M32', Variation_203),
        ('CPW', Variation_153),
        ('CPL', Variation_156),
        ('TT2', Variation_81),
        ('DT2', Variation_157),
        ('AC2', Variation_165),
        ('MS2', Variation_166),
        ('FP2', Variation_168),
        ('CF2', Variation_169),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AI2': (Variation_149, 0x8000),
        'M32': (Variation_203, 0x4000),
        'CPW': (Variation_153, 0x2000),
        'CPL': (Variation_156, 0x1000),
        'TT2': (Variation_81, 0x0800),
        'DT2': (Variation_157, 0x0400),
        'AC2': (Variation_165, 0x0200),
        'MS2': (Variation_166, 0x0180),
        'FP2': (Variation_168, 0x0140),
        'CF2': (Variation_169, 0x0120),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AI2']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M32']) -> Type[Variation_203]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPW']) -> Type[Variation_153]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPL']) -> Type[Variation_156]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TT2']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DT2']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AC2']) -> Type[Variation_165]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MS2']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FP2']) -> Type[Variation_168]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CF2']) -> Type[Variation_169]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AI2'], Literal['M32'], Literal['CPW'], Literal['CPL'], Literal['TT2'], Literal['DT2'], Literal['AC2'], Literal['MS2'], Literal['FP2'], Literal['CF2']]) -> Union[Type['Variation_149'], Type['Variation_203'], Type['Variation_153'], Type['Variation_156'], Type['Variation_81'], Type['Variation_157'], Type['Variation_165'], Type['Variation_166'], Type['Variation_168'], Type['Variation_169']]:
        if key == 'AI2':
            return Variation_149
        if key == 'M32':
            return Variation_203
        if key == 'CPW':
            return Variation_153
        if key == 'CPL':
            return Variation_156
        if key == 'TT2':
            return Variation_81
        if key == 'DT2':
            return Variation_157
        if key == 'AC2':
            return Variation_165
        if key == 'MS2':
            return Variation_166
        if key == 'FP2':
            return Variation_168
        if key == 'CF2':
            return Variation_169
        assert_never(key)

    def __init__(self, arg : Optional[Variation_204_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AI2'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['M32'], val : Union[Variation_203, Variation_203_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['CPW'], val : Union[Variation_153, Variation_153_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['CPL'], val : Union[Variation_156, Variation_156_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['TT2'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['DT2'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['AC2'], val : Union[Variation_165, Variation_165_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['MS2'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['FP2'], val : Union[Variation_168, Variation_168_Arg]) -> 'Variation_204':
        ...

    @overload
    def set_item(self, name : Literal['CF2'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_204':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AI2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['M32']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['CPW']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['CPL']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['TT2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['DT2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['AC2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['MS2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['FP2']) -> 'Variation_204':
        ...

    @overload
    def del_item(self, name : Literal['CF2']) -> 'Variation_204':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AI2']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['M32']) -> Variation_203:
        ...

    @overload
    def get_item(self, name : Literal['CPW']) -> Variation_153:
        ...

    @overload
    def get_item(self, name : Literal['CPL']) -> Variation_156:
        ...

    @overload
    def get_item(self, name : Literal['TT2']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['DT2']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['AC2']) -> Variation_165:
        ...

    @overload
    def get_item(self, name : Literal['MS2']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['FP2']) -> Variation_168:
        ...

    @overload
    def get_item(self, name : Literal['CF2']) -> Variation_169:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_205_Arg_Group = TypedDict('Variation_205_Arg_Group', {
    'CEN': Union[Variation_0, Variation_0_Arg],
    'POS': Union[Variation_0, Variation_0_Arg],
})
Variation_205_Arg : TypeAlias = Union[Raw, Variation_205_Arg_Group]
class Variation_205(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('CEN', Variation_0),
        ('POS', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CEN': ('', Variation_0, 0, 8),
        'POS': ('', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CEN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CEN'], Literal['POS']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'CEN':
            return Variation_0
        if key == 'POS':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_205_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CEN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['CEN'], Literal['POS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CEN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_205':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_205':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_206_Arg : TypeAlias = List[Union[Variation_205, Variation_205_Arg]]
class Variation_206(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_205

    @classmethod
    def spec(cls) -> Type[Variation_205]:
        return Variation_205

    def __init__(self, arg : List[Union[Variation_205, Variation_205_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_207_Arg = TypedDict('Variation_207_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_95, Variation_95_Arg],
    '015': Union[Variation_96, Variation_96_Arg],
    '020': Union[Variation_81, Variation_81_Arg],
    '040': Union[Variation_64, Variation_64_Arg],
    '045': Union[Variation_98, Variation_98_Arg],
    '060': Union[Variation_148, Variation_148_Arg],
    '030': Union[Variation_64, Variation_64_Arg],
    '170': Union[Variation_170, Variation_170_Arg],
    '120': Union[Variation_196, Variation_196_Arg],
    '070': Union[Variation_199, Variation_199_Arg],
    '076': Union[Variation_155, Variation_155_Arg],
    '074': Union[Variation_200, Variation_200_Arg],
    '075': Union[Variation_154, Variation_154_Arg],
    '100': Union[Variation_202, Variation_202_Arg],
    '035': Union[Variation_64, Variation_64_Arg],
    '171': Union[Variation_204, Variation_204_Arg],
    '110': Union[Variation_206, Variation_206_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_207(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 3

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_95),
        ('015', Variation_96),
        ('020', Variation_81),
        ('040', Variation_64),
        ('045', Variation_98),
        ('060', Variation_148),
        ('030', Variation_64),
        ('170', Variation_170),
        ('120', Variation_196),
        ('070', Variation_199),
        ('076', Variation_155),
        ('074', Variation_200),
        ('075', Variation_154),
        ('100', Variation_202),
        ('035', Variation_64),
        ('171', Variation_204),
        ('110', Variation_206),
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x800000),
        '000': (Variation_95, 0x400000),
        '015': (Variation_96, 0x200000),
        '020': (Variation_81, 0x100000),
        '040': (Variation_64, 0x080000),
        '045': (Variation_98, 0x040000),
        '060': (Variation_148, 0x020000),
        '030': (Variation_64, 0x018000),
        '170': (Variation_170, 0x014000),
        '120': (Variation_196, 0x012000),
        '070': (Variation_199, 0x011000),
        '076': (Variation_155, 0x010800),
        '074': (Variation_200, 0x010400),
        '075': (Variation_154, 0x010200),
        '100': (Variation_202, 0x010180),
        '035': (Variation_64, 0x010140),
        '171': (Variation_204, 0x010120),
        '110': (Variation_206, 0x010110),
        'RE': (Variation_62, 0x010104),
        'SP': (Variation_62, 0x010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_95]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_96]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['045']) -> Type[Variation_98]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_148]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_170]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_196]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_199]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_155]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_200]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_202]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['035']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['171']) -> Type[Variation_204]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_206]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['020'], Literal['040'], Literal['045'], Literal['060'], Literal['030'], Literal['170'], Literal['120'], Literal['070'], Literal['076'], Literal['074'], Literal['075'], Literal['100'], Literal['035'], Literal['171'], Literal['110'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_95'], Type['Variation_96'], Type['Variation_81'], Type['Variation_64'], Type['Variation_98'], Type['Variation_148'], Type['Variation_64'], Type['Variation_170'], Type['Variation_196'], Type['Variation_199'], Type['Variation_155'], Type['Variation_200'], Type['Variation_154'], Type['Variation_202'], Type['Variation_64'], Type['Variation_204'], Type['Variation_206'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_95
        if key == '015':
            return Variation_96
        if key == '020':
            return Variation_81
        if key == '040':
            return Variation_64
        if key == '045':
            return Variation_98
        if key == '060':
            return Variation_148
        if key == '030':
            return Variation_64
        if key == '170':
            return Variation_170
        if key == '120':
            return Variation_196
        if key == '070':
            return Variation_199
        if key == '076':
            return Variation_155
        if key == '074':
            return Variation_200
        if key == '075':
            return Variation_154
        if key == '100':
            return Variation_202
        if key == '035':
            return Variation_64
        if key == '171':
            return Variation_204
        if key == '110':
            return Variation_206
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_207_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_95, Variation_95_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_96, Variation_96_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['045'], val : Union[Variation_98, Variation_98_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_148, Variation_148_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_170, Variation_170_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_196, Variation_196_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_199, Variation_199_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_155, Variation_155_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_200, Variation_200_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_202, Variation_202_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['035'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['171'], val : Union[Variation_204, Variation_204_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_206, Variation_206_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_207':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_207':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['045']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['035']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['171']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_207':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_207':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_95:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_96:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['045']) -> Variation_98:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_148:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_170:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_196:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_199:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_155:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_200:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_154:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_202:
        ...

    @overload
    def get_item(self, name : Literal['035']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['171']) -> Variation_204:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_206:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_208_Arg : TypeAlias = Raw
class Variation_208(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Polar vector',
        2: 'Cartesian vector of start point/length',
        3: 'Contour record',
        4: 'Cartesian start point and end point vector',
        254: 'SOP message',
        255: 'EOP message',
    }

    def __init__(self, arg : Variation_208_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_209_Arg : TypeAlias = Raw
class Variation_209(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Local Coordinates',
        1: 'System Coordinates',
    }

    def __init__(self, arg : Variation_209_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_210_Arg : TypeAlias = Raw
class Variation_210(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 3

    def __init__(self, arg : Variation_210_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_211_Arg : TypeAlias = Raw
class Variation_211(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3
    table = {
        0: '0°',
        1: '22.5°',
        2: '45°',
        3: '67.5°',
        4: '90°',
        5: '112.5°',
        6: '135°',
        7: '157.5°',
    }

    def __init__(self, arg : Variation_211_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_212_Arg : TypeAlias = Raw
class Variation_212(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Test vector',
    }

    def __init__(self, arg : Variation_212_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_213_Arg : TypeAlias = Raw
class Variation_213(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Error condition encountered',
    }

    def __init__(self, arg : Variation_213_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_214_Arg_Group_1 = TypedDict('Variation_214_Arg_Group_1', {
    'ORG': Union[Variation_209, Variation_209_Arg],
    'I': Union[Variation_210, Variation_210_Arg],
    'S': Union[Variation_211, Variation_211_Arg],
})
Variation_214_Arg_Group_2 = TypedDict('Variation_214_Arg_Group_2', {
    'ORG': Union[Variation_209, Variation_209_Arg],
    'I': Union[Variation_210, Variation_210_Arg],
    'S': Union[Variation_211, Variation_211_Arg],
    'TST': Union[Variation_212, Variation_212_Arg],
    'ER': Union[Variation_213, Variation_213_Arg],
})
Variation_214_Arg : TypeAlias = Union[
    int,
    Variation_214_Arg_Group_1,
    Tuple[int],
    Variation_214_Arg_Group_2,
    Tuple[int,int],
]
class Variation_214(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('ORG', Variation_209),
            ('I', Variation_210),
            ('S', Variation_211),
        ],
        [
            Spare(0, 5),
            ('TST', Variation_212),
            ('ER', Variation_213),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ORG': ('', Variation_209, 0, 1),
        'I': ('Intensity Level', Variation_210, 1, 3),
        'S': ('Shading Orientation with Respect to North', Variation_211, 4, 3),
        'TST': ('', Variation_212, 5, 1),
        'ER': ('', Variation_213, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ORG']) -> Type[Variation_209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I']) -> Type[Variation_210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['S']) -> Type[Variation_211]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_212]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ER']) -> Type[Variation_213]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ORG'], Literal['I'], Literal['S'], Literal['TST'], Literal['ER']]) -> Union[Type['Variation_209'], Type['Variation_210'], Type['Variation_211'], Type['Variation_212'], Type['Variation_213']]:
        if key == 'ORG':
            return Variation_209
        if key == 'I':
            return Variation_210
        if key == 'S':
            return Variation_211
        if key == 'TST':
            return Variation_212
        if key == 'ER':
            return Variation_213
        assert_never(key)

    def __init__(self, arg : Variation_214_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_214_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_214_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ORG']) -> Variation_209:
        ...

    @overload
    def get_item(self, name : Literal['I']) -> Variation_210:
        ...

    @overload
    def get_item(self, name : Literal['S']) -> Variation_211:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_212:
        ...

    @overload
    def get_item(self, name : Literal['ER']) -> Variation_213:
        ...

    def get_item(self, name : Union[Literal['ORG'], Literal['I'], Literal['S'], Literal['TST'], Literal['ER']]) -> Any:
        return self._get_item(name)

Variation_215_Arg_Group = TypedDict('Variation_215_Arg_Group', {
    'X': Union[Variation_0, Variation_0_Arg],
    'Y': Union[Variation_0, Variation_0_Arg],
    'LENGTH': Union[Variation_0, Variation_0_Arg],
})
Variation_215_Arg : TypeAlias = Union[Raw, Variation_215_Arg_Group]
class Variation_215(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('X', Variation_0),
        ('Y', Variation_0),
        ('LENGTH', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-Component', Variation_0, 0, 8),
        'Y': ('Y-Component', Variation_0, 8, 8),
        'LENGTH': ('Length', Variation_0, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LENGTH']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['LENGTH']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_0']]:
        if key == 'X':
            return Variation_0
        if key == 'Y':
            return Variation_0
        if key == 'LENGTH':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_215_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['LENGTH']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['LENGTH']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_215':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_215':
        ...

    @overload
    def set_item(self, name : Literal['LENGTH'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_215':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_216_Arg : TypeAlias = List[Union[Variation_215, Variation_215_Arg]]
class Variation_216(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_215

    @classmethod
    def spec(cls) -> Type[Variation_215]:
        return Variation_215

    def __init__(self, arg : List[Union[Variation_215, Variation_215_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_217_Arg_Group = TypedDict('Variation_217_Arg_Group', {
    'STR': Union[Variation_0, Variation_0_Arg],
    'ENDR': Union[Variation_0, Variation_0_Arg],
    'AZ': Union[Variation_14, Variation_14_Arg],
})
Variation_217_Arg : TypeAlias = Union[Raw, Variation_217_Arg_Group]
class Variation_217(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('STR', Variation_0),
        ('ENDR', Variation_0),
        ('AZ', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STR': ('Start Range', Variation_0, 0, 8),
        'ENDR': ('End Range', Variation_0, 8, 8),
        'AZ': ('Azimuth', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STR']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ENDR']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AZ']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STR'], Literal['ENDR'], Literal['AZ']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_14']]:
        if key == 'STR':
            return Variation_0
        if key == 'ENDR':
            return Variation_0
        if key == 'AZ':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_217_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STR']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['ENDR']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['AZ']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['STR'], Literal['ENDR'], Literal['AZ']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STR'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_217':
        ...

    @overload
    def set_item(self, name : Literal['ENDR'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_217':
        ...

    @overload
    def set_item(self, name : Literal['AZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_217':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_218_Arg : TypeAlias = List[Union[Variation_217, Variation_217_Arg]]
class Variation_218(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_217

    @classmethod
    def spec(cls) -> Type[Variation_217]:
        return Variation_217

    def __init__(self, arg : List[Union[Variation_217, Variation_217_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_219_Arg : TypeAlias = Raw
class Variation_219(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 2
    table = {
        0: 'Intermediate record of a contour',
        1: 'Last record of a contour of at least two records',
        2: 'First record of a contour of at least two records',
        3: 'First and only record, fully defining a contour',
    }

    def __init__(self, arg : Variation_219_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_220_Arg_Group = TypedDict('Variation_220_Arg_Group', {
    'ORG': Union[Variation_209, Variation_209_Arg],
    'I': Union[Variation_210, Variation_210_Arg],
    'FSTLST': Union[Variation_219, Variation_219_Arg],
    'CSN': Union[Variation_0, Variation_0_Arg],
})
Variation_220_Arg : TypeAlias = Union[Raw, Variation_220_Arg_Group]
class Variation_220(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('ORG', Variation_209),
        ('I', Variation_210),
        Spare(4, 2),
        ('FSTLST', Variation_219),
        ('CSN', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ORG': ('', Variation_209, 0, 1),
        'I': ('Intensity Level', Variation_210, 1, 3),
        'FSTLST': ('', Variation_219, 6, 2),
        'CSN': ('Contour Serial Number', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ORG']) -> Type[Variation_209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I']) -> Type[Variation_210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSTLST']) -> Type[Variation_219]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSN']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ORG'], Literal['I'], Literal['FSTLST'], Literal['CSN']]) -> Union[Type['Variation_209'], Type['Variation_210'], Type['Variation_219'], Type['Variation_0']]:
        if key == 'ORG':
            return Variation_209
        if key == 'I':
            return Variation_210
        if key == 'FSTLST':
            return Variation_219
        if key == 'CSN':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_220_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ORG']) -> Variation_209:
        ...

    @overload
    def get_item(self, name : Literal['I']) -> Variation_210:
        ...

    @overload
    def get_item(self, name : Literal['FSTLST']) -> Variation_219:
        ...

    @overload
    def get_item(self, name : Literal['CSN']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['ORG'], Literal['I'], Literal['FSTLST'], Literal['CSN']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ORG'], val : Union[Variation_209, Variation_209_Arg]) -> 'Variation_220':
        ...

    @overload
    def set_item(self, name : Literal['I'], val : Union[Variation_210, Variation_210_Arg]) -> 'Variation_220':
        ...

    @overload
    def set_item(self, name : Literal['FSTLST'], val : Union[Variation_219, Variation_219_Arg]) -> 'Variation_220':
        ...

    @overload
    def set_item(self, name : Literal['CSN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_220':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_221_Arg_Group = TypedDict('Variation_221_Arg_Group', {
    'X1': Union[Variation_0, Variation_0_Arg],
    'Y1': Union[Variation_0, Variation_0_Arg],
})
Variation_221_Arg : TypeAlias = Union[Raw, Variation_221_Arg_Group]
class Variation_221(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X1', Variation_0),
        ('Y1', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X1': ('', Variation_0, 0, 8),
        'Y1': ('', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X1']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y1']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X1'], Literal['Y1']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'X1':
            return Variation_0
        if key == 'Y1':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_221_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X1']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['Y1']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['X1'], Literal['Y1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X1'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_221':
        ...

    @overload
    def set_item(self, name : Literal['Y1'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_221':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_222_Arg : TypeAlias = List[Union[Variation_221, Variation_221_Arg]]
class Variation_222(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_221

    @classmethod
    def spec(cls) -> Type[Variation_221]:
        return Variation_221

    def __init__(self, arg : List[Union[Variation_221, Variation_221_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_223_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_223(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5
    quantity = Quantity('Signed', 1.0, 0, '')

    def __init__(self, arg : Variation_223_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_224_Arg : TypeAlias = Raw
class Variation_224(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 3

    def __init__(self, arg : Variation_224_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_225_Arg : TypeAlias = Raw
class Variation_225(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 15

    def __init__(self, arg : Variation_225_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_226_Arg_Group_1 = TypedDict('Variation_226_Arg_Group_1', {
    'F': Union[Variation_223, Variation_223_Arg],
    'R': Union[Variation_224, Variation_224_Arg],
    'Q': Union[Variation_225, Variation_225_Arg],
})
Variation_226_Arg : TypeAlias = Union[
    int,
    Variation_226_Arg_Group_1,
    Tuple[int],
]
class Variation_226(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 24
    ext_bit_size = 8
    groups_bit_sizes = [
        23,
    ]

    subitems_list = [
        [
            ('F', Variation_223),
            ('R', Variation_224),
            ('Q', Variation_225),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'F': ('Scaling Factor', Variation_223, 0, 5),
        'R': ('Current Reduction Stage in Use', Variation_224, 5, 3),
        'Q': ('Processing Parameters', Variation_225, 0, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['F']) -> Type[Variation_223]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['R']) -> Type[Variation_224]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Q']) -> Type[Variation_225]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['F'], Literal['R'], Literal['Q']]) -> Union[Type['Variation_223'], Type['Variation_224'], Type['Variation_225']]:
        if key == 'F':
            return Variation_223
        if key == 'R':
            return Variation_224
        if key == 'Q':
            return Variation_225
        assert_never(key)

    def __init__(self, arg : Variation_226_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_226_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['F']) -> Variation_223:
        ...

    @overload
    def get_item(self, name : Literal['R']) -> Variation_224:
        ...

    @overload
    def get_item(self, name : Literal['Q']) -> Variation_225:
        ...

    def get_item(self, name : Union[Literal['F'], Literal['R'], Literal['Q']]) -> Any:
        return self._get_item(name)

Variation_227_Arg_Group_1 = TypedDict('Variation_227_Arg_Group_1', {
    'DATA': Union[Variation_23, Variation_23_Arg],
})
Variation_227_Arg : TypeAlias = Union[
    int,
    Variation_227_Arg_Group_1,
    Tuple[int],
]
class Variation_227(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('DATA', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DATA': ('Unspecified Data', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['DATA']]) -> Union[Type['Variation_23']]:
        if key == 'DATA':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_227_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_227_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['DATA']) -> Any:
        return self._get_item(name)

Variation_228_Arg_Group = TypedDict('Variation_228_Arg_Group', {
    'X1': Union[Variation_0, Variation_0_Arg],
    'Y1': Union[Variation_0, Variation_0_Arg],
    'X2': Union[Variation_0, Variation_0_Arg],
    'Y2': Union[Variation_0, Variation_0_Arg],
})
Variation_228_Arg : TypeAlias = Union[Raw, Variation_228_Arg_Group]
class Variation_228(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X1', Variation_0),
        ('Y1', Variation_0),
        ('X2', Variation_0),
        ('Y2', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X1': ('X1-Component', Variation_0, 0, 8),
        'Y1': ('Y1-Component', Variation_0, 8, 8),
        'X2': ('X2-Component', Variation_0, 16, 8),
        'Y2': ('Y2-Component', Variation_0, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X1']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y1']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X2']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y2']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X1'], Literal['Y1'], Literal['X2'], Literal['Y2']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_0'], Type['Variation_0']]:
        if key == 'X1':
            return Variation_0
        if key == 'Y1':
            return Variation_0
        if key == 'X2':
            return Variation_0
        if key == 'Y2':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_228_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X1']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['Y1']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['X2']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['Y2']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['X1'], Literal['Y1'], Literal['X2'], Literal['Y2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X1'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_228':
        ...

    @overload
    def set_item(self, name : Literal['Y1'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_228':
        ...

    @overload
    def set_item(self, name : Literal['X2'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_228':
        ...

    @overload
    def set_item(self, name : Literal['Y2'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_228':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_229_Arg : TypeAlias = List[Union[Variation_228, Variation_228_Arg]]
class Variation_229(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_228

    @classmethod
    def spec(cls) -> Type[Variation_228]:
        return Variation_228

    def __init__(self, arg : List[Union[Variation_228, Variation_228_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_230_Arg = TypedDict('Variation_230_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_208, Variation_208_Arg],
    '020': Union[Variation_214, Variation_214_Arg],
    '036': Union[Variation_216, Variation_216_Arg],
    '034': Union[Variation_218, Variation_218_Arg],
    '040': Union[Variation_220, Variation_220_Arg],
    '050': Union[Variation_222, Variation_222_Arg],
    '090': Union[Variation_81, Variation_81_Arg],
    '100': Union[Variation_226, Variation_226_Arg],
    '110': Union[Variation_227, Variation_227_Arg],
    '120': Union[Variation_64, Variation_64_Arg],
    '038': Union[Variation_229, Variation_229_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RFS': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_230(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_208),
        ('020', Variation_214),
        ('036', Variation_216),
        ('034', Variation_218),
        ('040', Variation_220),
        ('050', Variation_222),
        ('090', Variation_81),
        ('100', Variation_226),
        ('110', Variation_227),
        ('120', Variation_64),
        ('038', Variation_229),
        ('SP', Variation_62),
        ('RFS', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_208, 0x4000),
        '020': (Variation_214, 0x2000),
        '036': (Variation_216, 0x1000),
        '034': (Variation_218, 0x0800),
        '040': (Variation_220, 0x0400),
        '050': (Variation_222, 0x0200),
        '090': (Variation_81, 0x0180),
        '100': (Variation_226, 0x0140),
        '110': (Variation_227, 0x0120),
        '120': (Variation_64, 0x0110),
        '038': (Variation_229, 0x0108),
        'SP': (Variation_62, 0x0104),
        'RFS': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_208]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_214]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['036']) -> Type[Variation_216]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['034']) -> Type[Variation_218]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_220]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_222]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_226]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_227]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['038']) -> Type[Variation_229]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RFS']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['020'], Literal['036'], Literal['034'], Literal['040'], Literal['050'], Literal['090'], Literal['100'], Literal['110'], Literal['120'], Literal['038'], Literal['SP'], Literal['RFS']]) -> Union[Type['Variation_1'], Type['Variation_208'], Type['Variation_214'], Type['Variation_216'], Type['Variation_218'], Type['Variation_220'], Type['Variation_222'], Type['Variation_81'], Type['Variation_226'], Type['Variation_227'], Type['Variation_64'], Type['Variation_229'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_208
        if key == '020':
            return Variation_214
        if key == '036':
            return Variation_216
        if key == '034':
            return Variation_218
        if key == '040':
            return Variation_220
        if key == '050':
            return Variation_222
        if key == '090':
            return Variation_81
        if key == '100':
            return Variation_226
        if key == '110':
            return Variation_227
        if key == '120':
            return Variation_64
        if key == '038':
            return Variation_229
        if key == 'SP':
            return Variation_62
        if key == 'RFS':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_230_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_208, Variation_208_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_214, Variation_214_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['036'], val : Union[Variation_216, Variation_216_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['034'], val : Union[Variation_218, Variation_218_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_220, Variation_220_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_222, Variation_222_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_226, Variation_226_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_227, Variation_227_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['038'], val : Union[Variation_229, Variation_229_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_230':
        ...

    @overload
    def set_item(self, name : Literal['RFS'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_230':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['036']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['034']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['038']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_230':
        ...

    @overload
    def del_item(self, name : Literal['RFS']) -> 'Variation_230':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_208:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_214:
        ...

    @overload
    def get_item(self, name : Literal['036']) -> Variation_216:
        ...

    @overload
    def get_item(self, name : Literal['034']) -> Variation_218:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_220:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_222:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_226:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_227:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['038']) -> Variation_229:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RFS']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_231_Arg : TypeAlias = Raw
class Variation_231(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        2: 'Cartesian vector',
        253: 'Intermediate-update-step message',
        254: 'Start-of-picture message',
        255: 'End-of-picture message',
    }

    def __init__(self, arg : Variation_231_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_232_Arg_Group_1 = TypedDict('Variation_232_Arg_Group_1', {
    'ORG': Union[Variation_209, Variation_209_Arg],
    'I': Union[Variation_210, Variation_210_Arg],
    'S': Union[Variation_211, Variation_211_Arg],
})
Variation_232_Arg : TypeAlias = Union[
    int,
    Variation_232_Arg_Group_1,
    Tuple[int],
]
class Variation_232(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('ORG', Variation_209),
            ('I', Variation_210),
            ('S', Variation_211),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ORG': ('', Variation_209, 0, 1),
        'I': ('Intensity Level', Variation_210, 1, 3),
        'S': ('Shading Orientation with Respect to North', Variation_211, 4, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ORG']) -> Type[Variation_209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I']) -> Type[Variation_210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['S']) -> Type[Variation_211]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ORG'], Literal['I'], Literal['S']]) -> Union[Type['Variation_209'], Type['Variation_210'], Type['Variation_211']]:
        if key == 'ORG':
            return Variation_209
        if key == 'I':
            return Variation_210
        if key == 'S':
            return Variation_211
        assert_never(key)

    def __init__(self, arg : Variation_232_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_232_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ORG']) -> Variation_209:
        ...

    @overload
    def get_item(self, name : Literal['I']) -> Variation_210:
        ...

    @overload
    def get_item(self, name : Literal['S']) -> Variation_211:
        ...

    def get_item(self, name : Union[Literal['ORG'], Literal['I'], Literal['S']]) -> Any:
        return self._get_item(name)

Variation_233_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_233(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 0, 'NM')

    def __init__(self, arg : Variation_233_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_234_Arg_Group = TypedDict('Variation_234_Arg_Group', {
    'X': Union[Variation_233, Variation_233_Arg],
    'Y': Union[Variation_233, Variation_233_Arg],
    'L': Union[Variation_64, Variation_64_Arg],
})
Variation_234_Arg : TypeAlias = Union[Raw, Variation_234_Arg_Group]
class Variation_234(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('X', Variation_233),
        ('Y', Variation_233),
        ('L', Variation_64),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-coordinate', Variation_233, 0, 16),
        'Y': ('Y-coordinate', Variation_233, 16, 16),
        'L': ('Vector Length', Variation_64, 32, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_233]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_233]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_64]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['L']]) -> Union[Type['Variation_233'], Type['Variation_233'], Type['Variation_64']]:
        if key == 'X':
            return Variation_233
        if key == 'Y':
            return Variation_233
        if key == 'L':
            return Variation_64
        assert_never(key)

    def __init__(self, arg : Variation_234_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_233:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_233:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_64:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['L']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_233, Variation_233_Arg]) -> 'Variation_234':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_233, Variation_233_Arg]) -> 'Variation_234':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_234':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_235_Arg : TypeAlias = List[Union[Variation_234, Variation_234_Arg]]
class Variation_235(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 48
    variation_type = Variation_234

    @classmethod
    def spec(cls) -> Type[Variation_234]:
        return Variation_234

    def __init__(self, arg : List[Union[Variation_234, Variation_234_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_236_Arg : TypeAlias = Raw
class Variation_236(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 6

    def __init__(self, arg : Variation_236_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_237_Arg_Group_1 = TypedDict('Variation_237_Arg_Group_1', {
    'SN': Union[Variation_236, Variation_236_Arg],
})
Variation_237_Arg : TypeAlias = Union[
    int,
    Variation_237_Arg_Group_1,
    Tuple[int],
]
class Variation_237(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('SN', Variation_236),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SN': ('Step Number', Variation_236, 0, 6),
    }

    @classmethod
    def spec(cls, key : Union[Literal['SN']]) -> Union[Type['Variation_236']]:
        if key == 'SN':
            return Variation_236
        assert_never(key)

    def __init__(self, arg : Variation_237_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_237_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['SN']) -> Any:
        return self._get_item(name)

Variation_238_Arg : TypeAlias = Raw
class Variation_238(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1

    def __init__(self, arg : Variation_238_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_239_Arg : TypeAlias = Raw
class Variation_239(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1

    def __init__(self, arg : Variation_239_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_240_Arg_Group = TypedDict('Variation_240_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
    'CP': Union[Variation_238, Variation_238_Arg],
    'WO': Union[Variation_239, Variation_239_Arg],
    'R': Union[Variation_224, Variation_224_Arg],
})
Variation_240_Arg : TypeAlias = Union[Raw, Variation_240_Arg_Group]
class Variation_240(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
        Spare(0, 3),
        ('CP', Variation_238),
        ('WO', Variation_239),
        ('R', Variation_224),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('SAC of Radar Concerned', Variation_0, 0, 8),
        'SIC': ('SIC of Radar Concerned', Variation_0, 8, 8),
        'CP': ('Circular Polarisation', Variation_238, 19, 1),
        'WO': ('Weather Channel Overload', Variation_239, 20, 1),
        'R': ('Reduction Step in Use By Radar  Concerned', Variation_224, 21, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CP']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WO']) -> Type[Variation_239]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['R']) -> Type[Variation_224]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC'], Literal['CP'], Literal['WO'], Literal['R']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_238'], Type['Variation_239'], Type['Variation_224']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        if key == 'CP':
            return Variation_238
        if key == 'WO':
            return Variation_239
        if key == 'R':
            return Variation_224
        assert_never(key)

    def __init__(self, arg : Variation_240_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['CP']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['WO']) -> Variation_239:
        ...

    @overload
    def get_item(self, name : Literal['R']) -> Variation_224:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC'], Literal['CP'], Literal['WO'], Literal['R']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_240':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_240':
        ...

    @overload
    def set_item(self, name : Literal['CP'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_240':
        ...

    @overload
    def set_item(self, name : Literal['WO'], val : Union[Variation_239, Variation_239_Arg]) -> 'Variation_240':
        ...

    @overload
    def set_item(self, name : Literal['R'], val : Union[Variation_224, Variation_224_Arg]) -> 'Variation_240':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_241_Arg : TypeAlias = List[Union[Variation_240, Variation_240_Arg]]
class Variation_241(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_240

    @classmethod
    def spec(cls) -> Type[Variation_240]:
        return Variation_240

    def __init__(self, arg : List[Union[Variation_240, Variation_240_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_242_Arg = TypedDict('Variation_242_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_231, Variation_231_Arg],
    '020': Union[Variation_232, Variation_232_Arg],
    '030': Union[Variation_235, Variation_235_Arg],
    '060': Union[Variation_237, Variation_237_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '080': Union[Variation_226, Variation_226_Arg],
    '090': Union[Variation_241, Variation_241_Arg],
    '100': Union[Variation_64, Variation_64_Arg],
}, total=False)
class Variation_242(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_231),
        ('020', Variation_232),
        ('030', Variation_235),
        ('060', Variation_237),
        ('070', Variation_81),
        ('080', Variation_226),
        ('090', Variation_241),
        ('100', Variation_64),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_231, 0x4000),
        '020': (Variation_232, 0x2000),
        '030': (Variation_235, 0x1000),
        '060': (Variation_237, 0x0800),
        '070': (Variation_81, 0x0400),
        '080': (Variation_226, 0x0200),
        '090': (Variation_241, 0x0180),
        '100': (Variation_64, 0x0140),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_231]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_232]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_235]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_237]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_226]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_241]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_64]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['020'], Literal['030'], Literal['060'], Literal['070'], Literal['080'], Literal['090'], Literal['100']]) -> Union[Type['Variation_1'], Type['Variation_231'], Type['Variation_232'], Type['Variation_235'], Type['Variation_237'], Type['Variation_81'], Type['Variation_226'], Type['Variation_241'], Type['Variation_64']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_231
        if key == '020':
            return Variation_232
        if key == '030':
            return Variation_235
        if key == '060':
            return Variation_237
        if key == '070':
            return Variation_81
        if key == '080':
            return Variation_226
        if key == '090':
            return Variation_241
        if key == '100':
            return Variation_64
        assert_never(key)

    def __init__(self, arg : Optional[Variation_242_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_231, Variation_231_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_232, Variation_232_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_235, Variation_235_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_237, Variation_237_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_226, Variation_226_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_241, Variation_241_Arg]) -> 'Variation_242':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_242':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_242':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_242':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_231:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_232:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_235:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_237:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_226:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_241:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_64:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_243_Arg : TypeAlias = Raw
class Variation_243(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Target Report',
        2: 'Start of Update Cycle',
        3: 'Periodic Status Message',
        4: 'Event-triggered Status Message',
    }

    def __init__(self, arg : Variation_243_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_244_Arg : TypeAlias = Raw
class Variation_244(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'SSR multilateration',
        1: 'Mode S multilateration',
        2: 'ADS-B',
        3: 'PSR',
        4: 'Magnetic Loop System',
        5: 'HF multilateration',
        6: 'Not defined',
        7: 'Other types',
    }

    def __init__(self, arg : Variation_244_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_245_Arg : TypeAlias = Raw
class Variation_245(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'No differential correction (ADS-B)',
        1: 'Differential correction (ADS-B)',
    }

    def __init__(self, arg : Variation_245_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_246_Arg : TypeAlias = Raw
class Variation_246(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Chain 1',
        1: 'Chain 2',
    }

    def __init__(self, arg : Variation_246_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_247_Arg : TypeAlias = Raw
class Variation_247(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Transponder Ground bit not set',
        1: 'Transponder Ground bit set',
    }

    def __init__(self, arg : Variation_247_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_248_Arg : TypeAlias = Raw
class Variation_248(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'No Corrupted reply in multilateration',
        1: 'Corrupted replies in multilateration',
    }

    def __init__(self, arg : Variation_248_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_249_Arg : TypeAlias = Raw
class Variation_249(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Actual target report',
        1: 'Simulated target report',
    }

    def __init__(self, arg : Variation_249_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_250_Arg : TypeAlias = Raw
class Variation_250(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Test Target',
    }

    def __init__(self, arg : Variation_250_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_251_Arg : TypeAlias = Raw
class Variation_251(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Report from target transponder',
        1: 'Report from field monitor (fixed transponder)',
    }

    def __init__(self, arg : Variation_251_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_252_Arg : TypeAlias = Raw
class Variation_252(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'Undetermined',
        1: 'Loop start',
        2: 'Loop finish',
    }

    def __init__(self, arg : Variation_252_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_253_Arg : TypeAlias = Raw
class Variation_253(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Undetermined',
        1: 'Aircraft',
        2: 'Ground vehicle',
        3: 'Helicopter',
    }

    def __init__(self, arg : Variation_253_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_254_Arg : TypeAlias = Raw
class Variation_254(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Absence of SPI',
        1: 'Special Position Identification',
    }

    def __init__(self, arg : Variation_254_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_255_Arg_Group_1 = TypedDict('Variation_255_Arg_Group_1', {
    'TYP': Union[Variation_244, Variation_244_Arg],
    'DCR': Union[Variation_245, Variation_245_Arg],
    'CHN': Union[Variation_246, Variation_246_Arg],
    'GBS': Union[Variation_247, Variation_247_Arg],
    'CRT': Union[Variation_248, Variation_248_Arg],
})
Variation_255_Arg_Group_2 = TypedDict('Variation_255_Arg_Group_2', {
    'TYP': Union[Variation_244, Variation_244_Arg],
    'DCR': Union[Variation_245, Variation_245_Arg],
    'CHN': Union[Variation_246, Variation_246_Arg],
    'GBS': Union[Variation_247, Variation_247_Arg],
    'CRT': Union[Variation_248, Variation_248_Arg],
    'SIM': Union[Variation_249, Variation_249_Arg],
    'TST': Union[Variation_250, Variation_250_Arg],
    'RAB': Union[Variation_251, Variation_251_Arg],
    'LOP': Union[Variation_252, Variation_252_Arg],
    'TOT': Union[Variation_253, Variation_253_Arg],
})
Variation_255_Arg_Group_3 = TypedDict('Variation_255_Arg_Group_3', {
    'TYP': Union[Variation_244, Variation_244_Arg],
    'DCR': Union[Variation_245, Variation_245_Arg],
    'CHN': Union[Variation_246, Variation_246_Arg],
    'GBS': Union[Variation_247, Variation_247_Arg],
    'CRT': Union[Variation_248, Variation_248_Arg],
    'SIM': Union[Variation_249, Variation_249_Arg],
    'TST': Union[Variation_250, Variation_250_Arg],
    'RAB': Union[Variation_251, Variation_251_Arg],
    'LOP': Union[Variation_252, Variation_252_Arg],
    'TOT': Union[Variation_253, Variation_253_Arg],
    'SPI': Union[Variation_254, Variation_254_Arg],
})
Variation_255_Arg : TypeAlias = Union[
    int,
    Variation_255_Arg_Group_1,
    Tuple[int],
    Variation_255_Arg_Group_2,
    Tuple[int,int],
    Variation_255_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_255(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('TYP', Variation_244),
            ('DCR', Variation_245),
            ('CHN', Variation_246),
            ('GBS', Variation_247),
            ('CRT', Variation_248),
        ],
        [
            ('SIM', Variation_249),
            ('TST', Variation_250),
            ('RAB', Variation_251),
            ('LOP', Variation_252),
            ('TOT', Variation_253),
        ],
        [
            ('SPI', Variation_254),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_244, 0, 3),
        'DCR': ('', Variation_245, 3, 1),
        'CHN': ('', Variation_246, 4, 1),
        'GBS': ('', Variation_247, 5, 1),
        'CRT': ('', Variation_248, 6, 1),
        'SIM': ('', Variation_249, 0, 1),
        'TST': ('', Variation_250, 1, 1),
        'RAB': ('', Variation_251, 2, 1),
        'LOP': ('', Variation_252, 3, 2),
        'TOT': ('', Variation_253, 5, 2),
        'SPI': ('', Variation_254, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_244]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DCR']) -> Type[Variation_245]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHN']) -> Type[Variation_246]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_247]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CRT']) -> Type[Variation_248]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_249]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_250]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_251]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LOP']) -> Type[Variation_252]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOT']) -> Type[Variation_253]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_254]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['DCR'], Literal['CHN'], Literal['GBS'], Literal['CRT'], Literal['SIM'], Literal['TST'], Literal['RAB'], Literal['LOP'], Literal['TOT'], Literal['SPI']]) -> Union[Type['Variation_244'], Type['Variation_245'], Type['Variation_246'], Type['Variation_247'], Type['Variation_248'], Type['Variation_249'], Type['Variation_250'], Type['Variation_251'], Type['Variation_252'], Type['Variation_253'], Type['Variation_254']]:
        if key == 'TYP':
            return Variation_244
        if key == 'DCR':
            return Variation_245
        if key == 'CHN':
            return Variation_246
        if key == 'GBS':
            return Variation_247
        if key == 'CRT':
            return Variation_248
        if key == 'SIM':
            return Variation_249
        if key == 'TST':
            return Variation_250
        if key == 'RAB':
            return Variation_251
        if key == 'LOP':
            return Variation_252
        if key == 'TOT':
            return Variation_253
        if key == 'SPI':
            return Variation_254
        assert_never(key)

    def __init__(self, arg : Variation_255_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_255_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_255_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_255_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_244:
        ...

    @overload
    def get_item(self, name : Literal['DCR']) -> Variation_245:
        ...

    @overload
    def get_item(self, name : Literal['CHN']) -> Variation_246:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_247:
        ...

    @overload
    def get_item(self, name : Literal['CRT']) -> Variation_248:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_249:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_250:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_251:
        ...

    @overload
    def get_item(self, name : Literal['LOP']) -> Variation_252:
        ...

    @overload
    def get_item(self, name : Literal['TOT']) -> Variation_253:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_254:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['DCR'], Literal['CHN'], Literal['GBS'], Literal['CRT'], Literal['SIM'], Literal['TST'], Literal['RAB'], Literal['LOP'], Literal['TOT'], Literal['SPI']]) -> Any:
        return self._get_item(name)

Variation_256_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_256(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 180.0, 31, '°')

    def __init__(self, arg : Variation_256_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_257_Arg_Group = TypedDict('Variation_257_Arg_Group', {
    'LAT': Union[Variation_256, Variation_256_Arg],
    'LON': Union[Variation_256, Variation_256_Arg],
})
Variation_257_Arg : TypeAlias = Union[Raw, Variation_257_Arg_Group]
class Variation_257(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LAT', Variation_256),
        ('LON', Variation_256),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude', Variation_256, 0, 32),
        'LON': ('Longitude', Variation_256, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_256]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_256'], Type['Variation_256']]:
        if key == 'LAT':
            return Variation_256
        if key == 'LON':
            return Variation_256
        assert_never(key)

    def __init__(self, arg : Variation_257_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_256:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_257':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_257':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_258_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_258(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, 'm')

    def __init__(self, arg : Variation_258_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_259_Arg_Group = TypedDict('Variation_259_Arg_Group', {
    'RHO': Union[Variation_258, Variation_258_Arg],
    'TH': Union[Variation_14, Variation_14_Arg],
})
Variation_259_Arg : TypeAlias = Union[Raw, Variation_259_Arg_Group]
class Variation_259(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('RHO', Variation_258),
        ('TH', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RHO': ('RHO', Variation_258, 0, 16),
        'TH': ('Theta', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RHO']) -> Type[Variation_258]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TH']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RHO'], Literal['TH']]) -> Union[Type['Variation_258'], Type['Variation_14']]:
        if key == 'RHO':
            return Variation_258
        if key == 'TH':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_259_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RHO']) -> Variation_258:
        ...

    @overload
    def get_item(self, name : Literal['TH']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RHO'], Literal['TH']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RHO'], val : Union[Variation_258, Variation_258_Arg]) -> 'Variation_259':
        ...

    @overload
    def set_item(self, name : Literal['TH'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_259':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_260_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_260(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 0, 'm')

    def __init__(self, arg : Variation_260_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_261_Arg_Group = TypedDict('Variation_261_Arg_Group', {
    'X': Union[Variation_260, Variation_260_Arg],
    'Y': Union[Variation_260, Variation_260_Arg],
})
Variation_261_Arg : TypeAlias = Union[Raw, Variation_261_Arg_Group]
class Variation_261(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_260),
        ('Y', Variation_260),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X Coordinate', Variation_260, 0, 16),
        'Y': ('Y Coordinate', Variation_260, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_260]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_260]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_260'], Type['Variation_260']]:
        if key == 'X':
            return Variation_260
        if key == 'Y':
            return Variation_260
        assert_never(key)

    def __init__(self, arg : Variation_261_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_260:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_260:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_260, Variation_260_Arg]) -> 'Variation_261':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_260, Variation_260_Arg]) -> 'Variation_261':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_262_Arg_Group = TypedDict('Variation_262_Arg_Group', {
    'GSP': Union[Variation_67, Variation_67_Arg],
    'TRA': Union[Variation_14, Variation_14_Arg],
})
Variation_262_Arg : TypeAlias = Union[Raw, Variation_262_Arg_Group]
class Variation_262(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('GSP', Variation_67),
        ('TRA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GSP': ('Ground Speed', Variation_67, 0, 16),
        'TRA': ('Track Angle', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GSP']) -> Type[Variation_67]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GSP'], Literal['TRA']]) -> Union[Type['Variation_67'], Type['Variation_14']]:
        if key == 'GSP':
            return Variation_67
        if key == 'TRA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_262_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GSP']) -> Variation_67:
        ...

    @overload
    def get_item(self, name : Literal['TRA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['GSP'], Literal['TRA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GSP'], val : Union[Variation_67, Variation_67_Arg]) -> 'Variation_262':
        ...

    @overload
    def set_item(self, name : Literal['TRA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_262':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_263_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_263(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 4, 'm/s')

    def __init__(self, arg : Variation_263_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_264_Arg_Group = TypedDict('Variation_264_Arg_Group', {
    'VX': Union[Variation_263, Variation_263_Arg],
    'VY': Union[Variation_263, Variation_263_Arg],
})
Variation_264_Arg : TypeAlias = Union[Raw, Variation_264_Arg_Group]
class Variation_264(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('VX', Variation_263),
        ('VY', Variation_263),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VX': ('X Velocity', Variation_263, 0, 16),
        'VY': ('Y Velocity', Variation_263, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VX']) -> Type[Variation_263]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VY']) -> Type[Variation_263]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VX'], Literal['VY']]) -> Union[Type['Variation_263'], Type['Variation_263']]:
        if key == 'VX':
            return Variation_263
        if key == 'VY':
            return Variation_263
        assert_never(key)

    def __init__(self, arg : Variation_264_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VX']) -> Variation_263:
        ...

    @overload
    def get_item(self, name : Literal['VY']) -> Variation_263:
        ...

    def get_item(self, name : Union[Literal['VX'], Literal['VY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VX'], val : Union[Variation_263, Variation_263_Arg]) -> 'Variation_264':
        ...

    @overload
    def set_item(self, name : Literal['VY'], val : Union[Variation_263, Variation_263_Arg]) -> 'Variation_264':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_265_Arg_Group = TypedDict('Variation_265_Arg_Group', {
    'TRK': Union[Variation_43, Variation_43_Arg],
})
Variation_265_Arg : TypeAlias = Union[Raw, Variation_265_Arg_Group]
class Variation_265(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('TRK', Variation_43),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRK': ('Track Number', Variation_43, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['TRK']]) -> Union[Type['Variation_43']]:
        if key == 'TRK':
            return Variation_43
        assert_never(key)

    def __init__(self, arg : Variation_265_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['TRK']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['TRK'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_265':
        return self._set_item(name, val) # type: ignore

Variation_266_Arg : TypeAlias = Raw
class Variation_266(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Confirmed track',
        1: 'Track in initialisation phase',
    }

    def __init__(self, arg : Variation_266_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_267_Arg : TypeAlias = Raw
class Variation_267(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Last report for a track',
    }

    def __init__(self, arg : Variation_267_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_268_Arg : TypeAlias = Raw
class Variation_268(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'No extrapolation',
        1: 'Predictable extrapolation due to sensor refresh period (see NOTE)',
        2: 'Predictable extrapolation in masked area',
        3: 'Extrapolation due to unpredictable absence of detection',
    }

    def __init__(self, arg : Variation_268_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_269_Arg : TypeAlias = Raw
class Variation_269(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Horizontal manoeuvre',
    }

    def __init__(self, arg : Variation_269_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_270_Arg : TypeAlias = Raw
class Variation_270(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Tracking performed in \'Sensor Plane\', i.e. neither slant range correction nor projection was applied',
        1: 'Slant range correction and a suitable projection technique are used to track in a 2D.reference plane, tangential to the earth model at the Sensor Site co-ordinates',
    }

    def __init__(self, arg : Variation_270_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_271_Arg : TypeAlias = Raw
class Variation_271(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Measured position',
        1: 'Smoothed position',
    }

    def __init__(self, arg : Variation_271_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_272_Arg : TypeAlias = Raw
class Variation_272(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Unknown type of movement',
        1: 'Taking-off',
        2: 'Landing',
        3: 'Other types of movement',
    }

    def __init__(self, arg : Variation_272_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_273_Arg : TypeAlias = Raw
class Variation_273(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 3
    table = {
        0: 'No doubt',
        1: 'Doubtful correlation (undetermined reason)',
        2: 'Doubtful correlation in clutter',
        3: 'Loss of accuracy',
        4: 'Loss of accuracy in clutter',
        5: 'Unstable track',
        6: 'Previously coasted',
    }

    def __init__(self, arg : Variation_273_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_274_Arg : TypeAlias = Raw
class Variation_274(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Merge or split indication undetermined',
        1: 'Track merged by association to plot',
        2: 'Track merged by non-association to plot',
        3: 'Split track',
    }

    def __init__(self, arg : Variation_274_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_275_Arg : TypeAlias = Raw
class Variation_275(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Ghost track',
    }

    def __init__(self, arg : Variation_275_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_276_Arg_Group_1 = TypedDict('Variation_276_Arg_Group_1', {
    'CNF': Union[Variation_266, Variation_266_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_268, Variation_268_Arg],
    'MAH': Union[Variation_269, Variation_269_Arg],
    'TCC': Union[Variation_270, Variation_270_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
})
Variation_276_Arg_Group_2 = TypedDict('Variation_276_Arg_Group_2', {
    'CNF': Union[Variation_266, Variation_266_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_268, Variation_268_Arg],
    'MAH': Union[Variation_269, Variation_269_Arg],
    'TCC': Union[Variation_270, Variation_270_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
    'TOM': Union[Variation_272, Variation_272_Arg],
    'DOU': Union[Variation_273, Variation_273_Arg],
    'MRS': Union[Variation_274, Variation_274_Arg],
})
Variation_276_Arg_Group_3 = TypedDict('Variation_276_Arg_Group_3', {
    'CNF': Union[Variation_266, Variation_266_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_268, Variation_268_Arg],
    'MAH': Union[Variation_269, Variation_269_Arg],
    'TCC': Union[Variation_270, Variation_270_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
    'TOM': Union[Variation_272, Variation_272_Arg],
    'DOU': Union[Variation_273, Variation_273_Arg],
    'MRS': Union[Variation_274, Variation_274_Arg],
    'GHO': Union[Variation_275, Variation_275_Arg],
})
Variation_276_Arg : TypeAlias = Union[
    int,
    Variation_276_Arg_Group_1,
    Tuple[int],
    Variation_276_Arg_Group_2,
    Tuple[int,int],
    Variation_276_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_276(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('CNF', Variation_266),
            ('TRE', Variation_267),
            ('CST', Variation_268),
            ('MAH', Variation_269),
            ('TCC', Variation_270),
            ('STH', Variation_271),
        ],
        [
            ('TOM', Variation_272),
            ('DOU', Variation_273),
            ('MRS', Variation_274),
        ],
        [
            ('GHO', Variation_275),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CNF': ('', Variation_266, 0, 1),
        'TRE': ('', Variation_267, 1, 1),
        'CST': ('', Variation_268, 2, 2),
        'MAH': ('', Variation_269, 4, 1),
        'TCC': ('', Variation_270, 5, 1),
        'STH': ('', Variation_271, 6, 1),
        'TOM': ('', Variation_272, 0, 2),
        'DOU': ('', Variation_273, 2, 3),
        'MRS': ('', Variation_274, 5, 2),
        'GHO': ('', Variation_275, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_266]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRE']) -> Type[Variation_267]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_268]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAH']) -> Type[Variation_269]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TCC']) -> Type[Variation_270]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STH']) -> Type[Variation_271]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOM']) -> Type[Variation_272]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DOU']) -> Type[Variation_273]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRS']) -> Type[Variation_274]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GHO']) -> Type[Variation_275]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['MAH'], Literal['TCC'], Literal['STH'], Literal['TOM'], Literal['DOU'], Literal['MRS'], Literal['GHO']]) -> Union[Type['Variation_266'], Type['Variation_267'], Type['Variation_268'], Type['Variation_269'], Type['Variation_270'], Type['Variation_271'], Type['Variation_272'], Type['Variation_273'], Type['Variation_274'], Type['Variation_275']]:
        if key == 'CNF':
            return Variation_266
        if key == 'TRE':
            return Variation_267
        if key == 'CST':
            return Variation_268
        if key == 'MAH':
            return Variation_269
        if key == 'TCC':
            return Variation_270
        if key == 'STH':
            return Variation_271
        if key == 'TOM':
            return Variation_272
        if key == 'DOU':
            return Variation_273
        if key == 'MRS':
            return Variation_274
        if key == 'GHO':
            return Variation_275
        assert_never(key)

    def __init__(self, arg : Variation_276_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_276_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_276_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_276_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_266:
        ...

    @overload
    def get_item(self, name : Literal['TRE']) -> Variation_267:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_268:
        ...

    @overload
    def get_item(self, name : Literal['MAH']) -> Variation_269:
        ...

    @overload
    def get_item(self, name : Literal['TCC']) -> Variation_270:
        ...

    @overload
    def get_item(self, name : Literal['STH']) -> Variation_271:
        ...

    @overload
    def get_item(self, name : Literal['TOM']) -> Variation_272:
        ...

    @overload
    def get_item(self, name : Literal['DOU']) -> Variation_273:
        ...

    @overload
    def get_item(self, name : Literal['MRS']) -> Variation_274:
        ...

    @overload
    def get_item(self, name : Literal['GHO']) -> Variation_275:
        ...

    def get_item(self, name : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['MAH'], Literal['TCC'], Literal['STH'], Literal['TOM'], Literal['DOU'], Literal['MRS'], Literal['GHO']]) -> Any:
        return self._get_item(name)

Variation_277_Arg : TypeAlias = Raw
class Variation_277(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-3/A code derived from the reply of the transponder',
        1: 'Mode-3/A code not extracted during the last scan',
    }

    def __init__(self, arg : Variation_277_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_278_Arg_Group = TypedDict('Variation_278_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_277, Variation_277_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_278_Arg : TypeAlias = Union[Raw, Variation_278_Arg_Group]
class Variation_278(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_277),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'L': ('', Variation_277, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_277]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_277'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_277
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_278_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_277:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_278':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_278':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_277, Variation_277_Arg]) -> 'Variation_278':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_278':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_279_Arg : TypeAlias = Raw
class Variation_279(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24

    def __init__(self, arg : Variation_279_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_280_Arg : TypeAlias = Raw
class Variation_280(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Callsign or registration downlinked from transponder',
        1: 'Callsign not downlinked from transponder',
        2: 'Registration not downlinked from transponder',
    }

    def __init__(self, arg : Variation_280_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_281_Arg_Group = TypedDict('Variation_281_Arg_Group', {
    'STI': Union[Variation_280, Variation_280_Arg],
    'CHR': Union[Variation_201, Variation_201_Arg],
})
Variation_281_Arg : TypeAlias = Union[Raw, Variation_281_Arg_Group]
class Variation_281(Group):
    variation = 'Group'

    bit_size = 56

    subitems_list = [
        ('STI', Variation_280),
        Spare(2, 6),
        ('CHR', Variation_201),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STI': ('', Variation_280, 0, 2),
        'CHR': ('Characters 1-8 (Coded on 6 Bits Each) Defining Target Identification', Variation_201, 8, 48),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STI']) -> Type[Variation_280]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHR']) -> Type[Variation_201]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STI'], Literal['CHR']]) -> Union[Type['Variation_280'], Type['Variation_201']]:
        if key == 'STI':
            return Variation_280
        if key == 'CHR':
            return Variation_201
        assert_never(key)

    def __init__(self, arg : Variation_281_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STI']) -> Variation_280:
        ...

    @overload
    def get_item(self, name : Literal['CHR']) -> Variation_201:
        ...

    def get_item(self, name : Union[Literal['STI'], Literal['CHR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STI'], val : Union[Variation_280, Variation_280_Arg]) -> 'Variation_281':
        ...

    @overload
    def set_item(self, name : Literal['CHR'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_281':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_282_Arg : TypeAlias = Raw
class Variation_282(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 56

    def __init__(self, arg : Variation_282_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_283_Arg : TypeAlias = Raw
class Variation_283(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4

    def __init__(self, arg : Variation_283_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_284_Arg_Group = TypedDict('Variation_284_Arg_Group', {
    'MBDATA': Union[Variation_282, Variation_282_Arg],
    'BDS1': Union[Variation_192, Variation_192_Arg],
    'BDS2': Union[Variation_283, Variation_283_Arg],
})
Variation_284_Arg : TypeAlias = Union[Raw, Variation_284_Arg_Group]
class Variation_284(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('MBDATA', Variation_282),
        ('BDS1', Variation_192),
        ('BDS2', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MBDATA': ('', Variation_282, 0, 56),
        'BDS1': ('', Variation_192, 56, 4),
        'BDS2': ('', Variation_283, 60, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MBDATA']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS1']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS2']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Union[Type['Variation_282'], Type['Variation_192'], Type['Variation_283']]:
        if key == 'MBDATA':
            return Variation_282
        if key == 'BDS1':
            return Variation_192
        if key == 'BDS2':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_284_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MBDATA']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BDS1']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['BDS2']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MBDATA'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_284':
        ...

    @overload
    def set_item(self, name : Literal['BDS1'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_284':
        ...

    @overload
    def set_item(self, name : Literal['BDS2'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_284':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_285_Arg : TypeAlias = List[Union[Variation_284, Variation_284_Arg]]
class Variation_285(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 64
    variation_type = Variation_284

    @classmethod
    def spec(cls) -> Type[Variation_284]:
        return Variation_284

    def __init__(self, arg : List[Union[Variation_284, Variation_284_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_286_Arg : TypeAlias = Raw
class Variation_286(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Unknown',
        1: 'ATC equipment maintenance',
        2: 'Airport maintenance',
        3: 'Fire',
        4: 'Bird scarer',
        5: 'Snow plough',
        6: 'Runway sweeper',
        7: 'Emergency',
        8: 'Police',
        9: 'Bus',
        10: 'Tug (push/tow)',
        11: 'Grass cutter',
        12: 'Fuel',
        13: 'Baggage',
        14: 'Catering',
        15: 'Aircraft maintenance',
        16: 'Flyco (follow me)',
    }

    def __init__(self, arg : Variation_286_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_287_Arg_Group = TypedDict('Variation_287_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'FL': Union[Variation_21, Variation_21_Arg],
})
Variation_287_Arg : TypeAlias = Union[Raw, Variation_287_Arg_Group]
class Variation_287(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('FL', Variation_21),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'FL': ('Flight Level', Variation_21, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FL']) -> Type[Variation_21]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_21']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'FL':
            return Variation_21
        assert_never(key)

    def __init__(self, arg : Variation_287_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['FL']) -> Variation_21:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_287':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_287':
        ...

    @overload
    def set_item(self, name : Literal['FL'], val : Union[Variation_21, Variation_21_Arg]) -> 'Variation_287':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_288_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_288(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 25.0, 2, 'ft')

    def __init__(self, arg : Variation_288_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_289_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_289(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    quantity = Quantity('Unsigned', 1.0, 0, 'm')

    def __init__(self, arg : Variation_289_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_290_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_290(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    quantity = Quantity('Unsigned', 360.0, 7, '°')

    def __init__(self, arg : Variation_290_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_291_Arg_Group_1 = TypedDict('Variation_291_Arg_Group_1', {
    'LENGTH': Union[Variation_289, Variation_289_Arg],
})
Variation_291_Arg_Group_2 = TypedDict('Variation_291_Arg_Group_2', {
    'LENGTH': Union[Variation_289, Variation_289_Arg],
    'ORIENTATION': Union[Variation_290, Variation_290_Arg],
})
Variation_291_Arg_Group_3 = TypedDict('Variation_291_Arg_Group_3', {
    'LENGTH': Union[Variation_289, Variation_289_Arg],
    'ORIENTATION': Union[Variation_290, Variation_290_Arg],
    'WIDTH': Union[Variation_289, Variation_289_Arg],
})
Variation_291_Arg : TypeAlias = Union[
    int,
    Variation_291_Arg_Group_1,
    Tuple[int],
    Variation_291_Arg_Group_2,
    Tuple[int,int],
    Variation_291_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_291(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('LENGTH', Variation_289),
        ],
        [
            ('ORIENTATION', Variation_290),
        ],
        [
            ('WIDTH', Variation_289),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LENGTH': ('Length', Variation_289, 0, 7),
        'ORIENTATION': ('Orientation', Variation_290, 0, 7),
        'WIDTH': ('Width', Variation_289, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LENGTH']) -> Type[Variation_289]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ORIENTATION']) -> Type[Variation_290]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WIDTH']) -> Type[Variation_289]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LENGTH'], Literal['ORIENTATION'], Literal['WIDTH']]) -> Union[Type['Variation_289'], Type['Variation_290'], Type['Variation_289']]:
        if key == 'LENGTH':
            return Variation_289
        if key == 'ORIENTATION':
            return Variation_290
        if key == 'WIDTH':
            return Variation_289
        assert_never(key)

    def __init__(self, arg : Variation_291_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_291_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_291_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_291_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LENGTH']) -> Variation_289:
        ...

    @overload
    def get_item(self, name : Literal['ORIENTATION']) -> Variation_290:
        ...

    @overload
    def get_item(self, name : Literal['WIDTH']) -> Variation_289:
        ...

    def get_item(self, name : Union[Literal['LENGTH'], Literal['ORIENTATION'], Literal['WIDTH']]) -> Any:
        return self._get_item(name)

Variation_292_Arg : TypeAlias = Raw
class Variation_292(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Operational',
        1: 'Degraded',
        2: 'NOGO',
    }

    def __init__(self, arg : Variation_292_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_293_Arg : TypeAlias = Raw
class Variation_293(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No overload',
        1: 'Overload',
    }

    def __init__(self, arg : Variation_293_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_294_Arg : TypeAlias = Raw
class Variation_294(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Valid',
        1: 'Invalid',
    }

    def __init__(self, arg : Variation_294_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_295_Arg : TypeAlias = Raw
class Variation_295(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Normal Operation',
        1: 'Diversity degraded',
    }

    def __init__(self, arg : Variation_295_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_296_Arg : TypeAlias = Raw
class Variation_296(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Test Target Operative',
        1: 'Test Target Failure',
    }

    def __init__(self, arg : Variation_296_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_297_Arg_Group = TypedDict('Variation_297_Arg_Group', {
    'NOGO': Union[Variation_292, Variation_292_Arg],
    'OVL': Union[Variation_293, Variation_293_Arg],
    'TSV': Union[Variation_294, Variation_294_Arg],
    'DIV': Union[Variation_295, Variation_295_Arg],
    'TTF': Union[Variation_296, Variation_296_Arg],
})
Variation_297_Arg : TypeAlias = Union[Raw, Variation_297_Arg_Group]
class Variation_297(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('NOGO', Variation_292),
        ('OVL', Variation_293),
        ('TSV', Variation_294),
        ('DIV', Variation_295),
        ('TTF', Variation_296),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('Operational Release Status of the System', Variation_292, 0, 2),
        'OVL': ('Overload Indicator', Variation_293, 2, 1),
        'TSV': ('Time Source Validity', Variation_294, 3, 1),
        'DIV': ('', Variation_295, 4, 1),
        'TTF': ('', Variation_296, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_292]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVL']) -> Type[Variation_293]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_294]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DIV']) -> Type[Variation_295]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTF']) -> Type[Variation_296]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['DIV'], Literal['TTF']]) -> Union[Type['Variation_292'], Type['Variation_293'], Type['Variation_294'], Type['Variation_295'], Type['Variation_296']]:
        if key == 'NOGO':
            return Variation_292
        if key == 'OVL':
            return Variation_293
        if key == 'TSV':
            return Variation_294
        if key == 'DIV':
            return Variation_295
        if key == 'TTF':
            return Variation_296
        assert_never(key)

    def __init__(self, arg : Variation_297_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_292:
        ...

    @overload
    def get_item(self, name : Literal['OVL']) -> Variation_293:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_294:
        ...

    @overload
    def get_item(self, name : Literal['DIV']) -> Variation_295:
        ...

    @overload
    def get_item(self, name : Literal['TTF']) -> Variation_296:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['DIV'], Literal['TTF']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NOGO'], val : Union[Variation_292, Variation_292_Arg]) -> 'Variation_297':
        ...

    @overload
    def set_item(self, name : Literal['OVL'], val : Union[Variation_293, Variation_293_Arg]) -> 'Variation_297':
        ...

    @overload
    def set_item(self, name : Literal['TSV'], val : Union[Variation_294, Variation_294_Arg]) -> 'Variation_297':
        ...

    @overload
    def set_item(self, name : Literal['DIV'], val : Union[Variation_295, Variation_295_Arg]) -> 'Variation_297':
        ...

    @overload
    def set_item(self, name : Literal['TTF'], val : Union[Variation_296, Variation_296_Arg]) -> 'Variation_297':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_298_Arg : TypeAlias = Raw
class Variation_298(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default',
        1: 'In Trouble',
    }

    def __init__(self, arg : Variation_298_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_299_Arg : TypeAlias = Raw
class Variation_299(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 7
    table = {
        1: 'Towing aircraft',
        2: '“Follow me” operation',
        3: 'Runway check',
        4: 'Emergency operation (fire, medical...)',
        5: 'Work in progress (maintenance, birds scarer, sweepers...)',
    }

    def __init__(self, arg : Variation_299_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_300_Arg_Group = TypedDict('Variation_300_Arg_Group', {
    'TRB': Union[Variation_298, Variation_298_Arg],
    'MSG': Union[Variation_299, Variation_299_Arg],
})
Variation_300_Arg : TypeAlias = Union[Raw, Variation_300_Arg_Group]
class Variation_300(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TRB', Variation_298),
        ('MSG', Variation_299),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRB': ('', Variation_298, 0, 1),
        'MSG': ('', Variation_299, 1, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TRB']) -> Type[Variation_298]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSG']) -> Type[Variation_299]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TRB'], Literal['MSG']]) -> Union[Type['Variation_298'], Type['Variation_299']]:
        if key == 'TRB':
            return Variation_298
        if key == 'MSG':
            return Variation_299
        assert_never(key)

    def __init__(self, arg : Variation_300_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TRB']) -> Variation_298:
        ...

    @overload
    def get_item(self, name : Literal['MSG']) -> Variation_299:
        ...

    def get_item(self, name : Union[Literal['TRB'], Literal['MSG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TRB'], val : Union[Variation_298, Variation_298_Arg]) -> 'Variation_300':
        ...

    @overload
    def set_item(self, name : Literal['MSG'], val : Union[Variation_299, Variation_299_Arg]) -> 'Variation_300':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_301_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_301(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 2, 'm')

    def __init__(self, arg : Variation_301_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_302_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_302(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 2, 'm')

    def __init__(self, arg : Variation_302_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_303_Arg_Group = TypedDict('Variation_303_Arg_Group', {
    'DEVX': Union[Variation_301, Variation_301_Arg],
    'DEVY': Union[Variation_301, Variation_301_Arg],
    'COVXY': Union[Variation_302, Variation_302_Arg],
})
Variation_303_Arg : TypeAlias = Union[Raw, Variation_303_Arg_Group]
class Variation_303(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('DEVX', Variation_301),
        ('DEVY', Variation_301),
        ('COVXY', Variation_302),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DEVX': ('Standard Deviation of X Component', Variation_301, 0, 8),
        'DEVY': ('Standard Deviation of Y Component', Variation_301, 8, 8),
        'COVXY': ('Covariance in Two’s Complement Form', Variation_302, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DEVX']) -> Type[Variation_301]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DEVY']) -> Type[Variation_301]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVXY']) -> Type[Variation_302]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DEVX'], Literal['DEVY'], Literal['COVXY']]) -> Union[Type['Variation_301'], Type['Variation_301'], Type['Variation_302']]:
        if key == 'DEVX':
            return Variation_301
        if key == 'DEVY':
            return Variation_301
        if key == 'COVXY':
            return Variation_302
        assert_never(key)

    def __init__(self, arg : Variation_303_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['DEVX']) -> Variation_301:
        ...

    @overload
    def get_item(self, name : Literal['DEVY']) -> Variation_301:
        ...

    @overload
    def get_item(self, name : Literal['COVXY']) -> Variation_302:
        ...

    def get_item(self, name : Union[Literal['DEVX'], Literal['DEVY'], Literal['COVXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['DEVX'], val : Union[Variation_301, Variation_301_Arg]) -> 'Variation_303':
        ...

    @overload
    def set_item(self, name : Literal['DEVY'], val : Union[Variation_301, Variation_301_Arg]) -> 'Variation_303':
        ...

    @overload
    def set_item(self, name : Literal['COVXY'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_303':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_304_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_304(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 0, 'm')

    def __init__(self, arg : Variation_304_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_305_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_305(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 0.15, 0, '°')

    def __init__(self, arg : Variation_305_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_306_Arg_Group = TypedDict('Variation_306_Arg_Group', {
    'DRHO': Union[Variation_304, Variation_304_Arg],
    'DTHETA': Union[Variation_305, Variation_305_Arg],
})
Variation_306_Arg : TypeAlias = Union[Raw, Variation_306_Arg_Group]
class Variation_306(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('DRHO', Variation_304),
        ('DTHETA', Variation_305),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DRHO': ('', Variation_304, 0, 8),
        'DTHETA': ('', Variation_305, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DRHO']) -> Type[Variation_304]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DTHETA']) -> Type[Variation_305]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DRHO'], Literal['DTHETA']]) -> Union[Type['Variation_304'], Type['Variation_305']]:
        if key == 'DRHO':
            return Variation_304
        if key == 'DTHETA':
            return Variation_305
        assert_never(key)

    def __init__(self, arg : Variation_306_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['DRHO']) -> Variation_304:
        ...

    @overload
    def get_item(self, name : Literal['DTHETA']) -> Variation_305:
        ...

    def get_item(self, name : Union[Literal['DRHO'], Literal['DTHETA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['DRHO'], val : Union[Variation_304, Variation_304_Arg]) -> 'Variation_306':
        ...

    @overload
    def set_item(self, name : Literal['DTHETA'], val : Union[Variation_305, Variation_305_Arg]) -> 'Variation_306':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_307_Arg : TypeAlias = List[Union[Variation_306, Variation_306_Arg]]
class Variation_307(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_306

    @classmethod
    def spec(cls) -> Type[Variation_306]:
        return Variation_306

    def __init__(self, arg : List[Union[Variation_306, Variation_306_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_308_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_308(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 4, 'm/s2')

    def __init__(self, arg : Variation_308_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_309_Arg_Group = TypedDict('Variation_309_Arg_Group', {
    'AX': Union[Variation_308, Variation_308_Arg],
    'AY': Union[Variation_308, Variation_308_Arg],
})
Variation_309_Arg : TypeAlias = Union[Raw, Variation_309_Arg_Group]
class Variation_309(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('AX', Variation_308),
        ('AY', Variation_308),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AX': ('X Acceleration', Variation_308, 0, 8),
        'AY': ('Y Acceleration', Variation_308, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AX']) -> Type[Variation_308]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AY']) -> Type[Variation_308]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AX'], Literal['AY']]) -> Union[Type['Variation_308'], Type['Variation_308']]:
        if key == 'AX':
            return Variation_308
        if key == 'AY':
            return Variation_308
        assert_never(key)

    def __init__(self, arg : Variation_309_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AX']) -> Variation_308:
        ...

    @overload
    def get_item(self, name : Literal['AY']) -> Variation_308:
        ...

    def get_item(self, name : Union[Literal['AX'], Literal['AY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AX'], val : Union[Variation_308, Variation_308_Arg]) -> 'Variation_309':
        ...

    @overload
    def set_item(self, name : Literal['AY'], val : Union[Variation_308, Variation_308_Arg]) -> 'Variation_309':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_310_Arg = TypedDict('Variation_310_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_243, Variation_243_Arg],
    '020': Union[Variation_255, Variation_255_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_257, Variation_257_Arg],
    '040': Union[Variation_259, Variation_259_Arg],
    '042': Union[Variation_261, Variation_261_Arg],
    '200': Union[Variation_262, Variation_262_Arg],
    '202': Union[Variation_264, Variation_264_Arg],
    '161': Union[Variation_265, Variation_265_Arg],
    '170': Union[Variation_276, Variation_276_Arg],
    '060': Union[Variation_278, Variation_278_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '245': Union[Variation_281, Variation_281_Arg],
    '250': Union[Variation_285, Variation_285_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '090': Union[Variation_287, Variation_287_Arg],
    '091': Union[Variation_288, Variation_288_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '550': Union[Variation_297, Variation_297_Arg],
    '310': Union[Variation_300, Variation_300_Arg],
    '500': Union[Variation_303, Variation_303_Arg],
    '280': Union[Variation_307, Variation_307_Arg],
    '131': Union[Variation_0, Variation_0_Arg],
    '210': Union[Variation_309, Variation_309_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_310(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_243),
        ('020', Variation_255),
        ('140', Variation_81),
        ('041', Variation_257),
        ('040', Variation_259),
        ('042', Variation_261),
        ('200', Variation_262),
        ('202', Variation_264),
        ('161', Variation_265),
        ('170', Variation_276),
        ('060', Variation_278),
        ('220', Variation_279),
        ('245', Variation_281),
        ('250', Variation_285),
        ('300', Variation_286),
        ('090', Variation_287),
        ('091', Variation_288),
        ('270', Variation_291),
        ('550', Variation_297),
        ('310', Variation_300),
        ('500', Variation_303),
        ('280', Variation_307),
        ('131', Variation_0),
        ('210', Variation_309),
        None,
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '000': (Variation_243, 0x40000000),
        '020': (Variation_255, 0x20000000),
        '140': (Variation_81, 0x10000000),
        '041': (Variation_257, 0x08000000),
        '040': (Variation_259, 0x04000000),
        '042': (Variation_261, 0x02000000),
        '200': (Variation_262, 0x01800000),
        '202': (Variation_264, 0x01400000),
        '161': (Variation_265, 0x01200000),
        '170': (Variation_276, 0x01100000),
        '060': (Variation_278, 0x01080000),
        '220': (Variation_279, 0x01040000),
        '245': (Variation_281, 0x01020000),
        '250': (Variation_285, 0x01018000),
        '300': (Variation_286, 0x01014000),
        '090': (Variation_287, 0x01012000),
        '091': (Variation_288, 0x01011000),
        '270': (Variation_291, 0x01010800),
        '550': (Variation_297, 0x01010400),
        '310': (Variation_300, 0x01010200),
        '500': (Variation_303, 0x01010180),
        '280': (Variation_307, 0x01010140),
        '131': (Variation_0, 0x01010120),
        '210': (Variation_309, 0x01010110),
        'SP': (Variation_62, 0x01010104),
        'RE': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_243]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_255]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_257]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_259]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_261]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_262]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['202']) -> Type[Variation_264]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_265]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_276]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_278]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_281]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_285]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_287]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['091']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['550']) -> Type[Variation_297]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['310']) -> Type[Variation_300]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_303]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['280']) -> Type[Variation_307]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_309]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['020'], Literal['140'], Literal['041'], Literal['040'], Literal['042'], Literal['200'], Literal['202'], Literal['161'], Literal['170'], Literal['060'], Literal['220'], Literal['245'], Literal['250'], Literal['300'], Literal['090'], Literal['091'], Literal['270'], Literal['550'], Literal['310'], Literal['500'], Literal['280'], Literal['131'], Literal['210'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_243'], Type['Variation_255'], Type['Variation_81'], Type['Variation_257'], Type['Variation_259'], Type['Variation_261'], Type['Variation_262'], Type['Variation_264'], Type['Variation_265'], Type['Variation_276'], Type['Variation_278'], Type['Variation_279'], Type['Variation_281'], Type['Variation_285'], Type['Variation_286'], Type['Variation_287'], Type['Variation_288'], Type['Variation_291'], Type['Variation_297'], Type['Variation_300'], Type['Variation_303'], Type['Variation_307'], Type['Variation_0'], Type['Variation_309'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_243
        if key == '020':
            return Variation_255
        if key == '140':
            return Variation_81
        if key == '041':
            return Variation_257
        if key == '040':
            return Variation_259
        if key == '042':
            return Variation_261
        if key == '200':
            return Variation_262
        if key == '202':
            return Variation_264
        if key == '161':
            return Variation_265
        if key == '170':
            return Variation_276
        if key == '060':
            return Variation_278
        if key == '220':
            return Variation_279
        if key == '245':
            return Variation_281
        if key == '250':
            return Variation_285
        if key == '300':
            return Variation_286
        if key == '090':
            return Variation_287
        if key == '091':
            return Variation_288
        if key == '270':
            return Variation_291
        if key == '550':
            return Variation_297
        if key == '310':
            return Variation_300
        if key == '500':
            return Variation_303
        if key == '280':
            return Variation_307
        if key == '131':
            return Variation_0
        if key == '210':
            return Variation_309
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_310_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_243, Variation_243_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_255, Variation_255_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_257, Variation_257_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_259, Variation_259_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_261, Variation_261_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_262, Variation_262_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['202'], val : Union[Variation_264, Variation_264_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_265, Variation_265_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_276, Variation_276_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_278, Variation_278_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_281, Variation_281_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_285, Variation_285_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_287, Variation_287_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['091'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['550'], val : Union[Variation_297, Variation_297_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['310'], val : Union[Variation_300, Variation_300_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_303, Variation_303_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['280'], val : Union[Variation_307, Variation_307_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_309, Variation_309_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_310':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_310':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['202']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['091']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['550']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['310']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['280']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_310':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_310':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_243:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_255:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_257:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_259:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_261:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_262:
        ...

    @overload
    def get_item(self, name : Literal['202']) -> Variation_264:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_265:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_276:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_278:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_281:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_285:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_287:
        ...

    @overload
    def get_item(self, name : Literal['091']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['550']) -> Variation_297:
        ...

    @overload
    def get_item(self, name : Literal['310']) -> Variation_300:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_303:
        ...

    @overload
    def get_item(self, name : Literal['280']) -> Variation_307:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_309:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_311_Arg_Group = TypedDict('Variation_311_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
})
Variation_311_Arg : TypeAlias = Union[Raw, Variation_311_Arg_Group]
class Variation_311(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('System Area Code Fixed to Zero', Variation_0, 0, 8),
        'SIC': ('System Identification Code', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_311_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_311':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_311':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_312_Arg : TypeAlias = Raw
class Variation_312(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Target reports, flight plan data and basic alerts',
        2: 'Manual attachment of flight plan to track',
        3: 'Manual detachment of flight plan to track',
        4: 'Insertion of flight plan data',
        5: 'Suppression of flight plan data',
        6: 'Modification of flight plan data',
        7: 'Holdbar status',
    }

    def __init__(self, arg : Variation_312_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_313_Arg_Group = TypedDict('Variation_313_Arg_Group', {
    'LAT': Union[Variation_256, Variation_256_Arg],
    'LON': Union[Variation_256, Variation_256_Arg],
})
Variation_313_Arg : TypeAlias = Union[Raw, Variation_313_Arg_Group]
class Variation_313(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LAT', Variation_256),
        ('LON', Variation_256),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude in WGS-84 in Two\'s Complement', Variation_256, 0, 32),
        'LON': ('Longitude in WGS-84 in Two\'s Complement', Variation_256, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_256]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_256'], Type['Variation_256']]:
        if key == 'LAT':
            return Variation_256
        if key == 'LON':
            return Variation_256
        assert_never(key)

    def __init__(self, arg : Variation_313_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_256:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_313':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_313':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_314_Arg_Group = TypedDict('Variation_314_Arg_Group', {
    'X': Union[Variation_260, Variation_260_Arg],
    'Y': Union[Variation_260, Variation_260_Arg],
})
Variation_314_Arg : TypeAlias = Union[Raw, Variation_314_Arg_Group]
class Variation_314(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_260),
        ('Y', Variation_260),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-Component', Variation_260, 0, 16),
        'Y': ('Y-Component', Variation_260, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_260]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_260]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_260'], Type['Variation_260']]:
        if key == 'X':
            return Variation_260
        if key == 'Y':
            return Variation_260
        assert_never(key)

    def __init__(self, arg : Variation_314_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_260:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_260:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_260, Variation_260_Arg]) -> 'Variation_314':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_260, Variation_260_Arg]) -> 'Variation_314':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_315_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_315(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 2, 'm/s')

    def __init__(self, arg : Variation_315_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_316_Arg_Group = TypedDict('Variation_316_Arg_Group', {
    'VX': Union[Variation_315, Variation_315_Arg],
    'VY': Union[Variation_315, Variation_315_Arg],
})
Variation_316_Arg : TypeAlias = Union[Raw, Variation_316_Arg_Group]
class Variation_316(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('VX', Variation_315),
        ('VY', Variation_315),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VX': ('Vx', Variation_315, 0, 16),
        'VY': ('Vy', Variation_315, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VX']) -> Type[Variation_315]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VY']) -> Type[Variation_315]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VX'], Literal['VY']]) -> Union[Type['Variation_315'], Type['Variation_315']]:
        if key == 'VX':
            return Variation_315
        if key == 'VY':
            return Variation_315
        assert_never(key)

    def __init__(self, arg : Variation_316_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VX']) -> Variation_315:
        ...

    @overload
    def get_item(self, name : Literal['VY']) -> Variation_315:
        ...

    def get_item(self, name : Union[Literal['VX'], Literal['VY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VX'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_316':
        ...

    @overload
    def set_item(self, name : Literal['VY'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_316':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_317_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_317(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 2, 'm/s2')

    def __init__(self, arg : Variation_317_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_318_Arg_Group = TypedDict('Variation_318_Arg_Group', {
    'AX': Union[Variation_317, Variation_317_Arg],
    'AY': Union[Variation_317, Variation_317_Arg],
})
Variation_318_Arg : TypeAlias = Union[Raw, Variation_318_Arg_Group]
class Variation_318(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('AX', Variation_317),
        ('AY', Variation_317),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AX': ('Ax', Variation_317, 0, 8),
        'AY': ('Ay', Variation_317, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AX']) -> Type[Variation_317]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AY']) -> Type[Variation_317]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AX'], Literal['AY']]) -> Union[Type['Variation_317'], Type['Variation_317']]:
        if key == 'AX':
            return Variation_317
        if key == 'AY':
            return Variation_317
        assert_never(key)

    def __init__(self, arg : Variation_318_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AX']) -> Variation_317:
        ...

    @overload
    def get_item(self, name : Literal['AY']) -> Variation_317:
        ...

    def get_item(self, name : Union[Literal['AX'], Literal['AY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AX'], val : Union[Variation_317, Variation_317_Arg]) -> 'Variation_318':
        ...

    @overload
    def set_item(self, name : Literal['AY'], val : Union[Variation_317, Variation_317_Arg]) -> 'Variation_318':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_319_Arg_Group = TypedDict('Variation_319_Arg_Group', {
    'MOD3A': Union[Variation_19, Variation_19_Arg],
})
Variation_319_Arg : TypeAlias = Union[Raw, Variation_319_Arg_Group]
class Variation_319(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MOD3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MOD3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MOD3A']]) -> Union[Type['Variation_19']]:
        if key == 'MOD3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_319_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MOD3A']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MOD3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_319':
        return self._set_item(name, val) # type: ignore

Variation_320_Arg_Group = TypedDict('Variation_320_Arg_Group', {
    'STI': Union[Variation_280, Variation_280_Arg],
    'TID': Union[Variation_201, Variation_201_Arg],
})
Variation_320_Arg : TypeAlias = Union[Raw, Variation_320_Arg_Group]
class Variation_320(Group):
    variation = 'Group'

    bit_size = 56

    subitems_list = [
        ('STI', Variation_280),
        Spare(2, 6),
        ('TID', Variation_201),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STI': ('', Variation_280, 0, 2),
        'TID': ('Target Identification', Variation_201, 8, 48),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STI']) -> Type[Variation_280]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_201]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STI'], Literal['TID']]) -> Union[Type['Variation_280'], Type['Variation_201']]:
        if key == 'STI':
            return Variation_280
        if key == 'TID':
            return Variation_201
        assert_never(key)

    def __init__(self, arg : Variation_320_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STI']) -> Variation_280:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_201:
        ...

    def get_item(self, name : Union[Literal['STI'], Literal['TID']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STI'], val : Union[Variation_280, Variation_280_Arg]) -> 'Variation_320':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_320':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_321_Arg : TypeAlias = Raw
class Variation_321(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 64

    def __init__(self, arg : Variation_321_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_322_Arg : TypeAlias = List[Union[Variation_321, Variation_321_Arg]]
class Variation_322(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 64
    variation_type = Variation_321

    @classmethod
    def spec(cls) -> Type[Variation_321]:
        return Variation_321

    def __init__(self, arg : List[Union[Variation_321, Variation_321_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_323_Arg : TypeAlias = Raw
class Variation_323(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No communications capability (surveillance only)',
        1: 'Comm. A and Comm. B capability',
        2: 'Comm. A, Comm. B and Uplink ELM',
        3: 'Comm. A, Comm. B, Uplink ELM and Downlink ELM',
        4: 'Level 5 Transponder capability',
        5: 'Not assigned',
        6: 'Not assigned',
        7: 'Not assigned',
    }

    def __init__(self, arg : Variation_323_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_324_Arg : TypeAlias = Raw
class Variation_324(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 4
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
        6: 'General Emergency',
        7: 'Lifeguard / medical',
        8: 'Minimum fuel',
        9: 'No communications',
        10: 'Unlawful',
    }

    def __init__(self, arg : Variation_324_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_325_Arg : TypeAlias = Raw
class Variation_325(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No',
        1: 'Yes',
    }

    def __init__(self, arg : Variation_325_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_326_Arg : TypeAlias = Raw
class Variation_326(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: '100 ft resolution',
        1: '25 ft resolution',
    }

    def __init__(self, arg : Variation_326_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_327_Arg : TypeAlias = Raw
class Variation_327(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No',
        1: 'Yes',
    }

    def __init__(self, arg : Variation_327_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_328_Arg : TypeAlias = Raw
class Variation_328(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'No',
        1: 'Yes',
    }

    def __init__(self, arg : Variation_328_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_329_Arg : TypeAlias = Raw
class Variation_329(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Yes',
        1: 'No',
    }

    def __init__(self, arg : Variation_329_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_330_Arg_Group = TypedDict('Variation_330_Arg_Group', {
    'COM': Union[Variation_323, Variation_323_Arg],
    'STAT': Union[Variation_324, Variation_324_Arg],
    'SSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
    'AC': Union[Variation_325, Variation_325_Arg],
    'MN': Union[Variation_328, Variation_328_Arg],
    'DC': Union[Variation_329, Variation_329_Arg],
})
Variation_330_Arg : TypeAlias = Union[Raw, Variation_330_Arg_Group]
class Variation_330(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('COM', Variation_323),
        ('STAT', Variation_324),
        Spare(7, 1),
        ('SSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
        ('AC', Variation_325),
        ('MN', Variation_328),
        ('DC', Variation_329),
        Spare(3, 5),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_323, 0, 3),
        'STAT': ('Flight Status', Variation_324, 3, 4),
        'SSC': ('Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS 1,0 Bit 37/40', Variation_283, 12, 4),
        'AC': ('ACAS Operational', Variation_325, 16, 1),
        'MN': ('Multiple Navigational Aids Operating', Variation_328, 17, 1),
        'DC': ('Differential Correction', Variation_329, 18, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_323]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_324]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MN']) -> Type[Variation_328]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DC']) -> Type[Variation_329]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B'], Literal['AC'], Literal['MN'], Literal['DC']]) -> Union[Type['Variation_323'], Type['Variation_324'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283'], Type['Variation_325'], Type['Variation_328'], Type['Variation_329']]:
        if key == 'COM':
            return Variation_323
        if key == 'STAT':
            return Variation_324
        if key == 'SSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        if key == 'AC':
            return Variation_325
        if key == 'MN':
            return Variation_328
        if key == 'DC':
            return Variation_329
        assert_never(key)

    def __init__(self, arg : Variation_330_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_323:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_324:
        ...

    @overload
    def get_item(self, name : Literal['SSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    @overload
    def get_item(self, name : Literal['AC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['MN']) -> Variation_328:
        ...

    @overload
    def get_item(self, name : Literal['DC']) -> Variation_329:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B'], Literal['AC'], Literal['MN'], Literal['DC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_323, Variation_323_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_324, Variation_324_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['SSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['AC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['MN'], val : Union[Variation_328, Variation_328_Arg]) -> 'Variation_330':
        ...

    @overload
    def set_item(self, name : Literal['DC'], val : Union[Variation_329, Variation_329_Arg]) -> 'Variation_330':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_331_Arg : TypeAlias = Union[Raw,str]
class Variation_331(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    string_type = StringAscii()

    def __init__(self, arg : Variation_331_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_332_Arg : TypeAlias = Raw
class Variation_332(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Light aircraft <= 7000 kg',
        2: 'Reserved',
        3: '7000 kg &lt; medium aircraft &lt; 136000 kg',
        4: 'Reserved',
        5: '136000 kg <= heavy aircraft',
        6: 'Highly manoeuvrable (5g acceleration capability) and high speed (&gt;400 knots cruise)',
        7: 'Reserved',
        8: 'Reserved',
        9: 'Reserved',
        10: 'Rotocraft',
        11: 'Glider / sailplane',
        12: 'Lighter-than-air',
        13: 'Unmanned aerial vehicle',
        14: 'Space / transatmospheric vehicle',
        15: 'Ultralight / handglider / paraglider',
        16: 'Parachutist / skydiver',
        17: 'Reserved',
        18: 'Reserved',
        19: 'Reserved',
        20: 'Surface emergency vehicle',
        21: 'Surface service vehicle',
        22: 'Fixed ground or tethered obstruction',
        23: 'Reserved',
        24: 'Reserved',
    }

    def __init__(self, arg : Variation_332_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_333_Arg : TypeAlias = Raw
class Variation_333(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'VDL Mode 4 available',
        1: 'VDL Mode 4 not available',
    }

    def __init__(self, arg : Variation_333_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_334_Arg : TypeAlias = Raw
class Variation_334(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Mode S available',
        1: 'Mode S not available',
    }

    def __init__(self, arg : Variation_334_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_335_Arg : TypeAlias = Raw
class Variation_335(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'UAT available',
        1: 'UAT not available',
    }

    def __init__(self, arg : Variation_335_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_336_Arg_Group = TypedDict('Variation_336_Arg_Group', {
    'VDL': Union[Variation_333, Variation_333_Arg],
    'MDS': Union[Variation_334, Variation_334_Arg],
    'UAT': Union[Variation_335, Variation_335_Arg],
})
Variation_336_Arg : TypeAlias = Union[Raw, Variation_336_Arg_Group]
class Variation_336(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('VDL', Variation_333),
        ('MDS', Variation_334),
        ('UAT', Variation_335),
        Spare(3, 5),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VDL': ('VDL Mode 4', Variation_333, 0, 1),
        'MDS': ('Mode S', Variation_334, 1, 1),
        'UAT': ('UAT', Variation_335, 2, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VDL']) -> Type[Variation_333]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_334]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_335]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VDL'], Literal['MDS'], Literal['UAT']]) -> Union[Type['Variation_333'], Type['Variation_334'], Type['Variation_335']]:
        if key == 'VDL':
            return Variation_333
        if key == 'MDS':
            return Variation_334
        if key == 'UAT':
            return Variation_335
        assert_never(key)

    def __init__(self, arg : Variation_336_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VDL']) -> Variation_333:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_334:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_335:
        ...

    def get_item(self, name : Union[Literal['VDL'], Literal['MDS'], Literal['UAT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VDL'], val : Union[Variation_333, Variation_333_Arg]) -> 'Variation_336':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_334, Variation_334_Arg]) -> 'Variation_336':
        ...

    @overload
    def set_item(self, name : Literal['UAT'], val : Union[Variation_335, Variation_335_Arg]) -> 'Variation_336':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_337_Arg = TypedDict('Variation_337_Arg', {
    'MB': Union[Variation_322, Variation_322_Arg],
    'ADR': Union[Variation_279, Variation_279_Arg],
    'COMACAS': Union[Variation_330, Variation_330_Arg],
    'ACT': Union[Variation_331, Variation_331_Arg],
    'ECAT': Union[Variation_332, Variation_332_Arg],
    'AVTECH': Union[Variation_336, Variation_336_Arg],
}, total=False)
class Variation_337(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('MB', Variation_322),
        ('ADR', Variation_279),
        None,
        ('COMACAS', Variation_330),
        None,
        None,
        None,
        ('ACT', Variation_331),
        ('ECAT', Variation_332),
        None,
        ('AVTECH', Variation_336),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'MB': (Variation_322, 0x8000),
        'ADR': (Variation_279, 0x4000),
        'COMACAS': (Variation_330, 0x1000),
        'ACT': (Variation_331, 0x0180),
        'ECAT': (Variation_332, 0x0140),
        'AVTECH': (Variation_336, 0x0110),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADR']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COMACAS']) -> Type[Variation_330]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACT']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ECAT']) -> Type[Variation_332]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVTECH']) -> Type[Variation_336]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MB'], Literal['ADR'], Literal['COMACAS'], Literal['ACT'], Literal['ECAT'], Literal['AVTECH']]) -> Union[Type['Variation_322'], Type['Variation_279'], Type['Variation_330'], Type['Variation_331'], Type['Variation_332'], Type['Variation_336']]:
        if key == 'MB':
            return Variation_322
        if key == 'ADR':
            return Variation_279
        if key == 'COMACAS':
            return Variation_330
        if key == 'ACT':
            return Variation_331
        if key == 'ECAT':
            return Variation_332
        if key == 'AVTECH':
            return Variation_336
        assert_never(key)

    def __init__(self, arg : Optional[Variation_337_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_337':
        ...

    @overload
    def set_item(self, name : Literal['ADR'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_337':
        ...

    @overload
    def set_item(self, name : Literal['COMACAS'], val : Union[Variation_330, Variation_330_Arg]) -> 'Variation_337':
        ...

    @overload
    def set_item(self, name : Literal['ACT'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_337':
        ...

    @overload
    def set_item(self, name : Literal['ECAT'], val : Union[Variation_332, Variation_332_Arg]) -> 'Variation_337':
        ...

    @overload
    def set_item(self, name : Literal['AVTECH'], val : Union[Variation_336, Variation_336_Arg]) -> 'Variation_337':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_337':
        ...

    @overload
    def del_item(self, name : Literal['ADR']) -> 'Variation_337':
        ...

    @overload
    def del_item(self, name : Literal['COMACAS']) -> 'Variation_337':
        ...

    @overload
    def del_item(self, name : Literal['ACT']) -> 'Variation_337':
        ...

    @overload
    def del_item(self, name : Literal['ECAT']) -> 'Variation_337':
        ...

    @overload
    def del_item(self, name : Literal['AVTECH']) -> 'Variation_337':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['ADR']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['COMACAS']) -> Variation_330:
        ...

    @overload
    def get_item(self, name : Literal['ACT']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['ECAT']) -> Variation_332:
        ...

    @overload
    def get_item(self, name : Literal['AVTECH']) -> Variation_336:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_338_Arg : TypeAlias = Raw
class Variation_338(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 15

    def __init__(self, arg : Variation_338_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_339_Arg_Group = TypedDict('Variation_339_Arg_Group', {
    'FTN': Union[Variation_338, Variation_338_Arg],
})
Variation_339_Arg : TypeAlias = Union[Raw, Variation_339_Arg_Group]
class Variation_339(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 1),
        ('FTN', Variation_338),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FTN': ('Fusion Track Number', Variation_338, 1, 15),
    }

    @classmethod
    def spec(cls, key : Union[Literal['FTN']]) -> Union[Type['Variation_338']]:
        if key == 'FTN':
            return Variation_338
        assert_never(key)

    def __init__(self, arg : Variation_339_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['FTN']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['FTN'], val : Union[Variation_338, Variation_338_Arg]) -> 'Variation_339':
        return self._set_item(name, val) # type: ignore

Variation_340_Arg : TypeAlias = Raw
class Variation_340(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Multisensor Track',
        1: 'Monosensor Track',
    }

    def __init__(self, arg : Variation_340_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_341_Arg : TypeAlias = Raw
class Variation_341(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Transponder Ground bit not set or unknown',
        1: 'Transponder Ground bit set',
    }

    def __init__(self, arg : Variation_341_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_342_Arg : TypeAlias = Raw
class Variation_342(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Barometric altitude (Mode C) more reliable',
        1: 'Geometric altitude more reliable',
    }

    def __init__(self, arg : Variation_342_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_343_Arg : TypeAlias = Raw
class Variation_343(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No source',
        1: 'GPS',
        2: '3d radar',
        3: 'Triangulation',
        4: 'Height from coverage',
        5: 'Speed look-up table',
        6: 'Default height',
        7: 'Multilateration',
    }

    def __init__(self, arg : Variation_343_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_344_Arg : TypeAlias = Raw
class Variation_344(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Confirmed track',
        1: 'Tentative track',
    }

    def __init__(self, arg : Variation_344_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_345_Arg : TypeAlias = Raw
class Variation_345(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Actual Track',
        1: 'Simulated track',
    }

    def __init__(self, arg : Variation_345_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_346_Arg : TypeAlias = Raw
class Variation_346(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Track service end (i.e. last message transmitted to the user for the track)',
    }

    def __init__(self, arg : Variation_346_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_347_Arg : TypeAlias = Raw
class Variation_347(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Track service begin (i.e. first message transmitted to the user for the track)',
    }

    def __init__(self, arg : Variation_347_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_348_Arg : TypeAlias = Raw
class Variation_348(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'No Mode 4 interrogationt',
        1: 'Friendly target',
        2: 'Unknown target',
        3: 'No reply',
    }

    def __init__(self, arg : Variation_348_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_349_Arg : TypeAlias = Raw
class Variation_349(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Military Emergency present in the last report received from a sensor capable of decoding this data',
    }

    def __init__(self, arg : Variation_349_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_350_Arg : TypeAlias = Raw
class Variation_350(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'End of Data Item',
        1: 'Military Identification present in the last report received from a sensor capable of decoding this data',
    }

    def __init__(self, arg : Variation_350_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_351_Arg : TypeAlias = Raw
class Variation_351(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Track not resulting from amalgamation process',
        1: 'Track resulting from amalgamation process',
    }

    def __init__(self, arg : Variation_351_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_352_Arg : TypeAlias = Raw
class Variation_352(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'SPI present in the last report received from a sensor capable of decoding this data',
    }

    def __init__(self, arg : Variation_352_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_353_Arg : TypeAlias = Raw
class Variation_353(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received track update is higher than system dependent threshold (coasting)',
    }

    def __init__(self, arg : Variation_353_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_354_Arg : TypeAlias = Raw
class Variation_354(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Not flight-plan correlated',
        1: 'Flight plan correlated',
    }

    def __init__(self, arg : Variation_354_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_355_Arg : TypeAlias = Raw
class Variation_355(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'ADS-B data inconsistent with other surveillance information',
    }

    def __init__(self, arg : Variation_355_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_356_Arg_Group_1 = TypedDict('Variation_356_Arg_Group_1', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
})
Variation_356_Arg_Group_2 = TypedDict('Variation_356_Arg_Group_2', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_345, Variation_345_Arg],
    'TSE': Union[Variation_346, Variation_346_Arg],
    'TSB': Union[Variation_347, Variation_347_Arg],
    'FRIFOE': Union[Variation_348, Variation_348_Arg],
    'ME': Union[Variation_349, Variation_349_Arg],
    'MI': Union[Variation_350, Variation_350_Arg],
})
Variation_356_Arg_Group_3 = TypedDict('Variation_356_Arg_Group_3', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_345, Variation_345_Arg],
    'TSE': Union[Variation_346, Variation_346_Arg],
    'TSB': Union[Variation_347, Variation_347_Arg],
    'FRIFOE': Union[Variation_348, Variation_348_Arg],
    'ME': Union[Variation_349, Variation_349_Arg],
    'MI': Union[Variation_350, Variation_350_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'CST': Union[Variation_353, Variation_353_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
})
Variation_356_Arg : TypeAlias = Union[
    int,
    Variation_356_Arg_Group_1,
    Tuple[int],
    Variation_356_Arg_Group_2,
    Tuple[int,int],
    Variation_356_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_356(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MON', Variation_340),
            ('GBS', Variation_341),
            ('MRH', Variation_342),
            ('SRC', Variation_343),
            ('CNF', Variation_344),
        ],
        [
            ('SIM', Variation_345),
            ('TSE', Variation_346),
            ('TSB', Variation_347),
            ('FRIFOE', Variation_348),
            ('ME', Variation_349),
            ('MI', Variation_350),
        ],
        [
            ('AMA', Variation_351),
            ('SPI', Variation_352),
            ('CST', Variation_353),
            ('FPC', Variation_354),
            ('AFF', Variation_355),
            Spare(5, 2),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MON': ('', Variation_340, 0, 1),
        'GBS': ('', Variation_341, 1, 1),
        'MRH': ('', Variation_342, 2, 1),
        'SRC': ('', Variation_343, 3, 3),
        'CNF': ('', Variation_344, 6, 1),
        'SIM': ('', Variation_345, 0, 1),
        'TSE': ('', Variation_346, 1, 1),
        'TSB': ('', Variation_347, 2, 1),
        'FRIFOE': ('', Variation_348, 3, 2),
        'ME': ('', Variation_349, 5, 1),
        'MI': ('', Variation_350, 6, 1),
        'AMA': ('', Variation_351, 0, 1),
        'SPI': ('', Variation_352, 1, 1),
        'CST': ('', Variation_353, 2, 1),
        'FPC': ('', Variation_354, 3, 1),
        'AFF': ('', Variation_355, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MON']) -> Type[Variation_340]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_341]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRH']) -> Type[Variation_342]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_343]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_344]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_345]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSE']) -> Type[Variation_346]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSB']) -> Type[Variation_347]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FRIFOE']) -> Type[Variation_348]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_349]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_350]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AMA']) -> Type[Variation_351]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_352]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_353]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPC']) -> Type[Variation_354]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AFF']) -> Type[Variation_355]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MON'], Literal['GBS'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FRIFOE'], Literal['ME'], Literal['MI'], Literal['AMA'], Literal['SPI'], Literal['CST'], Literal['FPC'], Literal['AFF']]) -> Union[Type['Variation_340'], Type['Variation_341'], Type['Variation_342'], Type['Variation_343'], Type['Variation_344'], Type['Variation_345'], Type['Variation_346'], Type['Variation_347'], Type['Variation_348'], Type['Variation_349'], Type['Variation_350'], Type['Variation_351'], Type['Variation_352'], Type['Variation_353'], Type['Variation_354'], Type['Variation_355']]:
        if key == 'MON':
            return Variation_340
        if key == 'GBS':
            return Variation_341
        if key == 'MRH':
            return Variation_342
        if key == 'SRC':
            return Variation_343
        if key == 'CNF':
            return Variation_344
        if key == 'SIM':
            return Variation_345
        if key == 'TSE':
            return Variation_346
        if key == 'TSB':
            return Variation_347
        if key == 'FRIFOE':
            return Variation_348
        if key == 'ME':
            return Variation_349
        if key == 'MI':
            return Variation_350
        if key == 'AMA':
            return Variation_351
        if key == 'SPI':
            return Variation_352
        if key == 'CST':
            return Variation_353
        if key == 'FPC':
            return Variation_354
        if key == 'AFF':
            return Variation_355
        assert_never(key)

    def __init__(self, arg : Variation_356_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_356_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_356_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_356_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MON']) -> Variation_340:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_341:
        ...

    @overload
    def get_item(self, name : Literal['MRH']) -> Variation_342:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_343:
        ...

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_344:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_345:
        ...

    @overload
    def get_item(self, name : Literal['TSE']) -> Variation_346:
        ...

    @overload
    def get_item(self, name : Literal['TSB']) -> Variation_347:
        ...

    @overload
    def get_item(self, name : Literal['FRIFOE']) -> Variation_348:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_349:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_350:
        ...

    @overload
    def get_item(self, name : Literal['AMA']) -> Variation_351:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_352:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_353:
        ...

    @overload
    def get_item(self, name : Literal['FPC']) -> Variation_354:
        ...

    @overload
    def get_item(self, name : Literal['AFF']) -> Variation_355:
        ...

    def get_item(self, name : Union[Literal['MON'], Literal['GBS'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FRIFOE'], Literal['ME'], Literal['MI'], Literal['AMA'], Literal['SPI'], Literal['CST'], Literal['FPC'], Literal['AFF']]) -> Any:
        return self._get_item(name)

Variation_357_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_357(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 2, 's')

    def __init__(self, arg : Variation_357_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_358_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_358(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 2, 's')

    def __init__(self, arg : Variation_358_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_359_Arg = TypedDict('Variation_359_Arg', {
    'PSR': Union[Variation_357, Variation_357_Arg],
    'SSR': Union[Variation_357, Variation_357_Arg],
    'MDA': Union[Variation_357, Variation_357_Arg],
    'MFL': Union[Variation_357, Variation_357_Arg],
    'MDS': Union[Variation_357, Variation_357_Arg],
    'ADS': Union[Variation_358, Variation_358_Arg],
    'ADB': Union[Variation_357, Variation_357_Arg],
    'MD1': Union[Variation_357, Variation_357_Arg],
    'MD2': Union[Variation_357, Variation_357_Arg],
    'LOP': Union[Variation_357, Variation_357_Arg],
    'TRK': Union[Variation_357, Variation_357_Arg],
    'MUL': Union[Variation_357, Variation_357_Arg],
}, total=False)
class Variation_359(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('PSR', Variation_357),
        ('SSR', Variation_357),
        ('MDA', Variation_357),
        ('MFL', Variation_357),
        ('MDS', Variation_357),
        ('ADS', Variation_358),
        ('ADB', Variation_357),
        ('MD1', Variation_357),
        ('MD2', Variation_357),
        ('LOP', Variation_357),
        ('TRK', Variation_357),
        ('MUL', Variation_357),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'PSR': (Variation_357, 0x8000),
        'SSR': (Variation_357, 0x4000),
        'MDA': (Variation_357, 0x2000),
        'MFL': (Variation_357, 0x1000),
        'MDS': (Variation_357, 0x0800),
        'ADS': (Variation_358, 0x0400),
        'ADB': (Variation_357, 0x0200),
        'MD1': (Variation_357, 0x0180),
        'MD2': (Variation_357, 0x0140),
        'LOP': (Variation_357, 0x0120),
        'TRK': (Variation_357, 0x0110),
        'MUL': (Variation_357, 0x0108),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDA']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MFL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_358]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADB']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD1']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD2']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LOP']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRK']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MUL']) -> Type[Variation_357]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PSR'], Literal['SSR'], Literal['MDA'], Literal['MFL'], Literal['MDS'], Literal['ADS'], Literal['ADB'], Literal['MD1'], Literal['MD2'], Literal['LOP'], Literal['TRK'], Literal['MUL']]) -> Union[Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_358'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357']]:
        if key == 'PSR':
            return Variation_357
        if key == 'SSR':
            return Variation_357
        if key == 'MDA':
            return Variation_357
        if key == 'MFL':
            return Variation_357
        if key == 'MDS':
            return Variation_357
        if key == 'ADS':
            return Variation_358
        if key == 'ADB':
            return Variation_357
        if key == 'MD1':
            return Variation_357
        if key == 'MD2':
            return Variation_357
        if key == 'LOP':
            return Variation_357
        if key == 'TRK':
            return Variation_357
        if key == 'MUL':
            return Variation_357
        assert_never(key)

    def __init__(self, arg : Optional[Variation_359_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['PSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['SSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MDA'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MFL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['ADS'], val : Union[Variation_358, Variation_358_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['ADB'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MD1'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MD2'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['LOP'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['TRK'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    @overload
    def set_item(self, name : Literal['MUL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_359':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['PSR']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['SSR']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MDA']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MFL']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MDS']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['ADS']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['ADB']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MD1']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MD2']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['LOP']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['TRK']) -> 'Variation_359':
        ...

    @overload
    def del_item(self, name : Literal['MUL']) -> 'Variation_359':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDA']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MFL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_358:
        ...

    @overload
    def get_item(self, name : Literal['ADB']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD1']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD2']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['LOP']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TRK']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MUL']) -> Variation_357:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_360_Arg : TypeAlias = Raw
class Variation_360(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Unknown',
        1: 'On stand',
        2: 'Taxiing for departure',
        3: 'Taxiing for arrival',
        4: 'Runway for departure',
        5: 'Runway for arrival',
        6: 'Hold for departure',
        7: 'Hold for arrival',
        8: 'Push back',
        9: 'On finals',
    }

    def __init__(self, arg : Variation_360_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_361_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_361(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_361_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_362_Arg : TypeAlias = Raw
class Variation_362(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No QNH correction applied',
        1: 'QNH correction applied',
    }

    def __init__(self, arg : Variation_362_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_363_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_363(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 15
    quantity = Quantity('Signed', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_363_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_364_Arg_Group = TypedDict('Variation_364_Arg_Group', {
    'QNH': Union[Variation_362, Variation_362_Arg],
    'CTBA': Union[Variation_363, Variation_363_Arg],
})
Variation_364_Arg : TypeAlias = Union[Raw, Variation_364_Arg_Group]
class Variation_364(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('QNH', Variation_362),
        ('CTBA', Variation_363),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QNH': ('QNH Correction Applied', Variation_362, 0, 1),
        'CTBA': ('Calculated Track Barometric Altitude', Variation_363, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['QNH']) -> Type[Variation_362]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CTBA']) -> Type[Variation_363]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['QNH'], Literal['CTBA']]) -> Union[Type['Variation_362'], Type['Variation_363']]:
        if key == 'QNH':
            return Variation_362
        if key == 'CTBA':
            return Variation_363
        assert_never(key)

    def __init__(self, arg : Variation_364_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['QNH']) -> Variation_362:
        ...

    @overload
    def get_item(self, name : Literal['CTBA']) -> Variation_363:
        ...

    def get_item(self, name : Union[Literal['QNH'], Literal['CTBA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['QNH'], val : Union[Variation_362, Variation_362_Arg]) -> 'Variation_364':
        ...

    @overload
    def set_item(self, name : Literal['CTBA'], val : Union[Variation_363, Variation_363_Arg]) -> 'Variation_364':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_365_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft/min']]]
class Variation_365(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 25.0, 2, 'ft/min')

    def __init__(self, arg : Variation_365_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_366_Arg_Group = TypedDict('Variation_366_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
})
Variation_366_Arg : TypeAlias = Union[Raw, Variation_366_Arg_Group]
class Variation_366(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('System Area Code', Variation_0, 0, 8),
        'SIC': ('System Identity Code', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_366_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_366':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_366':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_367_Arg : TypeAlias = Raw
class Variation_367(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Plan number',
        1: 'Unit 1 internal flight number',
        2: 'Unit 2 internal flight number',
        3: 'Unit 3 internal flight number',
    }

    def __init__(self, arg : Variation_367_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_368_Arg : TypeAlias = Raw
class Variation_368(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 27

    def __init__(self, arg : Variation_368_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_369_Arg_Group = TypedDict('Variation_369_Arg_Group', {
    'TYP': Union[Variation_367, Variation_367_Arg],
    'NBR': Union[Variation_368, Variation_368_Arg],
})
Variation_369_Arg : TypeAlias = Union[Raw, Variation_369_Arg_Group]
class Variation_369(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_367),
        Spare(2, 3),
        ('NBR', Variation_368),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('IFPS Flight ID Type', Variation_367, 0, 2),
        'NBR': ('IFPS Flight ID Number', Variation_368, 5, 27),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_367]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NBR']) -> Type[Variation_368]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['NBR']]) -> Union[Type['Variation_367'], Type['Variation_368']]:
        if key == 'TYP':
            return Variation_367
        if key == 'NBR':
            return Variation_368
        assert_never(key)

    def __init__(self, arg : Variation_369_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_367:
        ...

    @overload
    def get_item(self, name : Literal['NBR']) -> Variation_368:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['NBR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_367, Variation_367_Arg]) -> 'Variation_369':
        ...

    @overload
    def set_item(self, name : Literal['NBR'], val : Union[Variation_368, Variation_368_Arg]) -> 'Variation_369':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_370_Arg_Group = TypedDict('Variation_370_Arg_Group', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_159, Variation_159_Arg],
    'RVSM': Union[Variation_160, Variation_160_Arg],
    'HPR': Union[Variation_161, Variation_161_Arg],
})
Variation_370_Arg : TypeAlias = Union[Raw, Variation_370_Arg_Group]
class Variation_370(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('GATOAT', Variation_158),
        ('FR1FR2', Variation_159),
        ('RVSM', Variation_160),
        ('HPR', Variation_161),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GATOAT': ('Flight Type', Variation_158, 0, 2),
        'FR1FR2': ('Flight Rules', Variation_159, 2, 2),
        'RVSM': ('RVSM', Variation_160, 4, 2),
        'HPR': ('Flight Priority', Variation_161, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GATOAT']) -> Type[Variation_158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR1FR2']) -> Type[Variation_159]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RVSM']) -> Type[Variation_160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_161]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Union[Type['Variation_158'], Type['Variation_159'], Type['Variation_160'], Type['Variation_161']]:
        if key == 'GATOAT':
            return Variation_158
        if key == 'FR1FR2':
            return Variation_159
        if key == 'RVSM':
            return Variation_160
        if key == 'HPR':
            return Variation_161
        assert_never(key)

    def __init__(self, arg : Variation_370_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GATOAT']) -> Variation_158:
        ...

    @overload
    def get_item(self, name : Literal['FR1FR2']) -> Variation_159:
        ...

    @overload
    def get_item(self, name : Literal['RVSM']) -> Variation_160:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_161:
        ...

    def get_item(self, name : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GATOAT'], val : Union[Variation_158, Variation_158_Arg]) -> 'Variation_370':
        ...

    @overload
    def set_item(self, name : Literal['FR1FR2'], val : Union[Variation_159, Variation_159_Arg]) -> 'Variation_370':
        ...

    @overload
    def set_item(self, name : Literal['RVSM'], val : Union[Variation_160, Variation_160_Arg]) -> 'Variation_370':
        ...

    @overload
    def set_item(self, name : Literal['HPR'], val : Union[Variation_161, Variation_161_Arg]) -> 'Variation_370':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_371_Arg : TypeAlias = Raw
class Variation_371(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        76: 'Light',
        77: 'Medium',
        72: 'Heavy',
        74: 'Super',
    }

    def __init__(self, arg : Variation_371_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_372_Arg : TypeAlias = Union[Raw,str]
class Variation_372(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    string_type = StringAscii()

    def __init__(self, arg : Variation_372_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_373_Arg_Group = TypedDict('Variation_373_Arg_Group', {
    'CENTRE': Union[Variation_0, Variation_0_Arg],
    'POSITION': Union[Variation_0, Variation_0_Arg],
})
Variation_373_Arg : TypeAlias = Union[Raw, Variation_373_Arg_Group]
class Variation_373(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('CENTRE', Variation_0),
        ('POSITION', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CENTRE': ('8-bit Group Identification Code', Variation_0, 0, 8),
        'POSITION': ('8-bit Control Position Identification Code', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CENTRE']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POSITION']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CENTRE'], Literal['POSITION']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'CENTRE':
            return Variation_0
        if key == 'POSITION':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_373_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CENTRE']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['POSITION']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['CENTRE'], Literal['POSITION']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CENTRE'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_373':
        ...

    @overload
    def set_item(self, name : Literal['POSITION'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_373':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_374_Arg : TypeAlias = Raw
class Variation_374(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5
    table = {
        0: 'Scheduled off-block time',
        1: 'Estimated off-block time',
        2: 'Estimated take-off time',
        3: 'Actual off-block time',
        4: 'Predicted time at runway hold',
        5: 'Actual time at runway hold',
        6: 'Actual line-up time',
        7: 'Actual take-off time',
        8: 'Estimated time of arrival',
        9: 'Predicted landing time',
        10: 'Actual landing time',
        11: 'Actual time off runway',
        12: 'Predicted time to gate',
        13: 'Actual on-block time',
    }

    def __init__(self, arg : Variation_374_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_375_Arg : TypeAlias = Raw
class Variation_375(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Today',
        1: 'Yesterday',
        2: 'Tomorrow',
    }

    def __init__(self, arg : Variation_375_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_376_Arg : TypeAlias = Raw
class Variation_376(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 5

    def __init__(self, arg : Variation_376_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_377_Arg : TypeAlias = Raw
class Variation_377(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 6

    def __init__(self, arg : Variation_377_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_378_Arg : TypeAlias = Raw
class Variation_378(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Seconds available',
        1: 'Seconds not available',
    }

    def __init__(self, arg : Variation_378_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_379_Arg_Group = TypedDict('Variation_379_Arg_Group', {
    'TYP': Union[Variation_374, Variation_374_Arg],
    'DAY': Union[Variation_375, Variation_375_Arg],
    'HOR': Union[Variation_376, Variation_376_Arg],
    'MIN': Union[Variation_377, Variation_377_Arg],
    'AVS': Union[Variation_378, Variation_378_Arg],
    'SEC': Union[Variation_377, Variation_377_Arg],
})
Variation_379_Arg : TypeAlias = Union[Raw, Variation_379_Arg_Group]
class Variation_379(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_374),
        ('DAY', Variation_375),
        Spare(7, 4),
        ('HOR', Variation_376),
        Spare(0, 2),
        ('MIN', Variation_377),
        ('AVS', Variation_378),
        Spare(1, 1),
        ('SEC', Variation_377),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('Time Type', Variation_374, 0, 5),
        'DAY': ('Day', Variation_375, 5, 2),
        'HOR': ('Hours, from 0 to 23', Variation_376, 11, 5),
        'MIN': ('Minutes, from 0 to 59', Variation_377, 18, 6),
        'AVS': ('Seconds Available', Variation_378, 24, 1),
        'SEC': ('Seconds, from 0 to 59', Variation_377, 26, 6),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_374]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DAY']) -> Type[Variation_375]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HOR']) -> Type[Variation_376]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MIN']) -> Type[Variation_377]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVS']) -> Type[Variation_378]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SEC']) -> Type[Variation_377]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Union[Type['Variation_374'], Type['Variation_375'], Type['Variation_376'], Type['Variation_377'], Type['Variation_378'], Type['Variation_377']]:
        if key == 'TYP':
            return Variation_374
        if key == 'DAY':
            return Variation_375
        if key == 'HOR':
            return Variation_376
        if key == 'MIN':
            return Variation_377
        if key == 'AVS':
            return Variation_378
        if key == 'SEC':
            return Variation_377
        assert_never(key)

    def __init__(self, arg : Variation_379_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_374:
        ...

    @overload
    def get_item(self, name : Literal['DAY']) -> Variation_375:
        ...

    @overload
    def get_item(self, name : Literal['HOR']) -> Variation_376:
        ...

    @overload
    def get_item(self, name : Literal['MIN']) -> Variation_377:
        ...

    @overload
    def get_item(self, name : Literal['AVS']) -> Variation_378:
        ...

    @overload
    def get_item(self, name : Literal['SEC']) -> Variation_377:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_374, Variation_374_Arg]) -> 'Variation_379':
        ...

    @overload
    def set_item(self, name : Literal['DAY'], val : Union[Variation_375, Variation_375_Arg]) -> 'Variation_379':
        ...

    @overload
    def set_item(self, name : Literal['HOR'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_379':
        ...

    @overload
    def set_item(self, name : Literal['MIN'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_379':
        ...

    @overload
    def set_item(self, name : Literal['AVS'], val : Union[Variation_378, Variation_378_Arg]) -> 'Variation_379':
        ...

    @overload
    def set_item(self, name : Literal['SEC'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_379':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_380_Arg : TypeAlias = List[Union[Variation_379, Variation_379_Arg]]
class Variation_380(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_379

    @classmethod
    def spec(cls) -> Type[Variation_379]:
        return Variation_379

    def __init__(self, arg : List[Union[Variation_379, Variation_379_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_381_Arg : TypeAlias = Raw
class Variation_381(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Empty',
        1: 'Occupied',
        2: 'Unknown',
    }

    def __init__(self, arg : Variation_381_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_382_Arg : TypeAlias = Raw
class Variation_382(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Available',
        1: 'Not available',
        2: 'Unknown',
    }

    def __init__(self, arg : Variation_382_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_383_Arg_Group = TypedDict('Variation_383_Arg_Group', {
    'EMP': Union[Variation_381, Variation_381_Arg],
    'AVL': Union[Variation_382, Variation_382_Arg],
})
Variation_383_Arg : TypeAlias = Union[Raw, Variation_383_Arg_Group]
class Variation_383(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('EMP', Variation_381),
        ('AVL', Variation_382),
        Spare(4, 4),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EMP': ('Stand Empty', Variation_381, 0, 2),
        'AVL': ('Stand Available', Variation_382, 2, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EMP']) -> Type[Variation_381]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVL']) -> Type[Variation_382]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EMP'], Literal['AVL']]) -> Union[Type['Variation_381'], Type['Variation_382']]:
        if key == 'EMP':
            return Variation_381
        if key == 'AVL':
            return Variation_382
        assert_never(key)

    def __init__(self, arg : Variation_383_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EMP']) -> Variation_381:
        ...

    @overload
    def get_item(self, name : Literal['AVL']) -> Variation_382:
        ...

    def get_item(self, name : Union[Literal['EMP'], Literal['AVL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EMP'], val : Union[Variation_381, Variation_381_Arg]) -> 'Variation_383':
        ...

    @overload
    def set_item(self, name : Literal['AVL'], val : Union[Variation_382, Variation_382_Arg]) -> 'Variation_383':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_384_Arg = TypedDict('Variation_384_Arg', {
    'FPPSID': Union[Variation_366, Variation_366_Arg],
    'CSN': Union[Variation_149, Variation_149_Arg],
    'IFPSFLIGHTID': Union[Variation_369, Variation_369_Arg],
    'FLIGHTCAT': Union[Variation_370, Variation_370_Arg],
    'TOA': Union[Variation_331, Variation_331_Arg],
    'WTC': Union[Variation_371, Variation_371_Arg],
    'ADEP': Union[Variation_331, Variation_331_Arg],
    'ADES': Union[Variation_331, Variation_331_Arg],
    'RWY': Union[Variation_372, Variation_372_Arg],
    'CFL': Union[Variation_169, Variation_169_Arg],
    'CCP': Union[Variation_373, Variation_373_Arg],
    'TOD': Union[Variation_380, Variation_380_Arg],
    'AST': Union[Variation_166, Variation_166_Arg],
    'STS': Union[Variation_383, Variation_383_Arg],
}, total=False)
class Variation_384(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('FPPSID', Variation_366),
        ('CSN', Variation_149),
        ('IFPSFLIGHTID', Variation_369),
        ('FLIGHTCAT', Variation_370),
        ('TOA', Variation_331),
        ('WTC', Variation_371),
        ('ADEP', Variation_331),
        ('ADES', Variation_331),
        ('RWY', Variation_372),
        ('CFL', Variation_169),
        ('CCP', Variation_373),
        ('TOD', Variation_380),
        ('AST', Variation_166),
        ('STS', Variation_383),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'FPPSID': (Variation_366, 0x8000),
        'CSN': (Variation_149, 0x4000),
        'IFPSFLIGHTID': (Variation_369, 0x2000),
        'FLIGHTCAT': (Variation_370, 0x1000),
        'TOA': (Variation_331, 0x0800),
        'WTC': (Variation_371, 0x0400),
        'ADEP': (Variation_331, 0x0200),
        'ADES': (Variation_331, 0x0180),
        'RWY': (Variation_372, 0x0140),
        'CFL': (Variation_169, 0x0120),
        'CCP': (Variation_373, 0x0110),
        'TOD': (Variation_380, 0x0108),
        'AST': (Variation_166, 0x0104),
        'STS': (Variation_383, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FPPSID']) -> Type[Variation_366]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSN']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IFPSFLIGHTID']) -> Type[Variation_369]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FLIGHTCAT']) -> Type[Variation_370]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOA']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WTC']) -> Type[Variation_371]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADEP']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADES']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RWY']) -> Type[Variation_372]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CFL']) -> Type[Variation_169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CCP']) -> Type[Variation_373]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOD']) -> Type[Variation_380]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AST']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STS']) -> Type[Variation_383]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FPPSID'], Literal['CSN'], Literal['IFPSFLIGHTID'], Literal['FLIGHTCAT'], Literal['TOA'], Literal['WTC'], Literal['ADEP'], Literal['ADES'], Literal['RWY'], Literal['CFL'], Literal['CCP'], Literal['TOD'], Literal['AST'], Literal['STS']]) -> Union[Type['Variation_366'], Type['Variation_149'], Type['Variation_369'], Type['Variation_370'], Type['Variation_331'], Type['Variation_371'], Type['Variation_331'], Type['Variation_331'], Type['Variation_372'], Type['Variation_169'], Type['Variation_373'], Type['Variation_380'], Type['Variation_166'], Type['Variation_383']]:
        if key == 'FPPSID':
            return Variation_366
        if key == 'CSN':
            return Variation_149
        if key == 'IFPSFLIGHTID':
            return Variation_369
        if key == 'FLIGHTCAT':
            return Variation_370
        if key == 'TOA':
            return Variation_331
        if key == 'WTC':
            return Variation_371
        if key == 'ADEP':
            return Variation_331
        if key == 'ADES':
            return Variation_331
        if key == 'RWY':
            return Variation_372
        if key == 'CFL':
            return Variation_169
        if key == 'CCP':
            return Variation_373
        if key == 'TOD':
            return Variation_380
        if key == 'AST':
            return Variation_166
        if key == 'STS':
            return Variation_383
        assert_never(key)

    def __init__(self, arg : Optional[Variation_384_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['FPPSID'], val : Union[Variation_366, Variation_366_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['CSN'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['IFPSFLIGHTID'], val : Union[Variation_369, Variation_369_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['FLIGHTCAT'], val : Union[Variation_370, Variation_370_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['TOA'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['WTC'], val : Union[Variation_371, Variation_371_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['ADEP'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['ADES'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['RWY'], val : Union[Variation_372, Variation_372_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['CFL'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['CCP'], val : Union[Variation_373, Variation_373_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['TOD'], val : Union[Variation_380, Variation_380_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['AST'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_384':
        ...

    @overload
    def set_item(self, name : Literal['STS'], val : Union[Variation_383, Variation_383_Arg]) -> 'Variation_384':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['FPPSID']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['CSN']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['IFPSFLIGHTID']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['FLIGHTCAT']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['TOA']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['WTC']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['ADEP']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['ADES']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['RWY']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['CFL']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['CCP']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['TOD']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['AST']) -> 'Variation_384':
        ...

    @overload
    def del_item(self, name : Literal['STS']) -> 'Variation_384':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['FPPSID']) -> Variation_366:
        ...

    @overload
    def get_item(self, name : Literal['CSN']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['IFPSFLIGHTID']) -> Variation_369:
        ...

    @overload
    def get_item(self, name : Literal['FLIGHTCAT']) -> Variation_370:
        ...

    @overload
    def get_item(self, name : Literal['TOA']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['WTC']) -> Variation_371:
        ...

    @overload
    def get_item(self, name : Literal['ADEP']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['ADES']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['RWY']) -> Variation_372:
        ...

    @overload
    def get_item(self, name : Literal['CFL']) -> Variation_169:
        ...

    @overload
    def get_item(self, name : Literal['CCP']) -> Variation_373:
        ...

    @overload
    def get_item(self, name : Literal['TOD']) -> Variation_380:
        ...

    @overload
    def get_item(self, name : Literal['AST']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['STS']) -> Variation_383:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_385_Arg : TypeAlias = Raw
class Variation_385(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Flyco (follow me)',
        1: 'ATC equipment maintenance',
        2: 'Airport maintenance',
        3: 'Fire',
        4: 'Bird scarer',
        5: 'Snow plough',
        6: 'Runway sweeper',
        7: 'Emergency',
        8: 'Police',
        9: 'Bus',
        10: 'Tug (push/tow)',
        11: 'Grass cutter',
        12: 'Fuel',
        13: 'Baggage',
        14: 'Catering',
        15: 'Aircraft maintenance',
        16: 'Unknown',
    }

    def __init__(self, arg : Variation_385_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_386_Arg : TypeAlias = Raw
class Variation_386(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 7
    table = {
        1: 'Towing aircraft',
        2: 'FOLLOW-ME operation',
        3: 'Runway check',
        4: 'Emergency operation (fire, medical...)',
        5: 'Work in progress (maintenance, birds scarer, sweepers...)',
    }

    def __init__(self, arg : Variation_386_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_387_Arg_Group = TypedDict('Variation_387_Arg_Group', {
    'TRB': Union[Variation_298, Variation_298_Arg],
    'MSG': Union[Variation_386, Variation_386_Arg],
})
Variation_387_Arg : TypeAlias = Union[Raw, Variation_387_Arg_Group]
class Variation_387(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TRB', Variation_298),
        ('MSG', Variation_386),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRB': ('In Trouble', Variation_298, 0, 1),
        'MSG': ('Message', Variation_386, 1, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TRB']) -> Type[Variation_298]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSG']) -> Type[Variation_386]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TRB'], Literal['MSG']]) -> Union[Type['Variation_298'], Type['Variation_386']]:
        if key == 'TRB':
            return Variation_298
        if key == 'MSG':
            return Variation_386
        assert_never(key)

    def __init__(self, arg : Variation_387_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TRB']) -> Variation_298:
        ...

    @overload
    def get_item(self, name : Literal['MSG']) -> Variation_386:
        ...

    def get_item(self, name : Union[Literal['TRB'], Literal['MSG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TRB'], val : Union[Variation_298, Variation_298_Arg]) -> 'Variation_387':
        ...

    @overload
    def set_item(self, name : Literal['MSG'], val : Union[Variation_386, Variation_386_Arg]) -> 'Variation_387':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_388_Arg_Group = TypedDict('Variation_388_Arg_Group', {
    'X': Union[Variation_301, Variation_301_Arg],
    'Y': Union[Variation_301, Variation_301_Arg],
})
Variation_388_Arg : TypeAlias = Union[Raw, Variation_388_Arg_Group]
class Variation_388(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_301),
        ('Y', Variation_301),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('Estimated Accuracy of the Calculated Position of X Component', Variation_301, 0, 8),
        'Y': ('Estimated Accuracy of the Calculated Position of Y Component', Variation_301, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_301]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_301]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_301'], Type['Variation_301']]:
        if key == 'X':
            return Variation_301
        if key == 'Y':
            return Variation_301
        assert_never(key)

    def __init__(self, arg : Variation_388_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_301:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_301:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_301, Variation_301_Arg]) -> 'Variation_388':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_301, Variation_301_Arg]) -> 'Variation_388':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_389_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_389(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 180.0, 31, '°')

    def __init__(self, arg : Variation_389_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_390_Arg_Group = TypedDict('Variation_390_Arg_Group', {
    'LAT': Union[Variation_389, Variation_389_Arg],
    'LON': Union[Variation_389, Variation_389_Arg],
})
Variation_390_Arg : TypeAlias = Union[Raw, Variation_390_Arg_Group]
class Variation_390(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('LAT', Variation_389),
        ('LON', Variation_389),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('APW Latitude Component Accuracy', Variation_389, 0, 16),
        'LON': ('APW Longitude Component Accuracy', Variation_389, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_389]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_389]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_389'], Type['Variation_389']]:
        if key == 'LAT':
            return Variation_389
        if key == 'LON':
            return Variation_389
        assert_never(key)

    def __init__(self, arg : Variation_390_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_389:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_389:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_389, Variation_389_Arg]) -> 'Variation_390':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_389, Variation_389_Arg]) -> 'Variation_390':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_391_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_391(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 1, 'm')

    def __init__(self, arg : Variation_391_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_392_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_392(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 0.1, 0, 'm/s')

    def __init__(self, arg : Variation_392_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_393_Arg_Group = TypedDict('Variation_393_Arg_Group', {
    'X': Union[Variation_392, Variation_392_Arg],
    'Y': Union[Variation_392, Variation_392_Arg],
})
Variation_393_Arg : TypeAlias = Union[Raw, Variation_393_Arg_Group]
class Variation_393(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_392),
        ('Y', Variation_392),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('Estimated Accuracy of the Calculated Velocity of X Component', Variation_392, 0, 8),
        'Y': ('Estimated Accuracy of the Calculated Velocity of Y Component', Variation_392, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_392]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_392]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_392'], Type['Variation_392']]:
        if key == 'X':
            return Variation_392
        if key == 'Y':
            return Variation_392
        assert_never(key)

    def __init__(self, arg : Variation_393_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_392:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_392:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_392, Variation_392_Arg]) -> 'Variation_393':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_392, Variation_392_Arg]) -> 'Variation_393':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_394_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_394(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 0.1, 0, 'm/s')

    def __init__(self, arg : Variation_394_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_395_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_395(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'm/s2')

    def __init__(self, arg : Variation_395_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_396_Arg_Group = TypedDict('Variation_396_Arg_Group', {
    'X': Union[Variation_395, Variation_395_Arg],
    'Y': Union[Variation_395, Variation_395_Arg],
})
Variation_396_Arg : TypeAlias = Union[Raw, Variation_396_Arg_Group]
class Variation_396(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_395),
        ('Y', Variation_395),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('Estimated Accuracy Of Acceleration of X Component', Variation_395, 0, 8),
        'Y': ('Estimated Accuracy Of Acceleration of Y Component', Variation_395, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_395]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_395]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_395'], Type['Variation_395']]:
        if key == 'X':
            return Variation_395
        if key == 'Y':
            return Variation_395
        assert_never(key)

    def __init__(self, arg : Variation_396_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_395:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_395:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_395, Variation_395_Arg]) -> 'Variation_396':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_395, Variation_395_Arg]) -> 'Variation_396':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_397_Arg = TypedDict('Variation_397_Arg', {
    'APC': Union[Variation_388, Variation_388_Arg],
    'APW': Union[Variation_390, Variation_390_Arg],
    'ATH': Union[Variation_391, Variation_391_Arg],
    'AVC': Union[Variation_393, Variation_393_Arg],
    'ARC': Union[Variation_394, Variation_394_Arg],
    'AAC': Union[Variation_396, Variation_396_Arg],
}, total=False)
class Variation_397(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('APC', Variation_388),
        ('APW', Variation_390),
        ('ATH', Variation_391),
        ('AVC', Variation_393),
        ('ARC', Variation_394),
        ('AAC', Variation_396),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'APC': (Variation_388, 0x80),
        'APW': (Variation_390, 0x40),
        'ATH': (Variation_391, 0x20),
        'AVC': (Variation_393, 0x10),
        'ARC': (Variation_394, 0x08),
        'AAC': (Variation_396, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['APC']) -> Type[Variation_388]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['APW']) -> Type[Variation_390]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ATH']) -> Type[Variation_391]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVC']) -> Type[Variation_393]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_394]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AAC']) -> Type[Variation_396]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['APC'], Literal['APW'], Literal['ATH'], Literal['AVC'], Literal['ARC'], Literal['AAC']]) -> Union[Type['Variation_388'], Type['Variation_390'], Type['Variation_391'], Type['Variation_393'], Type['Variation_394'], Type['Variation_396']]:
        if key == 'APC':
            return Variation_388
        if key == 'APW':
            return Variation_390
        if key == 'ATH':
            return Variation_391
        if key == 'AVC':
            return Variation_393
        if key == 'ARC':
            return Variation_394
        if key == 'AAC':
            return Variation_396
        assert_never(key)

    def __init__(self, arg : Optional[Variation_397_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['APC'], val : Union[Variation_388, Variation_388_Arg]) -> 'Variation_397':
        ...

    @overload
    def set_item(self, name : Literal['APW'], val : Union[Variation_390, Variation_390_Arg]) -> 'Variation_397':
        ...

    @overload
    def set_item(self, name : Literal['ATH'], val : Union[Variation_391, Variation_391_Arg]) -> 'Variation_397':
        ...

    @overload
    def set_item(self, name : Literal['AVC'], val : Union[Variation_393, Variation_393_Arg]) -> 'Variation_397':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_394, Variation_394_Arg]) -> 'Variation_397':
        ...

    @overload
    def set_item(self, name : Literal['AAC'], val : Union[Variation_396, Variation_396_Arg]) -> 'Variation_397':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['APC']) -> 'Variation_397':
        ...

    @overload
    def del_item(self, name : Literal['APW']) -> 'Variation_397':
        ...

    @overload
    def del_item(self, name : Literal['ATH']) -> 'Variation_397':
        ...

    @overload
    def del_item(self, name : Literal['AVC']) -> 'Variation_397':
        ...

    @overload
    def del_item(self, name : Literal['ARC']) -> 'Variation_397':
        ...

    @overload
    def del_item(self, name : Literal['AAC']) -> 'Variation_397':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['APC']) -> Variation_388:
        ...

    @overload
    def get_item(self, name : Literal['APW']) -> Variation_390:
        ...

    @overload
    def get_item(self, name : Literal['ATH']) -> Variation_391:
        ...

    @overload
    def get_item(self, name : Literal['AVC']) -> Variation_393:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_394:
        ...

    @overload
    def get_item(self, name : Literal['AAC']) -> Variation_396:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_398_Arg : TypeAlias = Raw
class Variation_398(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Alert acknowledged',
        1: 'Alert not acknowledged',
    }

    def __init__(self, arg : Variation_398_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_399_Arg : TypeAlias = Raw
class Variation_399(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'End fo alert',
        1: 'Pre-alarm',
        2: 'Severe alert',
    }

    def __init__(self, arg : Variation_399_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_400_Arg_Group = TypedDict('Variation_400_Arg_Group', {
    'ACK': Union[Variation_398, Variation_398_Arg],
    'SVR': Union[Variation_399, Variation_399_Arg],
    'AT': Union[Variation_0, Variation_0_Arg],
    'AN': Union[Variation_0, Variation_0_Arg],
})
Variation_400_Arg : TypeAlias = Union[Raw, Variation_400_Arg_Group]
class Variation_400(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('ACK', Variation_398),
        ('SVR', Variation_399),
        Spare(3, 5),
        ('AT', Variation_0),
        ('AN', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ACK': ('Alert Acknowleged', Variation_398, 0, 1),
        'SVR': ('Alert Severity', Variation_399, 1, 2),
        'AT': ('Alert Type', Variation_0, 8, 8),
        'AN': ('Alert Number', Variation_0, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ACK']) -> Type[Variation_398]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SVR']) -> Type[Variation_399]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AT']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AN']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ACK'], Literal['SVR'], Literal['AT'], Literal['AN']]) -> Union[Type['Variation_398'], Type['Variation_399'], Type['Variation_0'], Type['Variation_0']]:
        if key == 'ACK':
            return Variation_398
        if key == 'SVR':
            return Variation_399
        if key == 'AT':
            return Variation_0
        if key == 'AN':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_400_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ACK']) -> Variation_398:
        ...

    @overload
    def get_item(self, name : Literal['SVR']) -> Variation_399:
        ...

    @overload
    def get_item(self, name : Literal['AT']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['AN']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['ACK'], Literal['SVR'], Literal['AT'], Literal['AN']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ACK'], val : Union[Variation_398, Variation_398_Arg]) -> 'Variation_400':
        ...

    @overload
    def set_item(self, name : Literal['SVR'], val : Union[Variation_399, Variation_399_Arg]) -> 'Variation_400':
        ...

    @overload
    def set_item(self, name : Literal['AT'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_400':
        ...

    @overload
    def set_item(self, name : Literal['AN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_400':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_401_Arg_Group = TypedDict('Variation_401_Arg_Group', {
    'FTN': Union[Variation_43, Variation_43_Arg],
})
Variation_401_Arg : TypeAlias = Union[Raw, Variation_401_Arg_Group]
class Variation_401(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('FTN', Variation_43),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FTN': ('Fusion Track Number', Variation_43, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['FTN']]) -> Union[Type['Variation_43']]:
        if key == 'FTN':
            return Variation_43
        assert_never(key)

    def __init__(self, arg : Variation_401_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['FTN']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['FTN'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_401':
        return self._set_item(name, val) # type: ignore

Variation_402_Arg : TypeAlias = List[Union[Variation_401, Variation_401_Arg]]
class Variation_402(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_401

    @classmethod
    def spec(cls) -> Type[Variation_401]:
        return Variation_401

    def __init__(self, arg : List[Union[Variation_401, Variation_401_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_403_Arg : TypeAlias = Raw
class Variation_403(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_403_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_404_Arg : TypeAlias = Raw
class Variation_404(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_404_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_405_Arg : TypeAlias = Raw
class Variation_405(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_405_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_406_Arg : TypeAlias = Raw
class Variation_406(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_406_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_407_Arg : TypeAlias = Raw
class Variation_407(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_407_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_408_Arg : TypeAlias = Raw
class Variation_408(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_408_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_409_Arg : TypeAlias = Raw
class Variation_409(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_409_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_410_Arg : TypeAlias = Raw
class Variation_410(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Indicator on',
        1: 'Indicator off',
    }

    def __init__(self, arg : Variation_410_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_411_Arg_Group = TypedDict('Variation_411_Arg_Group', {
    'BKN': Union[Variation_192, Variation_192_Arg],
    'I1': Union[Variation_403, Variation_403_Arg],
    'I2': Union[Variation_404, Variation_404_Arg],
    'I3': Union[Variation_405, Variation_405_Arg],
    'I4': Union[Variation_406, Variation_406_Arg],
    'I5': Union[Variation_407, Variation_407_Arg],
    'I6': Union[Variation_408, Variation_408_Arg],
    'I7': Union[Variation_409, Variation_409_Arg],
    'I8': Union[Variation_410, Variation_410_Arg],
    'I9': Union[Variation_403, Variation_403_Arg],
    'I10': Union[Variation_404, Variation_404_Arg],
    'I11': Union[Variation_405, Variation_405_Arg],
    'I12': Union[Variation_406, Variation_406_Arg],
})
Variation_411_Arg : TypeAlias = Union[Raw, Variation_411_Arg_Group]
class Variation_411(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('BKN', Variation_192),
        ('I1', Variation_403),
        ('I2', Variation_404),
        ('I3', Variation_405),
        ('I4', Variation_406),
        ('I5', Variation_407),
        ('I6', Variation_408),
        ('I7', Variation_409),
        ('I8', Variation_410),
        ('I9', Variation_403),
        ('I10', Variation_404),
        ('I11', Variation_405),
        ('I12', Variation_406),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'BKN': ('Bank Number', Variation_192, 0, 4),
        'I1': ('Indicator 1', Variation_403, 4, 1),
        'I2': ('Indicator 2', Variation_404, 5, 1),
        'I3': ('Indicator 3', Variation_405, 6, 1),
        'I4': ('Indicator 4', Variation_406, 7, 1),
        'I5': ('Indicator 5', Variation_407, 8, 1),
        'I6': ('Indicator 6', Variation_408, 9, 1),
        'I7': ('Indicator 7', Variation_409, 10, 1),
        'I8': ('Indicator 8', Variation_410, 11, 1),
        'I9': ('Indicator 9', Variation_403, 12, 1),
        'I10': ('Indicator 10', Variation_404, 13, 1),
        'I11': ('Indicator 11', Variation_405, 14, 1),
        'I12': ('Indicator 12', Variation_406, 15, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['BKN']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I1']) -> Type[Variation_403]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I2']) -> Type[Variation_404]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I3']) -> Type[Variation_405]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I4']) -> Type[Variation_406]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I5']) -> Type[Variation_407]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I6']) -> Type[Variation_408]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I7']) -> Type[Variation_409]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I8']) -> Type[Variation_410]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I9']) -> Type[Variation_403]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I10']) -> Type[Variation_404]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I11']) -> Type[Variation_405]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['I12']) -> Type[Variation_406]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['BKN'], Literal['I1'], Literal['I2'], Literal['I3'], Literal['I4'], Literal['I5'], Literal['I6'], Literal['I7'], Literal['I8'], Literal['I9'], Literal['I10'], Literal['I11'], Literal['I12']]) -> Union[Type['Variation_192'], Type['Variation_403'], Type['Variation_404'], Type['Variation_405'], Type['Variation_406'], Type['Variation_407'], Type['Variation_408'], Type['Variation_409'], Type['Variation_410'], Type['Variation_403'], Type['Variation_404'], Type['Variation_405'], Type['Variation_406']]:
        if key == 'BKN':
            return Variation_192
        if key == 'I1':
            return Variation_403
        if key == 'I2':
            return Variation_404
        if key == 'I3':
            return Variation_405
        if key == 'I4':
            return Variation_406
        if key == 'I5':
            return Variation_407
        if key == 'I6':
            return Variation_408
        if key == 'I7':
            return Variation_409
        if key == 'I8':
            return Variation_410
        if key == 'I9':
            return Variation_403
        if key == 'I10':
            return Variation_404
        if key == 'I11':
            return Variation_405
        if key == 'I12':
            return Variation_406
        assert_never(key)

    def __init__(self, arg : Variation_411_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['BKN']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['I1']) -> Variation_403:
        ...

    @overload
    def get_item(self, name : Literal['I2']) -> Variation_404:
        ...

    @overload
    def get_item(self, name : Literal['I3']) -> Variation_405:
        ...

    @overload
    def get_item(self, name : Literal['I4']) -> Variation_406:
        ...

    @overload
    def get_item(self, name : Literal['I5']) -> Variation_407:
        ...

    @overload
    def get_item(self, name : Literal['I6']) -> Variation_408:
        ...

    @overload
    def get_item(self, name : Literal['I7']) -> Variation_409:
        ...

    @overload
    def get_item(self, name : Literal['I8']) -> Variation_410:
        ...

    @overload
    def get_item(self, name : Literal['I9']) -> Variation_403:
        ...

    @overload
    def get_item(self, name : Literal['I10']) -> Variation_404:
        ...

    @overload
    def get_item(self, name : Literal['I11']) -> Variation_405:
        ...

    @overload
    def get_item(self, name : Literal['I12']) -> Variation_406:
        ...

    def get_item(self, name : Union[Literal['BKN'], Literal['I1'], Literal['I2'], Literal['I3'], Literal['I4'], Literal['I5'], Literal['I6'], Literal['I7'], Literal['I8'], Literal['I9'], Literal['I10'], Literal['I11'], Literal['I12']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['BKN'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I1'], val : Union[Variation_403, Variation_403_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I2'], val : Union[Variation_404, Variation_404_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I3'], val : Union[Variation_405, Variation_405_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I4'], val : Union[Variation_406, Variation_406_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I5'], val : Union[Variation_407, Variation_407_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I6'], val : Union[Variation_408, Variation_408_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I7'], val : Union[Variation_409, Variation_409_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I8'], val : Union[Variation_410, Variation_410_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I9'], val : Union[Variation_403, Variation_403_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I10'], val : Union[Variation_404, Variation_404_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I11'], val : Union[Variation_405, Variation_405_Arg]) -> 'Variation_411':
        ...

    @overload
    def set_item(self, name : Literal['I12'], val : Union[Variation_406, Variation_406_Arg]) -> 'Variation_411':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_412_Arg : TypeAlias = List[Union[Variation_411, Variation_411_Arg]]
class Variation_412(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_411

    @classmethod
    def spec(cls) -> Type[Variation_411]:
        return Variation_411

    def __init__(self, arg : List[Union[Variation_411, Variation_411_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_413_Arg = TypedDict('Variation_413_Arg', {
    '010': Union[Variation_311, Variation_311_Arg],
    '000': Union[Variation_312, Variation_312_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_313, Variation_313_Arg],
    '042': Union[Variation_314, Variation_314_Arg],
    '202': Union[Variation_316, Variation_316_Arg],
    '210': Union[Variation_318, Variation_318_Arg],
    '060': Union[Variation_319, Variation_319_Arg],
    '245': Union[Variation_320, Variation_320_Arg],
    '380': Union[Variation_337, Variation_337_Arg],
    '161': Union[Variation_339, Variation_339_Arg],
    '170': Union[Variation_356, Variation_356_Arg],
    '290': Union[Variation_359, Variation_359_Arg],
    '430': Union[Variation_360, Variation_360_Arg],
    '090': Union[Variation_361, Variation_361_Arg],
    '093': Union[Variation_364, Variation_364_Arg],
    '092': Union[Variation_288, Variation_288_Arg],
    '215': Union[Variation_365, Variation_365_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '390': Union[Variation_384, Variation_384_Arg],
    '300': Union[Variation_385, Variation_385_Arg],
    '310': Union[Variation_387, Variation_387_Arg],
    '500': Union[Variation_397, Variation_397_Arg],
    '600': Union[Variation_400, Variation_400_Arg],
    '605': Union[Variation_402, Variation_402_Arg],
    '610': Union[Variation_412, Variation_412_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_413(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_311),
        ('000', Variation_312),
        ('015', Variation_0),
        ('140', Variation_81),
        ('041', Variation_313),
        ('042', Variation_314),
        ('202', Variation_316),
        ('210', Variation_318),
        ('060', Variation_319),
        ('245', Variation_320),
        ('380', Variation_337),
        ('161', Variation_339),
        ('170', Variation_356),
        ('290', Variation_359),
        ('430', Variation_360),
        ('090', Variation_361),
        ('093', Variation_364),
        ('092', Variation_288),
        ('215', Variation_365),
        ('270', Variation_291),
        ('390', Variation_384),
        ('300', Variation_385),
        ('310', Variation_387),
        ('500', Variation_397),
        ('600', Variation_400),
        ('605', Variation_402),
        ('610', Variation_412),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_311, 0x8000000000),
        '000': (Variation_312, 0x4000000000),
        '015': (Variation_0, 0x2000000000),
        '140': (Variation_81, 0x1000000000),
        '041': (Variation_313, 0x0800000000),
        '042': (Variation_314, 0x0400000000),
        '202': (Variation_316, 0x0200000000),
        '210': (Variation_318, 0x0180000000),
        '060': (Variation_319, 0x0140000000),
        '245': (Variation_320, 0x0120000000),
        '380': (Variation_337, 0x0110000000),
        '161': (Variation_339, 0x0108000000),
        '170': (Variation_356, 0x0104000000),
        '290': (Variation_359, 0x0102000000),
        '430': (Variation_360, 0x0101800000),
        '090': (Variation_361, 0x0101400000),
        '093': (Variation_364, 0x0101200000),
        '092': (Variation_288, 0x0101100000),
        '215': (Variation_365, 0x0101080000),
        '270': (Variation_291, 0x0101040000),
        '390': (Variation_384, 0x0101020000),
        '300': (Variation_385, 0x0101018000),
        '310': (Variation_387, 0x0101014000),
        '500': (Variation_397, 0x0101012000),
        '600': (Variation_400, 0x0101011000),
        '605': (Variation_402, 0x0101010800),
        '610': (Variation_412, 0x0101010400),
        'SP': (Variation_62, 0x0101010200),
        'RE': (Variation_62, 0x0101010180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_311]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_312]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_313]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_314]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['202']) -> Type[Variation_316]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_318]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_319]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_320]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['380']) -> Type[Variation_337]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_339]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_356]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['290']) -> Type[Variation_359]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['430']) -> Type[Variation_360]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['093']) -> Type[Variation_364]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['092']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['215']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['390']) -> Type[Variation_384]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_385]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['310']) -> Type[Variation_387]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_397]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['600']) -> Type[Variation_400]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['605']) -> Type[Variation_402]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['610']) -> Type[Variation_412]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['140'], Literal['041'], Literal['042'], Literal['202'], Literal['210'], Literal['060'], Literal['245'], Literal['380'], Literal['161'], Literal['170'], Literal['290'], Literal['430'], Literal['090'], Literal['093'], Literal['092'], Literal['215'], Literal['270'], Literal['390'], Literal['300'], Literal['310'], Literal['500'], Literal['600'], Literal['605'], Literal['610'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_311'], Type['Variation_312'], Type['Variation_0'], Type['Variation_81'], Type['Variation_313'], Type['Variation_314'], Type['Variation_316'], Type['Variation_318'], Type['Variation_319'], Type['Variation_320'], Type['Variation_337'], Type['Variation_339'], Type['Variation_356'], Type['Variation_359'], Type['Variation_360'], Type['Variation_361'], Type['Variation_364'], Type['Variation_288'], Type['Variation_365'], Type['Variation_291'], Type['Variation_384'], Type['Variation_385'], Type['Variation_387'], Type['Variation_397'], Type['Variation_400'], Type['Variation_402'], Type['Variation_412'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_311
        if key == '000':
            return Variation_312
        if key == '015':
            return Variation_0
        if key == '140':
            return Variation_81
        if key == '041':
            return Variation_313
        if key == '042':
            return Variation_314
        if key == '202':
            return Variation_316
        if key == '210':
            return Variation_318
        if key == '060':
            return Variation_319
        if key == '245':
            return Variation_320
        if key == '380':
            return Variation_337
        if key == '161':
            return Variation_339
        if key == '170':
            return Variation_356
        if key == '290':
            return Variation_359
        if key == '430':
            return Variation_360
        if key == '090':
            return Variation_361
        if key == '093':
            return Variation_364
        if key == '092':
            return Variation_288
        if key == '215':
            return Variation_365
        if key == '270':
            return Variation_291
        if key == '390':
            return Variation_384
        if key == '300':
            return Variation_385
        if key == '310':
            return Variation_387
        if key == '500':
            return Variation_397
        if key == '600':
            return Variation_400
        if key == '605':
            return Variation_402
        if key == '610':
            return Variation_412
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_413_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_311, Variation_311_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_312, Variation_312_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_313, Variation_313_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_314, Variation_314_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['202'], val : Union[Variation_316, Variation_316_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_318, Variation_318_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_319, Variation_319_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_320, Variation_320_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['380'], val : Union[Variation_337, Variation_337_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_339, Variation_339_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_356, Variation_356_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['290'], val : Union[Variation_359, Variation_359_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['430'], val : Union[Variation_360, Variation_360_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['093'], val : Union[Variation_364, Variation_364_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['092'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['215'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['390'], val : Union[Variation_384, Variation_384_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_385, Variation_385_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['310'], val : Union[Variation_387, Variation_387_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_397, Variation_397_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['600'], val : Union[Variation_400, Variation_400_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['605'], val : Union[Variation_402, Variation_402_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['610'], val : Union[Variation_412, Variation_412_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_413':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_413':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['202']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['380']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['290']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['430']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['093']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['092']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['215']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['390']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['310']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['600']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['605']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['610']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_413':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_413':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_311:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_312:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_313:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_314:
        ...

    @overload
    def get_item(self, name : Literal['202']) -> Variation_316:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_318:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_319:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_320:
        ...

    @overload
    def get_item(self, name : Literal['380']) -> Variation_337:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_339:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_356:
        ...

    @overload
    def get_item(self, name : Literal['290']) -> Variation_359:
        ...

    @overload
    def get_item(self, name : Literal['430']) -> Variation_360:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['093']) -> Variation_364:
        ...

    @overload
    def get_item(self, name : Literal['092']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['215']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['390']) -> Variation_384:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_385:
        ...

    @overload
    def get_item(self, name : Literal['310']) -> Variation_387:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_397:
        ...

    @overload
    def get_item(self, name : Literal['600']) -> Variation_400:
        ...

    @overload
    def get_item(self, name : Literal['605']) -> Variation_402:
        ...

    @overload
    def get_item(self, name : Literal['610']) -> Variation_412:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_414_Arg : TypeAlias = Raw
class Variation_414(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 4
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
        6: 'General Emergency',
        7: 'Lifeguard / medical',
        8: 'Minimum fuel',
        9: 'No communications',
        10: 'Unlawful interference',
    }

    def __init__(self, arg : Variation_414_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_415_Arg_Group = TypedDict('Variation_415_Arg_Group', {
    'COM': Union[Variation_323, Variation_323_Arg],
    'STAT': Union[Variation_414, Variation_414_Arg],
    'SSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
    'AC': Union[Variation_325, Variation_325_Arg],
    'MN': Union[Variation_328, Variation_328_Arg],
    'DC': Union[Variation_329, Variation_329_Arg],
})
Variation_415_Arg : TypeAlias = Union[Raw, Variation_415_Arg_Group]
class Variation_415(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('COM', Variation_323),
        ('STAT', Variation_414),
        Spare(7, 1),
        ('SSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
        ('AC', Variation_325),
        ('MN', Variation_328),
        ('DC', Variation_329),
        Spare(3, 5),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_323, 0, 3),
        'STAT': ('Flight Status', Variation_414, 3, 4),
        'SSC': ('Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS 1,0 Bit 37/40', Variation_283, 12, 4),
        'AC': ('ACAS Operational', Variation_325, 16, 1),
        'MN': ('Multiple Navigational Aids Operating', Variation_328, 17, 1),
        'DC': ('Differential Correction', Variation_329, 18, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_323]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_414]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MN']) -> Type[Variation_328]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DC']) -> Type[Variation_329]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B'], Literal['AC'], Literal['MN'], Literal['DC']]) -> Union[Type['Variation_323'], Type['Variation_414'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283'], Type['Variation_325'], Type['Variation_328'], Type['Variation_329']]:
        if key == 'COM':
            return Variation_323
        if key == 'STAT':
            return Variation_414
        if key == 'SSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        if key == 'AC':
            return Variation_325
        if key == 'MN':
            return Variation_328
        if key == 'DC':
            return Variation_329
        assert_never(key)

    def __init__(self, arg : Variation_415_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_323:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_414:
        ...

    @overload
    def get_item(self, name : Literal['SSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    @overload
    def get_item(self, name : Literal['AC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['MN']) -> Variation_328:
        ...

    @overload
    def get_item(self, name : Literal['DC']) -> Variation_329:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B'], Literal['AC'], Literal['MN'], Literal['DC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_323, Variation_323_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_414, Variation_414_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['SSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['AC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['MN'], val : Union[Variation_328, Variation_328_Arg]) -> 'Variation_415':
        ...

    @overload
    def set_item(self, name : Literal['DC'], val : Union[Variation_329, Variation_329_Arg]) -> 'Variation_415':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_416_Arg = TypedDict('Variation_416_Arg', {
    'MB': Union[Variation_322, Variation_322_Arg],
    'ADR': Union[Variation_279, Variation_279_Arg],
    'COMACAS': Union[Variation_415, Variation_415_Arg],
    'ACT': Union[Variation_331, Variation_331_Arg],
    'ECAT': Union[Variation_332, Variation_332_Arg],
    'AVTECH': Union[Variation_336, Variation_336_Arg],
}, total=False)
class Variation_416(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('MB', Variation_322),
        ('ADR', Variation_279),
        None,
        ('COMACAS', Variation_415),
        None,
        None,
        None,
        ('ACT', Variation_331),
        ('ECAT', Variation_332),
        None,
        ('AVTECH', Variation_336),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'MB': (Variation_322, 0x8000),
        'ADR': (Variation_279, 0x4000),
        'COMACAS': (Variation_415, 0x1000),
        'ACT': (Variation_331, 0x0180),
        'ECAT': (Variation_332, 0x0140),
        'AVTECH': (Variation_336, 0x0110),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADR']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COMACAS']) -> Type[Variation_415]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACT']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ECAT']) -> Type[Variation_332]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVTECH']) -> Type[Variation_336]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MB'], Literal['ADR'], Literal['COMACAS'], Literal['ACT'], Literal['ECAT'], Literal['AVTECH']]) -> Union[Type['Variation_322'], Type['Variation_279'], Type['Variation_415'], Type['Variation_331'], Type['Variation_332'], Type['Variation_336']]:
        if key == 'MB':
            return Variation_322
        if key == 'ADR':
            return Variation_279
        if key == 'COMACAS':
            return Variation_415
        if key == 'ACT':
            return Variation_331
        if key == 'ECAT':
            return Variation_332
        if key == 'AVTECH':
            return Variation_336
        assert_never(key)

    def __init__(self, arg : Optional[Variation_416_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_416':
        ...

    @overload
    def set_item(self, name : Literal['ADR'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_416':
        ...

    @overload
    def set_item(self, name : Literal['COMACAS'], val : Union[Variation_415, Variation_415_Arg]) -> 'Variation_416':
        ...

    @overload
    def set_item(self, name : Literal['ACT'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_416':
        ...

    @overload
    def set_item(self, name : Literal['ECAT'], val : Union[Variation_332, Variation_332_Arg]) -> 'Variation_416':
        ...

    @overload
    def set_item(self, name : Literal['AVTECH'], val : Union[Variation_336, Variation_336_Arg]) -> 'Variation_416':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_416':
        ...

    @overload
    def del_item(self, name : Literal['ADR']) -> 'Variation_416':
        ...

    @overload
    def del_item(self, name : Literal['COMACAS']) -> 'Variation_416':
        ...

    @overload
    def del_item(self, name : Literal['ACT']) -> 'Variation_416':
        ...

    @overload
    def del_item(self, name : Literal['ECAT']) -> 'Variation_416':
        ...

    @overload
    def del_item(self, name : Literal['AVTECH']) -> 'Variation_416':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['ADR']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['COMACAS']) -> Variation_415:
        ...

    @overload
    def get_item(self, name : Literal['ACT']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['ECAT']) -> Variation_332:
        ...

    @overload
    def get_item(self, name : Literal['AVTECH']) -> Variation_336:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_417_Arg : TypeAlias = Raw
class Variation_417(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received PSR track update is higher than system dependent threshold',
    }

    def __init__(self, arg : Variation_417_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_418_Arg : TypeAlias = Raw
class Variation_418(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received SSR track update is higher than system dependent threshold',
    }

    def __init__(self, arg : Variation_418_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_419_Arg : TypeAlias = Raw
class Variation_419(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received Mode S track update is higher than system dependent threshold',
    }

    def __init__(self, arg : Variation_419_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_420_Arg : TypeAlias = Raw
class Variation_420(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received ADS track update is higher than system dependent threshold',
    }

    def __init__(self, arg : Variation_420_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_421_Arg : TypeAlias = Raw
class Variation_421(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Special Used Code (Mode A codes to be defined in the system to mark a track with special interest)',
    }

    def __init__(self, arg : Variation_421_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_422_Arg : TypeAlias = Raw
class Variation_422(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Assigned Mode A Code Conflict (same individual Mode A Code assigned to another track)',
    }

    def __init__(self, arg : Variation_422_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_423_Arg_Group_1 = TypedDict('Variation_423_Arg_Group_1', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
})
Variation_423_Arg_Group_2 = TypedDict('Variation_423_Arg_Group_2', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_345, Variation_345_Arg],
    'TSE': Union[Variation_346, Variation_346_Arg],
    'TSB': Union[Variation_347, Variation_347_Arg],
    'FRIFOE': Union[Variation_348, Variation_348_Arg],
    'ME': Union[Variation_349, Variation_349_Arg],
    'MI': Union[Variation_350, Variation_350_Arg],
})
Variation_423_Arg_Group_3 = TypedDict('Variation_423_Arg_Group_3', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_345, Variation_345_Arg],
    'TSE': Union[Variation_346, Variation_346_Arg],
    'TSB': Union[Variation_347, Variation_347_Arg],
    'FRIFOE': Union[Variation_348, Variation_348_Arg],
    'ME': Union[Variation_349, Variation_349_Arg],
    'MI': Union[Variation_350, Variation_350_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'CST': Union[Variation_353, Variation_353_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
})
Variation_423_Arg_Group_4 = TypedDict('Variation_423_Arg_Group_4', {
    'MON': Union[Variation_340, Variation_340_Arg],
    'GBS': Union[Variation_341, Variation_341_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_343, Variation_343_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_345, Variation_345_Arg],
    'TSE': Union[Variation_346, Variation_346_Arg],
    'TSB': Union[Variation_347, Variation_347_Arg],
    'FRIFOE': Union[Variation_348, Variation_348_Arg],
    'ME': Union[Variation_349, Variation_349_Arg],
    'MI': Union[Variation_350, Variation_350_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'CST': Union[Variation_353, Variation_353_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_420, Variation_420_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_422, Variation_422_Arg],
})
Variation_423_Arg : TypeAlias = Union[
    int,
    Variation_423_Arg_Group_1,
    Tuple[int],
    Variation_423_Arg_Group_2,
    Tuple[int,int],
    Variation_423_Arg_Group_3,
    Tuple[int,int,int],
    Variation_423_Arg_Group_4,
    Tuple[int,int,int,int],
]
class Variation_423(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MON', Variation_340),
            ('GBS', Variation_341),
            ('MRH', Variation_342),
            ('SRC', Variation_343),
            ('CNF', Variation_344),
        ],
        [
            ('SIM', Variation_345),
            ('TSE', Variation_346),
            ('TSB', Variation_347),
            ('FRIFOE', Variation_348),
            ('ME', Variation_349),
            ('MI', Variation_350),
        ],
        [
            ('AMA', Variation_351),
            ('SPI', Variation_352),
            ('CST', Variation_353),
            ('FPC', Variation_354),
            ('AFF', Variation_355),
            Spare(5, 2),
        ],
        [
            Spare(0, 1),
            ('PSR', Variation_417),
            ('SSR', Variation_418),
            ('MDS', Variation_419),
            ('ADS', Variation_420),
            ('SUC', Variation_421),
            ('AAC', Variation_422),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MON': ('', Variation_340, 0, 1),
        'GBS': ('', Variation_341, 1, 1),
        'MRH': ('', Variation_342, 2, 1),
        'SRC': ('', Variation_343, 3, 3),
        'CNF': ('', Variation_344, 6, 1),
        'SIM': ('', Variation_345, 0, 1),
        'TSE': ('', Variation_346, 1, 1),
        'TSB': ('', Variation_347, 2, 1),
        'FRIFOE': ('', Variation_348, 3, 2),
        'ME': ('', Variation_349, 5, 1),
        'MI': ('', Variation_350, 6, 1),
        'AMA': ('', Variation_351, 0, 1),
        'SPI': ('', Variation_352, 1, 1),
        'CST': ('', Variation_353, 2, 1),
        'FPC': ('', Variation_354, 3, 1),
        'AFF': ('', Variation_355, 4, 1),
        'PSR': ('', Variation_417, 1, 1),
        'SSR': ('', Variation_418, 2, 1),
        'MDS': ('', Variation_419, 3, 1),
        'ADS': ('', Variation_420, 4, 1),
        'SUC': ('', Variation_421, 5, 1),
        'AAC': ('', Variation_422, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MON']) -> Type[Variation_340]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_341]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRH']) -> Type[Variation_342]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_343]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_344]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_345]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSE']) -> Type[Variation_346]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSB']) -> Type[Variation_347]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FRIFOE']) -> Type[Variation_348]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_349]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_350]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AMA']) -> Type[Variation_351]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_352]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_353]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPC']) -> Type[Variation_354]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AFF']) -> Type[Variation_355]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_417]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_418]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_419]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_420]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SUC']) -> Type[Variation_421]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AAC']) -> Type[Variation_422]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MON'], Literal['GBS'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FRIFOE'], Literal['ME'], Literal['MI'], Literal['AMA'], Literal['SPI'], Literal['CST'], Literal['FPC'], Literal['AFF'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC']]) -> Union[Type['Variation_340'], Type['Variation_341'], Type['Variation_342'], Type['Variation_343'], Type['Variation_344'], Type['Variation_345'], Type['Variation_346'], Type['Variation_347'], Type['Variation_348'], Type['Variation_349'], Type['Variation_350'], Type['Variation_351'], Type['Variation_352'], Type['Variation_353'], Type['Variation_354'], Type['Variation_355'], Type['Variation_417'], Type['Variation_418'], Type['Variation_419'], Type['Variation_420'], Type['Variation_421'], Type['Variation_422']]:
        if key == 'MON':
            return Variation_340
        if key == 'GBS':
            return Variation_341
        if key == 'MRH':
            return Variation_342
        if key == 'SRC':
            return Variation_343
        if key == 'CNF':
            return Variation_344
        if key == 'SIM':
            return Variation_345
        if key == 'TSE':
            return Variation_346
        if key == 'TSB':
            return Variation_347
        if key == 'FRIFOE':
            return Variation_348
        if key == 'ME':
            return Variation_349
        if key == 'MI':
            return Variation_350
        if key == 'AMA':
            return Variation_351
        if key == 'SPI':
            return Variation_352
        if key == 'CST':
            return Variation_353
        if key == 'FPC':
            return Variation_354
        if key == 'AFF':
            return Variation_355
        if key == 'PSR':
            return Variation_417
        if key == 'SSR':
            return Variation_418
        if key == 'MDS':
            return Variation_419
        if key == 'ADS':
            return Variation_420
        if key == 'SUC':
            return Variation_421
        if key == 'AAC':
            return Variation_422
        assert_never(key)

    def __init__(self, arg : Variation_423_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_423_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_423_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_423_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_423_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MON']) -> Variation_340:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_341:
        ...

    @overload
    def get_item(self, name : Literal['MRH']) -> Variation_342:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_343:
        ...

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_344:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_345:
        ...

    @overload
    def get_item(self, name : Literal['TSE']) -> Variation_346:
        ...

    @overload
    def get_item(self, name : Literal['TSB']) -> Variation_347:
        ...

    @overload
    def get_item(self, name : Literal['FRIFOE']) -> Variation_348:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_349:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_350:
        ...

    @overload
    def get_item(self, name : Literal['AMA']) -> Variation_351:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_352:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_353:
        ...

    @overload
    def get_item(self, name : Literal['FPC']) -> Variation_354:
        ...

    @overload
    def get_item(self, name : Literal['AFF']) -> Variation_355:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_417:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_418:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_419:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_420:
        ...

    @overload
    def get_item(self, name : Literal['SUC']) -> Variation_421:
        ...

    @overload
    def get_item(self, name : Literal['AAC']) -> Variation_422:
        ...

    def get_item(self, name : Union[Literal['MON'], Literal['GBS'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FRIFOE'], Literal['ME'], Literal['MI'], Literal['AMA'], Literal['SPI'], Literal['CST'], Literal['FPC'], Literal['AFF'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC']]) -> Any:
        return self._get_item(name)

Variation_424_Arg = TypedDict('Variation_424_Arg', {
    'PSR': Union[Variation_357, Variation_357_Arg],
    'SSR': Union[Variation_357, Variation_357_Arg],
    'MDA': Union[Variation_357, Variation_357_Arg],
    'MFL': Union[Variation_357, Variation_357_Arg],
    'MDS': Union[Variation_357, Variation_357_Arg],
    'ADS': Union[Variation_358, Variation_358_Arg],
    'ADB': Union[Variation_357, Variation_357_Arg],
    'MD1': Union[Variation_357, Variation_357_Arg],
    'MD2': Union[Variation_357, Variation_357_Arg],
    'LOP': Union[Variation_357, Variation_357_Arg],
    'TRK': Union[Variation_357, Variation_357_Arg],
    'MUL': Union[Variation_357, Variation_357_Arg],
}, total=False)
class Variation_424(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('PSR', Variation_357),
        ('SSR', Variation_357),
        ('MDA', Variation_357),
        ('MFL', Variation_357),
        ('MDS', Variation_357),
        ('ADS', Variation_358),
        ('ADB', Variation_357),
        ('MD1', Variation_357),
        ('MD2', Variation_357),
        ('LOP', Variation_357),
        ('TRK', Variation_357),
        ('MUL', Variation_357),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'PSR': (Variation_357, 0x8000),
        'SSR': (Variation_357, 0x4000),
        'MDA': (Variation_357, 0x2000),
        'MFL': (Variation_357, 0x1000),
        'MDS': (Variation_357, 0x0800),
        'ADS': (Variation_358, 0x0400),
        'ADB': (Variation_357, 0x0200),
        'MD1': (Variation_357, 0x0180),
        'MD2': (Variation_357, 0x0140),
        'LOP': (Variation_357, 0x0120),
        'TRK': (Variation_357, 0x0110),
        'MUL': (Variation_357, 0x0108),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDA']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MFL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_358]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADB']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD1']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD2']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LOP']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRK']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MUL']) -> Type[Variation_357]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PSR'], Literal['SSR'], Literal['MDA'], Literal['MFL'], Literal['MDS'], Literal['ADS'], Literal['ADB'], Literal['MD1'], Literal['MD2'], Literal['LOP'], Literal['TRK'], Literal['MUL']]) -> Union[Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_358'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357']]:
        if key == 'PSR':
            return Variation_357
        if key == 'SSR':
            return Variation_357
        if key == 'MDA':
            return Variation_357
        if key == 'MFL':
            return Variation_357
        if key == 'MDS':
            return Variation_357
        if key == 'ADS':
            return Variation_358
        if key == 'ADB':
            return Variation_357
        if key == 'MD1':
            return Variation_357
        if key == 'MD2':
            return Variation_357
        if key == 'LOP':
            return Variation_357
        if key == 'TRK':
            return Variation_357
        if key == 'MUL':
            return Variation_357
        assert_never(key)

    def __init__(self, arg : Optional[Variation_424_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['PSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['SSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MDA'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MFL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['ADS'], val : Union[Variation_358, Variation_358_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['ADB'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MD1'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MD2'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['LOP'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['TRK'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    @overload
    def set_item(self, name : Literal['MUL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_424':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['PSR']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['SSR']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MDA']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MFL']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MDS']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['ADS']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['ADB']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MD1']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MD2']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['LOP']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['TRK']) -> 'Variation_424':
        ...

    @overload
    def del_item(self, name : Literal['MUL']) -> 'Variation_424':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDA']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MFL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_358:
        ...

    @overload
    def get_item(self, name : Literal['ADB']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD1']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD2']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['LOP']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TRK']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MUL']) -> Variation_357:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_425_Arg : TypeAlias = Raw
class Variation_425(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No QNH Correction Applied',
        1: 'QNH Correction Applied',
    }

    def __init__(self, arg : Variation_425_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_426_Arg_Group = TypedDict('Variation_426_Arg_Group', {
    'QNH': Union[Variation_425, Variation_425_Arg],
    'CTBA': Union[Variation_363, Variation_363_Arg],
})
Variation_426_Arg : TypeAlias = Union[Raw, Variation_426_Arg_Group]
class Variation_426(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('QNH', Variation_425),
        ('CTBA', Variation_363),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QNH': ('QNH Correction Applied', Variation_425, 0, 1),
        'CTBA': ('Calculated Track Barometric Altitude', Variation_363, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['QNH']) -> Type[Variation_425]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CTBA']) -> Type[Variation_363]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['QNH'], Literal['CTBA']]) -> Union[Type['Variation_425'], Type['Variation_363']]:
        if key == 'QNH':
            return Variation_425
        if key == 'CTBA':
            return Variation_363
        assert_never(key)

    def __init__(self, arg : Variation_426_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['QNH']) -> Variation_425:
        ...

    @overload
    def get_item(self, name : Literal['CTBA']) -> Variation_363:
        ...

    def get_item(self, name : Union[Literal['QNH'], Literal['CTBA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['QNH'], val : Union[Variation_425, Variation_425_Arg]) -> 'Variation_426':
        ...

    @overload
    def set_item(self, name : Literal['CTBA'], val : Union[Variation_363, Variation_363_Arg]) -> 'Variation_426':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_427_Arg : TypeAlias = Raw
class Variation_427(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Instrument Flight Rules',
        1: 'Visual Flight Rules',
        2: 'Not applicable',
        3: 'Controlled Visual Flight Rules',
    }

    def __init__(self, arg : Variation_427_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_428_Arg_Group = TypedDict('Variation_428_Arg_Group', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_427, Variation_427_Arg],
    'RVSM': Union[Variation_160, Variation_160_Arg],
    'HPR': Union[Variation_161, Variation_161_Arg],
})
Variation_428_Arg : TypeAlias = Union[Raw, Variation_428_Arg_Group]
class Variation_428(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('GATOAT', Variation_158),
        ('FR1FR2', Variation_427),
        ('RVSM', Variation_160),
        ('HPR', Variation_161),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GATOAT': ('Flight Type', Variation_158, 0, 2),
        'FR1FR2': ('Flight Rules', Variation_427, 2, 2),
        'RVSM': ('RVSM', Variation_160, 4, 2),
        'HPR': ('Flight Priority', Variation_161, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GATOAT']) -> Type[Variation_158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR1FR2']) -> Type[Variation_427]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RVSM']) -> Type[Variation_160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_161]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Union[Type['Variation_158'], Type['Variation_427'], Type['Variation_160'], Type['Variation_161']]:
        if key == 'GATOAT':
            return Variation_158
        if key == 'FR1FR2':
            return Variation_427
        if key == 'RVSM':
            return Variation_160
        if key == 'HPR':
            return Variation_161
        assert_never(key)

    def __init__(self, arg : Variation_428_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GATOAT']) -> Variation_158:
        ...

    @overload
    def get_item(self, name : Literal['FR1FR2']) -> Variation_427:
        ...

    @overload
    def get_item(self, name : Literal['RVSM']) -> Variation_160:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_161:
        ...

    def get_item(self, name : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GATOAT'], val : Union[Variation_158, Variation_158_Arg]) -> 'Variation_428':
        ...

    @overload
    def set_item(self, name : Literal['FR1FR2'], val : Union[Variation_427, Variation_427_Arg]) -> 'Variation_428':
        ...

    @overload
    def set_item(self, name : Literal['RVSM'], val : Union[Variation_160, Variation_160_Arg]) -> 'Variation_428':
        ...

    @overload
    def set_item(self, name : Literal['HPR'], val : Union[Variation_161, Variation_161_Arg]) -> 'Variation_428':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_429_Arg = TypedDict('Variation_429_Arg', {
    'FPPSID': Union[Variation_366, Variation_366_Arg],
    'CSN': Union[Variation_149, Variation_149_Arg],
    'IFPSFLIGHTID': Union[Variation_369, Variation_369_Arg],
    'FLIGHTCAT': Union[Variation_428, Variation_428_Arg],
    'TOA': Union[Variation_331, Variation_331_Arg],
    'WTC': Union[Variation_371, Variation_371_Arg],
    'ADEP': Union[Variation_331, Variation_331_Arg],
    'ADES': Union[Variation_331, Variation_331_Arg],
    'RWY': Union[Variation_372, Variation_372_Arg],
    'CFL': Union[Variation_169, Variation_169_Arg],
    'CCP': Union[Variation_373, Variation_373_Arg],
    'TOD': Union[Variation_380, Variation_380_Arg],
    'AST': Union[Variation_166, Variation_166_Arg],
    'STS': Union[Variation_383, Variation_383_Arg],
}, total=False)
class Variation_429(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('FPPSID', Variation_366),
        ('CSN', Variation_149),
        ('IFPSFLIGHTID', Variation_369),
        ('FLIGHTCAT', Variation_428),
        ('TOA', Variation_331),
        ('WTC', Variation_371),
        ('ADEP', Variation_331),
        ('ADES', Variation_331),
        ('RWY', Variation_372),
        ('CFL', Variation_169),
        ('CCP', Variation_373),
        ('TOD', Variation_380),
        ('AST', Variation_166),
        ('STS', Variation_383),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'FPPSID': (Variation_366, 0x8000),
        'CSN': (Variation_149, 0x4000),
        'IFPSFLIGHTID': (Variation_369, 0x2000),
        'FLIGHTCAT': (Variation_428, 0x1000),
        'TOA': (Variation_331, 0x0800),
        'WTC': (Variation_371, 0x0400),
        'ADEP': (Variation_331, 0x0200),
        'ADES': (Variation_331, 0x0180),
        'RWY': (Variation_372, 0x0140),
        'CFL': (Variation_169, 0x0120),
        'CCP': (Variation_373, 0x0110),
        'TOD': (Variation_380, 0x0108),
        'AST': (Variation_166, 0x0104),
        'STS': (Variation_383, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FPPSID']) -> Type[Variation_366]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSN']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IFPSFLIGHTID']) -> Type[Variation_369]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FLIGHTCAT']) -> Type[Variation_428]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOA']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WTC']) -> Type[Variation_371]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADEP']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADES']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RWY']) -> Type[Variation_372]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CFL']) -> Type[Variation_169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CCP']) -> Type[Variation_373]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOD']) -> Type[Variation_380]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AST']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STS']) -> Type[Variation_383]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FPPSID'], Literal['CSN'], Literal['IFPSFLIGHTID'], Literal['FLIGHTCAT'], Literal['TOA'], Literal['WTC'], Literal['ADEP'], Literal['ADES'], Literal['RWY'], Literal['CFL'], Literal['CCP'], Literal['TOD'], Literal['AST'], Literal['STS']]) -> Union[Type['Variation_366'], Type['Variation_149'], Type['Variation_369'], Type['Variation_428'], Type['Variation_331'], Type['Variation_371'], Type['Variation_331'], Type['Variation_331'], Type['Variation_372'], Type['Variation_169'], Type['Variation_373'], Type['Variation_380'], Type['Variation_166'], Type['Variation_383']]:
        if key == 'FPPSID':
            return Variation_366
        if key == 'CSN':
            return Variation_149
        if key == 'IFPSFLIGHTID':
            return Variation_369
        if key == 'FLIGHTCAT':
            return Variation_428
        if key == 'TOA':
            return Variation_331
        if key == 'WTC':
            return Variation_371
        if key == 'ADEP':
            return Variation_331
        if key == 'ADES':
            return Variation_331
        if key == 'RWY':
            return Variation_372
        if key == 'CFL':
            return Variation_169
        if key == 'CCP':
            return Variation_373
        if key == 'TOD':
            return Variation_380
        if key == 'AST':
            return Variation_166
        if key == 'STS':
            return Variation_383
        assert_never(key)

    def __init__(self, arg : Optional[Variation_429_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['FPPSID'], val : Union[Variation_366, Variation_366_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['CSN'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['IFPSFLIGHTID'], val : Union[Variation_369, Variation_369_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['FLIGHTCAT'], val : Union[Variation_428, Variation_428_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['TOA'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['WTC'], val : Union[Variation_371, Variation_371_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['ADEP'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['ADES'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['RWY'], val : Union[Variation_372, Variation_372_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['CFL'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['CCP'], val : Union[Variation_373, Variation_373_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['TOD'], val : Union[Variation_380, Variation_380_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['AST'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_429':
        ...

    @overload
    def set_item(self, name : Literal['STS'], val : Union[Variation_383, Variation_383_Arg]) -> 'Variation_429':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['FPPSID']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['CSN']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['IFPSFLIGHTID']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['FLIGHTCAT']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['TOA']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['WTC']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['ADEP']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['ADES']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['RWY']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['CFL']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['CCP']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['TOD']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['AST']) -> 'Variation_429':
        ...

    @overload
    def del_item(self, name : Literal['STS']) -> 'Variation_429':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['FPPSID']) -> Variation_366:
        ...

    @overload
    def get_item(self, name : Literal['CSN']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['IFPSFLIGHTID']) -> Variation_369:
        ...

    @overload
    def get_item(self, name : Literal['FLIGHTCAT']) -> Variation_428:
        ...

    @overload
    def get_item(self, name : Literal['TOA']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['WTC']) -> Variation_371:
        ...

    @overload
    def get_item(self, name : Literal['ADEP']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['ADES']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['RWY']) -> Variation_372:
        ...

    @overload
    def get_item(self, name : Literal['CFL']) -> Variation_169:
        ...

    @overload
    def get_item(self, name : Literal['CCP']) -> Variation_373:
        ...

    @overload
    def get_item(self, name : Literal['TOD']) -> Variation_380:
        ...

    @overload
    def get_item(self, name : Literal['AST']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['STS']) -> Variation_383:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_430_Arg = TypedDict('Variation_430_Arg', {
    '010': Union[Variation_311, Variation_311_Arg],
    '000': Union[Variation_312, Variation_312_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_313, Variation_313_Arg],
    '042': Union[Variation_314, Variation_314_Arg],
    '202': Union[Variation_316, Variation_316_Arg],
    '210': Union[Variation_318, Variation_318_Arg],
    '060': Union[Variation_319, Variation_319_Arg],
    '245': Union[Variation_320, Variation_320_Arg],
    '380': Union[Variation_416, Variation_416_Arg],
    '161': Union[Variation_339, Variation_339_Arg],
    '170': Union[Variation_423, Variation_423_Arg],
    '290': Union[Variation_424, Variation_424_Arg],
    '430': Union[Variation_360, Variation_360_Arg],
    '090': Union[Variation_361, Variation_361_Arg],
    '093': Union[Variation_426, Variation_426_Arg],
    '092': Union[Variation_288, Variation_288_Arg],
    '215': Union[Variation_365, Variation_365_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '390': Union[Variation_429, Variation_429_Arg],
    '300': Union[Variation_385, Variation_385_Arg],
    '310': Union[Variation_387, Variation_387_Arg],
    '500': Union[Variation_397, Variation_397_Arg],
    '600': Union[Variation_400, Variation_400_Arg],
    '605': Union[Variation_402, Variation_402_Arg],
    '610': Union[Variation_412, Variation_412_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_430(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_311),
        ('000', Variation_312),
        ('015', Variation_0),
        ('140', Variation_81),
        ('041', Variation_313),
        ('042', Variation_314),
        ('202', Variation_316),
        ('210', Variation_318),
        ('060', Variation_319),
        ('245', Variation_320),
        ('380', Variation_416),
        ('161', Variation_339),
        ('170', Variation_423),
        ('290', Variation_424),
        ('430', Variation_360),
        ('090', Variation_361),
        ('093', Variation_426),
        ('092', Variation_288),
        ('215', Variation_365),
        ('270', Variation_291),
        ('390', Variation_429),
        ('300', Variation_385),
        ('310', Variation_387),
        ('500', Variation_397),
        ('600', Variation_400),
        ('605', Variation_402),
        ('610', Variation_412),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_311, 0x8000000000),
        '000': (Variation_312, 0x4000000000),
        '015': (Variation_0, 0x2000000000),
        '140': (Variation_81, 0x1000000000),
        '041': (Variation_313, 0x0800000000),
        '042': (Variation_314, 0x0400000000),
        '202': (Variation_316, 0x0200000000),
        '210': (Variation_318, 0x0180000000),
        '060': (Variation_319, 0x0140000000),
        '245': (Variation_320, 0x0120000000),
        '380': (Variation_416, 0x0110000000),
        '161': (Variation_339, 0x0108000000),
        '170': (Variation_423, 0x0104000000),
        '290': (Variation_424, 0x0102000000),
        '430': (Variation_360, 0x0101800000),
        '090': (Variation_361, 0x0101400000),
        '093': (Variation_426, 0x0101200000),
        '092': (Variation_288, 0x0101100000),
        '215': (Variation_365, 0x0101080000),
        '270': (Variation_291, 0x0101040000),
        '390': (Variation_429, 0x0101020000),
        '300': (Variation_385, 0x0101018000),
        '310': (Variation_387, 0x0101014000),
        '500': (Variation_397, 0x0101012000),
        '600': (Variation_400, 0x0101011000),
        '605': (Variation_402, 0x0101010800),
        '610': (Variation_412, 0x0101010400),
        'SP': (Variation_62, 0x0101010200),
        'RE': (Variation_62, 0x0101010180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_311]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_312]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_313]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_314]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['202']) -> Type[Variation_316]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_318]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_319]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_320]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['380']) -> Type[Variation_416]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_339]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_423]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['290']) -> Type[Variation_424]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['430']) -> Type[Variation_360]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['093']) -> Type[Variation_426]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['092']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['215']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['390']) -> Type[Variation_429]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_385]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['310']) -> Type[Variation_387]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_397]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['600']) -> Type[Variation_400]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['605']) -> Type[Variation_402]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['610']) -> Type[Variation_412]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['140'], Literal['041'], Literal['042'], Literal['202'], Literal['210'], Literal['060'], Literal['245'], Literal['380'], Literal['161'], Literal['170'], Literal['290'], Literal['430'], Literal['090'], Literal['093'], Literal['092'], Literal['215'], Literal['270'], Literal['390'], Literal['300'], Literal['310'], Literal['500'], Literal['600'], Literal['605'], Literal['610'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_311'], Type['Variation_312'], Type['Variation_0'], Type['Variation_81'], Type['Variation_313'], Type['Variation_314'], Type['Variation_316'], Type['Variation_318'], Type['Variation_319'], Type['Variation_320'], Type['Variation_416'], Type['Variation_339'], Type['Variation_423'], Type['Variation_424'], Type['Variation_360'], Type['Variation_361'], Type['Variation_426'], Type['Variation_288'], Type['Variation_365'], Type['Variation_291'], Type['Variation_429'], Type['Variation_385'], Type['Variation_387'], Type['Variation_397'], Type['Variation_400'], Type['Variation_402'], Type['Variation_412'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_311
        if key == '000':
            return Variation_312
        if key == '015':
            return Variation_0
        if key == '140':
            return Variation_81
        if key == '041':
            return Variation_313
        if key == '042':
            return Variation_314
        if key == '202':
            return Variation_316
        if key == '210':
            return Variation_318
        if key == '060':
            return Variation_319
        if key == '245':
            return Variation_320
        if key == '380':
            return Variation_416
        if key == '161':
            return Variation_339
        if key == '170':
            return Variation_423
        if key == '290':
            return Variation_424
        if key == '430':
            return Variation_360
        if key == '090':
            return Variation_361
        if key == '093':
            return Variation_426
        if key == '092':
            return Variation_288
        if key == '215':
            return Variation_365
        if key == '270':
            return Variation_291
        if key == '390':
            return Variation_429
        if key == '300':
            return Variation_385
        if key == '310':
            return Variation_387
        if key == '500':
            return Variation_397
        if key == '600':
            return Variation_400
        if key == '605':
            return Variation_402
        if key == '610':
            return Variation_412
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_430_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_311, Variation_311_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_312, Variation_312_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_313, Variation_313_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_314, Variation_314_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['202'], val : Union[Variation_316, Variation_316_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_318, Variation_318_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_319, Variation_319_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_320, Variation_320_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['380'], val : Union[Variation_416, Variation_416_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_339, Variation_339_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_423, Variation_423_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['290'], val : Union[Variation_424, Variation_424_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['430'], val : Union[Variation_360, Variation_360_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['093'], val : Union[Variation_426, Variation_426_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['092'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['215'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['390'], val : Union[Variation_429, Variation_429_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_385, Variation_385_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['310'], val : Union[Variation_387, Variation_387_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_397, Variation_397_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['600'], val : Union[Variation_400, Variation_400_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['605'], val : Union[Variation_402, Variation_402_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['610'], val : Union[Variation_412, Variation_412_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_430':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_430':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['202']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['380']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['290']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['430']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['093']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['092']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['215']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['390']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['310']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['600']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['605']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['610']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_430':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_430':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_311:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_312:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_313:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_314:
        ...

    @overload
    def get_item(self, name : Literal['202']) -> Variation_316:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_318:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_319:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_320:
        ...

    @overload
    def get_item(self, name : Literal['380']) -> Variation_416:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_339:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_423:
        ...

    @overload
    def get_item(self, name : Literal['290']) -> Variation_424:
        ...

    @overload
    def get_item(self, name : Literal['430']) -> Variation_360:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['093']) -> Variation_426:
        ...

    @overload
    def get_item(self, name : Literal['092']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['215']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['390']) -> Variation_429:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_385:
        ...

    @overload
    def get_item(self, name : Literal['310']) -> Variation_387:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_397:
        ...

    @overload
    def get_item(self, name : Literal['600']) -> Variation_400:
        ...

    @overload
    def get_item(self, name : Literal['605']) -> Variation_402:
        ...

    @overload
    def get_item(self, name : Literal['610']) -> Variation_412:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_431_Arg : TypeAlias = Raw
class Variation_431(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        1: 'Measurement Plot',
        2: 'Measurement Track',
        3: 'Sensor Centric Plot',
        4: 'Sensor Centric Track',
        5: 'Track End Message',
    }

    def __init__(self, arg : Variation_431_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_432_Arg : TypeAlias = Raw
class Variation_432(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Periodic Report',
        1: 'Event Driven Report',
    }

    def __init__(self, arg : Variation_432_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_433_Arg_Group = TypedDict('Variation_433_Arg_Group', {
    'MT': Union[Variation_431, Variation_431_Arg],
    'RG': Union[Variation_432, Variation_432_Arg],
})
Variation_433_Arg : TypeAlias = Union[Raw, Variation_433_Arg_Group]
class Variation_433(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('MT', Variation_431),
        ('RG', Variation_432),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MT': ('Message Type', Variation_431, 0, 7),
        'RG': ('Report Generation', Variation_432, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MT']) -> Type[Variation_431]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RG']) -> Type[Variation_432]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MT'], Literal['RG']]) -> Union[Type['Variation_431'], Type['Variation_432']]:
        if key == 'MT':
            return Variation_431
        if key == 'RG':
            return Variation_432
        assert_never(key)

    def __init__(self, arg : Variation_433_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MT']) -> Variation_431:
        ...

    @overload
    def get_item(self, name : Literal['RG']) -> Variation_432:
        ...

    def get_item(self, name : Union[Literal['MT'], Literal['RG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MT'], val : Union[Variation_431, Variation_431_Arg]) -> 'Variation_433':
        ...

    @overload
    def set_item(self, name : Literal['RG'], val : Union[Variation_432, Variation_432_Arg]) -> 'Variation_433':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_434_Arg : TypeAlias = Raw
class Variation_434(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Mono-Static Sensor',
        1: 'Multi-Static Sensor',
        2: 'Other',
        3: 'Unknown',
    }

    def __init__(self, arg : Variation_434_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_435_Arg : TypeAlias = Raw
class Variation_435(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Actual Target Report',
        1: 'Reference Target',
        2: 'Synthetic Target',
        3: 'Simulated / Replayed Target',
    }

    def __init__(self, arg : Variation_435_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_436_Arg : TypeAlias = Raw
class Variation_436(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Forward',
        2: 'Backward',
        3: 'Static',
    }

    def __init__(self, arg : Variation_436_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_437_Arg_Group_1 = TypedDict('Variation_437_Arg_Group_1', {
    'MOMU': Union[Variation_434, Variation_434_Arg],
    'TTAX': Union[Variation_435, Variation_435_Arg],
    'SCD': Union[Variation_436, Variation_436_Arg],
})
Variation_437_Arg : TypeAlias = Union[
    int,
    Variation_437_Arg_Group_1,
    Tuple[int],
]
class Variation_437(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('MOMU', Variation_434),
            ('TTAX', Variation_435),
            ('SCD', Variation_436),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MOMU': ('Mono-Static Target Report or Multi-Static Target Report', Variation_434, 0, 2),
        'TTAX': ('Target Taxonomy', Variation_435, 2, 2),
        'SCD': ('Scanning Direction', Variation_436, 4, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MOMU']) -> Type[Variation_434]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTAX']) -> Type[Variation_435]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SCD']) -> Type[Variation_436]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MOMU'], Literal['TTAX'], Literal['SCD']]) -> Union[Type['Variation_434'], Type['Variation_435'], Type['Variation_436']]:
        if key == 'MOMU':
            return Variation_434
        if key == 'TTAX':
            return Variation_435
        if key == 'SCD':
            return Variation_436
        assert_never(key)

    def __init__(self, arg : Variation_437_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_437_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MOMU']) -> Variation_434:
        ...

    @overload
    def get_item(self, name : Literal['TTAX']) -> Variation_435:
        ...

    @overload
    def get_item(self, name : Literal['SCD']) -> Variation_436:
        ...

    def get_item(self, name : Union[Literal['MOMU'], Literal['TTAX'], Literal['SCD']]) -> Any:
        return self._get_item(name)

Variation_438_Arg_Group_1 = TypedDict('Variation_438_Arg_Group_1', {
    'WE': Union[Variation_23, Variation_23_Arg],
})
Variation_438_Arg : TypeAlias = Union[
    int,
    Variation_438_Arg_Group_1,
    Tuple[int],
]
class Variation_438(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('WE', Variation_23),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'WE': ('Warning/Error Condition Value', Variation_23, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['WE']]) -> Union[Type['Variation_23']]:
        if key == 'WE':
            return Variation_23
        assert_never(key)

    def __init__(self, arg : Variation_438_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_438_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['WE']) -> Any:
        return self._get_item(name)

Variation_439_Arg : TypeAlias = Raw
class Variation_439(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Target not in Blind Zone',
        1: 'Target in Blind Zone',
    }

    def __init__(self, arg : Variation_439_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_440_Arg : TypeAlias = Raw
class Variation_440(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Target not in Blanked Zone',
        1: 'Target in Blanked Zone',
    }

    def __init__(self, arg : Variation_440_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_441_Arg : TypeAlias = Raw
class Variation_441(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Track Alive',
        1: 'Track Terminated by User Request',
    }

    def __init__(self, arg : Variation_441_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_442_Arg : TypeAlias = Raw
class Variation_442(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Not extrapolated',
        1: 'Extrapolated',
    }

    def __init__(self, arg : Variation_442_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_443_Arg : TypeAlias = Raw
class Variation_443(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Not extrapolated',
        1: 'Extrapolated',
    }

    def __init__(self, arg : Variation_443_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_444_Arg : TypeAlias = Raw
class Variation_444(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Confirmed Track',
        1: 'Tentative Track',
    }

    def __init__(self, arg : Variation_444_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_445_Arg_Group_1 = TypedDict('Variation_445_Arg_Group_1', {
    'BIZ': Union[Variation_439, Variation_439_Arg],
    'BAZ': Union[Variation_440, Variation_440_Arg],
    'TUR': Union[Variation_441, Variation_441_Arg],
    'CSTP': Union[Variation_442, Variation_442_Arg],
    'CSTH': Union[Variation_443, Variation_443_Arg],
    'CNF': Union[Variation_444, Variation_444_Arg],
})
Variation_445_Arg : TypeAlias = Union[
    int,
    Variation_445_Arg_Group_1,
    Tuple[int],
]
class Variation_445(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('BIZ', Variation_439),
            ('BAZ', Variation_440),
            ('TUR', Variation_441),
            Spare(3, 1),
            ('CSTP', Variation_442),
            ('CSTH', Variation_443),
            ('CNF', Variation_444),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'BIZ': ('', Variation_439, 0, 1),
        'BAZ': ('', Variation_440, 1, 1),
        'TUR': ('', Variation_441, 2, 1),
        'CSTP': ('Coasted - Position', Variation_442, 4, 1),
        'CSTH': ('Coasted – Height', Variation_443, 5, 1),
        'CNF': ('Confirmed vs. Tentative Track', Variation_444, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['BIZ']) -> Type[Variation_439]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BAZ']) -> Type[Variation_440]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TUR']) -> Type[Variation_441]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSTP']) -> Type[Variation_442]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSTH']) -> Type[Variation_443]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_444]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['BIZ'], Literal['BAZ'], Literal['TUR'], Literal['CSTP'], Literal['CSTH'], Literal['CNF']]) -> Union[Type['Variation_439'], Type['Variation_440'], Type['Variation_441'], Type['Variation_442'], Type['Variation_443'], Type['Variation_444']]:
        if key == 'BIZ':
            return Variation_439
        if key == 'BAZ':
            return Variation_440
        if key == 'TUR':
            return Variation_441
        if key == 'CSTP':
            return Variation_442
        if key == 'CSTH':
            return Variation_443
        if key == 'CNF':
            return Variation_444
        assert_never(key)

    def __init__(self, arg : Variation_445_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_445_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['BIZ']) -> Variation_439:
        ...

    @overload
    def get_item(self, name : Literal['BAZ']) -> Variation_440:
        ...

    @overload
    def get_item(self, name : Literal['TUR']) -> Variation_441:
        ...

    @overload
    def get_item(self, name : Literal['CSTP']) -> Variation_442:
        ...

    @overload
    def get_item(self, name : Literal['CSTH']) -> Variation_443:
        ...

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_444:
        ...

    def get_item(self, name : Union[Literal['BIZ'], Literal['BAZ'], Literal['TUR'], Literal['CSTP'], Literal['CSTH'], Literal['CNF']]) -> Any:
        return self._get_item(name)

Variation_446_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_446(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 14
    quantity = Quantity('Unsigned', 1.0, 7, 's')

    def __init__(self, arg : Variation_446_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_447_Arg_Group = TypedDict('Variation_447_Arg_Group', {
    'UPD': Union[Variation_446, Variation_446_Arg],
})
Variation_447_Arg : TypeAlias = Union[Raw, Variation_447_Arg_Group]
class Variation_447(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 2),
        ('UPD', Variation_446),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'UPD': ('Update Period', Variation_446, 2, 14),
    }

    @classmethod
    def spec(cls, key : Union[Literal['UPD']]) -> Union[Type['Variation_446']]:
        if key == 'UPD':
            return Variation_446
        assert_never(key)

    def __init__(self, arg : Variation_447_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['UPD']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['UPD'], val : Union[Variation_446, Variation_446_Arg]) -> 'Variation_447':
        return self._set_item(name, val) # type: ignore

Variation_448_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_448(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'm')

    def __init__(self, arg : Variation_448_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_449_Arg = TypedDict('Variation_449_Arg', {
    'LEN': Union[Variation_448, Variation_448_Arg],
    'WDT': Union[Variation_448, Variation_448_Arg],
    'HGT': Union[Variation_448, Variation_448_Arg],
    'ORT': Union[Variation_14, Variation_14_Arg],
}, total=False)
class Variation_449(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('LEN', Variation_448),
        ('WDT', Variation_448),
        ('HGT', Variation_448),
        ('ORT', Variation_14),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'LEN': (Variation_448, 0x80),
        'WDT': (Variation_448, 0x40),
        'HGT': (Variation_448, 0x20),
        'ORT': (Variation_14, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LEN']) -> Type[Variation_448]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WDT']) -> Type[Variation_448]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HGT']) -> Type[Variation_448]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ORT']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LEN'], Literal['WDT'], Literal['HGT'], Literal['ORT']]) -> Union[Type['Variation_448'], Type['Variation_448'], Type['Variation_448'], Type['Variation_14']]:
        if key == 'LEN':
            return Variation_448
        if key == 'WDT':
            return Variation_448
        if key == 'HGT':
            return Variation_448
        if key == 'ORT':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Optional[Variation_449_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['LEN'], val : Union[Variation_448, Variation_448_Arg]) -> 'Variation_449':
        ...

    @overload
    def set_item(self, name : Literal['WDT'], val : Union[Variation_448, Variation_448_Arg]) -> 'Variation_449':
        ...

    @overload
    def set_item(self, name : Literal['HGT'], val : Union[Variation_448, Variation_448_Arg]) -> 'Variation_449':
        ...

    @overload
    def set_item(self, name : Literal['ORT'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_449':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['LEN']) -> 'Variation_449':
        ...

    @overload
    def del_item(self, name : Literal['WDT']) -> 'Variation_449':
        ...

    @overload
    def del_item(self, name : Literal['HGT']) -> 'Variation_449':
        ...

    @overload
    def del_item(self, name : Literal['ORT']) -> 'Variation_449':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['LEN']) -> Variation_448:
        ...

    @overload
    def get_item(self, name : Literal['WDT']) -> Variation_448:
        ...

    @overload
    def get_item(self, name : Literal['HGT']) -> Variation_448:
        ...

    @overload
    def get_item(self, name : Literal['ORT']) -> Variation_14:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_450_Arg : TypeAlias = Raw
class Variation_450(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 9

    def __init__(self, arg : Variation_450_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_451_Arg : TypeAlias = Raw
class Variation_451(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 7

    def __init__(self, arg : Variation_451_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_452_Arg_Group = TypedDict('Variation_452_Arg_Group', {
    'CLS': Union[Variation_450, Variation_450_Arg],
    'PRB': Union[Variation_451, Variation_451_Arg],
})
Variation_452_Arg : TypeAlias = Union[Raw, Variation_452_Arg_Group]
class Variation_452(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('CLS', Variation_450),
        ('PRB', Variation_451),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CLS': ('Classification', Variation_450, 0, 9),
        'PRB': ('Probability', Variation_451, 9, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CLS']) -> Type[Variation_450]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PRB']) -> Type[Variation_451]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CLS'], Literal['PRB']]) -> Union[Type['Variation_450'], Type['Variation_451']]:
        if key == 'CLS':
            return Variation_450
        if key == 'PRB':
            return Variation_451
        assert_never(key)

    def __init__(self, arg : Variation_452_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CLS']) -> Variation_450:
        ...

    @overload
    def get_item(self, name : Literal['PRB']) -> Variation_451:
        ...

    def get_item(self, name : Union[Literal['CLS'], Literal['PRB']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CLS'], val : Union[Variation_450, Variation_450_Arg]) -> 'Variation_452':
        ...

    @overload
    def set_item(self, name : Literal['PRB'], val : Union[Variation_451, Variation_451_Arg]) -> 'Variation_452':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_453_Arg : TypeAlias = List[Union[Variation_452, Variation_452_Arg]]
class Variation_453(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_452

    @classmethod
    def spec(cls) -> Type[Variation_452]:
        return Variation_452

    def __init__(self, arg : List[Union[Variation_452, Variation_452_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_454_Arg_Group = TypedDict('Variation_454_Arg_Group', {
    'PID': Union[Variation_64, Variation_64_Arg],
    'ON': Union[Variation_279, Variation_279_Arg],
})
Variation_454_Arg : TypeAlias = Union[Raw, Variation_454_Arg_Group]
class Variation_454(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('PID', Variation_64),
        ('ON', Variation_279),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PID': ('Pair Identifier', Variation_64, 0, 16),
        'ON': ('Observation Number', Variation_279, 16, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ON']) -> Type[Variation_279]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PID'], Literal['ON']]) -> Union[Type['Variation_64'], Type['Variation_279']]:
        if key == 'PID':
            return Variation_64
        if key == 'ON':
            return Variation_279
        assert_never(key)

    def __init__(self, arg : Variation_454_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['ON']) -> Variation_279:
        ...

    def get_item(self, name : Union[Literal['PID'], Literal['ON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_454':
        ...

    @overload
    def set_item(self, name : Literal['ON'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_454':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_455_Arg_Group = TypedDict('Variation_455_Arg_Group', {
    'LATITUDE': Union[Variation_256, Variation_256_Arg],
    'LONGITUDE': Union[Variation_256, Variation_256_Arg],
})
Variation_455_Arg : TypeAlias = Union[Raw, Variation_455_Arg_Group]
class Variation_455(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LATITUDE', Variation_256),
        ('LONGITUDE', Variation_256),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LATITUDE': ('', Variation_256, 0, 32),
        'LONGITUDE': ('', Variation_256, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LATITUDE']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LONGITUDE']) -> Type[Variation_256]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LATITUDE'], Literal['LONGITUDE']]) -> Union[Type['Variation_256'], Type['Variation_256']]:
        if key == 'LATITUDE':
            return Variation_256
        if key == 'LONGITUDE':
            return Variation_256
        assert_never(key)

    def __init__(self, arg : Variation_455_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LATITUDE']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['LONGITUDE']) -> Variation_256:
        ...

    def get_item(self, name : Union[Literal['LATITUDE'], Literal['LONGITUDE']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LATITUDE'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_455':
        ...

    @overload
    def set_item(self, name : Literal['LONGITUDE'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_455':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_456_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_456(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 7, '')

    def __init__(self, arg : Variation_456_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_457_Arg_Group = TypedDict('Variation_457_Arg_Group', {
    'RSHPX': Union[Variation_157, Variation_157_Arg],
    'RSHPY': Union[Variation_157, Variation_157_Arg],
    'CORSHPXY': Union[Variation_456, Variation_456_Arg],
})
Variation_457_Arg : TypeAlias = Union[Raw, Variation_457_Arg_Group]
class Variation_457(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('RSHPX', Variation_157),
        ('RSHPY', Variation_157),
        ('CORSHPXY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RSHPX': ('', Variation_157, 0, 16),
        'RSHPY': ('', Variation_157, 16, 16),
        'CORSHPXY': ('', Variation_456, 32, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RSHPX']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSHPY']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CORSHPXY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RSHPX'], Literal['RSHPY'], Literal['CORSHPXY']]) -> Union[Type['Variation_157'], Type['Variation_157'], Type['Variation_456']]:
        if key == 'RSHPX':
            return Variation_157
        if key == 'RSHPY':
            return Variation_157
        if key == 'CORSHPXY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_457_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RSHPX']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['RSHPY']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['CORSHPXY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['RSHPX'], Literal['RSHPY'], Literal['CORSHPXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RSHPX'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_457':
        ...

    @overload
    def set_item(self, name : Literal['RSHPY'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_457':
        ...

    @overload
    def set_item(self, name : Literal['CORSHPXY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_457':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_458_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_458(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 2, 'm')

    def __init__(self, arg : Variation_458_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_459_Arg_Group = TypedDict('Variation_459_Arg_Group', {
    'SDHPX': Union[Variation_458, Variation_458_Arg],
    'SDHPY': Union[Variation_458, Variation_458_Arg],
    'COSDHPXY': Union[Variation_456, Variation_456_Arg],
})
Variation_459_Arg : TypeAlias = Union[Raw, Variation_459_Arg_Group]
class Variation_459(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('SDHPX', Variation_458),
        ('SDHPY', Variation_458),
        ('COSDHPXY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDHPX': ('', Variation_458, 0, 16),
        'SDHPY': ('', Variation_458, 16, 16),
        'COSDHPXY': ('', Variation_456, 32, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDHPX']) -> Type[Variation_458]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDHPY']) -> Type[Variation_458]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COSDHPXY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDHPX'], Literal['SDHPY'], Literal['COSDHPXY']]) -> Union[Type['Variation_458'], Type['Variation_458'], Type['Variation_456']]:
        if key == 'SDHPX':
            return Variation_458
        if key == 'SDHPY':
            return Variation_458
        if key == 'COSDHPXY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_459_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDHPX']) -> Variation_458:
        ...

    @overload
    def get_item(self, name : Literal['SDHPY']) -> Variation_458:
        ...

    @overload
    def get_item(self, name : Literal['COSDHPXY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDHPX'], Literal['SDHPY'], Literal['COSDHPXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDHPX'], val : Union[Variation_458, Variation_458_Arg]) -> 'Variation_459':
        ...

    @overload
    def set_item(self, name : Literal['SDHPY'], val : Union[Variation_458, Variation_458_Arg]) -> 'Variation_459':
        ...

    @overload
    def set_item(self, name : Literal['COSDHPXY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_459':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_460_Arg = TypedDict('Variation_460_Arg', {
    'P84': Union[Variation_455, Variation_455_Arg],
    'HPR': Union[Variation_457, Variation_457_Arg],
    'HPP': Union[Variation_459, Variation_459_Arg],
}, total=False)
class Variation_460(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('P84', Variation_455),
        ('HPR', Variation_457),
        ('HPP', Variation_459),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'P84': (Variation_455, 0x80),
        'HPR': (Variation_457, 0x40),
        'HPP': (Variation_459, 0x20),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['P84']) -> Type[Variation_455]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_457]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPP']) -> Type[Variation_459]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['P84'], Literal['HPR'], Literal['HPP']]) -> Union[Type['Variation_455'], Type['Variation_457'], Type['Variation_459']]:
        if key == 'P84':
            return Variation_455
        if key == 'HPR':
            return Variation_457
        if key == 'HPP':
            return Variation_459
        assert_never(key)

    def __init__(self, arg : Optional[Variation_460_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['P84'], val : Union[Variation_455, Variation_455_Arg]) -> 'Variation_460':
        ...

    @overload
    def set_item(self, name : Literal['HPR'], val : Union[Variation_457, Variation_457_Arg]) -> 'Variation_460':
        ...

    @overload
    def set_item(self, name : Literal['HPP'], val : Union[Variation_459, Variation_459_Arg]) -> 'Variation_460':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['P84']) -> 'Variation_460':
        ...

    @overload
    def del_item(self, name : Literal['HPR']) -> 'Variation_460':
        ...

    @overload
    def del_item(self, name : Literal['HPP']) -> 'Variation_460':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['P84']) -> Variation_455:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_457:
        ...

    @overload
    def get_item(self, name : Literal['HPP']) -> Variation_459:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_461_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_461(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 1.0e-2, 0, 'm')

    def __init__(self, arg : Variation_461_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_462_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_462(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'm')

    def __init__(self, arg : Variation_462_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_463_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_463(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 12
    quantity = Quantity('Unsigned', 16.0, 0, 'm')

    def __init__(self, arg : Variation_463_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_464_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_464(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    quantity = Quantity('Unsigned', 16.0, 0, 'm')

    def __init__(self, arg : Variation_464_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_465_Arg_Group = TypedDict('Variation_465_Arg_Group', {
    'UCI6': Union[Variation_463, Variation_463_Arg],
    'LCI6': Union[Variation_464, Variation_464_Arg],
})
Variation_465_Arg : TypeAlias = Union[Raw, Variation_465_Arg_Group]
class Variation_465(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('UCI6', Variation_463),
        ('LCI6', Variation_464),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'UCI6': ('', Variation_463, 0, 12),
        'LCI6': ('', Variation_464, 12, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['UCI6']) -> Type[Variation_463]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LCI6']) -> Type[Variation_464]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['UCI6'], Literal['LCI6']]) -> Union[Type['Variation_463'], Type['Variation_464']]:
        if key == 'UCI6':
            return Variation_463
        if key == 'LCI6':
            return Variation_464
        assert_never(key)

    def __init__(self, arg : Variation_465_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['UCI6']) -> Variation_463:
        ...

    @overload
    def get_item(self, name : Literal['LCI6']) -> Variation_464:
        ...

    def get_item(self, name : Union[Literal['UCI6'], Literal['LCI6']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['UCI6'], val : Union[Variation_463, Variation_463_Arg]) -> 'Variation_465':
        ...

    @overload
    def set_item(self, name : Literal['LCI6'], val : Union[Variation_464, Variation_464_Arg]) -> 'Variation_465':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_466_Arg_Group = TypedDict('Variation_466_Arg_Group', {
    'UCI9': Union[Variation_463, Variation_463_Arg],
    'LCI9': Union[Variation_464, Variation_464_Arg],
})
Variation_466_Arg : TypeAlias = Union[Raw, Variation_466_Arg_Group]
class Variation_466(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('UCI9', Variation_463),
        ('LCI9', Variation_464),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'UCI9': ('', Variation_463, 0, 12),
        'LCI9': ('', Variation_464, 12, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['UCI9']) -> Type[Variation_463]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LCI9']) -> Type[Variation_464]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['UCI9'], Literal['LCI9']]) -> Union[Type['Variation_463'], Type['Variation_464']]:
        if key == 'UCI9':
            return Variation_463
        if key == 'LCI9':
            return Variation_464
        assert_never(key)

    def __init__(self, arg : Variation_466_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['UCI9']) -> Variation_463:
        ...

    @overload
    def get_item(self, name : Literal['LCI9']) -> Variation_464:
        ...

    def get_item(self, name : Union[Literal['UCI9'], Literal['LCI9']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['UCI9'], val : Union[Variation_463, Variation_463_Arg]) -> 'Variation_466':
        ...

    @overload
    def set_item(self, name : Literal['LCI9'], val : Union[Variation_464, Variation_464_Arg]) -> 'Variation_466':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_467_Arg_Group = TypedDict('Variation_467_Arg_Group', {
    'X': Union[Variation_456, Variation_456_Arg],
    'Y': Union[Variation_456, Variation_456_Arg],
})
Variation_467_Arg : TypeAlias = Union[Raw, Variation_467_Arg_Group]
class Variation_467(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_456),
        ('Y', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_456, 0, 8),
        'Y': ('', Variation_456, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_456'], Type['Variation_456']]:
        if key == 'X':
            return Variation_456
        if key == 'Y':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_467_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_467':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_467':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_468_Arg = TypedDict('Variation_468_Arg', {
    'GH': Union[Variation_461, Variation_461_Arg],
    'RSGH': Union[Variation_462, Variation_462_Arg],
    'SDGH': Union[Variation_462, Variation_462_Arg],
    'CI6': Union[Variation_465, Variation_465_Arg],
    'CI9': Union[Variation_466, Variation_466_Arg],
    'COGHHP': Union[Variation_467, Variation_467_Arg],
    'COGHHV': Union[Variation_467, Variation_467_Arg],
    'COGHHA': Union[Variation_467, Variation_467_Arg],
}, total=False)
class Variation_468(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('GH', Variation_461),
        ('RSGH', Variation_462),
        ('SDGH', Variation_462),
        ('CI6', Variation_465),
        ('CI9', Variation_466),
        ('COGHHP', Variation_467),
        ('COGHHV', Variation_467),
        ('COGHHA', Variation_467),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'GH': (Variation_461, 0x8000),
        'RSGH': (Variation_462, 0x4000),
        'SDGH': (Variation_462, 0x2000),
        'CI6': (Variation_465, 0x1000),
        'CI9': (Variation_466, 0x0800),
        'COGHHP': (Variation_467, 0x0400),
        'COGHHV': (Variation_467, 0x0200),
        'COGHHA': (Variation_467, 0x0180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GH']) -> Type[Variation_461]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSGH']) -> Type[Variation_462]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDGH']) -> Type[Variation_462]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CI6']) -> Type[Variation_465]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CI9']) -> Type[Variation_466]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COGHHP']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COGHHV']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COGHHA']) -> Type[Variation_467]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GH'], Literal['RSGH'], Literal['SDGH'], Literal['CI6'], Literal['CI9'], Literal['COGHHP'], Literal['COGHHV'], Literal['COGHHA']]) -> Union[Type['Variation_461'], Type['Variation_462'], Type['Variation_462'], Type['Variation_465'], Type['Variation_466'], Type['Variation_467'], Type['Variation_467'], Type['Variation_467']]:
        if key == 'GH':
            return Variation_461
        if key == 'RSGH':
            return Variation_462
        if key == 'SDGH':
            return Variation_462
        if key == 'CI6':
            return Variation_465
        if key == 'CI9':
            return Variation_466
        if key == 'COGHHP':
            return Variation_467
        if key == 'COGHHV':
            return Variation_467
        if key == 'COGHHA':
            return Variation_467
        assert_never(key)

    def __init__(self, arg : Optional[Variation_468_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['GH'], val : Union[Variation_461, Variation_461_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['RSGH'], val : Union[Variation_462, Variation_462_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['SDGH'], val : Union[Variation_462, Variation_462_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['CI6'], val : Union[Variation_465, Variation_465_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['CI9'], val : Union[Variation_466, Variation_466_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['COGHHP'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['COGHHV'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_468':
        ...

    @overload
    def set_item(self, name : Literal['COGHHA'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_468':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['GH']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['RSGH']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['SDGH']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['CI6']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['CI9']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['COGHHP']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['COGHHV']) -> 'Variation_468':
        ...

    @overload
    def del_item(self, name : Literal['COGHHA']) -> 'Variation_468':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['GH']) -> Variation_461:
        ...

    @overload
    def get_item(self, name : Literal['RSGH']) -> Variation_462:
        ...

    @overload
    def get_item(self, name : Literal['SDGH']) -> Variation_462:
        ...

    @overload
    def get_item(self, name : Literal['CI6']) -> Variation_465:
        ...

    @overload
    def get_item(self, name : Literal['CI9']) -> Variation_466:
        ...

    @overload
    def get_item(self, name : Literal['COGHHP']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COGHHV']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COGHHA']) -> Variation_467:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_469_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_469(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 20
    quantity = Quantity('Signed', 1.0e-2, 0, 'm/s')

    def __init__(self, arg : Variation_469_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_470_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_470(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 20
    quantity = Quantity('Signed', 1.0e-2, 0, 'm/s')

    def __init__(self, arg : Variation_470_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_471_Arg_Group = TypedDict('Variation_471_Arg_Group', {
    'X': Union[Variation_469, Variation_469_Arg],
    'Y': Union[Variation_470, Variation_470_Arg],
})
Variation_471_Arg : TypeAlias = Union[Raw, Variation_471_Arg_Group]
class Variation_471(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('X', Variation_469),
        ('Y', Variation_470),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_469, 0, 20),
        'Y': ('', Variation_470, 20, 20),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_469]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_470]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_469'], Type['Variation_470']]:
        if key == 'X':
            return Variation_469
        if key == 'Y':
            return Variation_470
        assert_never(key)

    def __init__(self, arg : Variation_471_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_469:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_470:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_469, Variation_469_Arg]) -> 'Variation_471':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_470, Variation_470_Arg]) -> 'Variation_471':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_472_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_472(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'm/s')

    def __init__(self, arg : Variation_472_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_473_Arg_Group = TypedDict('Variation_473_Arg_Group', {
    'X': Union[Variation_472, Variation_472_Arg],
    'Y': Union[Variation_472, Variation_472_Arg],
    'CORSHVXY': Union[Variation_456, Variation_456_Arg],
})
Variation_473_Arg : TypeAlias = Union[Raw, Variation_473_Arg_Group]
class Variation_473(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('X', Variation_472),
        ('Y', Variation_472),
        ('CORSHVXY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_472, 0, 16),
        'Y': ('', Variation_472, 16, 16),
        'CORSHVXY': ('', Variation_456, 32, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CORSHVXY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['CORSHVXY']]) -> Union[Type['Variation_472'], Type['Variation_472'], Type['Variation_456']]:
        if key == 'X':
            return Variation_472
        if key == 'Y':
            return Variation_472
        if key == 'CORSHVXY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_473_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['CORSHVXY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['CORSHVXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_473':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_473':
        ...

    @overload
    def set_item(self, name : Literal['CORSHVXY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_473':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_474_Arg_Group = TypedDict('Variation_474_Arg_Group', {
    'X': Union[Variation_472, Variation_472_Arg],
    'Y': Union[Variation_472, Variation_472_Arg],
    'COHVXY': Union[Variation_456, Variation_456_Arg],
})
Variation_474_Arg : TypeAlias = Union[Raw, Variation_474_Arg_Group]
class Variation_474(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('X', Variation_472),
        ('Y', Variation_472),
        ('COHVXY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_472, 0, 16),
        'Y': ('', Variation_472, 16, 16),
        'COHVXY': ('', Variation_456, 32, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVXY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['COHVXY']]) -> Union[Type['Variation_472'], Type['Variation_472'], Type['Variation_456']]:
        if key == 'X':
            return Variation_472
        if key == 'Y':
            return Variation_472
        if key == 'COHVXY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_474_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['COHVXY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['COHVXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_474':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_474':
        ...

    @overload
    def set_item(self, name : Literal['COHVXY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_474':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_475_Arg_Group = TypedDict('Variation_475_Arg_Group', {
    'COHVXHPX': Union[Variation_456, Variation_456_Arg],
    'COHVXHPY': Union[Variation_456, Variation_456_Arg],
    'COHVYHPX': Union[Variation_456, Variation_456_Arg],
    'COHVYHPY': Union[Variation_456, Variation_456_Arg],
})
Variation_475_Arg : TypeAlias = Union[Raw, Variation_475_Arg_Group]
class Variation_475(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('COHVXHPX', Variation_456),
        ('COHVXHPY', Variation_456),
        ('COHVYHPX', Variation_456),
        ('COHVYHPY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COHVXHPX': ('', Variation_456, 0, 8),
        'COHVXHPY': ('', Variation_456, 8, 8),
        'COHVYHPX': ('', Variation_456, 16, 8),
        'COHVYHPY': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVXHPX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVXHPY']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVYHPX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVYHPY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COHVXHPX'], Literal['COHVXHPY'], Literal['COHVYHPX'], Literal['COHVYHPY']]) -> Union[Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'COHVXHPX':
            return Variation_456
        if key == 'COHVXHPY':
            return Variation_456
        if key == 'COHVYHPX':
            return Variation_456
        if key == 'COHVYHPY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_475_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COHVXHPX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHVXHPY']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHVYHPX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHVYHPY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['COHVXHPX'], Literal['COHVXHPY'], Literal['COHVYHPX'], Literal['COHVYHPY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COHVXHPX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_475':
        ...

    @overload
    def set_item(self, name : Literal['COHVXHPY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_475':
        ...

    @overload
    def set_item(self, name : Literal['COHVYHPX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_475':
        ...

    @overload
    def set_item(self, name : Literal['COHVYHPY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_475':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_476_Arg = TypedDict('Variation_476_Arg', {
    'HV': Union[Variation_471, Variation_471_Arg],
    'RSHV': Union[Variation_473, Variation_473_Arg],
    'SDHV': Union[Variation_474, Variation_474_Arg],
    'COHVHP': Union[Variation_475, Variation_475_Arg],
}, total=False)
class Variation_476(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('HV', Variation_471),
        ('RSHV', Variation_473),
        ('SDHV', Variation_474),
        ('COHVHP', Variation_475),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'HV': (Variation_471, 0x80),
        'RSHV': (Variation_473, 0x40),
        'SDHV': (Variation_474, 0x20),
        'COHVHP': (Variation_475, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['HV']) -> Type[Variation_471]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSHV']) -> Type[Variation_473]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDHV']) -> Type[Variation_474]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHVHP']) -> Type[Variation_475]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['HV'], Literal['RSHV'], Literal['SDHV'], Literal['COHVHP']]) -> Union[Type['Variation_471'], Type['Variation_473'], Type['Variation_474'], Type['Variation_475']]:
        if key == 'HV':
            return Variation_471
        if key == 'RSHV':
            return Variation_473
        if key == 'SDHV':
            return Variation_474
        if key == 'COHVHP':
            return Variation_475
        assert_never(key)

    def __init__(self, arg : Optional[Variation_476_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['HV'], val : Union[Variation_471, Variation_471_Arg]) -> 'Variation_476':
        ...

    @overload
    def set_item(self, name : Literal['RSHV'], val : Union[Variation_473, Variation_473_Arg]) -> 'Variation_476':
        ...

    @overload
    def set_item(self, name : Literal['SDHV'], val : Union[Variation_474, Variation_474_Arg]) -> 'Variation_476':
        ...

    @overload
    def set_item(self, name : Literal['COHVHP'], val : Union[Variation_475, Variation_475_Arg]) -> 'Variation_476':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['HV']) -> 'Variation_476':
        ...

    @overload
    def del_item(self, name : Literal['RSHV']) -> 'Variation_476':
        ...

    @overload
    def del_item(self, name : Literal['SDHV']) -> 'Variation_476':
        ...

    @overload
    def del_item(self, name : Literal['COHVHP']) -> 'Variation_476':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['HV']) -> Variation_471:
        ...

    @overload
    def get_item(self, name : Literal['RSHV']) -> Variation_473:
        ...

    @overload
    def get_item(self, name : Literal['SDHV']) -> Variation_474:
        ...

    @overload
    def get_item(self, name : Literal['COHVHP']) -> Variation_475:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_477_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_477(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 12
    quantity = Quantity('Signed', 1.0, 4, 'm/s2')

    def __init__(self, arg : Variation_477_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_478_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_478(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    quantity = Quantity('Signed', 1.0, 4, 'm/s2')

    def __init__(self, arg : Variation_478_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_479_Arg_Group = TypedDict('Variation_479_Arg_Group', {
    'X': Union[Variation_477, Variation_477_Arg],
    'Y': Union[Variation_478, Variation_478_Arg],
})
Variation_479_Arg : TypeAlias = Union[Raw, Variation_479_Arg_Group]
class Variation_479(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('X', Variation_477),
        ('Y', Variation_478),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_477, 0, 12),
        'Y': ('', Variation_478, 12, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_477]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_478]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_477'], Type['Variation_478']]:
        if key == 'X':
            return Variation_477
        if key == 'Y':
            return Variation_478
        assert_never(key)

    def __init__(self, arg : Variation_479_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_477:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_478:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_477, Variation_477_Arg]) -> 'Variation_479':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_478, Variation_478_Arg]) -> 'Variation_479':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_480_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_480(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 12
    quantity = Quantity('Unsigned', 1.0, 4, 'm/s2')

    def __init__(self, arg : Variation_480_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_481_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_481(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    quantity = Quantity('Unsigned', 1.0, 4, 'm/s2')

    def __init__(self, arg : Variation_481_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_482_Arg_Group = TypedDict('Variation_482_Arg_Group', {
    'X': Union[Variation_480, Variation_480_Arg],
    'Y': Union[Variation_481, Variation_481_Arg],
    'COHAXY': Union[Variation_456, Variation_456_Arg],
})
Variation_482_Arg : TypeAlias = Union[Raw, Variation_482_Arg_Group]
class Variation_482(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_480),
        ('Y', Variation_481),
        ('COHAXY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('', Variation_480, 0, 12),
        'Y': ('', Variation_481, 12, 12),
        'COHAXY': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_480]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_481]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAXY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['COHAXY']]) -> Union[Type['Variation_480'], Type['Variation_481'], Type['Variation_456']]:
        if key == 'X':
            return Variation_480
        if key == 'Y':
            return Variation_481
        if key == 'COHAXY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_482_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_480:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_481:
        ...

    @overload
    def get_item(self, name : Literal['COHAXY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['COHAXY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_480, Variation_480_Arg]) -> 'Variation_482':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_481, Variation_481_Arg]) -> 'Variation_482':
        ...

    @overload
    def set_item(self, name : Literal['COHAXY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_482':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_483_Arg_Group = TypedDict('Variation_483_Arg_Group', {
    'COHAXHPX': Union[Variation_456, Variation_456_Arg],
    'COHAXHPY': Union[Variation_456, Variation_456_Arg],
    'COHAYHPX': Union[Variation_456, Variation_456_Arg],
    'COAYHPY': Union[Variation_456, Variation_456_Arg],
})
Variation_483_Arg : TypeAlias = Union[Raw, Variation_483_Arg_Group]
class Variation_483(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('COHAXHPX', Variation_456),
        ('COHAXHPY', Variation_456),
        ('COHAYHPX', Variation_456),
        ('COAYHPY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COHAXHPX': ('', Variation_456, 0, 8),
        'COHAXHPY': ('', Variation_456, 8, 8),
        'COHAYHPX': ('', Variation_456, 16, 8),
        'COAYHPY': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAXHPX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAXHPY']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAYHPX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COAYHPY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COHAXHPX'], Literal['COHAXHPY'], Literal['COHAYHPX'], Literal['COAYHPY']]) -> Union[Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'COHAXHPX':
            return Variation_456
        if key == 'COHAXHPY':
            return Variation_456
        if key == 'COHAYHPX':
            return Variation_456
        if key == 'COAYHPY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_483_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COHAXHPX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHAXHPY']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHAYHPX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COAYHPY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['COHAXHPX'], Literal['COHAXHPY'], Literal['COHAYHPX'], Literal['COAYHPY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COHAXHPX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_483':
        ...

    @overload
    def set_item(self, name : Literal['COHAXHPY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_483':
        ...

    @overload
    def set_item(self, name : Literal['COHAYHPX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_483':
        ...

    @overload
    def set_item(self, name : Literal['COAYHPY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_483':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_484_Arg_Group = TypedDict('Variation_484_Arg_Group', {
    'COHAXHVX': Union[Variation_456, Variation_456_Arg],
    'COHAXHVY': Union[Variation_456, Variation_456_Arg],
    'COHAYHVX': Union[Variation_456, Variation_456_Arg],
    'COHAYHVY': Union[Variation_456, Variation_456_Arg],
})
Variation_484_Arg : TypeAlias = Union[Raw, Variation_484_Arg_Group]
class Variation_484(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('COHAXHVX', Variation_456),
        ('COHAXHVY', Variation_456),
        ('COHAYHVX', Variation_456),
        ('COHAYHVY', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COHAXHVX': ('', Variation_456, 0, 8),
        'COHAXHVY': ('', Variation_456, 8, 8),
        'COHAYHVX': ('', Variation_456, 16, 8),
        'COHAYHVY': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAXHVX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAXHVY']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAYHVX']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAYHVY']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COHAXHVX'], Literal['COHAXHVY'], Literal['COHAYHVX'], Literal['COHAYHVY']]) -> Union[Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'COHAXHVX':
            return Variation_456
        if key == 'COHAXHVY':
            return Variation_456
        if key == 'COHAYHVX':
            return Variation_456
        if key == 'COHAYHVY':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_484_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COHAXHVX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHAXHVY']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHAYHVX']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COHAYHVY']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['COHAXHVX'], Literal['COHAXHVY'], Literal['COHAYHVX'], Literal['COHAYHVY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COHAXHVX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_484':
        ...

    @overload
    def set_item(self, name : Literal['COHAXHVY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_484':
        ...

    @overload
    def set_item(self, name : Literal['COHAYHVX'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_484':
        ...

    @overload
    def set_item(self, name : Literal['COHAYHVY'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_484':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_485_Arg = TypedDict('Variation_485_Arg', {
    'HA': Union[Variation_479, Variation_479_Arg],
    'SDHA': Union[Variation_482, Variation_482_Arg],
    'COHAHP': Union[Variation_483, Variation_483_Arg],
    'COHAHV': Union[Variation_484, Variation_484_Arg],
}, total=False)
class Variation_485(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('HA', Variation_479),
        ('SDHA', Variation_482),
        ('COHAHP', Variation_483),
        ('COHAHV', Variation_484),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'HA': (Variation_479, 0x80),
        'SDHA': (Variation_482, 0x40),
        'COHAHP': (Variation_483, 0x20),
        'COHAHV': (Variation_484, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['HA']) -> Type[Variation_479]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDHA']) -> Type[Variation_482]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAHP']) -> Type[Variation_483]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COHAHV']) -> Type[Variation_484]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['HA'], Literal['SDHA'], Literal['COHAHP'], Literal['COHAHV']]) -> Union[Type['Variation_479'], Type['Variation_482'], Type['Variation_483'], Type['Variation_484']]:
        if key == 'HA':
            return Variation_479
        if key == 'SDHA':
            return Variation_482
        if key == 'COHAHP':
            return Variation_483
        if key == 'COHAHV':
            return Variation_484
        assert_never(key)

    def __init__(self, arg : Optional[Variation_485_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['HA'], val : Union[Variation_479, Variation_479_Arg]) -> 'Variation_485':
        ...

    @overload
    def set_item(self, name : Literal['SDHA'], val : Union[Variation_482, Variation_482_Arg]) -> 'Variation_485':
        ...

    @overload
    def set_item(self, name : Literal['COHAHP'], val : Union[Variation_483, Variation_483_Arg]) -> 'Variation_485':
        ...

    @overload
    def set_item(self, name : Literal['COHAHV'], val : Union[Variation_484, Variation_484_Arg]) -> 'Variation_485':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['HA']) -> 'Variation_485':
        ...

    @overload
    def del_item(self, name : Literal['SDHA']) -> 'Variation_485':
        ...

    @overload
    def del_item(self, name : Literal['COHAHP']) -> 'Variation_485':
        ...

    @overload
    def del_item(self, name : Literal['COHAHV']) -> 'Variation_485':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['HA']) -> Variation_479:
        ...

    @overload
    def get_item(self, name : Literal['SDHA']) -> Variation_482:
        ...

    @overload
    def get_item(self, name : Literal['COHAHP']) -> Variation_483:
        ...

    @overload
    def get_item(self, name : Literal['COHAHV']) -> Variation_484:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_486_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_486(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 1.0e-2, 0, 'm/s')

    def __init__(self, arg : Variation_486_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_487_Arg_Group = TypedDict('Variation_487_Arg_Group', {
    'SDVV': Union[Variation_472, Variation_472_Arg],
    'COVVGH': Union[Variation_456, Variation_456_Arg],
})
Variation_487_Arg : TypeAlias = Union[Raw, Variation_487_Arg_Group]
class Variation_487(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SDVV', Variation_472),
        ('COVVGH', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDVV': ('', Variation_472, 0, 16),
        'COVVGH': ('', Variation_456, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDVV']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVVGH']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDVV'], Literal['COVVGH']]) -> Union[Type['Variation_472'], Type['Variation_456']]:
        if key == 'SDVV':
            return Variation_472
        if key == 'COVVGH':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_487_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDVV']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['COVVGH']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDVV'], Literal['COVVGH']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDVV'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_487':
        ...

    @overload
    def set_item(self, name : Literal['COVVGH'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_487':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_488_Arg = TypedDict('Variation_488_Arg', {
    'VV': Union[Variation_486, Variation_486_Arg],
    'RSVV': Union[Variation_472, Variation_472_Arg],
    'SDVV': Union[Variation_487, Variation_487_Arg],
    'COVVHP': Union[Variation_467, Variation_467_Arg],
    'COVVHV': Union[Variation_467, Variation_467_Arg],
    'COVVHA': Union[Variation_467, Variation_467_Arg],
}, total=False)
class Variation_488(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('VV', Variation_486),
        ('RSVV', Variation_472),
        ('SDVV', Variation_487),
        ('COVVHP', Variation_467),
        ('COVVHV', Variation_467),
        ('COVVHA', Variation_467),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'VV': (Variation_486, 0x80),
        'RSVV': (Variation_472, 0x40),
        'SDVV': (Variation_487, 0x20),
        'COVVHP': (Variation_467, 0x10),
        'COVVHV': (Variation_467, 0x08),
        'COVVHA': (Variation_467, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VV']) -> Type[Variation_486]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSVV']) -> Type[Variation_472]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDVV']) -> Type[Variation_487]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVVHP']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVVHV']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVVHA']) -> Type[Variation_467]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VV'], Literal['RSVV'], Literal['SDVV'], Literal['COVVHP'], Literal['COVVHV'], Literal['COVVHA']]) -> Union[Type['Variation_486'], Type['Variation_472'], Type['Variation_487'], Type['Variation_467'], Type['Variation_467'], Type['Variation_467']]:
        if key == 'VV':
            return Variation_486
        if key == 'RSVV':
            return Variation_472
        if key == 'SDVV':
            return Variation_487
        if key == 'COVVHP':
            return Variation_467
        if key == 'COVVHV':
            return Variation_467
        if key == 'COVVHA':
            return Variation_467
        assert_never(key)

    def __init__(self, arg : Optional[Variation_488_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['VV'], val : Union[Variation_486, Variation_486_Arg]) -> 'Variation_488':
        ...

    @overload
    def set_item(self, name : Literal['RSVV'], val : Union[Variation_472, Variation_472_Arg]) -> 'Variation_488':
        ...

    @overload
    def set_item(self, name : Literal['SDVV'], val : Union[Variation_487, Variation_487_Arg]) -> 'Variation_488':
        ...

    @overload
    def set_item(self, name : Literal['COVVHP'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_488':
        ...

    @overload
    def set_item(self, name : Literal['COVVHV'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_488':
        ...

    @overload
    def set_item(self, name : Literal['COVVHA'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_488':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['VV']) -> 'Variation_488':
        ...

    @overload
    def del_item(self, name : Literal['RSVV']) -> 'Variation_488':
        ...

    @overload
    def del_item(self, name : Literal['SDVV']) -> 'Variation_488':
        ...

    @overload
    def del_item(self, name : Literal['COVVHP']) -> 'Variation_488':
        ...

    @overload
    def del_item(self, name : Literal['COVVHV']) -> 'Variation_488':
        ...

    @overload
    def del_item(self, name : Literal['COVVHA']) -> 'Variation_488':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['VV']) -> Variation_486:
        ...

    @overload
    def get_item(self, name : Literal['RSVV']) -> Variation_472:
        ...

    @overload
    def get_item(self, name : Literal['SDVV']) -> Variation_487:
        ...

    @overload
    def get_item(self, name : Literal['COVVHP']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COVVHV']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COVVHA']) -> Variation_467:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_489_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_489(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0e-2, 0, 'm/s2')

    def __init__(self, arg : Variation_489_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_490_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_490(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'm/s2')

    def __init__(self, arg : Variation_490_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_491_Arg_Group = TypedDict('Variation_491_Arg_Group', {
    'SDVA': Union[Variation_490, Variation_490_Arg],
    'COVAGH': Union[Variation_456, Variation_456_Arg],
    'COVAVV': Union[Variation_456, Variation_456_Arg],
})
Variation_491_Arg : TypeAlias = Union[Raw, Variation_491_Arg_Group]
class Variation_491(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('SDVA', Variation_490),
        ('COVAGH', Variation_456),
        ('COVAVV', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDVA': ('', Variation_490, 0, 16),
        'COVAGH': ('', Variation_456, 16, 8),
        'COVAVV': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDVA']) -> Type[Variation_490]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVAGH']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVAVV']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDVA'], Literal['COVAGH'], Literal['COVAVV']]) -> Union[Type['Variation_490'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'SDVA':
            return Variation_490
        if key == 'COVAGH':
            return Variation_456
        if key == 'COVAVV':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_491_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDVA']) -> Variation_490:
        ...

    @overload
    def get_item(self, name : Literal['COVAGH']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['COVAVV']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDVA'], Literal['COVAGH'], Literal['COVAVV']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDVA'], val : Union[Variation_490, Variation_490_Arg]) -> 'Variation_491':
        ...

    @overload
    def set_item(self, name : Literal['COVAGH'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_491':
        ...

    @overload
    def set_item(self, name : Literal['COVAVV'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_491':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_492_Arg = TypedDict('Variation_492_Arg', {
    'VA': Union[Variation_489, Variation_489_Arg],
    'RSVA': Union[Variation_491, Variation_491_Arg],
    'COVAHP': Union[Variation_467, Variation_467_Arg],
    'COVAHV': Union[Variation_467, Variation_467_Arg],
    'COVAHA': Union[Variation_467, Variation_467_Arg],
}, total=False)
class Variation_492(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('VA', Variation_489),
        ('RSVA', Variation_491),
        ('COVAHP', Variation_467),
        ('COVAHV', Variation_467),
        ('COVAHA', Variation_467),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'VA': (Variation_489, 0x80),
        'RSVA': (Variation_491, 0x40),
        'COVAHP': (Variation_467, 0x20),
        'COVAHV': (Variation_467, 0x10),
        'COVAHA': (Variation_467, 0x08),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VA']) -> Type[Variation_489]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSVA']) -> Type[Variation_491]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVAHP']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVAHV']) -> Type[Variation_467]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVAHA']) -> Type[Variation_467]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VA'], Literal['RSVA'], Literal['COVAHP'], Literal['COVAHV'], Literal['COVAHA']]) -> Union[Type['Variation_489'], Type['Variation_491'], Type['Variation_467'], Type['Variation_467'], Type['Variation_467']]:
        if key == 'VA':
            return Variation_489
        if key == 'RSVA':
            return Variation_491
        if key == 'COVAHP':
            return Variation_467
        if key == 'COVAHV':
            return Variation_467
        if key == 'COVAHA':
            return Variation_467
        assert_never(key)

    def __init__(self, arg : Optional[Variation_492_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['VA'], val : Union[Variation_489, Variation_489_Arg]) -> 'Variation_492':
        ...

    @overload
    def set_item(self, name : Literal['RSVA'], val : Union[Variation_491, Variation_491_Arg]) -> 'Variation_492':
        ...

    @overload
    def set_item(self, name : Literal['COVAHP'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_492':
        ...

    @overload
    def set_item(self, name : Literal['COVAHV'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_492':
        ...

    @overload
    def set_item(self, name : Literal['COVAHA'], val : Union[Variation_467, Variation_467_Arg]) -> 'Variation_492':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['VA']) -> 'Variation_492':
        ...

    @overload
    def del_item(self, name : Literal['RSVA']) -> 'Variation_492':
        ...

    @overload
    def del_item(self, name : Literal['COVAHP']) -> 'Variation_492':
        ...

    @overload
    def del_item(self, name : Literal['COVAHV']) -> 'Variation_492':
        ...

    @overload
    def del_item(self, name : Literal['COVAHA']) -> 'Variation_492':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['VA']) -> Variation_489:
        ...

    @overload
    def get_item(self, name : Literal['RSVA']) -> Variation_491:
        ...

    @overload
    def get_item(self, name : Literal['COVAHP']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COVAHV']) -> Variation_467:
        ...

    @overload
    def get_item(self, name : Literal['COVAHA']) -> Variation_467:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_493_Arg : TypeAlias = Raw
class Variation_493(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 40

    def __init__(self, arg : Variation_493_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_494_Arg : TypeAlias = List[Union[Variation_493, Variation_493_Arg]]
class Variation_494(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 40
    variation_type = Variation_493

    @classmethod
    def spec(cls) -> Type[Variation_493]:
        return Variation_493

    def __init__(self, arg : List[Union[Variation_493, Variation_493_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_495_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_495(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 0.1, 0, 'm')

    def __init__(self, arg : Variation_495_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_496_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_496(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 0.1, 0, 'm')

    def __init__(self, arg : Variation_496_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_497_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_497(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 0.1, 0, 'm/s')

    def __init__(self, arg : Variation_497_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_498_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_498(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 0.1, 0, 'm/s')

    def __init__(self, arg : Variation_498_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_499_Arg_Group = TypedDict('Variation_499_Arg_Group', {
    'SDRR': Union[Variation_498, Variation_498_Arg],
    'CORRR': Union[Variation_456, Variation_456_Arg],
})
Variation_499_Arg : TypeAlias = Union[Raw, Variation_499_Arg_Group]
class Variation_499(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('SDRR', Variation_498),
        ('CORRR', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDRR': ('', Variation_498, 0, 24),
        'CORRR': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDRR']) -> Type[Variation_498]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CORRR']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDRR'], Literal['CORRR']]) -> Union[Type['Variation_498'], Type['Variation_456']]:
        if key == 'SDRR':
            return Variation_498
        if key == 'CORRR':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_499_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDRR']) -> Variation_498:
        ...

    @overload
    def get_item(self, name : Literal['CORRR']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDRR'], Literal['CORRR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDRR'], val : Union[Variation_498, Variation_498_Arg]) -> 'Variation_499':
        ...

    @overload
    def set_item(self, name : Literal['CORRR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_499':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_500_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_500(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 6, 'm/s2')

    def __init__(self, arg : Variation_500_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_501_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_501(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 7, 'm/s2')

    def __init__(self, arg : Variation_501_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_502_Arg_Group = TypedDict('Variation_502_Arg_Group', {
    'SDRA': Union[Variation_501, Variation_501_Arg],
    'CORAR': Union[Variation_456, Variation_456_Arg],
    'CORARR': Union[Variation_456, Variation_456_Arg],
})
Variation_502_Arg : TypeAlias = Union[Raw, Variation_502_Arg_Group]
class Variation_502(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('SDRA', Variation_501),
        ('CORAR', Variation_456),
        ('CORARR', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDRA': ('', Variation_501, 0, 16),
        'CORAR': ('', Variation_456, 16, 8),
        'CORARR': ('', Variation_456, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDRA']) -> Type[Variation_501]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CORAR']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CORARR']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDRA'], Literal['CORAR'], Literal['CORARR']]) -> Union[Type['Variation_501'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'SDRA':
            return Variation_501
        if key == 'CORAR':
            return Variation_456
        if key == 'CORARR':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_502_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDRA']) -> Variation_501:
        ...

    @overload
    def get_item(self, name : Literal['CORAR']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CORARR']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDRA'], Literal['CORAR'], Literal['CORARR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDRA'], val : Union[Variation_501, Variation_501_Arg]) -> 'Variation_502':
        ...

    @overload
    def set_item(self, name : Literal['CORAR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_502':
        ...

    @overload
    def set_item(self, name : Literal['CORARR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_502':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_503_Arg = TypedDict('Variation_503_Arg', {
    'R': Union[Variation_495, Variation_495_Arg],
    'RSR': Union[Variation_496, Variation_496_Arg],
    'SDR': Union[Variation_496, Variation_496_Arg],
    'RR': Union[Variation_497, Variation_497_Arg],
    'RSRR': Union[Variation_498, Variation_498_Arg],
    'SDRR': Union[Variation_499, Variation_499_Arg],
    'RA': Union[Variation_500, Variation_500_Arg],
    'SDRA': Union[Variation_502, Variation_502_Arg],
}, total=False)
class Variation_503(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('R', Variation_495),
        ('RSR', Variation_496),
        ('SDR', Variation_496),
        ('RR', Variation_497),
        ('RSRR', Variation_498),
        ('SDRR', Variation_499),
        ('RA', Variation_500),
        ('SDRA', Variation_502),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'R': (Variation_495, 0x8000),
        'RSR': (Variation_496, 0x4000),
        'SDR': (Variation_496, 0x2000),
        'RR': (Variation_497, 0x1000),
        'RSRR': (Variation_498, 0x0800),
        'SDRR': (Variation_499, 0x0400),
        'RA': (Variation_500, 0x0200),
        'SDRA': (Variation_502, 0x0180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['R']) -> Type[Variation_495]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSR']) -> Type[Variation_496]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDR']) -> Type[Variation_496]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RR']) -> Type[Variation_497]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSRR']) -> Type[Variation_498]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDRR']) -> Type[Variation_499]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RA']) -> Type[Variation_500]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDRA']) -> Type[Variation_502]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['R'], Literal['RSR'], Literal['SDR'], Literal['RR'], Literal['RSRR'], Literal['SDRR'], Literal['RA'], Literal['SDRA']]) -> Union[Type['Variation_495'], Type['Variation_496'], Type['Variation_496'], Type['Variation_497'], Type['Variation_498'], Type['Variation_499'], Type['Variation_500'], Type['Variation_502']]:
        if key == 'R':
            return Variation_495
        if key == 'RSR':
            return Variation_496
        if key == 'SDR':
            return Variation_496
        if key == 'RR':
            return Variation_497
        if key == 'RSRR':
            return Variation_498
        if key == 'SDRR':
            return Variation_499
        if key == 'RA':
            return Variation_500
        if key == 'SDRA':
            return Variation_502
        assert_never(key)

    def __init__(self, arg : Optional[Variation_503_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['R'], val : Union[Variation_495, Variation_495_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['RSR'], val : Union[Variation_496, Variation_496_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['SDR'], val : Union[Variation_496, Variation_496_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['RR'], val : Union[Variation_497, Variation_497_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['RSRR'], val : Union[Variation_498, Variation_498_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['SDRR'], val : Union[Variation_499, Variation_499_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['RA'], val : Union[Variation_500, Variation_500_Arg]) -> 'Variation_503':
        ...

    @overload
    def set_item(self, name : Literal['SDRA'], val : Union[Variation_502, Variation_502_Arg]) -> 'Variation_503':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['R']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['RSR']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['SDR']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['RR']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['RSRR']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['SDRR']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['RA']) -> 'Variation_503':
        ...

    @overload
    def del_item(self, name : Literal['SDRA']) -> 'Variation_503':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['R']) -> Variation_495:
        ...

    @overload
    def get_item(self, name : Literal['RSR']) -> Variation_496:
        ...

    @overload
    def get_item(self, name : Literal['SDR']) -> Variation_496:
        ...

    @overload
    def get_item(self, name : Literal['RR']) -> Variation_497:
        ...

    @overload
    def get_item(self, name : Literal['RSRR']) -> Variation_498:
        ...

    @overload
    def get_item(self, name : Literal['SDRR']) -> Variation_499:
        ...

    @overload
    def get_item(self, name : Literal['RA']) -> Variation_500:
        ...

    @overload
    def get_item(self, name : Literal['SDRA']) -> Variation_502:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_504_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_504(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 6, 'm/s')

    def __init__(self, arg : Variation_504_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_505_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_505(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 6, 'm/s2')

    def __init__(self, arg : Variation_505_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_506_Arg_Group = TypedDict('Variation_506_Arg_Group', {
    'SDDA': Union[Variation_505, Variation_505_Arg],
    'CODADV': Union[Variation_456, Variation_456_Arg],
})
Variation_506_Arg : TypeAlias = Union[Raw, Variation_506_Arg_Group]
class Variation_506(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SDDA', Variation_505),
        ('CODADV', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDDA': ('', Variation_505, 0, 16),
        'CODADV': ('', Variation_456, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDDA']) -> Type[Variation_505]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODADV']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDDA'], Literal['CODADV']]) -> Union[Type['Variation_505'], Type['Variation_456']]:
        if key == 'SDDA':
            return Variation_505
        if key == 'CODADV':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_506_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDDA']) -> Variation_505:
        ...

    @overload
    def get_item(self, name : Literal['CODADV']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDDA'], Literal['CODADV']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDDA'], val : Union[Variation_505, Variation_505_Arg]) -> 'Variation_506':
        ...

    @overload
    def set_item(self, name : Literal['CODADV'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_506':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_507_Arg = TypedDict('Variation_507_Arg', {
    'DV': Union[Variation_486, Variation_486_Arg],
    'SDDV': Union[Variation_504, Variation_504_Arg],
    'DA': Union[Variation_500, Variation_500_Arg],
    'SDDA': Union[Variation_506, Variation_506_Arg],
    'CODVR': Union[Variation_456, Variation_456_Arg],
    'CODVRR': Union[Variation_456, Variation_456_Arg],
    'CODVRA': Union[Variation_456, Variation_456_Arg],
    'CODAR': Union[Variation_456, Variation_456_Arg],
    'CODARR': Union[Variation_456, Variation_456_Arg],
    'CODARA': Union[Variation_456, Variation_456_Arg],
}, total=False)
class Variation_507(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('DV', Variation_486),
        ('SDDV', Variation_504),
        ('DA', Variation_500),
        ('SDDA', Variation_506),
        ('CODVR', Variation_456),
        ('CODVRR', Variation_456),
        ('CODVRA', Variation_456),
        ('CODAR', Variation_456),
        ('CODARR', Variation_456),
        ('CODARA', Variation_456),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'DV': (Variation_486, 0x8000),
        'SDDV': (Variation_504, 0x4000),
        'DA': (Variation_500, 0x2000),
        'SDDA': (Variation_506, 0x1000),
        'CODVR': (Variation_456, 0x0800),
        'CODVRR': (Variation_456, 0x0400),
        'CODVRA': (Variation_456, 0x0200),
        'CODAR': (Variation_456, 0x0180),
        'CODARR': (Variation_456, 0x0140),
        'CODARA': (Variation_456, 0x0120),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DV']) -> Type[Variation_486]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDDV']) -> Type[Variation_504]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DA']) -> Type[Variation_500]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDDA']) -> Type[Variation_506]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODVR']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODVRR']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODVRA']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODAR']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODARR']) -> Type[Variation_456]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CODARA']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DV'], Literal['SDDV'], Literal['DA'], Literal['SDDA'], Literal['CODVR'], Literal['CODVRR'], Literal['CODVRA'], Literal['CODAR'], Literal['CODARR'], Literal['CODARA']]) -> Union[Type['Variation_486'], Type['Variation_504'], Type['Variation_500'], Type['Variation_506'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456'], Type['Variation_456']]:
        if key == 'DV':
            return Variation_486
        if key == 'SDDV':
            return Variation_504
        if key == 'DA':
            return Variation_500
        if key == 'SDDA':
            return Variation_506
        if key == 'CODVR':
            return Variation_456
        if key == 'CODVRR':
            return Variation_456
        if key == 'CODVRA':
            return Variation_456
        if key == 'CODAR':
            return Variation_456
        if key == 'CODARR':
            return Variation_456
        if key == 'CODARA':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Optional[Variation_507_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['DV'], val : Union[Variation_486, Variation_486_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['SDDV'], val : Union[Variation_504, Variation_504_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['DA'], val : Union[Variation_500, Variation_500_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['SDDA'], val : Union[Variation_506, Variation_506_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODVR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODVRR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODVRA'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODAR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODARR'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    @overload
    def set_item(self, name : Literal['CODARA'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_507':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['DV']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['SDDV']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['DA']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['SDDA']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODVR']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODVRR']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODVRA']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODAR']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODARR']) -> 'Variation_507':
        ...

    @overload
    def del_item(self, name : Literal['CODARA']) -> 'Variation_507':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['DV']) -> Variation_486:
        ...

    @overload
    def get_item(self, name : Literal['SDDV']) -> Variation_504:
        ...

    @overload
    def get_item(self, name : Literal['DA']) -> Variation_500:
        ...

    @overload
    def get_item(self, name : Literal['SDDA']) -> Variation_506:
        ...

    @overload
    def get_item(self, name : Literal['CODVR']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CODVRR']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CODVRA']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CODAR']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CODARR']) -> Variation_456:
        ...

    @overload
    def get_item(self, name : Literal['CODARA']) -> Variation_456:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_508_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_508(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 45.0, 16, '°')

    def __init__(self, arg : Variation_508_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_509_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_509(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 180.0, 16, '°')

    def __init__(self, arg : Variation_509_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_510_Arg_Group = TypedDict('Variation_510_Arg_Group', {
    'SDAZR': Union[Variation_508, Variation_508_Arg],
    'COAZRAZ': Union[Variation_456, Variation_456_Arg],
})
Variation_510_Arg : TypeAlias = Union[Raw, Variation_510_Arg_Group]
class Variation_510(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SDAZR', Variation_508),
        ('COAZRAZ', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDAZR': ('', Variation_508, 0, 16),
        'COAZRAZ': ('', Variation_456, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDAZR']) -> Type[Variation_508]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COAZRAZ']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDAZR'], Literal['COAZRAZ']]) -> Union[Type['Variation_508'], Type['Variation_456']]:
        if key == 'SDAZR':
            return Variation_508
        if key == 'COAZRAZ':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_510_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDAZR']) -> Variation_508:
        ...

    @overload
    def get_item(self, name : Literal['COAZRAZ']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDAZR'], Literal['COAZRAZ']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDAZR'], val : Union[Variation_508, Variation_508_Arg]) -> 'Variation_510':
        ...

    @overload
    def set_item(self, name : Literal['COAZRAZ'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_510':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_511_Arg_Group = TypedDict('Variation_511_Arg_Group', {
    'S': Union[Variation_14, Variation_14_Arg],
    'E': Union[Variation_14, Variation_14_Arg],
})
Variation_511_Arg : TypeAlias = Union[Raw, Variation_511_Arg_Group]
class Variation_511(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('S', Variation_14),
        ('E', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'S': ('', Variation_14, 0, 16),
        'E': ('', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['S']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['E']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['S'], Literal['E']]) -> Union[Type['Variation_14'], Type['Variation_14']]:
        if key == 'S':
            return Variation_14
        if key == 'E':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_511_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['S']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['E']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['S'], Literal['E']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['S'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_511':
        ...

    @overload
    def set_item(self, name : Literal['E'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_511':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_512_Arg = TypedDict('Variation_512_Arg', {
    'AZ': Union[Variation_14, Variation_14_Arg],
    'RSAZ': Union[Variation_508, Variation_508_Arg],
    'SDASZ': Union[Variation_508, Variation_508_Arg],
    'AZR': Union[Variation_509, Variation_509_Arg],
    'SDAZR': Union[Variation_510, Variation_510_Arg],
    'AZEX': Union[Variation_511, Variation_511_Arg],
}, total=False)
class Variation_512(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('AZ', Variation_14),
        ('RSAZ', Variation_508),
        ('SDASZ', Variation_508),
        ('AZR', Variation_509),
        ('SDAZR', Variation_510),
        ('AZEX', Variation_511),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AZ': (Variation_14, 0x80),
        'RSAZ': (Variation_508, 0x40),
        'SDASZ': (Variation_508, 0x20),
        'AZR': (Variation_509, 0x10),
        'SDAZR': (Variation_510, 0x08),
        'AZEX': (Variation_511, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AZ']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSAZ']) -> Type[Variation_508]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDASZ']) -> Type[Variation_508]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AZR']) -> Type[Variation_509]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDAZR']) -> Type[Variation_510]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AZEX']) -> Type[Variation_511]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AZ'], Literal['RSAZ'], Literal['SDASZ'], Literal['AZR'], Literal['SDAZR'], Literal['AZEX']]) -> Union[Type['Variation_14'], Type['Variation_508'], Type['Variation_508'], Type['Variation_509'], Type['Variation_510'], Type['Variation_511']]:
        if key == 'AZ':
            return Variation_14
        if key == 'RSAZ':
            return Variation_508
        if key == 'SDASZ':
            return Variation_508
        if key == 'AZR':
            return Variation_509
        if key == 'SDAZR':
            return Variation_510
        if key == 'AZEX':
            return Variation_511
        assert_never(key)

    def __init__(self, arg : Optional[Variation_512_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_512':
        ...

    @overload
    def set_item(self, name : Literal['RSAZ'], val : Union[Variation_508, Variation_508_Arg]) -> 'Variation_512':
        ...

    @overload
    def set_item(self, name : Literal['SDASZ'], val : Union[Variation_508, Variation_508_Arg]) -> 'Variation_512':
        ...

    @overload
    def set_item(self, name : Literal['AZR'], val : Union[Variation_509, Variation_509_Arg]) -> 'Variation_512':
        ...

    @overload
    def set_item(self, name : Literal['SDAZR'], val : Union[Variation_510, Variation_510_Arg]) -> 'Variation_512':
        ...

    @overload
    def set_item(self, name : Literal['AZEX'], val : Union[Variation_511, Variation_511_Arg]) -> 'Variation_512':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AZ']) -> 'Variation_512':
        ...

    @overload
    def del_item(self, name : Literal['RSAZ']) -> 'Variation_512':
        ...

    @overload
    def del_item(self, name : Literal['SDASZ']) -> 'Variation_512':
        ...

    @overload
    def del_item(self, name : Literal['AZR']) -> 'Variation_512':
        ...

    @overload
    def del_item(self, name : Literal['SDAZR']) -> 'Variation_512':
        ...

    @overload
    def del_item(self, name : Literal['AZEX']) -> 'Variation_512':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AZ']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['RSAZ']) -> Variation_508:
        ...

    @overload
    def get_item(self, name : Literal['SDASZ']) -> Variation_508:
        ...

    @overload
    def get_item(self, name : Literal['AZR']) -> Variation_509:
        ...

    @overload
    def get_item(self, name : Literal['SDAZR']) -> Variation_510:
        ...

    @overload
    def get_item(self, name : Literal['AZEX']) -> Variation_511:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_513_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°/s']]]
class Variation_513(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 180.0, 16, '°/s')

    def __init__(self, arg : Variation_513_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_514_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°/s']]]
class Variation_514(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 45.0, 16, '°/s')

    def __init__(self, arg : Variation_514_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_515_Arg_Group = TypedDict('Variation_515_Arg_Group', {
    'SDELR': Union[Variation_514, Variation_514_Arg],
    'COELREL': Union[Variation_456, Variation_456_Arg],
})
Variation_515_Arg : TypeAlias = Union[Raw, Variation_515_Arg_Group]
class Variation_515(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SDELR', Variation_514),
        ('COELREL', Variation_456),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SDELR': ('', Variation_514, 0, 16),
        'COELREL': ('', Variation_456, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SDELR']) -> Type[Variation_514]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COELREL']) -> Type[Variation_456]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SDELR'], Literal['COELREL']]) -> Union[Type['Variation_514'], Type['Variation_456']]:
        if key == 'SDELR':
            return Variation_514
        if key == 'COELREL':
            return Variation_456
        assert_never(key)

    def __init__(self, arg : Variation_515_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SDELR']) -> Variation_514:
        ...

    @overload
    def get_item(self, name : Literal['COELREL']) -> Variation_456:
        ...

    def get_item(self, name : Union[Literal['SDELR'], Literal['COELREL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SDELR'], val : Union[Variation_514, Variation_514_Arg]) -> 'Variation_515':
        ...

    @overload
    def set_item(self, name : Literal['COELREL'], val : Union[Variation_456, Variation_456_Arg]) -> 'Variation_515':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_516_Arg_Group = TypedDict('Variation_516_Arg_Group', {
    'S': Union[Variation_509, Variation_509_Arg],
    'E': Union[Variation_509, Variation_509_Arg],
})
Variation_516_Arg : TypeAlias = Union[Raw, Variation_516_Arg_Group]
class Variation_516(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('S', Variation_509),
        ('E', Variation_509),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'S': ('', Variation_509, 0, 16),
        'E': ('', Variation_509, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['S']) -> Type[Variation_509]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['E']) -> Type[Variation_509]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['S'], Literal['E']]) -> Union[Type['Variation_509'], Type['Variation_509']]:
        if key == 'S':
            return Variation_509
        if key == 'E':
            return Variation_509
        assert_never(key)

    def __init__(self, arg : Variation_516_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['S']) -> Variation_509:
        ...

    @overload
    def get_item(self, name : Literal['E']) -> Variation_509:
        ...

    def get_item(self, name : Union[Literal['S'], Literal['E']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['S'], val : Union[Variation_509, Variation_509_Arg]) -> 'Variation_516':
        ...

    @overload
    def set_item(self, name : Literal['E'], val : Union[Variation_509, Variation_509_Arg]) -> 'Variation_516':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_517_Arg = TypedDict('Variation_517_Arg', {
    'EL': Union[Variation_509, Variation_509_Arg],
    'RSEL': Union[Variation_508, Variation_508_Arg],
    'SDEL': Union[Variation_508, Variation_508_Arg],
    'ER': Union[Variation_513, Variation_513_Arg],
    'SDER': Union[Variation_515, Variation_515_Arg],
    'ELEX': Union[Variation_516, Variation_516_Arg],
}, total=False)
class Variation_517(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('EL', Variation_509),
        ('RSEL', Variation_508),
        ('SDEL', Variation_508),
        ('ER', Variation_513),
        ('SDER', Variation_515),
        ('ELEX', Variation_516),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'EL': (Variation_509, 0x80),
        'RSEL': (Variation_508, 0x40),
        'SDEL': (Variation_508, 0x20),
        'ER': (Variation_513, 0x10),
        'SDER': (Variation_515, 0x08),
        'ELEX': (Variation_516, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EL']) -> Type[Variation_509]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSEL']) -> Type[Variation_508]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDEL']) -> Type[Variation_508]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ER']) -> Type[Variation_513]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDER']) -> Type[Variation_515]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ELEX']) -> Type[Variation_516]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EL'], Literal['RSEL'], Literal['SDEL'], Literal['ER'], Literal['SDER'], Literal['ELEX']]) -> Union[Type['Variation_509'], Type['Variation_508'], Type['Variation_508'], Type['Variation_513'], Type['Variation_515'], Type['Variation_516']]:
        if key == 'EL':
            return Variation_509
        if key == 'RSEL':
            return Variation_508
        if key == 'SDEL':
            return Variation_508
        if key == 'ER':
            return Variation_513
        if key == 'SDER':
            return Variation_515
        if key == 'ELEX':
            return Variation_516
        assert_never(key)

    def __init__(self, arg : Optional[Variation_517_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['EL'], val : Union[Variation_509, Variation_509_Arg]) -> 'Variation_517':
        ...

    @overload
    def set_item(self, name : Literal['RSEL'], val : Union[Variation_508, Variation_508_Arg]) -> 'Variation_517':
        ...

    @overload
    def set_item(self, name : Literal['SDEL'], val : Union[Variation_508, Variation_508_Arg]) -> 'Variation_517':
        ...

    @overload
    def set_item(self, name : Literal['ER'], val : Union[Variation_513, Variation_513_Arg]) -> 'Variation_517':
        ...

    @overload
    def set_item(self, name : Literal['SDER'], val : Union[Variation_515, Variation_515_Arg]) -> 'Variation_517':
        ...

    @overload
    def set_item(self, name : Literal['ELEX'], val : Union[Variation_516, Variation_516_Arg]) -> 'Variation_517':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['EL']) -> 'Variation_517':
        ...

    @overload
    def del_item(self, name : Literal['RSEL']) -> 'Variation_517':
        ...

    @overload
    def del_item(self, name : Literal['SDEL']) -> 'Variation_517':
        ...

    @overload
    def del_item(self, name : Literal['ER']) -> 'Variation_517':
        ...

    @overload
    def del_item(self, name : Literal['SDER']) -> 'Variation_517':
        ...

    @overload
    def del_item(self, name : Literal['ELEX']) -> 'Variation_517':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['EL']) -> Variation_509:
        ...

    @overload
    def get_item(self, name : Literal['RSEL']) -> Variation_508:
        ...

    @overload
    def get_item(self, name : Literal['SDEL']) -> Variation_508:
        ...

    @overload
    def get_item(self, name : Literal['ER']) -> Variation_513:
        ...

    @overload
    def get_item(self, name : Literal['SDER']) -> Variation_515:
        ...

    @overload
    def get_item(self, name : Literal['ELEX']) -> Variation_516:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_518_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['dB']]]
class Variation_518(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 0, 'dB')

    def __init__(self, arg : Variation_518_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_519_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['dB']]]
class Variation_519(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 9
    quantity = Quantity('Signed', 1.0, 0, 'dB')

    def __init__(self, arg : Variation_519_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_520_Arg_Group = TypedDict('Variation_520_Arg_Group', {
    'RPP': Union[Variation_519, Variation_519_Arg],
})
Variation_520_Arg : TypeAlias = Union[Raw, Variation_520_Arg_Group]
class Variation_520(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 7),
        ('RPP', Variation_519),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RPP': ('', Variation_519, 7, 9),
    }

    @classmethod
    def spec(cls, key : Union[Literal['RPP']]) -> Union[Type['Variation_519']]:
        if key == 'RPP':
            return Variation_519
        assert_never(key)

    def __init__(self, arg : Variation_520_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['RPP']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['RPP'], val : Union[Variation_519, Variation_519_Arg]) -> 'Variation_520':
        return self._set_item(name, val) # type: ignore

Variation_521_Arg = TypedDict('Variation_521_Arg', {
    'DPP': Union[Variation_518, Variation_518_Arg],
    'DPS': Union[Variation_518, Variation_518_Arg],
    'RPP': Union[Variation_520, Variation_520_Arg],
    'RPS': Union[Variation_518, Variation_518_Arg],
}, total=False)
class Variation_521(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('DPP', Variation_518),
        ('DPS', Variation_518),
        ('RPP', Variation_520),
        ('RPS', Variation_518),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'DPP': (Variation_518, 0x80),
        'DPS': (Variation_518, 0x40),
        'RPP': (Variation_520, 0x20),
        'RPS': (Variation_518, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DPP']) -> Type[Variation_518]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DPS']) -> Type[Variation_518]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RPP']) -> Type[Variation_520]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RPS']) -> Type[Variation_518]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DPP'], Literal['DPS'], Literal['RPP'], Literal['RPS']]) -> Union[Type['Variation_518'], Type['Variation_518'], Type['Variation_520'], Type['Variation_518']]:
        if key == 'DPP':
            return Variation_518
        if key == 'DPS':
            return Variation_518
        if key == 'RPP':
            return Variation_520
        if key == 'RPS':
            return Variation_518
        assert_never(key)

    def __init__(self, arg : Optional[Variation_521_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['DPP'], val : Union[Variation_518, Variation_518_Arg]) -> 'Variation_521':
        ...

    @overload
    def set_item(self, name : Literal['DPS'], val : Union[Variation_518, Variation_518_Arg]) -> 'Variation_521':
        ...

    @overload
    def set_item(self, name : Literal['RPP'], val : Union[Variation_520, Variation_520_Arg]) -> 'Variation_521':
        ...

    @overload
    def set_item(self, name : Literal['RPS'], val : Union[Variation_518, Variation_518_Arg]) -> 'Variation_521':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['DPP']) -> 'Variation_521':
        ...

    @overload
    def del_item(self, name : Literal['DPS']) -> 'Variation_521':
        ...

    @overload
    def del_item(self, name : Literal['RPP']) -> 'Variation_521':
        ...

    @overload
    def del_item(self, name : Literal['RPS']) -> 'Variation_521':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['DPP']) -> Variation_518:
        ...

    @overload
    def get_item(self, name : Literal['DPS']) -> Variation_518:
        ...

    @overload
    def get_item(self, name : Literal['RPP']) -> Variation_520:
        ...

    @overload
    def get_item(self, name : Literal['RPS']) -> Variation_518:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_522_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m']]]
class Variation_522(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 10000.0, 16, 'm')

    def __init__(self, arg : Variation_522_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_523_Arg_Group = TypedDict('Variation_523_Arg_Group', {
    'AZCON': Union[Variation_14, Variation_14_Arg],
    'ELCON': Union[Variation_509, Variation_509_Arg],
    'RGCONSTOP': Union[Variation_522, Variation_522_Arg],
    'RGCONSTART': Union[Variation_522, Variation_522_Arg],
})
Variation_523_Arg : TypeAlias = Union[Raw, Variation_523_Arg_Group]
class Variation_523(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('AZCON', Variation_14),
        ('ELCON', Variation_509),
        ('RGCONSTOP', Variation_522),
        ('RGCONSTART', Variation_522),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AZCON': ('', Variation_14, 0, 16),
        'ELCON': ('', Variation_509, 16, 16),
        'RGCONSTOP': ('', Variation_522, 32, 16),
        'RGCONSTART': ('', Variation_522, 48, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AZCON']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ELCON']) -> Type[Variation_509]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RGCONSTOP']) -> Type[Variation_522]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RGCONSTART']) -> Type[Variation_522]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AZCON'], Literal['ELCON'], Literal['RGCONSTOP'], Literal['RGCONSTART']]) -> Union[Type['Variation_14'], Type['Variation_509'], Type['Variation_522'], Type['Variation_522']]:
        if key == 'AZCON':
            return Variation_14
        if key == 'ELCON':
            return Variation_509
        if key == 'RGCONSTOP':
            return Variation_522
        if key == 'RGCONSTART':
            return Variation_522
        assert_never(key)

    def __init__(self, arg : Variation_523_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AZCON']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['ELCON']) -> Variation_509:
        ...

    @overload
    def get_item(self, name : Literal['RGCONSTOP']) -> Variation_522:
        ...

    @overload
    def get_item(self, name : Literal['RGCONSTART']) -> Variation_522:
        ...

    def get_item(self, name : Union[Literal['AZCON'], Literal['ELCON'], Literal['RGCONSTOP'], Literal['RGCONSTART']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AZCON'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_523':
        ...

    @overload
    def set_item(self, name : Literal['ELCON'], val : Union[Variation_509, Variation_509_Arg]) -> 'Variation_523':
        ...

    @overload
    def set_item(self, name : Literal['RGCONSTOP'], val : Union[Variation_522, Variation_522_Arg]) -> 'Variation_523':
        ...

    @overload
    def set_item(self, name : Literal['RGCONSTART'], val : Union[Variation_522, Variation_522_Arg]) -> 'Variation_523':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_524_Arg : TypeAlias = List[Union[Variation_523, Variation_523_Arg]]
class Variation_524(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 64
    variation_type = Variation_523

    @classmethod
    def spec(cls) -> Type[Variation_523]:
        return Variation_523

    def __init__(self, arg : List[Union[Variation_523, Variation_523_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_525_Arg = TypedDict('Variation_525_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_433, Variation_433_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '020': Union[Variation_437, Variation_437_Arg],
    '030': Union[Variation_438, Variation_438_Arg],
    '145': Union[Variation_81, Variation_81_Arg],
    '161': Union[Variation_64, Variation_64_Arg],
    '170': Union[Variation_445, Variation_445_Arg],
    '050': Union[Variation_447, Variation_447_Arg],
    '270': Union[Variation_449, Variation_449_Arg],
    '300': Union[Variation_453, Variation_453_Arg],
    '400': Union[Variation_454, Variation_454_Arg],
    '600': Union[Variation_460, Variation_460_Arg],
    '601': Union[Variation_468, Variation_468_Arg],
    '602': Union[Variation_476, Variation_476_Arg],
    '603': Union[Variation_485, Variation_485_Arg],
    '604': Union[Variation_488, Variation_488_Arg],
    '605': Union[Variation_492, Variation_492_Arg],
    '480': Union[Variation_494, Variation_494_Arg],
    '625': Union[Variation_503, Variation_503_Arg],
    '626': Union[Variation_507, Variation_507_Arg],
    '627': Union[Variation_512, Variation_512_Arg],
    '628': Union[Variation_517, Variation_517_Arg],
    '630': Union[Variation_521, Variation_521_Arg],
    '631': Union[Variation_524, Variation_524_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_525(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_433),
        ('015', Variation_0),
        ('020', Variation_437),
        ('030', Variation_438),
        ('145', Variation_81),
        ('161', Variation_64),
        ('170', Variation_445),
        ('050', Variation_447),
        ('270', Variation_449),
        ('300', Variation_453),
        ('400', Variation_454),
        ('600', Variation_460),
        ('601', Variation_468),
        ('602', Variation_476),
        ('603', Variation_485),
        ('604', Variation_488),
        ('605', Variation_492),
        ('480', Variation_494),
        ('625', Variation_503),
        ('626', Variation_507),
        ('627', Variation_512),
        ('628', Variation_517),
        ('630', Variation_521),
        ('631', Variation_524),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '000': (Variation_433, 0x40000000),
        '015': (Variation_0, 0x20000000),
        '020': (Variation_437, 0x10000000),
        '030': (Variation_438, 0x08000000),
        '145': (Variation_81, 0x04000000),
        '161': (Variation_64, 0x02000000),
        '170': (Variation_445, 0x01800000),
        '050': (Variation_447, 0x01400000),
        '270': (Variation_449, 0x01200000),
        '300': (Variation_453, 0x01100000),
        '400': (Variation_454, 0x01080000),
        '600': (Variation_460, 0x01040000),
        '601': (Variation_468, 0x01020000),
        '602': (Variation_476, 0x01018000),
        '603': (Variation_485, 0x01014000),
        '604': (Variation_488, 0x01012000),
        '605': (Variation_492, 0x01011000),
        '480': (Variation_494, 0x01010800),
        '625': (Variation_503, 0x01010400),
        '626': (Variation_507, 0x01010200),
        '627': (Variation_512, 0x01010180),
        '628': (Variation_517, 0x01010140),
        '630': (Variation_521, 0x01010120),
        '631': (Variation_524, 0x01010110),
        'SP': (Variation_62, 0x01010108),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_433]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_437]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_438]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_445]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_447]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_449]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_453]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_454]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['600']) -> Type[Variation_460]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['601']) -> Type[Variation_468]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['602']) -> Type[Variation_476]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['603']) -> Type[Variation_485]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['604']) -> Type[Variation_488]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['605']) -> Type[Variation_492]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['480']) -> Type[Variation_494]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['625']) -> Type[Variation_503]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['626']) -> Type[Variation_507]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['627']) -> Type[Variation_512]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['628']) -> Type[Variation_517]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['630']) -> Type[Variation_521]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['631']) -> Type[Variation_524]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['020'], Literal['030'], Literal['145'], Literal['161'], Literal['170'], Literal['050'], Literal['270'], Literal['300'], Literal['400'], Literal['600'], Literal['601'], Literal['602'], Literal['603'], Literal['604'], Literal['605'], Literal['480'], Literal['625'], Literal['626'], Literal['627'], Literal['628'], Literal['630'], Literal['631'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_433'], Type['Variation_0'], Type['Variation_437'], Type['Variation_438'], Type['Variation_81'], Type['Variation_64'], Type['Variation_445'], Type['Variation_447'], Type['Variation_449'], Type['Variation_453'], Type['Variation_454'], Type['Variation_460'], Type['Variation_468'], Type['Variation_476'], Type['Variation_485'], Type['Variation_488'], Type['Variation_492'], Type['Variation_494'], Type['Variation_503'], Type['Variation_507'], Type['Variation_512'], Type['Variation_517'], Type['Variation_521'], Type['Variation_524'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_433
        if key == '015':
            return Variation_0
        if key == '020':
            return Variation_437
        if key == '030':
            return Variation_438
        if key == '145':
            return Variation_81
        if key == '161':
            return Variation_64
        if key == '170':
            return Variation_445
        if key == '050':
            return Variation_447
        if key == '270':
            return Variation_449
        if key == '300':
            return Variation_453
        if key == '400':
            return Variation_454
        if key == '600':
            return Variation_460
        if key == '601':
            return Variation_468
        if key == '602':
            return Variation_476
        if key == '603':
            return Variation_485
        if key == '604':
            return Variation_488
        if key == '605':
            return Variation_492
        if key == '480':
            return Variation_494
        if key == '625':
            return Variation_503
        if key == '626':
            return Variation_507
        if key == '627':
            return Variation_512
        if key == '628':
            return Variation_517
        if key == '630':
            return Variation_521
        if key == '631':
            return Variation_524
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_525_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_433, Variation_433_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_437, Variation_437_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_438, Variation_438_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_445, Variation_445_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_447, Variation_447_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_449, Variation_449_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_453, Variation_453_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_454, Variation_454_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['600'], val : Union[Variation_460, Variation_460_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['601'], val : Union[Variation_468, Variation_468_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['602'], val : Union[Variation_476, Variation_476_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['603'], val : Union[Variation_485, Variation_485_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['604'], val : Union[Variation_488, Variation_488_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['605'], val : Union[Variation_492, Variation_492_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['480'], val : Union[Variation_494, Variation_494_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['625'], val : Union[Variation_503, Variation_503_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['626'], val : Union[Variation_507, Variation_507_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['627'], val : Union[Variation_512, Variation_512_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['628'], val : Union[Variation_517, Variation_517_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['630'], val : Union[Variation_521, Variation_521_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['631'], val : Union[Variation_524, Variation_524_Arg]) -> 'Variation_525':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_525':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['600']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['601']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['602']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['603']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['604']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['605']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['480']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['625']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['626']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['627']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['628']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['630']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['631']) -> 'Variation_525':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_525':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_433:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_437:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_438:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_445:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_447:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_449:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_453:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_454:
        ...

    @overload
    def get_item(self, name : Literal['600']) -> Variation_460:
        ...

    @overload
    def get_item(self, name : Literal['601']) -> Variation_468:
        ...

    @overload
    def get_item(self, name : Literal['602']) -> Variation_476:
        ...

    @overload
    def get_item(self, name : Literal['603']) -> Variation_485:
        ...

    @overload
    def get_item(self, name : Literal['604']) -> Variation_488:
        ...

    @overload
    def get_item(self, name : Literal['605']) -> Variation_492:
        ...

    @overload
    def get_item(self, name : Literal['480']) -> Variation_494:
        ...

    @overload
    def get_item(self, name : Literal['625']) -> Variation_503:
        ...

    @overload
    def get_item(self, name : Literal['626']) -> Variation_507:
        ...

    @overload
    def get_item(self, name : Literal['627']) -> Variation_512:
        ...

    @overload
    def get_item(self, name : Literal['628']) -> Variation_517:
        ...

    @overload
    def get_item(self, name : Literal['630']) -> Variation_521:
        ...

    @overload
    def get_item(self, name : Literal['631']) -> Variation_524:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_526_Arg : TypeAlias = Raw
class Variation_526(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'System Configuration',
        2: 'Transmitter / Receiver Configuration',
    }

    def __init__(self, arg : Variation_526_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_527_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_527(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 0, 's')

    def __init__(self, arg : Variation_527_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_528_Arg_Group = TypedDict('Variation_528_Arg_Group', {
    'PID': Union[Variation_64, Variation_64_Arg],
    'TID': Union[Variation_64, Variation_64_Arg],
    'RID': Union[Variation_64, Variation_64_Arg],
})
Variation_528_Arg : TypeAlias = Union[Raw, Variation_528_Arg_Group]
class Variation_528(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('PID', Variation_64),
        ('TID', Variation_64),
        ('RID', Variation_64),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PID': ('Pair Identification', Variation_64, 0, 16),
        'TID': ('Transmitter Identification', Variation_64, 16, 16),
        'RID': ('Receiver Identification', Variation_64, 32, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RID']) -> Type[Variation_64]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PID'], Literal['TID'], Literal['RID']]) -> Union[Type['Variation_64'], Type['Variation_64'], Type['Variation_64']]:
        if key == 'PID':
            return Variation_64
        if key == 'TID':
            return Variation_64
        if key == 'RID':
            return Variation_64
        assert_never(key)

    def __init__(self, arg : Variation_528_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['RID']) -> Variation_64:
        ...

    def get_item(self, name : Union[Literal['PID'], Literal['TID'], Literal['RID']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_528':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_528':
        ...

    @overload
    def set_item(self, name : Literal['RID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_528':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_529_Arg : TypeAlias = List[Union[Variation_528, Variation_528_Arg]]
class Variation_529(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 48
    variation_type = Variation_528

    @classmethod
    def spec(cls) -> Type[Variation_528]:
        return Variation_528

    def __init__(self, arg : List[Union[Variation_528, Variation_528_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_530_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ns']]]
class Variation_530(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 2.0, 0, 'ns')

    def __init__(self, arg : Variation_530_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_531_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ns']]]
class Variation_531(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 20
    quantity = Quantity('Unsigned', 1.0, 0, 'ns')

    def __init__(self, arg : Variation_531_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_532_Arg_Group = TypedDict('Variation_532_Arg_Group', {
    'TID': Union[Variation_64, Variation_64_Arg],
    'LAT': Union[Variation_256, Variation_256_Arg],
    'LON': Union[Variation_256, Variation_256_Arg],
    'ALT': Union[Variation_302, Variation_302_Arg],
    'TTO': Union[Variation_530, Variation_530_Arg],
    'ATO': Union[Variation_531, Variation_531_Arg],
    'PCI': Union[Variation_64, Variation_64_Arg],
})
Variation_532_Arg : TypeAlias = Union[Raw, Variation_532_Arg_Group]
class Variation_532(Group):
    variation = 'Group'

    bit_size = 168

    subitems_list = [
        ('TID', Variation_64),
        ('LAT', Variation_256),
        ('LON', Variation_256),
        ('ALT', Variation_302),
        ('TTO', Variation_530),
        Spare(0, 4),
        ('ATO', Variation_531),
        ('PCI', Variation_64),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TID': ('Transmitter ID', Variation_64, 0, 16),
        'LAT': ('Latitude', Variation_256, 16, 32),
        'LON': ('Longitude', Variation_256, 48, 32),
        'ALT': ('Altitude', Variation_302, 80, 16),
        'TTO': ('Transmission Time Offset', Variation_530, 96, 32),
        'ATO': ('Accuracy of Transmission Time Offset', Variation_531, 132, 20),
        'PCI': ('Parallel Transmitter Index', Variation_64, 152, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_302]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTO']) -> Type[Variation_530]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ATO']) -> Type[Variation_531]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PCI']) -> Type[Variation_64]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TID'], Literal['LAT'], Literal['LON'], Literal['ALT'], Literal['TTO'], Literal['ATO'], Literal['PCI']]) -> Union[Type['Variation_64'], Type['Variation_256'], Type['Variation_256'], Type['Variation_302'], Type['Variation_530'], Type['Variation_531'], Type['Variation_64']]:
        if key == 'TID':
            return Variation_64
        if key == 'LAT':
            return Variation_256
        if key == 'LON':
            return Variation_256
        if key == 'ALT':
            return Variation_302
        if key == 'TTO':
            return Variation_530
        if key == 'ATO':
            return Variation_531
        if key == 'PCI':
            return Variation_64
        assert_never(key)

    def __init__(self, arg : Variation_532_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_302:
        ...

    @overload
    def get_item(self, name : Literal['TTO']) -> Variation_530:
        ...

    @overload
    def get_item(self, name : Literal['ATO']) -> Variation_531:
        ...

    @overload
    def get_item(self, name : Literal['PCI']) -> Variation_64:
        ...

    def get_item(self, name : Union[Literal['TID'], Literal['LAT'], Literal['LON'], Literal['ALT'], Literal['TTO'], Literal['ATO'], Literal['PCI']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['TTO'], val : Union[Variation_530, Variation_530_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['ATO'], val : Union[Variation_531, Variation_531_Arg]) -> 'Variation_532':
        ...

    @overload
    def set_item(self, name : Literal['PCI'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_532':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_533_Arg : TypeAlias = List[Union[Variation_532, Variation_532_Arg]]
class Variation_533(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 168
    variation_type = Variation_532

    @classmethod
    def spec(cls) -> Type[Variation_532]:
        return Variation_532

    def __init__(self, arg : List[Union[Variation_532, Variation_532_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_534_Arg_Group = TypedDict('Variation_534_Arg_Group', {
    'RID': Union[Variation_64, Variation_64_Arg],
    'LAT': Union[Variation_256, Variation_256_Arg],
    'LON': Union[Variation_256, Variation_256_Arg],
    'ALT': Union[Variation_302, Variation_302_Arg],
})
Variation_534_Arg : TypeAlias = Union[Raw, Variation_534_Arg_Group]
class Variation_534(Group):
    variation = 'Group'

    bit_size = 96

    subitems_list = [
        ('RID', Variation_64),
        ('LAT', Variation_256),
        ('LON', Variation_256),
        ('ALT', Variation_302),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RID': ('Receiver Component ID', Variation_64, 0, 16),
        'LAT': ('Latitude', Variation_256, 16, 32),
        'LON': ('Longitude', Variation_256, 48, 32),
        'ALT': ('Altitude', Variation_302, 80, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_302]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RID'], Literal['LAT'], Literal['LON'], Literal['ALT']]) -> Union[Type['Variation_64'], Type['Variation_256'], Type['Variation_256'], Type['Variation_302']]:
        if key == 'RID':
            return Variation_64
        if key == 'LAT':
            return Variation_256
        if key == 'LON':
            return Variation_256
        if key == 'ALT':
            return Variation_302
        assert_never(key)

    def __init__(self, arg : Variation_534_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_256:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_302:
        ...

    def get_item(self, name : Union[Literal['RID'], Literal['LAT'], Literal['LON'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_534':
        ...

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_534':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_256, Variation_256_Arg]) -> 'Variation_534':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_534':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_535_Arg : TypeAlias = List[Union[Variation_534, Variation_534_Arg]]
class Variation_535(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 96
    variation_type = Variation_534

    @classmethod
    def spec(cls) -> Type[Variation_534]:
        return Variation_534

    def __init__(self, arg : List[Union[Variation_534, Variation_534_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_536_Arg = TypedDict('Variation_536_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '000': Union[Variation_526, Variation_526_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '200': Union[Variation_527, Variation_527_Arg],
    '300': Union[Variation_529, Variation_529_Arg],
    '400': Union[Variation_257, Variation_257_Arg],
    '405': Union[Variation_302, Variation_302_Arg],
    '410': Union[Variation_533, Variation_533_Arg],
    '420': Union[Variation_535, Variation_535_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_536(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('015', Variation_0),
        ('000', Variation_526),
        ('140', Variation_81),
        ('200', Variation_527),
        ('300', Variation_529),
        ('400', Variation_257),
        ('405', Variation_302),
        ('410', Variation_533),
        ('420', Variation_535),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '015': (Variation_0, 0x4000),
        '000': (Variation_526, 0x2000),
        '140': (Variation_81, 0x1000),
        '200': (Variation_527, 0x0800),
        '300': (Variation_529, 0x0400),
        '400': (Variation_257, 0x0200),
        '405': (Variation_302, 0x0180),
        '410': (Variation_533, 0x0140),
        '420': (Variation_535, 0x0120),
        'SP': (Variation_62, 0x0110),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_526]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_527]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_529]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_257]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['405']) -> Type[Variation_302]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['410']) -> Type[Variation_533]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['420']) -> Type[Variation_535]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['000'], Literal['140'], Literal['200'], Literal['300'], Literal['400'], Literal['405'], Literal['410'], Literal['420'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_526'], Type['Variation_81'], Type['Variation_527'], Type['Variation_529'], Type['Variation_257'], Type['Variation_302'], Type['Variation_533'], Type['Variation_535'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '000':
            return Variation_526
        if key == '140':
            return Variation_81
        if key == '200':
            return Variation_527
        if key == '300':
            return Variation_529
        if key == '400':
            return Variation_257
        if key == '405':
            return Variation_302
        if key == '410':
            return Variation_533
        if key == '420':
            return Variation_535
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_536_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_526, Variation_526_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_527, Variation_527_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_529, Variation_529_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_257, Variation_257_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['405'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['410'], val : Union[Variation_533, Variation_533_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['420'], val : Union[Variation_535, Variation_535_Arg]) -> 'Variation_536':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_536':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['405']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['410']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['420']) -> 'Variation_536':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_536':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_526:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_527:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_529:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_257:
        ...

    @overload
    def get_item(self, name : Literal['405']) -> Variation_302:
        ...

    @overload
    def get_item(self, name : Literal['410']) -> Variation_533:
        ...

    @overload
    def get_item(self, name : Literal['420']) -> Variation_535:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_537_Arg : TypeAlias = Raw
class Variation_537(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Associate_req',
        1: 'Associate_resp',
        2: 'Release_req',
        3: 'Release_resp',
        4: 'Abort_req',
        5: 'Keep_alive',
        16: 'Aircraft_report',
        17: 'Aircraft_command',
        18: 'II_code_change',
        32: 'Uplink_packet',
        33: 'Cancel_uplink_packet',
        34: 'Uplink_packet_ack',
        35: 'Downlink_packet',
        38: 'Data_XON',
        39: 'Data_XOFF',
        48: 'Uplink_broadcast',
        49: 'Cancel_uplink_broadcast',
        50: 'Uplink_broadcast_ack',
        52: 'Downlink_broadcast',
        64: 'GICB_extraction',
        65: 'Cancel_GICB_extraction',
        66: 'GICB_extraction_ack',
        67: 'GICB_response',
    }

    def __init__(self, arg : Variation_537_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_538_Arg : TypeAlias = Raw
class Variation_538(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 4
    table = {
        0: 'Accepted, the request is accepted and is under processing',
        1: 'Rejected, the request has not been accepted',
        2: 'Cancelled, the request has been cancelled',
        3: 'Finished, the request has been accepted and successfully processed',
        4: 'Delayed, the request processing is temporarily delayed but the request is still valid',
        5: 'In Progress, the request is being successfully processed',
        6: 'In Progress, the request is being successfully processed',
    }

    def __init__(self, arg : Variation_538_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_539_Arg : TypeAlias = Raw
class Variation_539(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4
    table = {
        0: 'No diagnostic available',
        1: 'Aircraft Exit',
        2: 'Incorrect aircraft address',
        3: 'Impossibility to process the message',
        4: 'Insufficient or change in data link capability',
        5: 'Invalid LV field',
        6: 'Duplicate request number',
        7: 'Unknown request number',
        8: 'Timer T3 expiry',
        9: 'Expiry of I/R delivery timer',
        10: 'Uplink flow disabled by UC',
    }

    def __init__(self, arg : Variation_539_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_540_Arg_Group = TypedDict('Variation_540_Arg_Group', {
    'CAUSE': Union[Variation_538, Variation_538_Arg],
    'DIAG': Union[Variation_539, Variation_539_Arg],
})
Variation_540_Arg : TypeAlias = Union[Raw, Variation_540_Arg_Group]
class Variation_540(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('CAUSE', Variation_538),
        ('DIAG', Variation_539),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CAUSE': ('Cause', Variation_538, 0, 4),
        'DIAG': ('Diagnostic', Variation_539, 4, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CAUSE']) -> Type[Variation_538]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DIAG']) -> Type[Variation_539]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CAUSE'], Literal['DIAG']]) -> Union[Type['Variation_538'], Type['Variation_539']]:
        if key == 'CAUSE':
            return Variation_538
        if key == 'DIAG':
            return Variation_539
        assert_never(key)

    def __init__(self, arg : Variation_540_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CAUSE']) -> Variation_538:
        ...

    @overload
    def get_item(self, name : Literal['DIAG']) -> Variation_539:
        ...

    def get_item(self, name : Union[Literal['CAUSE'], Literal['DIAG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CAUSE'], val : Union[Variation_538, Variation_538_Arg]) -> 'Variation_540':
        ...

    @overload
    def set_item(self, name : Literal['DIAG'], val : Union[Variation_539, Variation_539_Arg]) -> 'Variation_540':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_541_Arg : TypeAlias = Raw
class Variation_541(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32

    def __init__(self, arg : Variation_541_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_542_Arg : TypeAlias = List[Union[Variation_541, Variation_541_Arg]]
class Variation_542(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_541

    @classmethod
    def spec(cls) -> Type[Variation_541]:
        return Variation_541

    def __init__(self, arg : List[Union[Variation_541, Variation_541_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_543_Arg : TypeAlias = Raw
class Variation_543(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 5

    def __init__(self, arg : Variation_543_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_544_Arg : TypeAlias = Raw
class Variation_544(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 2
    table = {
        0: 'SVC packets',
        1: 'MSP packets',
        2: 'Route packets',
    }

    def __init__(self, arg : Variation_544_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_545_Arg_Group = TypedDict('Variation_545_Arg_Group', {
    'PR': Union[Variation_543, Variation_543_Arg],
    'PT': Union[Variation_544, Variation_544_Arg],
})
Variation_545_Arg : TypeAlias = Union[Raw, Variation_545_Arg_Group]
class Variation_545(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 1),
        ('PR', Variation_543),
        ('PT', Variation_544),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PR': ('Mode S Packet Internal Priority', Variation_543, 1, 5),
        'PT': ('Packet Type', Variation_544, 6, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PR']) -> Type[Variation_543]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PT']) -> Type[Variation_544]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PR'], Literal['PT']]) -> Union[Type['Variation_543'], Type['Variation_544']]:
        if key == 'PR':
            return Variation_543
        if key == 'PT':
            return Variation_544
        assert_never(key)

    def __init__(self, arg : Variation_545_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PR']) -> Variation_543:
        ...

    @overload
    def get_item(self, name : Literal['PT']) -> Variation_544:
        ...

    def get_item(self, name : Union[Literal['PR'], Literal['PT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PR'], val : Union[Variation_543, Variation_543_Arg]) -> 'Variation_545':
        ...

    @overload
    def set_item(self, name : Literal['PT'], val : Union[Variation_544, Variation_544_Arg]) -> 'Variation_545':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_546_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_546(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, 's')

    def __init__(self, arg : Variation_546_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_547_Arg : TypeAlias = Raw
class Variation_547(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5

    def __init__(self, arg : Variation_547_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_548_Arg : TypeAlias = Raw
class Variation_548(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'The periodicity may not be strictly respected',
        1: 'The periodicity shall be strictly respected',
    }

    def __init__(self, arg : Variation_548_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_549_Arg : TypeAlias = Raw
class Variation_549(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'GICB extractions should be sent only when required by the periodicity',
        1: 'If a GICB extraction is done due to external conditions, an update will also be sent, even if it does not match the expected periodicity',
    }

    def __init__(self, arg : Variation_549_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_550_Arg : TypeAlias = Raw
class Variation_550(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'The GICB extraction is attempted according to the periodicity',
        1: 'There will no GICB attempts',
    }

    def __init__(self, arg : Variation_550_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_551_Arg : TypeAlias = Raw
class Variation_551(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'The extracted GICB must be sent only on the Data Link line',
        1: 'The extracted GICB must be sent only on the Surveillance line',
        2: 'The extracted GICB must be sent both on the Data Link and on the Surveillance lines',
    }

    def __init__(self, arg : Variation_551_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_552_Arg_Group = TypedDict('Variation_552_Arg_Group', {
    'PRIORITY': Union[Variation_547, Variation_547_Arg],
    'PC': Union[Variation_548, Variation_548_Arg],
    'AU': Union[Variation_549, Variation_549_Arg],
    'NE': Union[Variation_550, Variation_550_Arg],
    'RD': Union[Variation_551, Variation_551_Arg],
})
Variation_552_Arg : TypeAlias = Union[Raw, Variation_552_Arg_Group]
class Variation_552(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('PRIORITY', Variation_547),
        Spare(5, 3),
        ('PC', Variation_548),
        ('AU', Variation_549),
        ('NE', Variation_550),
        ('RD', Variation_551),
        Spare(5, 3),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PRIORITY': ('GICB Priority', Variation_547, 0, 5),
        'PC': ('Periodicity Constraint', Variation_548, 8, 1),
        'AU': ('Asynchronous Update', Variation_549, 9, 1),
        'NE': ('Non Extraction', Variation_550, 10, 1),
        'RD': ('Reply Destination', Variation_551, 11, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PRIORITY']) -> Type[Variation_547]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PC']) -> Type[Variation_548]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AU']) -> Type[Variation_549]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NE']) -> Type[Variation_550]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RD']) -> Type[Variation_551]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PRIORITY'], Literal['PC'], Literal['AU'], Literal['NE'], Literal['RD']]) -> Union[Type['Variation_547'], Type['Variation_548'], Type['Variation_549'], Type['Variation_550'], Type['Variation_551']]:
        if key == 'PRIORITY':
            return Variation_547
        if key == 'PC':
            return Variation_548
        if key == 'AU':
            return Variation_549
        if key == 'NE':
            return Variation_550
        if key == 'RD':
            return Variation_551
        assert_never(key)

    def __init__(self, arg : Variation_552_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PRIORITY']) -> Variation_547:
        ...

    @overload
    def get_item(self, name : Literal['PC']) -> Variation_548:
        ...

    @overload
    def get_item(self, name : Literal['AU']) -> Variation_549:
        ...

    @overload
    def get_item(self, name : Literal['NE']) -> Variation_550:
        ...

    @overload
    def get_item(self, name : Literal['RD']) -> Variation_551:
        ...

    def get_item(self, name : Union[Literal['PRIORITY'], Literal['PC'], Literal['AU'], Literal['NE'], Literal['RD']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PRIORITY'], val : Union[Variation_547, Variation_547_Arg]) -> 'Variation_552':
        ...

    @overload
    def set_item(self, name : Literal['PC'], val : Union[Variation_548, Variation_548_Arg]) -> 'Variation_552':
        ...

    @overload
    def set_item(self, name : Literal['AU'], val : Union[Variation_549, Variation_549_Arg]) -> 'Variation_552':
        ...

    @overload
    def set_item(self, name : Literal['NE'], val : Union[Variation_550, Variation_550_Arg]) -> 'Variation_552':
        ...

    @overload
    def set_item(self, name : Literal['RD'], val : Union[Variation_551, Variation_551_Arg]) -> 'Variation_552':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_553_Arg : TypeAlias = List[Union[Variation_279, Variation_279_Arg]]
class Variation_553(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_279

    @classmethod
    def spec(cls) -> Type[Variation_279]:
        return Variation_279

    def __init__(self, arg : List[Union[Variation_279, Variation_279_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_554_Arg : TypeAlias = Raw
class Variation_554(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'UC shall be ignored',
        1: 'UC shall be taken into account',
    }

    def __init__(self, arg : Variation_554_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_555_Arg : TypeAlias = Raw
class Variation_555(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'DC shall be ignored',
        1: 'DC shall be taken into account',
    }

    def __init__(self, arg : Variation_555_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_556_Arg : TypeAlias = Raw
class Variation_556(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'the uplink flow shall be enabled',
        1: 'the uplink flow shall be stopped',
    }

    def __init__(self, arg : Variation_556_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_557_Arg : TypeAlias = Raw
class Variation_557(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'the downlink flow shall be enabled',
        1: 'the downlink flow shall be stopped',
    }

    def __init__(self, arg : Variation_557_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_558_Arg_Group = TypedDict('Variation_558_Arg_Group', {
    'UM': Union[Variation_554, Variation_554_Arg],
    'DM': Union[Variation_555, Variation_555_Arg],
    'UC': Union[Variation_556, Variation_556_Arg],
    'DC': Union[Variation_557, Variation_557_Arg],
})
Variation_558_Arg : TypeAlias = Union[Raw, Variation_558_Arg_Group]
class Variation_558(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('UM', Variation_554),
        ('DM', Variation_555),
        ('UC', Variation_556),
        ('DC', Variation_557),
        Spare(4, 4),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'UM': ('Uplink Mask', Variation_554, 0, 1),
        'DM': ('Downlink Mask', Variation_555, 1, 1),
        'UC': ('Uplink Command', Variation_556, 2, 1),
        'DC': ('Downlink Command', Variation_557, 3, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['UM']) -> Type[Variation_554]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DM']) -> Type[Variation_555]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UC']) -> Type[Variation_556]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DC']) -> Type[Variation_557]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['UM'], Literal['DM'], Literal['UC'], Literal['DC']]) -> Union[Type['Variation_554'], Type['Variation_555'], Type['Variation_556'], Type['Variation_557']]:
        if key == 'UM':
            return Variation_554
        if key == 'DM':
            return Variation_555
        if key == 'UC':
            return Variation_556
        if key == 'DC':
            return Variation_557
        assert_never(key)

    def __init__(self, arg : Variation_558_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['UM']) -> Variation_554:
        ...

    @overload
    def get_item(self, name : Literal['DM']) -> Variation_555:
        ...

    @overload
    def get_item(self, name : Literal['UC']) -> Variation_556:
        ...

    @overload
    def get_item(self, name : Literal['DC']) -> Variation_557:
        ...

    def get_item(self, name : Union[Literal['UM'], Literal['DM'], Literal['UC'], Literal['DC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['UM'], val : Union[Variation_554, Variation_554_Arg]) -> 'Variation_558':
        ...

    @overload
    def set_item(self, name : Literal['DM'], val : Union[Variation_555, Variation_555_Arg]) -> 'Variation_558':
        ...

    @overload
    def set_item(self, name : Literal['UC'], val : Union[Variation_556, Variation_556_Arg]) -> 'Variation_558':
        ...

    @overload
    def set_item(self, name : Literal['DC'], val : Union[Variation_557, Variation_557_Arg]) -> 'Variation_558':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_559_Arg : TypeAlias = Raw
class Variation_559(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'The interrogator is enabled to uplink frames',
        1: 'The interrogator is disabled to uplink frames',
    }

    def __init__(self, arg : Variation_559_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_560_Arg : TypeAlias = Raw
class Variation_560(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'The interrogator is enabled to extract frames',
        1: 'The interrogator is disabled to extract frames',
    }

    def __init__(self, arg : Variation_560_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_561_Arg : TypeAlias = Raw
class Variation_561(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'The interrogator is enabled to uplink frames',
        1: 'The interrogator is disabled to uplink frames',
    }

    def __init__(self, arg : Variation_561_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_562_Arg : TypeAlias = Raw
class Variation_562(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'The interrogator is enabled to extract frames',
        1: 'The interrogator is disabled to extract frames',
    }

    def __init__(self, arg : Variation_562_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_563_Arg : TypeAlias = Raw
class Variation_563(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'The aircraft is in the Datalink coverage map of the interrogator',
        1: 'The aircraft is not in the Datalink coverage map of the interrogator',
    }

    def __init__(self, arg : Variation_563_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_564_Arg : TypeAlias = Raw
class Variation_564(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'The interrogators current ability to uplink/downlink frames (UCS/DCS) and the content of the Aircraft_report could be changed using D_Data_link_command',
        1: 'The interrogators current ability to uplink/downlink frames (UCS/DCS) and the content of the Aircraft_report cannot be changed using D_Data_link_command',
    }

    def __init__(self, arg : Variation_564_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_565_Arg_Group_1 = TypedDict('Variation_565_Arg_Group_1', {
    'UDS': Union[Variation_559, Variation_559_Arg],
    'DDS': Union[Variation_560, Variation_560_Arg],
    'UCS': Union[Variation_561, Variation_561_Arg],
    'DCS': Union[Variation_562, Variation_562_Arg],
    'EI': Union[Variation_563, Variation_563_Arg],
})
Variation_565_Arg_Group_2 = TypedDict('Variation_565_Arg_Group_2', {
    'UDS': Union[Variation_559, Variation_559_Arg],
    'DDS': Union[Variation_560, Variation_560_Arg],
    'UCS': Union[Variation_561, Variation_561_Arg],
    'DCS': Union[Variation_562, Variation_562_Arg],
    'EI': Union[Variation_563, Variation_563_Arg],
    'IC': Union[Variation_564, Variation_564_Arg],
})
Variation_565_Arg : TypeAlias = Union[
    int,
    Variation_565_Arg_Group_1,
    Tuple[int],
    Variation_565_Arg_Group_2,
    Tuple[int,int],
]
class Variation_565(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('UDS', Variation_559),
            ('DDS', Variation_560),
            ('UCS', Variation_561),
            ('DCS', Variation_562),
            Spare(4, 2),
            ('EI', Variation_563),
        ],
        [
            ('IC', Variation_564),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'UDS': ('Uplink Default Status', Variation_559, 0, 1),
        'DDS': ('Downlink Default Status', Variation_560, 1, 1),
        'UCS': ('Uplink Current Status', Variation_561, 2, 1),
        'DCS': ('Downlink Current Status', Variation_562, 3, 1),
        'EI': ('Exit Indication', Variation_563, 6, 1),
        'IC': ('Interrogator Control', Variation_564, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['UDS']) -> Type[Variation_559]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DDS']) -> Type[Variation_560]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UCS']) -> Type[Variation_561]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DCS']) -> Type[Variation_562]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EI']) -> Type[Variation_563]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IC']) -> Type[Variation_564]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['UDS'], Literal['DDS'], Literal['UCS'], Literal['DCS'], Literal['EI'], Literal['IC']]) -> Union[Type['Variation_559'], Type['Variation_560'], Type['Variation_561'], Type['Variation_562'], Type['Variation_563'], Type['Variation_564']]:
        if key == 'UDS':
            return Variation_559
        if key == 'DDS':
            return Variation_560
        if key == 'UCS':
            return Variation_561
        if key == 'DCS':
            return Variation_562
        if key == 'EI':
            return Variation_563
        if key == 'IC':
            return Variation_564
        assert_never(key)

    def __init__(self, arg : Variation_565_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_565_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_565_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['UDS']) -> Variation_559:
        ...

    @overload
    def get_item(self, name : Literal['DDS']) -> Variation_560:
        ...

    @overload
    def get_item(self, name : Literal['UCS']) -> Variation_561:
        ...

    @overload
    def get_item(self, name : Literal['DCS']) -> Variation_562:
        ...

    @overload
    def get_item(self, name : Literal['EI']) -> Variation_563:
        ...

    @overload
    def get_item(self, name : Literal['IC']) -> Variation_564:
        ...

    def get_item(self, name : Union[Literal['UDS'], Literal['DDS'], Literal['UCS'], Literal['DCS'], Literal['EI'], Literal['IC']]) -> Any:
        return self._get_item(name)

Variation_566_Arg : TypeAlias = Raw
class Variation_566(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_Data_link_status',
        1: 'The next Aircraft_report shall include D_Data_link_status',
    }

    def __init__(self, arg : Variation_566_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_567_Arg : TypeAlias = Raw
class Variation_567(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_COM',
        1: 'The next Aircraft_report shall include D_COM',
    }

    def __init__(self, arg : Variation_567_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_568_Arg : TypeAlias = Raw
class Variation_568(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_ECA',
        1: 'The next Aircraft_report shall include D_ECA',
    }

    def __init__(self, arg : Variation_568_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_569_Arg : TypeAlias = Raw
class Variation_569(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_CQF',
        1: 'The next Aircraft_report shall include D_CQF',
    }

    def __init__(self, arg : Variation_569_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_570_Arg : TypeAlias = Raw
class Variation_570(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_CQF_method',
        1: 'The next Aircraft_report shall include D_CQF_method',
    }

    def __init__(self, arg : Variation_570_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_571_Arg : TypeAlias = Raw
class Variation_571(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_Polar_position',
        1: 'The next Aircraft_report shall include D_Polar_position',
    }

    def __init__(self, arg : Variation_571_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_572_Arg : TypeAlias = Raw
class Variation_572(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include D_Cartesian_position',
        1: 'The next Aircraft_report shall include D_Cartesian_position',
    }

    def __init__(self, arg : Variation_572_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_573_Arg : TypeAlias = Raw
class Variation_573(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include Aircraft_ID',
        1: 'The next Aircraft_report shall include Aircraft_ID',
    }

    def __init__(self, arg : Variation_573_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_574_Arg : TypeAlias = Raw
class Variation_574(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include Mode_A',
        1: 'The next Aircraft_report shall include Mode_A',
    }

    def __init__(self, arg : Variation_574_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_575_Arg : TypeAlias = Raw
class Variation_575(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include Speed',
        1: 'The next Aircraft_report shall include Speed',
    }

    def __init__(self, arg : Variation_575_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_576_Arg : TypeAlias = Raw
class Variation_576(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include Height',
        1: 'The next Aircraft_report shall include Height',
    }

    def __init__(self, arg : Variation_576_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_577_Arg : TypeAlias = Raw
class Variation_577(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'The next Aircraft_report may not include Heading',
        1: 'The next Aircraft_report shall include Heading',
    }

    def __init__(self, arg : Variation_577_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_578_Arg_Group_1 = TypedDict('Variation_578_Arg_Group_1', {
    'SR': Union[Variation_566, Variation_566_Arg],
    'AR': Union[Variation_567, Variation_567_Arg],
    'ER': Union[Variation_568, Variation_568_Arg],
    'FR': Union[Variation_569, Variation_569_Arg],
    'MR': Union[Variation_570, Variation_570_Arg],
    'PR': Union[Variation_571, Variation_571_Arg],
    'CR': Union[Variation_572, Variation_572_Arg],
})
Variation_578_Arg_Group_2 = TypedDict('Variation_578_Arg_Group_2', {
    'SR': Union[Variation_566, Variation_566_Arg],
    'AR': Union[Variation_567, Variation_567_Arg],
    'ER': Union[Variation_568, Variation_568_Arg],
    'FR': Union[Variation_569, Variation_569_Arg],
    'MR': Union[Variation_570, Variation_570_Arg],
    'PR': Union[Variation_571, Variation_571_Arg],
    'CR': Union[Variation_572, Variation_572_Arg],
    'ID': Union[Variation_573, Variation_573_Arg],
    'MA': Union[Variation_574, Variation_574_Arg],
    'SP': Union[Variation_575, Variation_575_Arg],
    'HG': Union[Variation_576, Variation_576_Arg],
    'HD': Union[Variation_577, Variation_577_Arg],
})
Variation_578_Arg : TypeAlias = Union[
    int,
    Variation_578_Arg_Group_1,
    Tuple[int],
    Variation_578_Arg_Group_2,
    Tuple[int,int],
]
class Variation_578(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('SR', Variation_566),
            ('AR', Variation_567),
            ('ER', Variation_568),
            ('FR', Variation_569),
            ('MR', Variation_570),
            ('PR', Variation_571),
            ('CR', Variation_572),
        ],
        [
            ('ID', Variation_573),
            ('MA', Variation_574),
            ('SP', Variation_575),
            ('HG', Variation_576),
            ('HD', Variation_577),
            Spare(5, 2),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SR': ('', Variation_566, 0, 1),
        'AR': ('', Variation_567, 1, 1),
        'ER': ('', Variation_568, 2, 1),
        'FR': ('', Variation_569, 3, 1),
        'MR': ('', Variation_570, 4, 1),
        'PR': ('', Variation_571, 5, 1),
        'CR': ('', Variation_572, 6, 1),
        'ID': ('', Variation_573, 0, 1),
        'MA': ('', Variation_574, 1, 1),
        'SP': ('', Variation_575, 2, 1),
        'HG': ('', Variation_576, 3, 1),
        'HD': ('', Variation_577, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SR']) -> Type[Variation_566]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AR']) -> Type[Variation_567]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ER']) -> Type[Variation_568]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR']) -> Type[Variation_569]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MR']) -> Type[Variation_570]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PR']) -> Type[Variation_571]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CR']) -> Type[Variation_572]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_573]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MA']) -> Type[Variation_574]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_575]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HG']) -> Type[Variation_576]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HD']) -> Type[Variation_577]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SR'], Literal['AR'], Literal['ER'], Literal['FR'], Literal['MR'], Literal['PR'], Literal['CR'], Literal['ID'], Literal['MA'], Literal['SP'], Literal['HG'], Literal['HD']]) -> Union[Type['Variation_566'], Type['Variation_567'], Type['Variation_568'], Type['Variation_569'], Type['Variation_570'], Type['Variation_571'], Type['Variation_572'], Type['Variation_573'], Type['Variation_574'], Type['Variation_575'], Type['Variation_576'], Type['Variation_577']]:
        if key == 'SR':
            return Variation_566
        if key == 'AR':
            return Variation_567
        if key == 'ER':
            return Variation_568
        if key == 'FR':
            return Variation_569
        if key == 'MR':
            return Variation_570
        if key == 'PR':
            return Variation_571
        if key == 'CR':
            return Variation_572
        if key == 'ID':
            return Variation_573
        if key == 'MA':
            return Variation_574
        if key == 'SP':
            return Variation_575
        if key == 'HG':
            return Variation_576
        if key == 'HD':
            return Variation_577
        assert_never(key)

    def __init__(self, arg : Variation_578_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_578_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_578_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SR']) -> Variation_566:
        ...

    @overload
    def get_item(self, name : Literal['AR']) -> Variation_567:
        ...

    @overload
    def get_item(self, name : Literal['ER']) -> Variation_568:
        ...

    @overload
    def get_item(self, name : Literal['FR']) -> Variation_569:
        ...

    @overload
    def get_item(self, name : Literal['MR']) -> Variation_570:
        ...

    @overload
    def get_item(self, name : Literal['PR']) -> Variation_571:
        ...

    @overload
    def get_item(self, name : Literal['CR']) -> Variation_572:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_573:
        ...

    @overload
    def get_item(self, name : Literal['MA']) -> Variation_574:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_575:
        ...

    @overload
    def get_item(self, name : Literal['HG']) -> Variation_576:
        ...

    @overload
    def get_item(self, name : Literal['HD']) -> Variation_577:
        ...

    def get_item(self, name : Union[Literal['SR'], Literal['AR'], Literal['ER'], Literal['FR'], Literal['MR'], Literal['PR'], Literal['CR'], Literal['ID'], Literal['MA'], Literal['SP'], Literal['HG'], Literal['HD']]) -> Any:
        return self._get_item(name)

Variation_579_Arg : TypeAlias = Raw
class Variation_579(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 3
    table = {
        0: 'No communications capability (surveillance only)',
        1: 'Comm. A and Comm. B capability',
        2: 'Comm. A, Comm. B and Uplink ELM',
        3: 'Comm. A, Comm. B and Uplink ELM and Downlink ELM',
        4: 'Level 5 Transponder capability',
    }

    def __init__(self, arg : Variation_579_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_580_Arg_Group = TypedDict('Variation_580_Arg_Group', {
    'COM': Union[Variation_579, Variation_579_Arg],
})
Variation_580_Arg : TypeAlias = Union[Raw, Variation_580_Arg_Group]
class Variation_580(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 5),
        ('COM', Variation_579),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_579, 5, 3),
    }

    @classmethod
    def spec(cls, key : Union[Literal['COM']]) -> Union[Type['Variation_579']]:
        if key == 'COM':
            return Variation_579
        assert_never(key)

    def __init__(self, arg : Variation_580_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['COM']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['COM'], val : Union[Variation_579, Variation_579_Arg]) -> 'Variation_580':
        return self._set_item(name, val) # type: ignore

Variation_581_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_581(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 8, 'NM')

    def __init__(self, arg : Variation_581_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_582_Arg_Group = TypedDict('Variation_582_Arg_Group', {
    'RHO': Union[Variation_581, Variation_581_Arg],
    'THETA': Union[Variation_14, Variation_14_Arg],
})
Variation_582_Arg : TypeAlias = Union[Raw, Variation_582_Arg_Group]
class Variation_582(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('RHO', Variation_581),
        ('THETA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RHO': ('', Variation_581, 0, 16),
        'THETA': ('', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RHO']) -> Type[Variation_581]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['THETA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RHO'], Literal['THETA']]) -> Union[Type['Variation_581'], Type['Variation_14']]:
        if key == 'RHO':
            return Variation_581
        if key == 'THETA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_582_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RHO']) -> Variation_581:
        ...

    @overload
    def get_item(self, name : Literal['THETA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RHO'], Literal['THETA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RHO'], val : Union[Variation_581, Variation_581_Arg]) -> 'Variation_582':
        ...

    @overload
    def set_item(self, name : Literal['THETA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_582':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_583_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_583(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 7, 'NM')

    def __init__(self, arg : Variation_583_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_584_Arg_Group = TypedDict('Variation_584_Arg_Group', {
    'X': Union[Variation_583, Variation_583_Arg],
    'Y': Union[Variation_583, Variation_583_Arg],
})
Variation_584_Arg : TypeAlias = Union[Raw, Variation_584_Arg_Group]
class Variation_584(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_583),
        ('Y', Variation_583),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-Component', Variation_583, 0, 16),
        'Y': ('Y-Component', Variation_583, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_583]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_583]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_583'], Type['Variation_583']]:
        if key == 'X':
            return Variation_583
        if key == 'Y':
            return Variation_583
        assert_never(key)

    def __init__(self, arg : Variation_584_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_583:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_583:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_584':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_584':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_585_Arg_Group = TypedDict('Variation_585_Arg_Group', {
    'PRIORITY': Union[Variation_192, Variation_192_Arg],
    'POWER': Union[Variation_283, Variation_283_Arg],
    'DURATION': Union[Variation_527, Variation_527_Arg],
    'COVERAGE': Union[Variation_541, Variation_541_Arg],
})
Variation_585_Arg : TypeAlias = Union[Raw, Variation_585_Arg_Group]
class Variation_585(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('PRIORITY', Variation_192),
        ('POWER', Variation_283),
        ('DURATION', Variation_527),
        ('COVERAGE', Variation_541),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PRIORITY': ('Priority', Variation_192, 0, 4),
        'POWER': ('Power', Variation_283, 4, 4),
        'DURATION': ('Duration', Variation_527, 8, 8),
        'COVERAGE': ('Coverage', Variation_541, 16, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PRIORITY']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POWER']) -> Type[Variation_283]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DURATION']) -> Type[Variation_527]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COVERAGE']) -> Type[Variation_541]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PRIORITY'], Literal['POWER'], Literal['DURATION'], Literal['COVERAGE']]) -> Union[Type['Variation_192'], Type['Variation_283'], Type['Variation_527'], Type['Variation_541']]:
        if key == 'PRIORITY':
            return Variation_192
        if key == 'POWER':
            return Variation_283
        if key == 'DURATION':
            return Variation_527
        if key == 'COVERAGE':
            return Variation_541
        assert_never(key)

    def __init__(self, arg : Variation_585_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PRIORITY']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['POWER']) -> Variation_283:
        ...

    @overload
    def get_item(self, name : Literal['DURATION']) -> Variation_527:
        ...

    @overload
    def get_item(self, name : Literal['COVERAGE']) -> Variation_541:
        ...

    def get_item(self, name : Union[Literal['PRIORITY'], Literal['POWER'], Literal['DURATION'], Literal['COVERAGE']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PRIORITY'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_585':
        ...

    @overload
    def set_item(self, name : Literal['POWER'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_585':
        ...

    @overload
    def set_item(self, name : Literal['DURATION'], val : Union[Variation_527, Variation_527_Arg]) -> 'Variation_585':
        ...

    @overload
    def set_item(self, name : Literal['COVERAGE'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_585':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_586_Arg_Group = TypedDict('Variation_586_Arg_Group', {
    'PREFIX': Union[Variation_368, Variation_368_Arg],
})
Variation_586_Arg : TypeAlias = Union[Raw, Variation_586_Arg_Group]
class Variation_586(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        Spare(0, 5),
        ('PREFIX', Variation_368),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PREFIX': ('Prefix Field', Variation_368, 5, 27),
    }

    @classmethod
    def spec(cls, key : Union[Literal['PREFIX']]) -> Union[Type['Variation_368']]:
        if key == 'PREFIX':
            return Variation_368
        assert_never(key)

    def __init__(self, arg : Variation_586_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['PREFIX']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['PREFIX'], val : Union[Variation_368, Variation_368_Arg]) -> 'Variation_586':
        return self._set_item(name, val) # type: ignore

Variation_587_Arg_Group = TypedDict('Variation_587_Arg_Group', {
    'PREVIOUSII': Union[Variation_192, Variation_192_Arg],
    'CURRENTII': Union[Variation_283, Variation_283_Arg],
})
Variation_587_Arg : TypeAlias = Union[Raw, Variation_587_Arg_Group]
class Variation_587(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('PREVIOUSII', Variation_192),
        ('CURRENTII', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PREVIOUSII': ('Former II Code', Variation_192, 0, 4),
        'CURRENTII': ('Current II Code', Variation_283, 4, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PREVIOUSII']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CURRENTII']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PREVIOUSII'], Literal['CURRENTII']]) -> Union[Type['Variation_192'], Type['Variation_283']]:
        if key == 'PREVIOUSII':
            return Variation_192
        if key == 'CURRENTII':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_587_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PREVIOUSII']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['CURRENTII']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['PREVIOUSII'], Literal['CURRENTII']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PREVIOUSII'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_587':
        ...

    @overload
    def set_item(self, name : Literal['CURRENTII'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_587':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_588_Arg : TypeAlias = Raw
class Variation_588(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 48

    def __init__(self, arg : Variation_588_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_589_Arg_Group = TypedDict('Variation_589_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_277, Variation_277_Arg],
    'MOD3A': Union[Variation_19, Variation_19_Arg],
})
Variation_589_Arg : TypeAlias = Union[Raw, Variation_589_Arg_Group]
class Variation_589(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_277),
        Spare(3, 1),
        ('MOD3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_277, 2, 1),
        'MOD3A': ('', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_277]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MOD3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MOD3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_277'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_277
        if key == 'MOD3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_589_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_277:
        ...

    @overload
    def get_item(self, name : Literal['MOD3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MOD3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_589':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_589':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_277, Variation_277_Arg]) -> 'Variation_589':
        ...

    @overload
    def set_item(self, name : Literal['MOD3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_589':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_590_Arg_Group = TypedDict('Variation_590_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'FL': Union[Variation_21, Variation_21_Arg],
})
Variation_590_Arg : TypeAlias = Union[Raw, Variation_590_Arg_Group]
class Variation_590(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('FL', Variation_21),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'FL': ('Flight Level', Variation_21, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FL']) -> Type[Variation_21]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_21']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'FL':
            return Variation_21
        assert_never(key)

    def __init__(self, arg : Variation_590_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['FL']) -> Variation_21:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_590':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_590':
        ...

    @overload
    def set_item(self, name : Literal['FL'], val : Union[Variation_21, Variation_21_Arg]) -> 'Variation_590':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_591_Arg : TypeAlias = Raw
class Variation_591(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Aircraft is airborne',
        1: 'Aircraft is on the ground',
    }

    def __init__(self, arg : Variation_591_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_592_Arg : TypeAlias = Raw
class Variation_592(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 7
    table = {
        0: 'The CQF calculation method is not supported',
        1: 'The CQF is minimum',
        126: 'The CQF is maximum',
        127: 'The CQF is undefined according to the calculation method',
    }

    def __init__(self, arg : Variation_592_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_593_Arg_Group = TypedDict('Variation_593_Arg_Group', {
    'FS': Union[Variation_591, Variation_591_Arg],
    'CQF': Union[Variation_592, Variation_592_Arg],
})
Variation_593_Arg : TypeAlias = Union[Raw, Variation_593_Arg_Group]
class Variation_593(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('FS', Variation_591),
        ('CQF', Variation_592),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FS': ('Flight Status', Variation_591, 0, 1),
        'CQF': ('Aircraft CQF', Variation_592, 1, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FS']) -> Type[Variation_591]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CQF']) -> Type[Variation_592]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FS'], Literal['CQF']]) -> Union[Type['Variation_591'], Type['Variation_592']]:
        if key == 'FS':
            return Variation_591
        if key == 'CQF':
            return Variation_592
        assert_never(key)

    def __init__(self, arg : Variation_593_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['FS']) -> Variation_591:
        ...

    @overload
    def get_item(self, name : Literal['CQF']) -> Variation_592:
        ...

    def get_item(self, name : Union[Literal['FS'], Literal['CQF']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['FS'], val : Union[Variation_591, Variation_591_Arg]) -> 'Variation_593':
        ...

    @overload
    def set_item(self, name : Literal['CQF'], val : Union[Variation_592, Variation_592_Arg]) -> 'Variation_593':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_594_Arg = TypedDict('Variation_594_Arg', {
    '036': Union[Variation_1, Variation_1_Arg],
    '037': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_537, Variation_537_Arg],
    '001': Union[Variation_540, Variation_540_Arg],
    '005': Union[Variation_279, Variation_279_Arg],
    '016': Union[Variation_541, Variation_541_Arg],
    '017': Union[Variation_542, Variation_542_Arg],
    '018': Union[Variation_545, Variation_545_Arg],
    '019': Union[Variation_62, Variation_62_Arg],
    '028': Union[Variation_546, Variation_546_Arg],
    '030': Union[Variation_552, Variation_552_Arg],
    '025': Union[Variation_541, Variation_541_Arg],
    '027': Union[Variation_0, Variation_0_Arg],
    '029': Union[Variation_282, Variation_282_Arg],
    '002': Union[Variation_81, Variation_81_Arg],
    '006': Union[Variation_553, Variation_553_Arg],
    '007': Union[Variation_558, Variation_558_Arg],
    '008': Union[Variation_565, Variation_565_Arg],
    '009': Union[Variation_578, Variation_578_Arg],
    '010': Union[Variation_580, Variation_580_Arg],
    '011': Union[Variation_282, Variation_282_Arg],
    '014': Union[Variation_582, Variation_582_Arg],
    '015': Union[Variation_584, Variation_584_Arg],
    '020': Union[Variation_541, Variation_541_Arg],
    '021': Union[Variation_585, Variation_585_Arg],
    '022': Union[Variation_586, Variation_586_Arg],
    '023': Union[Variation_282, Variation_282_Arg],
    '004': Union[Variation_587, Variation_587_Arg],
    '031': Union[Variation_588, Variation_588_Arg],
    '032': Union[Variation_589, Variation_589_Arg],
    '033': Union[Variation_590, Variation_590_Arg],
    '034': Union[Variation_67, Variation_67_Arg],
    '035': Union[Variation_14, Variation_14_Arg],
    '012': Union[Variation_593, Variation_593_Arg],
    '013': Union[Variation_0, Variation_0_Arg],
}, total=False)
class Variation_594(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('036', Variation_1),
        ('037', Variation_1),
        ('000', Variation_537),
        ('001', Variation_540),
        ('005', Variation_279),
        ('016', Variation_541),
        ('017', Variation_542),
        ('018', Variation_545),
        ('019', Variation_62),
        ('028', Variation_546),
        ('030', Variation_552),
        ('025', Variation_541),
        ('027', Variation_0),
        ('029', Variation_282),
        ('002', Variation_81),
        ('006', Variation_553),
        ('007', Variation_558),
        ('008', Variation_565),
        ('009', Variation_578),
        ('010', Variation_580),
        ('011', Variation_282),
        ('014', Variation_582),
        ('015', Variation_584),
        ('020', Variation_541),
        ('021', Variation_585),
        ('022', Variation_586),
        ('023', Variation_282),
        ('004', Variation_587),
        ('031', Variation_588),
        ('032', Variation_589),
        ('033', Variation_590),
        ('034', Variation_67),
        ('035', Variation_14),
        ('012', Variation_593),
        ('013', Variation_0),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '036': (Variation_1, 0x8000000000),
        '037': (Variation_1, 0x4000000000),
        '000': (Variation_537, 0x2000000000),
        '001': (Variation_540, 0x1000000000),
        '005': (Variation_279, 0x0800000000),
        '016': (Variation_541, 0x0400000000),
        '017': (Variation_542, 0x0200000000),
        '018': (Variation_545, 0x0180000000),
        '019': (Variation_62, 0x0140000000),
        '028': (Variation_546, 0x0120000000),
        '030': (Variation_552, 0x0110000000),
        '025': (Variation_541, 0x0108000000),
        '027': (Variation_0, 0x0104000000),
        '029': (Variation_282, 0x0102000000),
        '002': (Variation_81, 0x0101800000),
        '006': (Variation_553, 0x0101400000),
        '007': (Variation_558, 0x0101200000),
        '008': (Variation_565, 0x0101100000),
        '009': (Variation_578, 0x0101080000),
        '010': (Variation_580, 0x0101040000),
        '011': (Variation_282, 0x0101020000),
        '014': (Variation_582, 0x0101018000),
        '015': (Variation_584, 0x0101014000),
        '020': (Variation_541, 0x0101012000),
        '021': (Variation_585, 0x0101011000),
        '022': (Variation_586, 0x0101010800),
        '023': (Variation_282, 0x0101010400),
        '004': (Variation_587, 0x0101010200),
        '031': (Variation_588, 0x0101010180),
        '032': (Variation_589, 0x0101010140),
        '033': (Variation_590, 0x0101010120),
        '034': (Variation_67, 0x0101010110),
        '035': (Variation_14, 0x0101010108),
        '012': (Variation_593, 0x0101010104),
        '013': (Variation_0, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['036']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['037']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_537]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['001']) -> Type[Variation_540]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['005']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['017']) -> Type[Variation_542]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['018']) -> Type[Variation_545]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['019']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['028']) -> Type[Variation_546]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_552]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['025']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['027']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['029']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['002']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['006']) -> Type[Variation_553]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['007']) -> Type[Variation_558]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_565]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['009']) -> Type[Variation_578]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_580]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['011']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['014']) -> Type[Variation_582]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_584]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['021']) -> Type[Variation_585]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['022']) -> Type[Variation_586]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['023']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['004']) -> Type[Variation_587]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['031']) -> Type[Variation_588]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['032']) -> Type[Variation_589]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['033']) -> Type[Variation_590]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['034']) -> Type[Variation_67]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['035']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['012']) -> Type[Variation_593]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['013']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['036'], Literal['037'], Literal['000'], Literal['001'], Literal['005'], Literal['016'], Literal['017'], Literal['018'], Literal['019'], Literal['028'], Literal['030'], Literal['025'], Literal['027'], Literal['029'], Literal['002'], Literal['006'], Literal['007'], Literal['008'], Literal['009'], Literal['010'], Literal['011'], Literal['014'], Literal['015'], Literal['020'], Literal['021'], Literal['022'], Literal['023'], Literal['004'], Literal['031'], Literal['032'], Literal['033'], Literal['034'], Literal['035'], Literal['012'], Literal['013']]) -> Union[Type['Variation_1'], Type['Variation_1'], Type['Variation_537'], Type['Variation_540'], Type['Variation_279'], Type['Variation_541'], Type['Variation_542'], Type['Variation_545'], Type['Variation_62'], Type['Variation_546'], Type['Variation_552'], Type['Variation_541'], Type['Variation_0'], Type['Variation_282'], Type['Variation_81'], Type['Variation_553'], Type['Variation_558'], Type['Variation_565'], Type['Variation_578'], Type['Variation_580'], Type['Variation_282'], Type['Variation_582'], Type['Variation_584'], Type['Variation_541'], Type['Variation_585'], Type['Variation_586'], Type['Variation_282'], Type['Variation_587'], Type['Variation_588'], Type['Variation_589'], Type['Variation_590'], Type['Variation_67'], Type['Variation_14'], Type['Variation_593'], Type['Variation_0']]:
        if key == '036':
            return Variation_1
        if key == '037':
            return Variation_1
        if key == '000':
            return Variation_537
        if key == '001':
            return Variation_540
        if key == '005':
            return Variation_279
        if key == '016':
            return Variation_541
        if key == '017':
            return Variation_542
        if key == '018':
            return Variation_545
        if key == '019':
            return Variation_62
        if key == '028':
            return Variation_546
        if key == '030':
            return Variation_552
        if key == '025':
            return Variation_541
        if key == '027':
            return Variation_0
        if key == '029':
            return Variation_282
        if key == '002':
            return Variation_81
        if key == '006':
            return Variation_553
        if key == '007':
            return Variation_558
        if key == '008':
            return Variation_565
        if key == '009':
            return Variation_578
        if key == '010':
            return Variation_580
        if key == '011':
            return Variation_282
        if key == '014':
            return Variation_582
        if key == '015':
            return Variation_584
        if key == '020':
            return Variation_541
        if key == '021':
            return Variation_585
        if key == '022':
            return Variation_586
        if key == '023':
            return Variation_282
        if key == '004':
            return Variation_587
        if key == '031':
            return Variation_588
        if key == '032':
            return Variation_589
        if key == '033':
            return Variation_590
        if key == '034':
            return Variation_67
        if key == '035':
            return Variation_14
        if key == '012':
            return Variation_593
        if key == '013':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Optional[Variation_594_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['036'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['037'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_537, Variation_537_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['001'], val : Union[Variation_540, Variation_540_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['005'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['017'], val : Union[Variation_542, Variation_542_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['018'], val : Union[Variation_545, Variation_545_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['019'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['028'], val : Union[Variation_546, Variation_546_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_552, Variation_552_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['025'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['027'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['029'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['002'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['006'], val : Union[Variation_553, Variation_553_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['007'], val : Union[Variation_558, Variation_558_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_565, Variation_565_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['009'], val : Union[Variation_578, Variation_578_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_580, Variation_580_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['011'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['014'], val : Union[Variation_582, Variation_582_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_584, Variation_584_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['021'], val : Union[Variation_585, Variation_585_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['022'], val : Union[Variation_586, Variation_586_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['023'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['004'], val : Union[Variation_587, Variation_587_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['031'], val : Union[Variation_588, Variation_588_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['032'], val : Union[Variation_589, Variation_589_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['033'], val : Union[Variation_590, Variation_590_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['034'], val : Union[Variation_67, Variation_67_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['035'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['012'], val : Union[Variation_593, Variation_593_Arg]) -> 'Variation_594':
        ...

    @overload
    def set_item(self, name : Literal['013'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_594':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['036']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['037']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['001']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['005']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['017']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['018']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['019']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['028']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['025']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['027']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['029']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['002']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['006']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['007']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['009']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['011']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['014']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['021']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['022']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['023']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['004']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['031']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['032']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['033']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['034']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['035']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['012']) -> 'Variation_594':
        ...

    @overload
    def del_item(self, name : Literal['013']) -> 'Variation_594':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['036']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['037']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_537:
        ...

    @overload
    def get_item(self, name : Literal['001']) -> Variation_540:
        ...

    @overload
    def get_item(self, name : Literal['005']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['017']) -> Variation_542:
        ...

    @overload
    def get_item(self, name : Literal['018']) -> Variation_545:
        ...

    @overload
    def get_item(self, name : Literal['019']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['028']) -> Variation_546:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_552:
        ...

    @overload
    def get_item(self, name : Literal['025']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['027']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['029']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['002']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['006']) -> Variation_553:
        ...

    @overload
    def get_item(self, name : Literal['007']) -> Variation_558:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_565:
        ...

    @overload
    def get_item(self, name : Literal['009']) -> Variation_578:
        ...

    @overload
    def get_item(self, name : Literal['010']) -> Variation_580:
        ...

    @overload
    def get_item(self, name : Literal['011']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['014']) -> Variation_582:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_584:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['021']) -> Variation_585:
        ...

    @overload
    def get_item(self, name : Literal['022']) -> Variation_586:
        ...

    @overload
    def get_item(self, name : Literal['023']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['004']) -> Variation_587:
        ...

    @overload
    def get_item(self, name : Literal['031']) -> Variation_588:
        ...

    @overload
    def get_item(self, name : Literal['032']) -> Variation_589:
        ...

    @overload
    def get_item(self, name : Literal['033']) -> Variation_590:
        ...

    @overload
    def get_item(self, name : Literal['034']) -> Variation_67:
        ...

    @overload
    def get_item(self, name : Literal['035']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['012']) -> Variation_593:
        ...

    @overload
    def get_item(self, name : Literal['013']) -> Variation_0:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_595_Arg : TypeAlias = Raw
class Variation_595(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Start of Update Cycle',
        2: 'Periodic Status Message',
        3: 'Event-triggered Status Message',
    }

    def __init__(self, arg : Variation_595_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_596_Arg : TypeAlias = Raw
class Variation_596(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Operational',
        1: 'Degraded',
        2: 'NOGO',
        3: 'Undefined',
    }

    def __init__(self, arg : Variation_596_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_597_Arg : TypeAlias = Raw
class Variation_597(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Test Target Operative',
        1: 'Test Target Failure',
    }

    def __init__(self, arg : Variation_597_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_598_Arg_Group = TypedDict('Variation_598_Arg_Group', {
    'NOGO': Union[Variation_596, Variation_596_Arg],
    'OVL': Union[Variation_293, Variation_293_Arg],
    'TSV': Union[Variation_294, Variation_294_Arg],
    'TTF': Union[Variation_597, Variation_597_Arg],
})
Variation_598_Arg : TypeAlias = Union[Raw, Variation_598_Arg_Group]
class Variation_598(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('NOGO', Variation_596),
        ('OVL', Variation_293),
        ('TSV', Variation_294),
        ('TTF', Variation_597),
        Spare(5, 3),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('Operational Release Status of the System', Variation_596, 0, 2),
        'OVL': ('Overload Indicator', Variation_293, 2, 1),
        'TSV': ('Time Source Validity', Variation_294, 3, 1),
        'TTF': ('Test Target', Variation_597, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_596]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVL']) -> Type[Variation_293]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_294]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTF']) -> Type[Variation_597]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['TTF']]) -> Union[Type['Variation_596'], Type['Variation_293'], Type['Variation_294'], Type['Variation_597']]:
        if key == 'NOGO':
            return Variation_596
        if key == 'OVL':
            return Variation_293
        if key == 'TSV':
            return Variation_294
        if key == 'TTF':
            return Variation_597
        assert_never(key)

    def __init__(self, arg : Variation_598_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_596:
        ...

    @overload
    def get_item(self, name : Literal['OVL']) -> Variation_293:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_294:
        ...

    @overload
    def get_item(self, name : Literal['TTF']) -> Variation_597:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['TTF']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NOGO'], val : Union[Variation_596, Variation_596_Arg]) -> 'Variation_598':
        ...

    @overload
    def set_item(self, name : Literal['OVL'], val : Union[Variation_293, Variation_293_Arg]) -> 'Variation_598':
        ...

    @overload
    def set_item(self, name : Literal['TSV'], val : Union[Variation_294, Variation_294_Arg]) -> 'Variation_598':
        ...

    @overload
    def set_item(self, name : Literal['TTF'], val : Union[Variation_597, Variation_597_Arg]) -> 'Variation_598':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_599_Arg : TypeAlias = Raw
class Variation_599(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Standby',
        1: 'Exec',
    }

    def __init__(self, arg : Variation_599_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_600_Arg : TypeAlias = Raw
class Variation_600(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Faulted',
        1: 'Good',
    }

    def __init__(self, arg : Variation_600_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_601_Arg : TypeAlias = Raw
class Variation_601(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Standby',
        1: 'Exec',
    }

    def __init__(self, arg : Variation_601_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_602_Arg : TypeAlias = Raw
class Variation_602(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Faulted',
        1: 'Good',
    }

    def __init__(self, arg : Variation_602_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_603_Arg : TypeAlias = Raw
class Variation_603(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Standby',
        1: 'Exec',
    }

    def __init__(self, arg : Variation_603_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_604_Arg : TypeAlias = Raw
class Variation_604(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Faulted',
        1: 'Good',
    }

    def __init__(self, arg : Variation_604_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_605_Arg : TypeAlias = Raw
class Variation_605(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Standby',
        1: 'Exec',
    }

    def __init__(self, arg : Variation_605_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_606_Arg : TypeAlias = Raw
class Variation_606(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Faulted',
        1: 'Good',
    }

    def __init__(self, arg : Variation_606_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_607_Arg_Group = TypedDict('Variation_607_Arg_Group', {
    'TP1A': Union[Variation_599, Variation_599_Arg],
    'TP1B': Union[Variation_600, Variation_600_Arg],
    'TP2A': Union[Variation_601, Variation_601_Arg],
    'TP2B': Union[Variation_602, Variation_602_Arg],
    'TP3A': Union[Variation_603, Variation_603_Arg],
    'TP3B': Union[Variation_604, Variation_604_Arg],
    'TP4A': Union[Variation_605, Variation_605_Arg],
    'TP4B': Union[Variation_606, Variation_606_Arg],
})
Variation_607_Arg : TypeAlias = Union[Raw, Variation_607_Arg_Group]
class Variation_607(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TP1A', Variation_599),
        ('TP1B', Variation_600),
        ('TP2A', Variation_601),
        ('TP2B', Variation_602),
        ('TP3A', Variation_603),
        ('TP3B', Variation_604),
        ('TP4A', Variation_605),
        ('TP4B', Variation_606),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TP1A': ('', Variation_599, 0, 1),
        'TP1B': ('', Variation_600, 1, 1),
        'TP2A': ('', Variation_601, 2, 1),
        'TP2B': ('', Variation_602, 3, 1),
        'TP3A': ('', Variation_603, 4, 1),
        'TP3B': ('', Variation_604, 5, 1),
        'TP4A': ('', Variation_605, 6, 1),
        'TP4B': ('', Variation_606, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TP1A']) -> Type[Variation_599]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP1B']) -> Type[Variation_600]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP2A']) -> Type[Variation_601]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP2B']) -> Type[Variation_602]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP3A']) -> Type[Variation_603]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP3B']) -> Type[Variation_604]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP4A']) -> Type[Variation_605]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TP4B']) -> Type[Variation_606]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TP1A'], Literal['TP1B'], Literal['TP2A'], Literal['TP2B'], Literal['TP3A'], Literal['TP3B'], Literal['TP4A'], Literal['TP4B']]) -> Union[Type['Variation_599'], Type['Variation_600'], Type['Variation_601'], Type['Variation_602'], Type['Variation_603'], Type['Variation_604'], Type['Variation_605'], Type['Variation_606']]:
        if key == 'TP1A':
            return Variation_599
        if key == 'TP1B':
            return Variation_600
        if key == 'TP2A':
            return Variation_601
        if key == 'TP2B':
            return Variation_602
        if key == 'TP3A':
            return Variation_603
        if key == 'TP3B':
            return Variation_604
        if key == 'TP4A':
            return Variation_605
        if key == 'TP4B':
            return Variation_606
        assert_never(key)

    def __init__(self, arg : Variation_607_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TP1A']) -> Variation_599:
        ...

    @overload
    def get_item(self, name : Literal['TP1B']) -> Variation_600:
        ...

    @overload
    def get_item(self, name : Literal['TP2A']) -> Variation_601:
        ...

    @overload
    def get_item(self, name : Literal['TP2B']) -> Variation_602:
        ...

    @overload
    def get_item(self, name : Literal['TP3A']) -> Variation_603:
        ...

    @overload
    def get_item(self, name : Literal['TP3B']) -> Variation_604:
        ...

    @overload
    def get_item(self, name : Literal['TP4A']) -> Variation_605:
        ...

    @overload
    def get_item(self, name : Literal['TP4B']) -> Variation_606:
        ...

    def get_item(self, name : Union[Literal['TP1A'], Literal['TP1B'], Literal['TP2A'], Literal['TP2B'], Literal['TP3A'], Literal['TP3B'], Literal['TP4A'], Literal['TP4B']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TP1A'], val : Union[Variation_599, Variation_599_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP1B'], val : Union[Variation_600, Variation_600_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP2A'], val : Union[Variation_601, Variation_601_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP2B'], val : Union[Variation_602, Variation_602_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP3A'], val : Union[Variation_603, Variation_603_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP3B'], val : Union[Variation_604, Variation_604_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP4A'], val : Union[Variation_605, Variation_605_Arg]) -> 'Variation_607':
        ...

    @overload
    def set_item(self, name : Literal['TP4B'], val : Union[Variation_606, Variation_606_Arg]) -> 'Variation_607':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_608_Arg : TypeAlias = Raw
class Variation_608(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Not present',
        1: 'Present',
    }

    def __init__(self, arg : Variation_608_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_609_Arg : TypeAlias = Raw
class Variation_609(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not present',
        1: 'Present',
    }

    def __init__(self, arg : Variation_609_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_610_Arg : TypeAlias = Raw
class Variation_610(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Not present',
        1: 'Present',
    }

    def __init__(self, arg : Variation_610_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_611_Arg : TypeAlias = Raw
class Variation_611(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Faulted',
        1: 'Good',
    }

    def __init__(self, arg : Variation_611_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_612_Arg : TypeAlias = Raw
class Variation_612(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Offline',
        1: 'Online',
    }

    def __init__(self, arg : Variation_612_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_613_Arg_Group = TypedDict('Variation_613_Arg_Group', {
    'RSI': Union[Variation_0, Variation_0_Arg],
    'RS1090': Union[Variation_608, Variation_608_Arg],
    'TX1030': Union[Variation_609, Variation_609_Arg],
    'TX1090': Union[Variation_610, Variation_610_Arg],
    'RSS': Union[Variation_611, Variation_611_Arg],
    'RSO': Union[Variation_612, Variation_612_Arg],
})
Variation_613_Arg : TypeAlias = Union[Raw, Variation_613_Arg_Group]
class Variation_613(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RSI', Variation_0),
        Spare(0, 1),
        ('RS1090', Variation_608),
        ('TX1030', Variation_609),
        ('TX1090', Variation_610),
        ('RSS', Variation_611),
        ('RSO', Variation_612),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RSI': ('8-bit Identification Number of RS', Variation_0, 0, 8),
        'RS1090': ('Receiver 1090 MHz', Variation_608, 9, 1),
        'TX1030': ('Transmitter 1030 MHz', Variation_609, 10, 1),
        'TX1090': ('Transmitter 1090 MHz', Variation_610, 11, 1),
        'RSS': ('RS Status', Variation_611, 12, 1),
        'RSO': ('RS Operational', Variation_612, 13, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RSI']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RS1090']) -> Type[Variation_608]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TX1030']) -> Type[Variation_609]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TX1090']) -> Type[Variation_610]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSS']) -> Type[Variation_611]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RSO']) -> Type[Variation_612]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RSI'], Literal['RS1090'], Literal['TX1030'], Literal['TX1090'], Literal['RSS'], Literal['RSO']]) -> Union[Type['Variation_0'], Type['Variation_608'], Type['Variation_609'], Type['Variation_610'], Type['Variation_611'], Type['Variation_612']]:
        if key == 'RSI':
            return Variation_0
        if key == 'RS1090':
            return Variation_608
        if key == 'TX1030':
            return Variation_609
        if key == 'TX1090':
            return Variation_610
        if key == 'RSS':
            return Variation_611
        if key == 'RSO':
            return Variation_612
        assert_never(key)

    def __init__(self, arg : Variation_613_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RSI']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['RS1090']) -> Variation_608:
        ...

    @overload
    def get_item(self, name : Literal['TX1030']) -> Variation_609:
        ...

    @overload
    def get_item(self, name : Literal['TX1090']) -> Variation_610:
        ...

    @overload
    def get_item(self, name : Literal['RSS']) -> Variation_611:
        ...

    @overload
    def get_item(self, name : Literal['RSO']) -> Variation_612:
        ...

    def get_item(self, name : Union[Literal['RSI'], Literal['RS1090'], Literal['TX1030'], Literal['TX1090'], Literal['RSS'], Literal['RSO']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RSI'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_613':
        ...

    @overload
    def set_item(self, name : Literal['RS1090'], val : Union[Variation_608, Variation_608_Arg]) -> 'Variation_613':
        ...

    @overload
    def set_item(self, name : Literal['TX1030'], val : Union[Variation_609, Variation_609_Arg]) -> 'Variation_613':
        ...

    @overload
    def set_item(self, name : Literal['TX1090'], val : Union[Variation_610, Variation_610_Arg]) -> 'Variation_613':
        ...

    @overload
    def set_item(self, name : Literal['RSS'], val : Union[Variation_611, Variation_611_Arg]) -> 'Variation_613':
        ...

    @overload
    def set_item(self, name : Literal['RSO'], val : Union[Variation_612, Variation_612_Arg]) -> 'Variation_613':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_614_Arg : TypeAlias = List[Union[Variation_613, Variation_613_Arg]]
class Variation_614(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_613

    @classmethod
    def spec(cls) -> Type[Variation_613]:
        return Variation_613

    def __init__(self, arg : List[Union[Variation_613, Variation_613_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_615_Arg : TypeAlias = Raw
class Variation_615(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        1: 'Warning',
        2: 'Faulted',
        3: 'Good',
    }

    def __init__(self, arg : Variation_615_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_616_Arg : TypeAlias = Raw
class Variation_616(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        1: 'Warning',
        2: 'Faulted',
        3: 'Good',
    }

    def __init__(self, arg : Variation_616_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_617_Arg_Group_1 = TypedDict('Variation_617_Arg_Group_1', {
    'REFTR1': Union[Variation_615, Variation_615_Arg],
    'REFTR2': Union[Variation_616, Variation_616_Arg],
})
Variation_617_Arg_Group_2 = TypedDict('Variation_617_Arg_Group_2', {
    'REFTR1': Union[Variation_615, Variation_615_Arg],
    'REFTR2': Union[Variation_616, Variation_616_Arg],
    'REFTR3': Union[Variation_615, Variation_615_Arg],
    'REFTR4': Union[Variation_616, Variation_616_Arg],
})
Variation_617_Arg : TypeAlias = Union[
    int,
    Variation_617_Arg_Group_1,
    Tuple[int],
    Variation_617_Arg_Group_2,
    Tuple[int,int],
]
class Variation_617(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('REFTR1', Variation_615),
            Spare(2, 2),
            ('REFTR2', Variation_616),
            Spare(6, 1),
        ],
        [
            ('REFTR3', Variation_615),
            Spare(2, 2),
            ('REFTR4', Variation_616),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'REFTR1': ('Ref Trans 1 Status', Variation_615, 0, 2),
        'REFTR2': ('Ref Trans 2 Status', Variation_616, 4, 2),
        'REFTR3': ('Ref Trans 3 Status', Variation_615, 0, 2),
        'REFTR4': ('Ref Trans 4 Status', Variation_616, 4, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['REFTR1']) -> Type[Variation_615]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REFTR2']) -> Type[Variation_616]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REFTR3']) -> Type[Variation_615]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REFTR4']) -> Type[Variation_616]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['REFTR1'], Literal['REFTR2'], Literal['REFTR3'], Literal['REFTR4']]) -> Union[Type['Variation_615'], Type['Variation_616'], Type['Variation_615'], Type['Variation_616']]:
        if key == 'REFTR1':
            return Variation_615
        if key == 'REFTR2':
            return Variation_616
        if key == 'REFTR3':
            return Variation_615
        if key == 'REFTR4':
            return Variation_616
        assert_never(key)

    def __init__(self, arg : Variation_617_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_617_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_617_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['REFTR1']) -> Variation_615:
        ...

    @overload
    def get_item(self, name : Literal['REFTR2']) -> Variation_616:
        ...

    @overload
    def get_item(self, name : Literal['REFTR3']) -> Variation_615:
        ...

    @overload
    def get_item(self, name : Literal['REFTR4']) -> Variation_616:
        ...

    def get_item(self, name : Union[Literal['REFTR1'], Literal['REFTR2'], Literal['REFTR3'], Literal['REFTR4']]) -> Any:
        return self._get_item(name)

Variation_618_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_618(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 180.0, 30, '°')

    def __init__(self, arg : Variation_618_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_619_Arg_Group = TypedDict('Variation_619_Arg_Group', {
    'LAT': Union[Variation_618, Variation_618_Arg],
    'LON': Union[Variation_618, Variation_618_Arg],
})
Variation_619_Arg : TypeAlias = Union[Raw, Variation_619_Arg_Group]
class Variation_619(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LAT', Variation_618),
        ('LON', Variation_618),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude', Variation_618, 0, 32),
        'LON': ('Longitude', Variation_618, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_618]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_618]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_618'], Type['Variation_618']]:
        if key == 'LAT':
            return Variation_618
        if key == 'LON':
            return Variation_618
        assert_never(key)

    def __init__(self, arg : Variation_619_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_618:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_618:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_618, Variation_618_Arg]) -> 'Variation_619':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_618, Variation_618_Arg]) -> 'Variation_619':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_620_Arg = TypedDict('Variation_620_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_595, Variation_595_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '550': Union[Variation_598, Variation_598_Arg],
    '551': Union[Variation_607, Variation_607_Arg],
    '552': Union[Variation_614, Variation_614_Arg],
    '553': Union[Variation_617, Variation_617_Arg],
    '600': Union[Variation_619, Variation_619_Arg],
    '610': Union[Variation_302, Variation_302_Arg],
    '620': Union[Variation_304, Variation_304_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_620(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_595),
        ('140', Variation_81),
        ('550', Variation_598),
        ('551', Variation_607),
        ('552', Variation_614),
        ('553', Variation_617),
        ('600', Variation_619),
        ('610', Variation_302),
        ('620', Variation_304),
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_595, 0x4000),
        '140': (Variation_81, 0x2000),
        '550': (Variation_598, 0x1000),
        '551': (Variation_607, 0x0800),
        '552': (Variation_614, 0x0400),
        '553': (Variation_617, 0x0200),
        '600': (Variation_619, 0x0180),
        '610': (Variation_302, 0x0140),
        '620': (Variation_304, 0x0120),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_595]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['550']) -> Type[Variation_598]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['551']) -> Type[Variation_607]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['552']) -> Type[Variation_614]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['553']) -> Type[Variation_617]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['600']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['610']) -> Type[Variation_302]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['620']) -> Type[Variation_304]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['140'], Literal['550'], Literal['551'], Literal['552'], Literal['553'], Literal['600'], Literal['610'], Literal['620'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_595'], Type['Variation_81'], Type['Variation_598'], Type['Variation_607'], Type['Variation_614'], Type['Variation_617'], Type['Variation_619'], Type['Variation_302'], Type['Variation_304'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_595
        if key == '140':
            return Variation_81
        if key == '550':
            return Variation_598
        if key == '551':
            return Variation_607
        if key == '552':
            return Variation_614
        if key == '553':
            return Variation_617
        if key == '600':
            return Variation_619
        if key == '610':
            return Variation_302
        if key == '620':
            return Variation_304
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_620_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_595, Variation_595_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['550'], val : Union[Variation_598, Variation_598_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['551'], val : Union[Variation_607, Variation_607_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['552'], val : Union[Variation_614, Variation_614_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['553'], val : Union[Variation_617, Variation_617_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['600'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['610'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['620'], val : Union[Variation_304, Variation_304_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_620':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_620':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['550']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['551']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['552']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['553']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['600']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['610']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['620']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_620':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_620':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_595:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['550']) -> Variation_598:
        ...

    @overload
    def get_item(self, name : Literal['551']) -> Variation_607:
        ...

    @overload
    def get_item(self, name : Literal['552']) -> Variation_614:
        ...

    @overload
    def get_item(self, name : Literal['553']) -> Variation_617:
        ...

    @overload
    def get_item(self, name : Literal['600']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['610']) -> Variation_302:
        ...

    @overload
    def get_item(self, name : Literal['620']) -> Variation_304:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_621_Arg : TypeAlias = Raw
class Variation_621(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Non-Mode S 1090MHz multilateration',
        1: 'No Non-Mode S 1090MHz multilat',
    }

    def __init__(self, arg : Variation_621_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_622_Arg : TypeAlias = Raw
class Variation_622(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Mode-S 1090 MHz multilateration',
        1: 'No Mode-S 1090 MHz multilateration',
    }

    def __init__(self, arg : Variation_622_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_623_Arg : TypeAlias = Raw
class Variation_623(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'HF multilateration',
        1: 'No HF multilateration',
    }

    def __init__(self, arg : Variation_623_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_624_Arg : TypeAlias = Raw
class Variation_624(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'VDL Mode 4 multilateration',
        1: 'No VDL Mode 4 multilateration',
    }

    def __init__(self, arg : Variation_624_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_625_Arg : TypeAlias = Raw
class Variation_625(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'UAT multilateration',
        1: 'No UAT multilateration',
    }

    def __init__(self, arg : Variation_625_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_626_Arg : TypeAlias = Raw
class Variation_626(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'DME/TACAN multilateration',
        1: 'No DME/TACAN multilateration',
    }

    def __init__(self, arg : Variation_626_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_627_Arg : TypeAlias = Raw
class Variation_627(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Other Technology Multilateration',
        1: 'No Other Technology Multilateration',
    }

    def __init__(self, arg : Variation_627_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_628_Arg : TypeAlias = Raw
class Variation_628(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Report from target transponder',
        1: 'Report from field monitor (element transponder)',
    }

    def __init__(self, arg : Variation_628_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_629_Arg : TypeAlias = Raw
class Variation_629(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Absence of SPI',
        1: 'Special Position Identification',
    }

    def __init__(self, arg : Variation_629_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_630_Arg : TypeAlias = Raw
class Variation_630(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Chain 1',
        1: 'Chain 2',
    }

    def __init__(self, arg : Variation_630_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_631_Arg : TypeAlias = Raw
class Variation_631(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Transponder Ground bit not set',
        1: 'Transponder Ground bit set',
    }

    def __init__(self, arg : Variation_631_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_632_Arg : TypeAlias = Raw
class Variation_632(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'No Corrupted reply in multilateration',
        1: 'Corrupted replies in multilateration',
    }

    def __init__(self, arg : Variation_632_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_633_Arg : TypeAlias = Raw
class Variation_633(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Actual target report',
        1: 'Simulated target report',
    }

    def __init__(self, arg : Variation_633_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_634_Arg : TypeAlias = Raw
class Variation_634(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Test Target',
    }

    def __init__(self, arg : Variation_634_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_635_Arg_Group_1 = TypedDict('Variation_635_Arg_Group_1', {
    'SSR': Union[Variation_621, Variation_621_Arg],
    'MS': Union[Variation_622, Variation_622_Arg],
    'HF': Union[Variation_623, Variation_623_Arg],
    'VDL4': Union[Variation_624, Variation_624_Arg],
    'UAT': Union[Variation_625, Variation_625_Arg],
    'DME': Union[Variation_626, Variation_626_Arg],
    'OT': Union[Variation_627, Variation_627_Arg],
})
Variation_635_Arg_Group_2 = TypedDict('Variation_635_Arg_Group_2', {
    'SSR': Union[Variation_621, Variation_621_Arg],
    'MS': Union[Variation_622, Variation_622_Arg],
    'HF': Union[Variation_623, Variation_623_Arg],
    'VDL4': Union[Variation_624, Variation_624_Arg],
    'UAT': Union[Variation_625, Variation_625_Arg],
    'DME': Union[Variation_626, Variation_626_Arg],
    'OT': Union[Variation_627, Variation_627_Arg],
    'RAB': Union[Variation_628, Variation_628_Arg],
    'SPI': Union[Variation_629, Variation_629_Arg],
    'CHN': Union[Variation_630, Variation_630_Arg],
    'GBS': Union[Variation_631, Variation_631_Arg],
    'CRT': Union[Variation_632, Variation_632_Arg],
    'SIM': Union[Variation_633, Variation_633_Arg],
    'TST': Union[Variation_634, Variation_634_Arg],
})
Variation_635_Arg : TypeAlias = Union[
    int,
    Variation_635_Arg_Group_1,
    Tuple[int],
    Variation_635_Arg_Group_2,
    Tuple[int,int],
]
class Variation_635(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('SSR', Variation_621),
            ('MS', Variation_622),
            ('HF', Variation_623),
            ('VDL4', Variation_624),
            ('UAT', Variation_625),
            ('DME', Variation_626),
            ('OT', Variation_627),
        ],
        [
            ('RAB', Variation_628),
            ('SPI', Variation_629),
            ('CHN', Variation_630),
            ('GBS', Variation_631),
            ('CRT', Variation_632),
            ('SIM', Variation_633),
            ('TST', Variation_634),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SSR': ('', Variation_621, 0, 1),
        'MS': ('', Variation_622, 1, 1),
        'HF': ('', Variation_623, 2, 1),
        'VDL4': ('', Variation_624, 3, 1),
        'UAT': ('', Variation_625, 4, 1),
        'DME': ('', Variation_626, 5, 1),
        'OT': ('', Variation_627, 6, 1),
        'RAB': ('', Variation_628, 0, 1),
        'SPI': ('', Variation_629, 1, 1),
        'CHN': ('', Variation_630, 2, 1),
        'GBS': ('', Variation_631, 3, 1),
        'CRT': ('', Variation_632, 4, 1),
        'SIM': ('', Variation_633, 5, 1),
        'TST': ('', Variation_634, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_621]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MS']) -> Type[Variation_622]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HF']) -> Type[Variation_623]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VDL4']) -> Type[Variation_624]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_625]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DME']) -> Type[Variation_626]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OT']) -> Type[Variation_627]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_628]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_629]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHN']) -> Type[Variation_630]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_631]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CRT']) -> Type[Variation_632]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_633]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_634]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SSR'], Literal['MS'], Literal['HF'], Literal['VDL4'], Literal['UAT'], Literal['DME'], Literal['OT'], Literal['RAB'], Literal['SPI'], Literal['CHN'], Literal['GBS'], Literal['CRT'], Literal['SIM'], Literal['TST']]) -> Union[Type['Variation_621'], Type['Variation_622'], Type['Variation_623'], Type['Variation_624'], Type['Variation_625'], Type['Variation_626'], Type['Variation_627'], Type['Variation_628'], Type['Variation_629'], Type['Variation_630'], Type['Variation_631'], Type['Variation_632'], Type['Variation_633'], Type['Variation_634']]:
        if key == 'SSR':
            return Variation_621
        if key == 'MS':
            return Variation_622
        if key == 'HF':
            return Variation_623
        if key == 'VDL4':
            return Variation_624
        if key == 'UAT':
            return Variation_625
        if key == 'DME':
            return Variation_626
        if key == 'OT':
            return Variation_627
        if key == 'RAB':
            return Variation_628
        if key == 'SPI':
            return Variation_629
        if key == 'CHN':
            return Variation_630
        if key == 'GBS':
            return Variation_631
        if key == 'CRT':
            return Variation_632
        if key == 'SIM':
            return Variation_633
        if key == 'TST':
            return Variation_634
        assert_never(key)

    def __init__(self, arg : Variation_635_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_635_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_635_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_621:
        ...

    @overload
    def get_item(self, name : Literal['MS']) -> Variation_622:
        ...

    @overload
    def get_item(self, name : Literal['HF']) -> Variation_623:
        ...

    @overload
    def get_item(self, name : Literal['VDL4']) -> Variation_624:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_625:
        ...

    @overload
    def get_item(self, name : Literal['DME']) -> Variation_626:
        ...

    @overload
    def get_item(self, name : Literal['OT']) -> Variation_627:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_628:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_629:
        ...

    @overload
    def get_item(self, name : Literal['CHN']) -> Variation_630:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_631:
        ...

    @overload
    def get_item(self, name : Literal['CRT']) -> Variation_632:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_633:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_634:
        ...

    def get_item(self, name : Union[Literal['SSR'], Literal['MS'], Literal['HF'], Literal['VDL4'], Literal['UAT'], Literal['DME'], Literal['OT'], Literal['RAB'], Literal['SPI'], Literal['CHN'], Literal['GBS'], Literal['CRT'], Literal['SIM'], Literal['TST']]) -> Any:
        return self._get_item(name)

Variation_636_Arg_Group = TypedDict('Variation_636_Arg_Group', {
    'LAT': Union[Variation_151, Variation_151_Arg],
    'LON': Union[Variation_151, Variation_151_Arg],
})
Variation_636_Arg : TypeAlias = Union[Raw, Variation_636_Arg_Group]
class Variation_636(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LAT', Variation_151),
        ('LON', Variation_151),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude', Variation_151, 0, 32),
        'LON': ('Longitude', Variation_151, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_151]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_151'], Type['Variation_151']]:
        if key == 'LAT':
            return Variation_151
        if key == 'LON':
            return Variation_151
        assert_never(key)

    def __init__(self, arg : Variation_636_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_151:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_151:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_151, Variation_151_Arg]) -> 'Variation_636':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_151, Variation_151_Arg]) -> 'Variation_636':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_637_Arg_Group = TypedDict('Variation_637_Arg_Group', {
    'X': Union[Variation_154, Variation_154_Arg],
    'Y': Union[Variation_154, Variation_154_Arg],
})
Variation_637_Arg : TypeAlias = Union[Raw, Variation_637_Arg_Group]
class Variation_637(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('X', Variation_154),
        ('Y', Variation_154),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-coordinate', Variation_154, 0, 24),
        'Y': ('Y-coordinate', Variation_154, 24, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_154]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_154'], Type['Variation_154']]:
        if key == 'X':
            return Variation_154
        if key == 'Y':
            return Variation_154
        assert_never(key)

    def __init__(self, arg : Variation_637_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_154:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_154:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_637':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_637':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_638_Arg_Group = TypedDict('Variation_638_Arg_Group', {
    'TRN': Union[Variation_43, Variation_43_Arg],
})
Variation_638_Arg : TypeAlias = Union[Raw, Variation_638_Arg_Group]
class Variation_638(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('TRN', Variation_43),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRN': ('Track Number', Variation_43, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['TRN']]) -> Union[Type['Variation_43']]:
        if key == 'TRN':
            return Variation_43
        assert_never(key)

    def __init__(self, arg : Variation_638_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['TRN']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['TRN'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_638':
        return self._set_item(name, val) # type: ignore

Variation_639_Arg : TypeAlias = Raw
class Variation_639(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Confirmed track',
        1: 'Track in initiation phase',
    }

    def __init__(self, arg : Variation_639_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_640_Arg : TypeAlias = Raw
class Variation_640(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not extrapolated',
        1: 'Extrapolated',
    }

    def __init__(self, arg : Variation_640_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_641_Arg : TypeAlias = Raw
class Variation_641(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'Maintaining',
        1: 'Climbing',
        2: 'Descending',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_641_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_642_Arg : TypeAlias = Raw
class Variation_642(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Horizontal manoeuvre',
    }

    def __init__(self, arg : Variation_642_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_643_Arg_Group_1 = TypedDict('Variation_643_Arg_Group_1', {
    'CNF': Union[Variation_639, Variation_639_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_640, Variation_640_Arg],
    'CDM': Union[Variation_641, Variation_641_Arg],
    'MAH': Union[Variation_642, Variation_642_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
})
Variation_643_Arg_Group_2 = TypedDict('Variation_643_Arg_Group_2', {
    'CNF': Union[Variation_639, Variation_639_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_640, Variation_640_Arg],
    'CDM': Union[Variation_641, Variation_641_Arg],
    'MAH': Union[Variation_642, Variation_642_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
    'GHO': Union[Variation_275, Variation_275_Arg],
})
Variation_643_Arg : TypeAlias = Union[
    int,
    Variation_643_Arg_Group_1,
    Tuple[int],
    Variation_643_Arg_Group_2,
    Tuple[int,int],
]
class Variation_643(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('CNF', Variation_639),
            ('TRE', Variation_267),
            ('CST', Variation_640),
            ('CDM', Variation_641),
            ('MAH', Variation_642),
            ('STH', Variation_271),
        ],
        [
            ('GHO', Variation_275),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CNF': ('', Variation_639, 0, 1),
        'TRE': ('', Variation_267, 1, 1),
        'CST': ('', Variation_640, 2, 1),
        'CDM': ('', Variation_641, 3, 2),
        'MAH': ('', Variation_642, 5, 1),
        'STH': ('', Variation_271, 6, 1),
        'GHO': ('', Variation_275, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_639]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRE']) -> Type[Variation_267]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_640]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDM']) -> Type[Variation_641]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAH']) -> Type[Variation_642]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STH']) -> Type[Variation_271]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GHO']) -> Type[Variation_275]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['CDM'], Literal['MAH'], Literal['STH'], Literal['GHO']]) -> Union[Type['Variation_639'], Type['Variation_267'], Type['Variation_640'], Type['Variation_641'], Type['Variation_642'], Type['Variation_271'], Type['Variation_275']]:
        if key == 'CNF':
            return Variation_639
        if key == 'TRE':
            return Variation_267
        if key == 'CST':
            return Variation_640
        if key == 'CDM':
            return Variation_641
        if key == 'MAH':
            return Variation_642
        if key == 'STH':
            return Variation_271
        if key == 'GHO':
            return Variation_275
        assert_never(key)

    def __init__(self, arg : Variation_643_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_643_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_643_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_639:
        ...

    @overload
    def get_item(self, name : Literal['TRE']) -> Variation_267:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_640:
        ...

    @overload
    def get_item(self, name : Literal['CDM']) -> Variation_641:
        ...

    @overload
    def get_item(self, name : Literal['MAH']) -> Variation_642:
        ...

    @overload
    def get_item(self, name : Literal['STH']) -> Variation_271:
        ...

    @overload
    def get_item(self, name : Literal['GHO']) -> Variation_275:
        ...

    def get_item(self, name : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['CDM'], Literal['MAH'], Literal['STH'], Literal['GHO']]) -> Any:
        return self._get_item(name)

Variation_644_Arg : TypeAlias = Raw
class Variation_644(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-3/A code derived from the reply of the transponder',
        1: 'Mode-3/A code not extracted during the last update period',
    }

    def __init__(self, arg : Variation_644_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_645_Arg_Group = TypedDict('Variation_645_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_644, Variation_644_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_645_Arg : TypeAlias = Union[Raw, Variation_645_Arg_Group]
class Variation_645(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_644),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'L': ('', Variation_644, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_644]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_644'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_644
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_645_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_644:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_645':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_645':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_644, Variation_644_Arg]) -> 'Variation_645':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_645':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_646_Arg_Group = TypedDict('Variation_646_Arg_Group', {
    'VX': Union[Variation_315, Variation_315_Arg],
    'VY': Union[Variation_315, Variation_315_Arg],
})
Variation_646_Arg : TypeAlias = Union[Raw, Variation_646_Arg_Group]
class Variation_646(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('VX', Variation_315),
        ('VY', Variation_315),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VX': ('', Variation_315, 0, 16),
        'VY': ('', Variation_315, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VX']) -> Type[Variation_315]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VY']) -> Type[Variation_315]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VX'], Literal['VY']]) -> Union[Type['Variation_315'], Type['Variation_315']]:
        if key == 'VX':
            return Variation_315
        if key == 'VY':
            return Variation_315
        assert_never(key)

    def __init__(self, arg : Variation_646_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VX']) -> Variation_315:
        ...

    @overload
    def get_item(self, name : Literal['VY']) -> Variation_315:
        ...

    def get_item(self, name : Union[Literal['VX'], Literal['VY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VX'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_646':
        ...

    @overload
    def set_item(self, name : Literal['VY'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_646':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_647_Arg : TypeAlias = Raw
class Variation_647(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'High quality pulse B2',
        1: 'Low quality pulse B2',
    }

    def __init__(self, arg : Variation_647_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_648_Arg_Group = TypedDict('Variation_648_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'MODEC': Union[Variation_43, Variation_43_Arg],
    'QC1': Union[Variation_38, Variation_38_Arg],
    'QA1': Union[Variation_44, Variation_44_Arg],
    'QC2': Union[Variation_45, Variation_45_Arg],
    'QA2': Union[Variation_46, Variation_46_Arg],
    'QC4': Union[Variation_47, Variation_47_Arg],
    'QA4': Union[Variation_48, Variation_48_Arg],
    'QB1': Union[Variation_49, Variation_49_Arg],
    'QD1': Union[Variation_50, Variation_50_Arg],
    'QB2': Union[Variation_51, Variation_51_Arg],
    'QD2': Union[Variation_647, Variation_647_Arg],
    'QB4': Union[Variation_53, Variation_53_Arg],
    'QD4': Union[Variation_54, Variation_54_Arg],
})
Variation_648_Arg : TypeAlias = Union[Raw, Variation_648_Arg_Group]
class Variation_648(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        Spare(2, 2),
        ('MODEC', Variation_43),
        Spare(0, 4),
        ('QC1', Variation_38),
        ('QA1', Variation_44),
        ('QC2', Variation_45),
        ('QA2', Variation_46),
        ('QC4', Variation_47),
        ('QA4', Variation_48),
        ('QB1', Variation_49),
        ('QD1', Variation_50),
        ('QB2', Variation_51),
        ('QD2', Variation_647),
        ('QB4', Variation_53),
        ('QD4', Variation_54),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'MODEC': ('Mode-C Reply in Gray Notation', Variation_43, 4, 12),
        'QC1': ('Quality Pulse C1', Variation_38, 20, 1),
        'QA1': ('Quality Pulse A1', Variation_44, 21, 1),
        'QC2': ('Quality Pulse C2', Variation_45, 22, 1),
        'QA2': ('Quality Pulse A2', Variation_46, 23, 1),
        'QC4': ('Quality Pulse C4', Variation_47, 24, 1),
        'QA4': ('Quality Pulse A4', Variation_48, 25, 1),
        'QB1': ('Quality Pulse B1', Variation_49, 26, 1),
        'QD1': ('Quality Pulse D1', Variation_50, 27, 1),
        'QB2': ('Quality Pulse B2', Variation_51, 28, 1),
        'QD2': ('Quality Pulse D2', Variation_647, 29, 1),
        'QB4': ('Quality Pulse B4', Variation_53, 30, 1),
        'QD4': ('Quality Pulse D4', Variation_54, 31, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODEC']) -> Type[Variation_43]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC1']) -> Type[Variation_38]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA1']) -> Type[Variation_44]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC2']) -> Type[Variation_45]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA2']) -> Type[Variation_46]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QC4']) -> Type[Variation_47]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA4']) -> Type[Variation_48]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB1']) -> Type[Variation_49]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD1']) -> Type[Variation_50]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB2']) -> Type[Variation_51]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD2']) -> Type[Variation_647]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB4']) -> Type[Variation_53]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QD4']) -> Type[Variation_54]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['MODEC'], Literal['QC1'], Literal['QA1'], Literal['QC2'], Literal['QA2'], Literal['QC4'], Literal['QA4'], Literal['QB1'], Literal['QD1'], Literal['QB2'], Literal['QD2'], Literal['QB4'], Literal['QD4']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_43'], Type['Variation_38'], Type['Variation_44'], Type['Variation_45'], Type['Variation_46'], Type['Variation_47'], Type['Variation_48'], Type['Variation_49'], Type['Variation_50'], Type['Variation_51'], Type['Variation_647'], Type['Variation_53'], Type['Variation_54']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'MODEC':
            return Variation_43
        if key == 'QC1':
            return Variation_38
        if key == 'QA1':
            return Variation_44
        if key == 'QC2':
            return Variation_45
        if key == 'QA2':
            return Variation_46
        if key == 'QC4':
            return Variation_47
        if key == 'QA4':
            return Variation_48
        if key == 'QB1':
            return Variation_49
        if key == 'QD1':
            return Variation_50
        if key == 'QB2':
            return Variation_51
        if key == 'QD2':
            return Variation_647
        if key == 'QB4':
            return Variation_53
        if key == 'QD4':
            return Variation_54
        assert_never(key)

    def __init__(self, arg : Variation_648_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['MODEC']) -> Variation_43:
        ...

    @overload
    def get_item(self, name : Literal['QC1']) -> Variation_38:
        ...

    @overload
    def get_item(self, name : Literal['QA1']) -> Variation_44:
        ...

    @overload
    def get_item(self, name : Literal['QC2']) -> Variation_45:
        ...

    @overload
    def get_item(self, name : Literal['QA2']) -> Variation_46:
        ...

    @overload
    def get_item(self, name : Literal['QC4']) -> Variation_47:
        ...

    @overload
    def get_item(self, name : Literal['QA4']) -> Variation_48:
        ...

    @overload
    def get_item(self, name : Literal['QB1']) -> Variation_49:
        ...

    @overload
    def get_item(self, name : Literal['QD1']) -> Variation_50:
        ...

    @overload
    def get_item(self, name : Literal['QB2']) -> Variation_51:
        ...

    @overload
    def get_item(self, name : Literal['QD2']) -> Variation_647:
        ...

    @overload
    def get_item(self, name : Literal['QB4']) -> Variation_53:
        ...

    @overload
    def get_item(self, name : Literal['QD4']) -> Variation_54:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['MODEC'], Literal['QC1'], Literal['QA1'], Literal['QC2'], Literal['QA2'], Literal['QC4'], Literal['QA4'], Literal['QB1'], Literal['QD1'], Literal['QB2'], Literal['QD2'], Literal['QB4'], Literal['QD4']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['MODEC'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QC1'], val : Union[Variation_38, Variation_38_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QA1'], val : Union[Variation_44, Variation_44_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QC2'], val : Union[Variation_45, Variation_45_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QA2'], val : Union[Variation_46, Variation_46_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QC4'], val : Union[Variation_47, Variation_47_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QA4'], val : Union[Variation_48, Variation_48_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QB1'], val : Union[Variation_49, Variation_49_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QD1'], val : Union[Variation_50, Variation_50_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QB2'], val : Union[Variation_51, Variation_51_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QD2'], val : Union[Variation_647, Variation_647_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QB4'], val : Union[Variation_53, Variation_53_Arg]) -> 'Variation_648':
        ...

    @overload
    def set_item(self, name : Literal['QD4'], val : Union[Variation_54, Variation_54_Arg]) -> 'Variation_648':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_649_Arg : TypeAlias = Raw
class Variation_649(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Callsign or registration not downlinked from transponder',
        1: 'Registration downlinked from transponder',
        2: 'Callsign downlinked from transponder',
        3: 'Not defined',
    }

    def __init__(self, arg : Variation_649_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_650_Arg_Group = TypedDict('Variation_650_Arg_Group', {
    'STI': Union[Variation_649, Variation_649_Arg],
    'CHR': Union[Variation_201, Variation_201_Arg],
})
Variation_650_Arg : TypeAlias = Union[Raw, Variation_650_Arg_Group]
class Variation_650(Group):
    variation = 'Group'

    bit_size = 56

    subitems_list = [
        ('STI', Variation_649),
        Spare(2, 6),
        ('CHR', Variation_201),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STI': ('', Variation_649, 0, 2),
        'CHR': ('Characters 1-8 (coded on 6 Bits Each) Defining Target Identification', Variation_201, 8, 48),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STI']) -> Type[Variation_649]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHR']) -> Type[Variation_201]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STI'], Literal['CHR']]) -> Union[Type['Variation_649'], Type['Variation_201']]:
        if key == 'STI':
            return Variation_649
        if key == 'CHR':
            return Variation_201
        assert_never(key)

    def __init__(self, arg : Variation_650_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STI']) -> Variation_649:
        ...

    @overload
    def get_item(self, name : Literal['CHR']) -> Variation_201:
        ...

    def get_item(self, name : Union[Literal['STI'], Literal['CHR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STI'], val : Union[Variation_649, Variation_649_Arg]) -> 'Variation_650':
        ...

    @overload
    def set_item(self, name : Literal['CHR'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_650':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_651_Arg_Group = TypedDict('Variation_651_Arg_Group', {
    'AX': Union[Variation_317, Variation_317_Arg],
    'AY': Union[Variation_317, Variation_317_Arg],
})
Variation_651_Arg : TypeAlias = Union[Raw, Variation_651_Arg_Group]
class Variation_651(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('AX', Variation_317),
        ('AY', Variation_317),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AX': ('', Variation_317, 0, 8),
        'AY': ('', Variation_317, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AX']) -> Type[Variation_317]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AY']) -> Type[Variation_317]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AX'], Literal['AY']]) -> Union[Type['Variation_317'], Type['Variation_317']]:
        if key == 'AX':
            return Variation_317
        if key == 'AY':
            return Variation_317
        assert_never(key)

    def __init__(self, arg : Variation_651_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AX']) -> Variation_317:
        ...

    @overload
    def get_item(self, name : Literal['AY']) -> Variation_317:
        ...

    def get_item(self, name : Union[Literal['AX'], Literal['AY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AX'], val : Union[Variation_317, Variation_317_Arg]) -> 'Variation_651':
        ...

    @overload
    def set_item(self, name : Literal['AY'], val : Union[Variation_317, Variation_317_Arg]) -> 'Variation_651':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_652_Arg_Group = TypedDict('Variation_652_Arg_Group', {
    'TRB': Union[Variation_298, Variation_298_Arg],
    'MSG': Union[Variation_386, Variation_386_Arg],
})
Variation_652_Arg : TypeAlias = Union[Raw, Variation_652_Arg_Group]
class Variation_652(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TRB', Variation_298),
        ('MSG', Variation_386),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRB': ('', Variation_298, 0, 1),
        'MSG': ('', Variation_386, 1, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TRB']) -> Type[Variation_298]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSG']) -> Type[Variation_386]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TRB'], Literal['MSG']]) -> Union[Type['Variation_298'], Type['Variation_386']]:
        if key == 'TRB':
            return Variation_298
        if key == 'MSG':
            return Variation_386
        assert_never(key)

    def __init__(self, arg : Variation_652_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TRB']) -> Variation_298:
        ...

    @overload
    def get_item(self, name : Literal['MSG']) -> Variation_386:
        ...

    def get_item(self, name : Union[Literal['TRB'], Literal['MSG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TRB'], val : Union[Variation_298, Variation_298_Arg]) -> 'Variation_652':
        ...

    @overload
    def set_item(self, name : Literal['MSG'], val : Union[Variation_386, Variation_386_Arg]) -> 'Variation_652':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_653_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_653(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 2, '')

    def __init__(self, arg : Variation_653_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_654_Arg_Group = TypedDict('Variation_654_Arg_Group', {
    'X': Union[Variation_653, Variation_653_Arg],
    'Y': Union[Variation_653, Variation_653_Arg],
    'XY': Union[Variation_653, Variation_653_Arg],
})
Variation_654_Arg : TypeAlias = Union[Raw, Variation_654_Arg_Group]
class Variation_654(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('X', Variation_653),
        ('Y', Variation_653),
        ('XY', Variation_653),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('DOP (X-Component)', Variation_653, 0, 16),
        'Y': ('DOP (Y-Component)', Variation_653, 16, 16),
        'XY': ('DOP (Correlation XY)', Variation_653, 32, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_653]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_653]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XY']) -> Type[Variation_653]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['XY']]) -> Union[Type['Variation_653'], Type['Variation_653'], Type['Variation_653']]:
        if key == 'X':
            return Variation_653
        if key == 'Y':
            return Variation_653
        if key == 'XY':
            return Variation_653
        assert_never(key)

    def __init__(self, arg : Variation_654_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_653:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_653:
        ...

    @overload
    def get_item(self, name : Literal['XY']) -> Variation_653:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['XY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_653, Variation_653_Arg]) -> 'Variation_654':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_653, Variation_653_Arg]) -> 'Variation_654':
        ...

    @overload
    def set_item(self, name : Literal['XY'], val : Union[Variation_653, Variation_653_Arg]) -> 'Variation_654':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_655_Arg_Group = TypedDict('Variation_655_Arg_Group', {
    'X': Union[Variation_458, Variation_458_Arg],
    'Y': Union[Variation_458, Variation_458_Arg],
    'XY': Union[Variation_653, Variation_653_Arg],
})
Variation_655_Arg : TypeAlias = Union[Raw, Variation_655_Arg_Group]
class Variation_655(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('X', Variation_458),
        ('Y', Variation_458),
        ('XY', Variation_653),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('SDP (X-Component)', Variation_458, 0, 16),
        'Y': ('SDP (Y-Component)', Variation_458, 16, 16),
        'XY': ('SDP (Correlation XY)', Variation_653, 32, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_458]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_458]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XY']) -> Type[Variation_653]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y'], Literal['XY']]) -> Union[Type['Variation_458'], Type['Variation_458'], Type['Variation_653']]:
        if key == 'X':
            return Variation_458
        if key == 'Y':
            return Variation_458
        if key == 'XY':
            return Variation_653
        assert_never(key)

    def __init__(self, arg : Variation_655_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_458:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_458:
        ...

    @overload
    def get_item(self, name : Literal['XY']) -> Variation_653:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y'], Literal['XY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_458, Variation_458_Arg]) -> 'Variation_655':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_458, Variation_458_Arg]) -> 'Variation_655':
        ...

    @overload
    def set_item(self, name : Literal['XY'], val : Union[Variation_653, Variation_653_Arg]) -> 'Variation_655':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_656_Arg = TypedDict('Variation_656_Arg', {
    'DOP': Union[Variation_654, Variation_654_Arg],
    'SDP': Union[Variation_655, Variation_655_Arg],
    'SDH': Union[Variation_157, Variation_157_Arg],
}, total=False)
class Variation_656(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('DOP', Variation_654),
        ('SDP', Variation_655),
        ('SDH', Variation_157),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'DOP': (Variation_654, 0x80),
        'SDP': (Variation_655, 0x40),
        'SDH': (Variation_157, 0x20),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DOP']) -> Type[Variation_654]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDP']) -> Type[Variation_655]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDH']) -> Type[Variation_157]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DOP'], Literal['SDP'], Literal['SDH']]) -> Union[Type['Variation_654'], Type['Variation_655'], Type['Variation_157']]:
        if key == 'DOP':
            return Variation_654
        if key == 'SDP':
            return Variation_655
        if key == 'SDH':
            return Variation_157
        assert_never(key)

    def __init__(self, arg : Optional[Variation_656_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['DOP'], val : Union[Variation_654, Variation_654_Arg]) -> 'Variation_656':
        ...

    @overload
    def set_item(self, name : Literal['SDP'], val : Union[Variation_655, Variation_655_Arg]) -> 'Variation_656':
        ...

    @overload
    def set_item(self, name : Literal['SDH'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_656':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['DOP']) -> 'Variation_656':
        ...

    @overload
    def del_item(self, name : Literal['SDP']) -> 'Variation_656':
        ...

    @overload
    def del_item(self, name : Literal['SDH']) -> 'Variation_656':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['DOP']) -> Variation_654:
        ...

    @overload
    def get_item(self, name : Literal['SDP']) -> Variation_655:
        ...

    @overload
    def get_item(self, name : Literal['SDH']) -> Variation_157:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_657_Arg : TypeAlias = Raw
class Variation_657(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'TU1/RU1 has NOT contributed to the target detection',
        1: 'TU1/RU1 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_657_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_658_Arg : TypeAlias = Raw
class Variation_658(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'TU2/RU2 has NOT contributed to the target detection',
        1: 'TU2/RU2 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_658_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_659_Arg : TypeAlias = Raw
class Variation_659(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'TU3/RU3 has NOT contributed to the target detection',
        1: 'TU3/RU3 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_659_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_660_Arg : TypeAlias = Raw
class Variation_660(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'TU4/RU4 has NOT contributed to the target detection',
        1: 'TU4/RU4 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_660_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_661_Arg : TypeAlias = Raw
class Variation_661(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'TU5/RU5 has NOT contributed to the target detection',
        1: 'TU5/RU5 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_661_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_662_Arg : TypeAlias = Raw
class Variation_662(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'TU6/RU6 has NOT contributed to the target detection',
        1: 'TU6/RU6 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_662_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_663_Arg : TypeAlias = Raw
class Variation_663(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'TU7/RU7 has NOT contributed to the target detection',
        1: 'TU7/RU7 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_663_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_664_Arg : TypeAlias = Raw
class Variation_664(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'TU8/RU8 has NOT contributed to the target detection',
        1: 'TU8/RU8 has contributed to the target detection',
    }

    def __init__(self, arg : Variation_664_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_665_Arg_Group = TypedDict('Variation_665_Arg_Group', {
    'BIT1': Union[Variation_657, Variation_657_Arg],
    'BIT2': Union[Variation_658, Variation_658_Arg],
    'BIT3': Union[Variation_659, Variation_659_Arg],
    'BIT4': Union[Variation_660, Variation_660_Arg],
    'BIT5': Union[Variation_661, Variation_661_Arg],
    'BIT6': Union[Variation_662, Variation_662_Arg],
    'BIT7': Union[Variation_663, Variation_663_Arg],
    'BIT8': Union[Variation_664, Variation_664_Arg],
})
Variation_665_Arg : TypeAlias = Union[Raw, Variation_665_Arg_Group]
class Variation_665(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('BIT1', Variation_657),
        ('BIT2', Variation_658),
        ('BIT3', Variation_659),
        ('BIT4', Variation_660),
        ('BIT5', Variation_661),
        ('BIT6', Variation_662),
        ('BIT7', Variation_663),
        ('BIT8', Variation_664),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'BIT1': ('TU1/RU1 Contribution', Variation_657, 0, 1),
        'BIT2': ('TU2/RU2 Contribution', Variation_658, 1, 1),
        'BIT3': ('TU3/RU3 Contribution', Variation_659, 2, 1),
        'BIT4': ('TU4/RU4 Contribution', Variation_660, 3, 1),
        'BIT5': ('TU5/RU5 Contribution', Variation_661, 4, 1),
        'BIT6': ('TU6/RU6 Contribution', Variation_662, 5, 1),
        'BIT7': ('TU7/RU7 Contribution', Variation_663, 6, 1),
        'BIT8': ('TU8/RU8 Contribution', Variation_664, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT1']) -> Type[Variation_657]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT2']) -> Type[Variation_658]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT3']) -> Type[Variation_659]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT4']) -> Type[Variation_660]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT5']) -> Type[Variation_661]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT6']) -> Type[Variation_662]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT7']) -> Type[Variation_663]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BIT8']) -> Type[Variation_664]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['BIT1'], Literal['BIT2'], Literal['BIT3'], Literal['BIT4'], Literal['BIT5'], Literal['BIT6'], Literal['BIT7'], Literal['BIT8']]) -> Union[Type['Variation_657'], Type['Variation_658'], Type['Variation_659'], Type['Variation_660'], Type['Variation_661'], Type['Variation_662'], Type['Variation_663'], Type['Variation_664']]:
        if key == 'BIT1':
            return Variation_657
        if key == 'BIT2':
            return Variation_658
        if key == 'BIT3':
            return Variation_659
        if key == 'BIT4':
            return Variation_660
        if key == 'BIT5':
            return Variation_661
        if key == 'BIT6':
            return Variation_662
        if key == 'BIT7':
            return Variation_663
        if key == 'BIT8':
            return Variation_664
        assert_never(key)

    def __init__(self, arg : Variation_665_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['BIT1']) -> Variation_657:
        ...

    @overload
    def get_item(self, name : Literal['BIT2']) -> Variation_658:
        ...

    @overload
    def get_item(self, name : Literal['BIT3']) -> Variation_659:
        ...

    @overload
    def get_item(self, name : Literal['BIT4']) -> Variation_660:
        ...

    @overload
    def get_item(self, name : Literal['BIT5']) -> Variation_661:
        ...

    @overload
    def get_item(self, name : Literal['BIT6']) -> Variation_662:
        ...

    @overload
    def get_item(self, name : Literal['BIT7']) -> Variation_663:
        ...

    @overload
    def get_item(self, name : Literal['BIT8']) -> Variation_664:
        ...

    def get_item(self, name : Union[Literal['BIT1'], Literal['BIT2'], Literal['BIT3'], Literal['BIT4'], Literal['BIT5'], Literal['BIT6'], Literal['BIT7'], Literal['BIT8']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['BIT1'], val : Union[Variation_657, Variation_657_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT2'], val : Union[Variation_658, Variation_658_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT3'], val : Union[Variation_659, Variation_659_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT4'], val : Union[Variation_660, Variation_660_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT5'], val : Union[Variation_661, Variation_661_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT6'], val : Union[Variation_662, Variation_662_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT7'], val : Union[Variation_663, Variation_663_Arg]) -> 'Variation_665':
        ...

    @overload
    def set_item(self, name : Literal['BIT8'], val : Union[Variation_664, Variation_664_Arg]) -> 'Variation_665':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_666_Arg : TypeAlias = List[Union[Variation_665, Variation_665_Arg]]
class Variation_666(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 8
    variation_type = Variation_665

    @classmethod
    def spec(cls) -> Type[Variation_665]:
        return Variation_665

    def __init__(self, arg : List[Union[Variation_665, Variation_665_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_667_Arg_Group = TypedDict('Variation_667_Arg_Group', {
    'MBDATA': Union[Variation_282, Variation_282_Arg],
    'BDS1': Union[Variation_192, Variation_192_Arg],
    'BDS2': Union[Variation_283, Variation_283_Arg],
})
Variation_667_Arg : TypeAlias = Union[Raw, Variation_667_Arg_Group]
class Variation_667(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('MBDATA', Variation_282),
        ('BDS1', Variation_192),
        ('BDS2', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MBDATA': ('56-bit Message Conveying Mode S Comm B Message Data', Variation_282, 0, 56),
        'BDS1': ('Comm B Data Buffer Store 1 Address', Variation_192, 56, 4),
        'BDS2': ('Comm B Data Buffer Store 2 Address', Variation_283, 60, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MBDATA']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS1']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS2']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Union[Type['Variation_282'], Type['Variation_192'], Type['Variation_283']]:
        if key == 'MBDATA':
            return Variation_282
        if key == 'BDS1':
            return Variation_192
        if key == 'BDS2':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_667_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MBDATA']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BDS1']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['BDS2']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MBDATA'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_667':
        ...

    @overload
    def set_item(self, name : Literal['BDS1'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_667':
        ...

    @overload
    def set_item(self, name : Literal['BDS2'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_667':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_668_Arg : TypeAlias = List[Union[Variation_667, Variation_667_Arg]]
class Variation_668(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 64
    variation_type = Variation_667

    @classmethod
    def spec(cls) -> Type[Variation_667]:
        return Variation_667

    def __init__(self, arg : List[Union[Variation_667, Variation_667_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_669_Arg : TypeAlias = Raw
class Variation_669(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
        6: 'Not assigned',
        7: 'Information not yet extracted',
    }

    def __init__(self, arg : Variation_669_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_670_Arg_Group = TypedDict('Variation_670_Arg_Group', {
    'COM': Union[Variation_323, Variation_323_Arg],
    'STAT': Union[Variation_669, Variation_669_Arg],
    'MSSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
})
Variation_670_Arg : TypeAlias = Union[Raw, Variation_670_Arg_Group]
class Variation_670(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('COM', Variation_323),
        ('STAT', Variation_669),
        Spare(6, 2),
        ('MSSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_323, 0, 3),
        'STAT': ('Flight Status', Variation_669, 3, 3),
        'MSSC': ('Mode-S Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS 1,0 Bits 37/40', Variation_283, 12, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_323]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_669]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['MSSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Union[Type['Variation_323'], Type['Variation_669'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283']]:
        if key == 'COM':
            return Variation_323
        if key == 'STAT':
            return Variation_669
        if key == 'MSSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_670_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_323:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_669:
        ...

    @overload
    def get_item(self, name : Literal['MSSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['MSSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_323, Variation_323_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_669, Variation_669_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['MSSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_670':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_670':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_671_Arg : TypeAlias = Raw
class Variation_671(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        0: 'Not defined; never used',
        1: 'Multipath Reply (Reflection)',
        3: 'Split plot',
        10: 'Phantom SSR plot',
        11: 'Non-Matching Mode-3/A Code',
        12: 'Mode C code / Mode S altitude code abnormal value compared to the track',
        15: 'Transponder anomaly detected',
        16: 'Duplicated or Illegal Mode S Aircraft Address',
        17: 'Mode S error correction applied',
        18: 'Undecodable Mode C code / Mode S altitude code',
    }

    def __init__(self, arg : Variation_671_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_672_Arg_Group_1 = TypedDict('Variation_672_Arg_Group_1', {
    'WE': Union[Variation_671, Variation_671_Arg],
})
Variation_672_Arg : TypeAlias = Union[
    int,
    Variation_672_Arg_Group_1,
    Tuple[int],
]
class Variation_672(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('WE', Variation_671),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'WE': ('', Variation_671, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['WE']]) -> Union[Type['Variation_671']]:
        if key == 'WE':
            return Variation_671
        assert_never(key)

    def __init__(self, arg : Variation_672_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_672_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['WE']) -> Any:
        return self._get_item(name)

Variation_673_Arg : TypeAlias = Raw
class Variation_673(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-1 code derived from the reply of the transponder',
        1: 'Smoothed Mode-1 code as provided by a local tracker',
    }

    def __init__(self, arg : Variation_673_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_674_Arg_Group = TypedDict('Variation_674_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_673, Variation_673_Arg],
    'MODE1': Union[Variation_376, Variation_376_Arg],
})
Variation_674_Arg : TypeAlias = Union[Raw, Variation_674_Arg_Group]
class Variation_674(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_673),
        ('MODE1', Variation_376),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'L': ('', Variation_673, 2, 1),
        'MODE1': ('Mode-1 Code in Octal Representation', Variation_376, 3, 5),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_673]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE1']) -> Type[Variation_376]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE1']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_673'], Type['Variation_376']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_673
        if key == 'MODE1':
            return Variation_376
        assert_never(key)

    def __init__(self, arg : Variation_674_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_673:
        ...

    @overload
    def get_item(self, name : Literal['MODE1']) -> Variation_376:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_674':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_674':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_673, Variation_673_Arg]) -> 'Variation_674':
        ...

    @overload
    def set_item(self, name : Literal['MODE1'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_674':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_675_Arg : TypeAlias = Raw
class Variation_675(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-2 code derived from the reply of the transponder',
        1: 'Smoothed Mode-2 code as provided by a local tracker n',
    }

    def __init__(self, arg : Variation_675_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_676_Arg_Group = TypedDict('Variation_676_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_675, Variation_675_Arg],
    'MODE2': Union[Variation_19, Variation_19_Arg],
})
Variation_676_Arg : TypeAlias = Union[Raw, Variation_676_Arg_Group]
class Variation_676(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_675),
        Spare(3, 1),
        ('MODE2', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'L': ('', Variation_675, 2, 1),
        'MODE2': ('Mode-2 Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_675]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE2']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE2']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_675'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_675
        if key == 'MODE2':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_676_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_675:
        ...

    @overload
    def get_item(self, name : Literal['MODE2']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_676':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_676':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_675, Variation_675_Arg]) -> 'Variation_676':
        ...

    @overload
    def set_item(self, name : Literal['MODE2'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_676':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_677_Arg = TypedDict('Variation_677_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '020': Union[Variation_635, Variation_635_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_636, Variation_636_Arg],
    '042': Union[Variation_637, Variation_637_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '170': Union[Variation_643, Variation_643_Arg],
    '070': Union[Variation_645, Variation_645_Arg],
    '202': Union[Variation_646, Variation_646_Arg],
    '090': Union[Variation_287, Variation_287_Arg],
    '100': Union[Variation_648, Variation_648_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '245': Union[Variation_650, Variation_650_Arg],
    '110': Union[Variation_288, Variation_288_Arg],
    '105': Union[Variation_288, Variation_288_Arg],
    '210': Union[Variation_651, Variation_651_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '310': Union[Variation_652, Variation_652_Arg],
    '500': Union[Variation_656, Variation_656_Arg],
    '400': Union[Variation_666, Variation_666_Arg],
    '250': Union[Variation_668, Variation_668_Arg],
    '230': Union[Variation_670, Variation_670_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '030': Union[Variation_672, Variation_672_Arg],
    '055': Union[Variation_674, Variation_674_Arg],
    '050': Union[Variation_676, Variation_676_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_677(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('020', Variation_635),
        ('140', Variation_81),
        ('041', Variation_636),
        ('042', Variation_637),
        ('161', Variation_638),
        ('170', Variation_643),
        ('070', Variation_645),
        ('202', Variation_646),
        ('090', Variation_287),
        ('100', Variation_648),
        ('220', Variation_279),
        ('245', Variation_650),
        ('110', Variation_288),
        ('105', Variation_288),
        ('210', Variation_651),
        ('300', Variation_286),
        ('310', Variation_652),
        ('500', Variation_656),
        ('400', Variation_666),
        ('250', Variation_668),
        ('230', Variation_670),
        ('260', Variation_282),
        ('030', Variation_672),
        ('055', Variation_674),
        ('050', Variation_676),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '020': (Variation_635, 0x40000000),
        '140': (Variation_81, 0x20000000),
        '041': (Variation_636, 0x10000000),
        '042': (Variation_637, 0x08000000),
        '161': (Variation_638, 0x04000000),
        '170': (Variation_643, 0x02000000),
        '070': (Variation_645, 0x01800000),
        '202': (Variation_646, 0x01400000),
        '090': (Variation_287, 0x01200000),
        '100': (Variation_648, 0x01100000),
        '220': (Variation_279, 0x01080000),
        '245': (Variation_650, 0x01040000),
        '110': (Variation_288, 0x01020000),
        '105': (Variation_288, 0x01018000),
        '210': (Variation_651, 0x01014000),
        '300': (Variation_286, 0x01012000),
        '310': (Variation_652, 0x01011000),
        '500': (Variation_656, 0x01010800),
        '400': (Variation_666, 0x01010400),
        '250': (Variation_668, 0x01010200),
        '230': (Variation_670, 0x01010180),
        '260': (Variation_282, 0x01010140),
        '030': (Variation_672, 0x01010120),
        '055': (Variation_674, 0x01010110),
        '050': (Variation_676, 0x01010108),
        'RE': (Variation_62, 0x01010104),
        'SP': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_635]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_637]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_643]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_645]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['202']) -> Type[Variation_646]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_287]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_648]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_650]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_651]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['310']) -> Type[Variation_652]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_656]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_666]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_668]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_670]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_672]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_674]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_676]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['020'], Literal['140'], Literal['041'], Literal['042'], Literal['161'], Literal['170'], Literal['070'], Literal['202'], Literal['090'], Literal['100'], Literal['220'], Literal['245'], Literal['110'], Literal['105'], Literal['210'], Literal['300'], Literal['310'], Literal['500'], Literal['400'], Literal['250'], Literal['230'], Literal['260'], Literal['030'], Literal['055'], Literal['050'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_635'], Type['Variation_81'], Type['Variation_636'], Type['Variation_637'], Type['Variation_638'], Type['Variation_643'], Type['Variation_645'], Type['Variation_646'], Type['Variation_287'], Type['Variation_648'], Type['Variation_279'], Type['Variation_650'], Type['Variation_288'], Type['Variation_288'], Type['Variation_651'], Type['Variation_286'], Type['Variation_652'], Type['Variation_656'], Type['Variation_666'], Type['Variation_668'], Type['Variation_670'], Type['Variation_282'], Type['Variation_672'], Type['Variation_674'], Type['Variation_676'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '020':
            return Variation_635
        if key == '140':
            return Variation_81
        if key == '041':
            return Variation_636
        if key == '042':
            return Variation_637
        if key == '161':
            return Variation_638
        if key == '170':
            return Variation_643
        if key == '070':
            return Variation_645
        if key == '202':
            return Variation_646
        if key == '090':
            return Variation_287
        if key == '100':
            return Variation_648
        if key == '220':
            return Variation_279
        if key == '245':
            return Variation_650
        if key == '110':
            return Variation_288
        if key == '105':
            return Variation_288
        if key == '210':
            return Variation_651
        if key == '300':
            return Variation_286
        if key == '310':
            return Variation_652
        if key == '500':
            return Variation_656
        if key == '400':
            return Variation_666
        if key == '250':
            return Variation_668
        if key == '230':
            return Variation_670
        if key == '260':
            return Variation_282
        if key == '030':
            return Variation_672
        if key == '055':
            return Variation_674
        if key == '050':
            return Variation_676
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_677_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_635, Variation_635_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_637, Variation_637_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_643, Variation_643_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_645, Variation_645_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['202'], val : Union[Variation_646, Variation_646_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_287, Variation_287_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_648, Variation_648_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_650, Variation_650_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_651, Variation_651_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['310'], val : Union[Variation_652, Variation_652_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_656, Variation_656_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_666, Variation_666_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_668, Variation_668_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_670, Variation_670_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_672, Variation_672_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_674, Variation_674_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_676, Variation_676_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_677':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_677':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['202']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['310']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_677':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_677':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_635:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_637:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_643:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_645:
        ...

    @overload
    def get_item(self, name : Literal['202']) -> Variation_646:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_287:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_648:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_650:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_651:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['310']) -> Variation_652:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_656:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_666:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_668:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_670:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_672:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_674:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_676:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_678_Arg : TypeAlias = Raw
class Variation_678(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not Coasted',
        1: 'Coasted',
    }

    def __init__(self, arg : Variation_678_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_679_Arg_Group_1 = TypedDict('Variation_679_Arg_Group_1', {
    'CNF': Union[Variation_639, Variation_639_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_678, Variation_678_Arg],
    'CDM': Union[Variation_641, Variation_641_Arg],
    'MAH': Union[Variation_642, Variation_642_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
})
Variation_679_Arg_Group_2 = TypedDict('Variation_679_Arg_Group_2', {
    'CNF': Union[Variation_639, Variation_639_Arg],
    'TRE': Union[Variation_267, Variation_267_Arg],
    'CST': Union[Variation_678, Variation_678_Arg],
    'CDM': Union[Variation_641, Variation_641_Arg],
    'MAH': Union[Variation_642, Variation_642_Arg],
    'STH': Union[Variation_271, Variation_271_Arg],
    'GHO': Union[Variation_275, Variation_275_Arg],
})
Variation_679_Arg : TypeAlias = Union[
    int,
    Variation_679_Arg_Group_1,
    Tuple[int],
    Variation_679_Arg_Group_2,
    Tuple[int,int],
]
class Variation_679(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('CNF', Variation_639),
            ('TRE', Variation_267),
            ('CST', Variation_678),
            ('CDM', Variation_641),
            ('MAH', Variation_642),
            ('STH', Variation_271),
        ],
        [
            ('GHO', Variation_275),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CNF': ('', Variation_639, 0, 1),
        'TRE': ('', Variation_267, 1, 1),
        'CST': ('', Variation_678, 2, 1),
        'CDM': ('', Variation_641, 3, 2),
        'MAH': ('', Variation_642, 5, 1),
        'STH': ('', Variation_271, 6, 1),
        'GHO': ('', Variation_275, 0, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_639]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRE']) -> Type[Variation_267]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_678]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDM']) -> Type[Variation_641]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAH']) -> Type[Variation_642]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STH']) -> Type[Variation_271]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GHO']) -> Type[Variation_275]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['CDM'], Literal['MAH'], Literal['STH'], Literal['GHO']]) -> Union[Type['Variation_639'], Type['Variation_267'], Type['Variation_678'], Type['Variation_641'], Type['Variation_642'], Type['Variation_271'], Type['Variation_275']]:
        if key == 'CNF':
            return Variation_639
        if key == 'TRE':
            return Variation_267
        if key == 'CST':
            return Variation_678
        if key == 'CDM':
            return Variation_641
        if key == 'MAH':
            return Variation_642
        if key == 'STH':
            return Variation_271
        if key == 'GHO':
            return Variation_275
        assert_never(key)

    def __init__(self, arg : Variation_679_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_679_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_679_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_639:
        ...

    @overload
    def get_item(self, name : Literal['TRE']) -> Variation_267:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_678:
        ...

    @overload
    def get_item(self, name : Literal['CDM']) -> Variation_641:
        ...

    @overload
    def get_item(self, name : Literal['MAH']) -> Variation_642:
        ...

    @overload
    def get_item(self, name : Literal['STH']) -> Variation_271:
        ...

    @overload
    def get_item(self, name : Literal['GHO']) -> Variation_275:
        ...

    def get_item(self, name : Union[Literal['CNF'], Literal['TRE'], Literal['CST'], Literal['CDM'], Literal['MAH'], Literal['STH'], Literal['GHO']]) -> Any:
        return self._get_item(name)

Variation_680_Arg = TypedDict('Variation_680_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '020': Union[Variation_635, Variation_635_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '041': Union[Variation_636, Variation_636_Arg],
    '042': Union[Variation_637, Variation_637_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '170': Union[Variation_679, Variation_679_Arg],
    '070': Union[Variation_645, Variation_645_Arg],
    '202': Union[Variation_646, Variation_646_Arg],
    '090': Union[Variation_287, Variation_287_Arg],
    '100': Union[Variation_648, Variation_648_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '245': Union[Variation_650, Variation_650_Arg],
    '110': Union[Variation_288, Variation_288_Arg],
    '105': Union[Variation_288, Variation_288_Arg],
    '210': Union[Variation_651, Variation_651_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '310': Union[Variation_652, Variation_652_Arg],
    '500': Union[Variation_656, Variation_656_Arg],
    '400': Union[Variation_666, Variation_666_Arg],
    '250': Union[Variation_668, Variation_668_Arg],
    '230': Union[Variation_670, Variation_670_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '030': Union[Variation_672, Variation_672_Arg],
    '055': Union[Variation_674, Variation_674_Arg],
    '050': Union[Variation_676, Variation_676_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_680(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('020', Variation_635),
        ('140', Variation_81),
        ('041', Variation_636),
        ('042', Variation_637),
        ('161', Variation_638),
        ('170', Variation_679),
        ('070', Variation_645),
        ('202', Variation_646),
        ('090', Variation_287),
        ('100', Variation_648),
        ('220', Variation_279),
        ('245', Variation_650),
        ('110', Variation_288),
        ('105', Variation_288),
        ('210', Variation_651),
        ('300', Variation_286),
        ('310', Variation_652),
        ('500', Variation_656),
        ('400', Variation_666),
        ('250', Variation_668),
        ('230', Variation_670),
        ('260', Variation_282),
        ('030', Variation_672),
        ('055', Variation_674),
        ('050', Variation_676),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '020': (Variation_635, 0x40000000),
        '140': (Variation_81, 0x20000000),
        '041': (Variation_636, 0x10000000),
        '042': (Variation_637, 0x08000000),
        '161': (Variation_638, 0x04000000),
        '170': (Variation_679, 0x02000000),
        '070': (Variation_645, 0x01800000),
        '202': (Variation_646, 0x01400000),
        '090': (Variation_287, 0x01200000),
        '100': (Variation_648, 0x01100000),
        '220': (Variation_279, 0x01080000),
        '245': (Variation_650, 0x01040000),
        '110': (Variation_288, 0x01020000),
        '105': (Variation_288, 0x01018000),
        '210': (Variation_651, 0x01014000),
        '300': (Variation_286, 0x01012000),
        '310': (Variation_652, 0x01011000),
        '500': (Variation_656, 0x01010800),
        '400': (Variation_666, 0x01010400),
        '250': (Variation_668, 0x01010200),
        '230': (Variation_670, 0x01010180),
        '260': (Variation_282, 0x01010140),
        '030': (Variation_672, 0x01010120),
        '055': (Variation_674, 0x01010110),
        '050': (Variation_676, 0x01010108),
        'RE': (Variation_62, 0x01010104),
        'SP': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_635]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_637]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_679]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_645]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['202']) -> Type[Variation_646]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_287]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_648]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_650]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_651]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['310']) -> Type[Variation_652]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_656]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_666]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_668]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_670]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_672]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_674]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_676]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['020'], Literal['140'], Literal['041'], Literal['042'], Literal['161'], Literal['170'], Literal['070'], Literal['202'], Literal['090'], Literal['100'], Literal['220'], Literal['245'], Literal['110'], Literal['105'], Literal['210'], Literal['300'], Literal['310'], Literal['500'], Literal['400'], Literal['250'], Literal['230'], Literal['260'], Literal['030'], Literal['055'], Literal['050'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_635'], Type['Variation_81'], Type['Variation_636'], Type['Variation_637'], Type['Variation_638'], Type['Variation_679'], Type['Variation_645'], Type['Variation_646'], Type['Variation_287'], Type['Variation_648'], Type['Variation_279'], Type['Variation_650'], Type['Variation_288'], Type['Variation_288'], Type['Variation_651'], Type['Variation_286'], Type['Variation_652'], Type['Variation_656'], Type['Variation_666'], Type['Variation_668'], Type['Variation_670'], Type['Variation_282'], Type['Variation_672'], Type['Variation_674'], Type['Variation_676'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '020':
            return Variation_635
        if key == '140':
            return Variation_81
        if key == '041':
            return Variation_636
        if key == '042':
            return Variation_637
        if key == '161':
            return Variation_638
        if key == '170':
            return Variation_679
        if key == '070':
            return Variation_645
        if key == '202':
            return Variation_646
        if key == '090':
            return Variation_287
        if key == '100':
            return Variation_648
        if key == '220':
            return Variation_279
        if key == '245':
            return Variation_650
        if key == '110':
            return Variation_288
        if key == '105':
            return Variation_288
        if key == '210':
            return Variation_651
        if key == '300':
            return Variation_286
        if key == '310':
            return Variation_652
        if key == '500':
            return Variation_656
        if key == '400':
            return Variation_666
        if key == '250':
            return Variation_668
        if key == '230':
            return Variation_670
        if key == '260':
            return Variation_282
        if key == '030':
            return Variation_672
        if key == '055':
            return Variation_674
        if key == '050':
            return Variation_676
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_680_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_635, Variation_635_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_637, Variation_637_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_679, Variation_679_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_645, Variation_645_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['202'], val : Union[Variation_646, Variation_646_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_287, Variation_287_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_648, Variation_648_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_650, Variation_650_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_651, Variation_651_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['310'], val : Union[Variation_652, Variation_652_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_656, Variation_656_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_666, Variation_666_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_668, Variation_668_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_670, Variation_670_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_672, Variation_672_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_674, Variation_674_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_676, Variation_676_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_680':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_680':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['202']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['310']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_680':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_680':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_635:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_637:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_679:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_645:
        ...

    @overload
    def get_item(self, name : Literal['202']) -> Variation_646:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_287:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_648:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_650:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_651:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['310']) -> Variation_652:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_656:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_666:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_668:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_670:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_672:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_674:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_676:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_681_Arg : TypeAlias = Raw
class Variation_681(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No differential correction (ADS-B)',
        1: 'Differential correction (ADS-B)',
    }

    def __init__(self, arg : Variation_681_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_682_Arg : TypeAlias = Raw
class Variation_682(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Ground Bit not set',
        1: 'Ground Bit set',
    }

    def __init__(self, arg : Variation_682_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_683_Arg : TypeAlias = Raw
class Variation_683(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Actual target report',
        1: 'Simulated target report',
    }

    def __init__(self, arg : Variation_683_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_684_Arg : TypeAlias = Raw
class Variation_684(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Test Target',
    }

    def __init__(self, arg : Variation_684_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_685_Arg : TypeAlias = Raw
class Variation_685(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Report from target transponder',
        1: 'Report from field monitor (fixed transponder)',
    }

    def __init__(self, arg : Variation_685_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_686_Arg : TypeAlias = Raw
class Variation_686(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Equipment capable to provide Selected Altitude',
        1: 'Equipment not capable to provide Selected Altitude',
    }

    def __init__(self, arg : Variation_686_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_687_Arg : TypeAlias = Raw
class Variation_687(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Absence of SPI',
        1: 'Special Position Identification',
    }

    def __init__(self, arg : Variation_687_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_688_Arg : TypeAlias = Raw
class Variation_688(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'Non unique address',
        1: '24-Bit ICAO address',
        2: 'Surface vehicle address',
        3: 'Anonymous address',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_688_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_689_Arg : TypeAlias = Raw
class Variation_689(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'Unknown',
        1: '25 ft',
        2: '100 ft',
    }

    def __init__(self, arg : Variation_689_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_690_Arg_Group = TypedDict('Variation_690_Arg_Group', {
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'RAB': Union[Variation_685, Variation_685_Arg],
    'SAA': Union[Variation_686, Variation_686_Arg],
    'SPI': Union[Variation_687, Variation_687_Arg],
    'ATP': Union[Variation_688, Variation_688_Arg],
    'ARC': Union[Variation_689, Variation_689_Arg],
})
Variation_690_Arg : TypeAlias = Union[Raw, Variation_690_Arg_Group]
class Variation_690(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('DCR', Variation_681),
        ('GBS', Variation_682),
        ('SIM', Variation_683),
        ('TST', Variation_684),
        ('RAB', Variation_685),
        ('SAA', Variation_686),
        ('SPI', Variation_687),
        Spare(7, 1),
        ('ATP', Variation_688),
        ('ARC', Variation_689),
        Spare(5, 3),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DCR': ('Differential Correction', Variation_681, 0, 1),
        'GBS': ('Ground Bit Setting', Variation_682, 1, 1),
        'SIM': ('Simulated Target', Variation_683, 2, 1),
        'TST': ('Test Target', Variation_684, 3, 1),
        'RAB': ('Report Type', Variation_685, 4, 1),
        'SAA': ('Selected Altitude Available', Variation_686, 5, 1),
        'SPI': ('Special Position Identification', Variation_687, 6, 1),
        'ATP': ('Address Type', Variation_688, 8, 3),
        'ARC': ('Altitude Reporting Capability', Variation_689, 11, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DCR']) -> Type[Variation_681]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_682]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_683]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_684]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_685]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAA']) -> Type[Variation_686]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_687]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ATP']) -> Type[Variation_688]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_689]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['RAB'], Literal['SAA'], Literal['SPI'], Literal['ATP'], Literal['ARC']]) -> Union[Type['Variation_681'], Type['Variation_682'], Type['Variation_683'], Type['Variation_684'], Type['Variation_685'], Type['Variation_686'], Type['Variation_687'], Type['Variation_688'], Type['Variation_689']]:
        if key == 'DCR':
            return Variation_681
        if key == 'GBS':
            return Variation_682
        if key == 'SIM':
            return Variation_683
        if key == 'TST':
            return Variation_684
        if key == 'RAB':
            return Variation_685
        if key == 'SAA':
            return Variation_686
        if key == 'SPI':
            return Variation_687
        if key == 'ATP':
            return Variation_688
        if key == 'ARC':
            return Variation_689
        assert_never(key)

    def __init__(self, arg : Variation_690_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['DCR']) -> Variation_681:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_682:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_683:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_684:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_685:
        ...

    @overload
    def get_item(self, name : Literal['SAA']) -> Variation_686:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_687:
        ...

    @overload
    def get_item(self, name : Literal['ATP']) -> Variation_688:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_689:
        ...

    def get_item(self, name : Union[Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['RAB'], Literal['SAA'], Literal['SPI'], Literal['ATP'], Literal['ARC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['DCR'], val : Union[Variation_681, Variation_681_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['GBS'], val : Union[Variation_682, Variation_682_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['SIM'], val : Union[Variation_683, Variation_683_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['TST'], val : Union[Variation_684, Variation_684_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['RAB'], val : Union[Variation_685, Variation_685_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['SAA'], val : Union[Variation_686, Variation_686_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['SPI'], val : Union[Variation_687, Variation_687_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['ATP'], val : Union[Variation_688, Variation_688_Arg]) -> 'Variation_690':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_689, Variation_689_Arg]) -> 'Variation_690':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_691_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_691(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Signed', 180.0, 23, '°')

    def __init__(self, arg : Variation_691_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_692_Arg_Group = TypedDict('Variation_692_Arg_Group', {
    'LAT': Union[Variation_691, Variation_691_Arg],
    'LON': Union[Variation_691, Variation_691_Arg],
})
Variation_692_Arg : TypeAlias = Union[Raw, Variation_692_Arg_Group]
class Variation_692(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('LAT', Variation_691),
        ('LON', Variation_691),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude', Variation_691, 0, 24),
        'LON': ('Longitude', Variation_691, 24, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_691]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_691'], Type['Variation_691']]:
        if key == 'LAT':
            return Variation_691
        if key == 'LON':
            return Variation_691
        assert_never(key)

    def __init__(self, arg : Variation_692_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_691:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_692':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_692':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_693_Arg : TypeAlias = Raw
class Variation_693(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'ACAS not operational',
        2: 'ACAS operartional',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_693_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_694_Arg : TypeAlias = Raw
class Variation_694(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Multiple Navigation not operational',
        2: 'Multiple Navigation operartional',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_694_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_695_Arg : TypeAlias = Raw
class Variation_695(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Differencial Correction',
        2: 'NO Differencial Correction',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_695_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_696_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_696(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4
    quantity = Quantity('Signed', 1.0, 0, '')

    def __init__(self, arg : Variation_696_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_697_Arg_Group = TypedDict('Variation_697_Arg_Group', {
    'AC': Union[Variation_693, Variation_693_Arg],
    'MN': Union[Variation_694, Variation_694_Arg],
    'DC': Union[Variation_695, Variation_695_Arg],
    'PA': Union[Variation_696, Variation_696_Arg],
})
Variation_697_Arg : TypeAlias = Union[Raw, Variation_697_Arg_Group]
class Variation_697(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('AC', Variation_693),
        ('MN', Variation_694),
        ('DC', Variation_695),
        Spare(6, 6),
        ('PA', Variation_696),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AC': ('ACAS Capabilities', Variation_693, 0, 2),
        'MN': ('Multiple Navigation Aids', Variation_694, 2, 2),
        'DC': ('Differencial Correction', Variation_695, 4, 2),
        'PA': ('Position Accuracy', Variation_696, 12, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AC']) -> Type[Variation_693]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MN']) -> Type[Variation_694]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DC']) -> Type[Variation_695]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PA']) -> Type[Variation_696]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AC'], Literal['MN'], Literal['DC'], Literal['PA']]) -> Union[Type['Variation_693'], Type['Variation_694'], Type['Variation_695'], Type['Variation_696']]:
        if key == 'AC':
            return Variation_693
        if key == 'MN':
            return Variation_694
        if key == 'DC':
            return Variation_695
        if key == 'PA':
            return Variation_696
        assert_never(key)

    def __init__(self, arg : Variation_697_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AC']) -> Variation_693:
        ...

    @overload
    def get_item(self, name : Literal['MN']) -> Variation_694:
        ...

    @overload
    def get_item(self, name : Literal['DC']) -> Variation_695:
        ...

    @overload
    def get_item(self, name : Literal['PA']) -> Variation_696:
        ...

    def get_item(self, name : Union[Literal['AC'], Literal['MN'], Literal['DC'], Literal['PA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AC'], val : Union[Variation_693, Variation_693_Arg]) -> 'Variation_697':
        ...

    @overload
    def set_item(self, name : Literal['MN'], val : Union[Variation_694, Variation_694_Arg]) -> 'Variation_697':
        ...

    @overload
    def set_item(self, name : Literal['DC'], val : Union[Variation_695, Variation_695_Arg]) -> 'Variation_697':
        ...

    @overload
    def set_item(self, name : Literal['PA'], val : Union[Variation_696, Variation_696_Arg]) -> 'Variation_697':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_698_Arg : TypeAlias = Raw
class Variation_698(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Unknown',
        1: 'Aircraft equiped with CDTI',
    }

    def __init__(self, arg : Variation_698_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_699_Arg : TypeAlias = Raw
class Variation_699(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Not used',
        1: 'Used',
    }

    def __init__(self, arg : Variation_699_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_700_Arg : TypeAlias = Raw
class Variation_700(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Not used',
        1: 'Used',
    }

    def __init__(self, arg : Variation_700_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_701_Arg : TypeAlias = Raw
class Variation_701(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Not used',
        1: 'Used',
    }

    def __init__(self, arg : Variation_701_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_702_Arg : TypeAlias = Raw
class Variation_702(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Not used',
        1: 'Used',
    }

    def __init__(self, arg : Variation_702_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_703_Arg_Group = TypedDict('Variation_703_Arg_Group', {
    'DTI': Union[Variation_698, Variation_698_Arg],
    'MDS': Union[Variation_699, Variation_699_Arg],
    'UAT': Union[Variation_700, Variation_700_Arg],
    'VDL': Union[Variation_701, Variation_701_Arg],
    'OTR': Union[Variation_702, Variation_702_Arg],
})
Variation_703_Arg : TypeAlias = Union[Raw, Variation_703_Arg_Group]
class Variation_703(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 3),
        ('DTI', Variation_698),
        ('MDS', Variation_699),
        ('UAT', Variation_700),
        ('VDL', Variation_701),
        ('OTR', Variation_702),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DTI': ('Cockpit Display of Traffic Information', Variation_698, 3, 1),
        'MDS': ('Mode-S Extended Squitter', Variation_699, 4, 1),
        'UAT': ('UAT', Variation_700, 5, 1),
        'VDL': ('VDL Mode 4', Variation_701, 6, 1),
        'OTR': ('Other Technology', Variation_702, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DTI']) -> Type[Variation_698]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_699]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_700]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VDL']) -> Type[Variation_701]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OTR']) -> Type[Variation_702]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DTI'], Literal['MDS'], Literal['UAT'], Literal['VDL'], Literal['OTR']]) -> Union[Type['Variation_698'], Type['Variation_699'], Type['Variation_700'], Type['Variation_701'], Type['Variation_702']]:
        if key == 'DTI':
            return Variation_698
        if key == 'MDS':
            return Variation_699
        if key == 'UAT':
            return Variation_700
        if key == 'VDL':
            return Variation_701
        if key == 'OTR':
            return Variation_702
        assert_never(key)

    def __init__(self, arg : Variation_703_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['DTI']) -> Variation_698:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_699:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_700:
        ...

    @overload
    def get_item(self, name : Literal['VDL']) -> Variation_701:
        ...

    @overload
    def get_item(self, name : Literal['OTR']) -> Variation_702:
        ...

    def get_item(self, name : Union[Literal['DTI'], Literal['MDS'], Literal['UAT'], Literal['VDL'], Literal['OTR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['DTI'], val : Union[Variation_698, Variation_698_Arg]) -> 'Variation_703':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_699, Variation_699_Arg]) -> 'Variation_703':
        ...

    @overload
    def set_item(self, name : Literal['UAT'], val : Union[Variation_700, Variation_700_Arg]) -> 'Variation_703':
        ...

    @overload
    def set_item(self, name : Literal['VDL'], val : Union[Variation_701, Variation_701_Arg]) -> 'Variation_703':
        ...

    @overload
    def set_item(self, name : Literal['OTR'], val : Union[Variation_702, Variation_702_Arg]) -> 'Variation_703':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_704_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_704(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0e-2, 0, '°')

    def __init__(self, arg : Variation_704_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_705_Arg : TypeAlias = Raw
class Variation_705(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Air Speed = IAS, LSB (Bit-1) = 2 -14 NM/s',
        1: 'Air Speed = Mach, LSB (Bit-1) = 0.001',
    }

    def __init__(self, arg : Variation_705_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_706_Arg_Group = TypedDict('Variation_706_Arg_Group', {
    'IM': Union[Variation_705, Variation_705_Arg],
    'AS': Union[Variation_338, Variation_338_Arg],
})
Variation_706_Arg : TypeAlias = Union[Raw, Variation_706_Arg_Group]
class Variation_706(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('IM', Variation_705),
        ('AS', Variation_338),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'IM': ('', Variation_705, 0, 1),
        'AS': ('Air Speed (IAS or Mach)', Variation_338, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['IM']) -> Type[Variation_705]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AS']) -> Type[Variation_338]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['IM'], Literal['AS']]) -> Union[Type['Variation_705'], Type['Variation_338']]:
        if key == 'IM':
            return Variation_705
        if key == 'AS':
            return Variation_338
        assert_never(key)

    def __init__(self, arg : Variation_706_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['IM']) -> Variation_705:
        ...

    @overload
    def get_item(self, name : Literal['AS']) -> Variation_338:
        ...

    def get_item(self, name : Union[Literal['IM'], Literal['AS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['IM'], val : Union[Variation_705, Variation_705_Arg]) -> 'Variation_706':
        ...

    @overload
    def set_item(self, name : Literal['AS'], val : Union[Variation_338, Variation_338_Arg]) -> 'Variation_706':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_707_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['kt']]]
class Variation_707(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, 'kt')

    def __init__(self, arg : Variation_707_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_708_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM/s']]]
class Variation_708(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 14, 'NM/s')

    def __init__(self, arg : Variation_708_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_709_Arg_Group = TypedDict('Variation_709_Arg_Group', {
    'GS': Union[Variation_708, Variation_708_Arg],
    'TA': Union[Variation_14, Variation_14_Arg],
})
Variation_709_Arg : TypeAlias = Union[Raw, Variation_709_Arg_Group]
class Variation_709(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('GS', Variation_708),
        ('TA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GS': ('Ground Speed in Two\'s Complement Form Referenced to WGS84', Variation_708, 0, 16),
        'TA': ('Track Angle', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GS']) -> Type[Variation_708]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GS'], Literal['TA']]) -> Union[Type['Variation_708'], Type['Variation_14']]:
        if key == 'GS':
            return Variation_708
        if key == 'TA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_709_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GS']) -> Variation_708:
        ...

    @overload
    def get_item(self, name : Literal['TA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['GS'], Literal['TA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GS'], val : Union[Variation_708, Variation_708_Arg]) -> 'Variation_709':
        ...

    @overload
    def set_item(self, name : Literal['TA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_709':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_710_Arg : TypeAlias = Raw
class Variation_710(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Not available',
        1: 'Left',
        2: 'Right',
        3: 'Straight',
    }

    def __init__(self, arg : Variation_710_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_711_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°/s']]]
class Variation_711(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    quantity = Quantity('Signed', 1.0, 2, '°/s')

    def __init__(self, arg : Variation_711_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_712_Arg_Group_1 = TypedDict('Variation_712_Arg_Group_1', {
    'TI': Union[Variation_710, Variation_710_Arg],
})
Variation_712_Arg_Group_2 = TypedDict('Variation_712_Arg_Group_2', {
    'TI': Union[Variation_710, Variation_710_Arg],
    'ROT': Union[Variation_711, Variation_711_Arg],
})
Variation_712_Arg : TypeAlias = Union[
    int,
    Variation_712_Arg_Group_1,
    Tuple[int],
    Variation_712_Arg_Group_2,
    Tuple[int,int],
]
class Variation_712(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('TI', Variation_710),
            Spare(2, 5),
        ],
        [
            ('ROT', Variation_711),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TI': ('Turn Indicator', Variation_710, 0, 2),
        'ROT': ('Rate of Turn', Variation_711, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TI']) -> Type[Variation_710]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ROT']) -> Type[Variation_711]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TI'], Literal['ROT']]) -> Union[Type['Variation_710'], Type['Variation_711']]:
        if key == 'TI':
            return Variation_710
        if key == 'ROT':
            return Variation_711
        assert_never(key)

    def __init__(self, arg : Variation_712_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_712_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_712_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TI']) -> Variation_710:
        ...

    @overload
    def get_item(self, name : Literal['ROT']) -> Variation_711:
        ...

    def get_item(self, name : Union[Literal['TI'], Literal['ROT']]) -> Any:
        return self._get_item(name)

Variation_713_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_713(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 8, 's')

    def __init__(self, arg : Variation_713_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_714_Arg : TypeAlias = Raw
class Variation_714(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'No emergency / not reported',
        1: 'General emergency',
        2: 'Lifeguard / medical',
        3: 'Minimum fuel',
        4: 'No communications',
        5: 'Unlawful interference',
    }

    def __init__(self, arg : Variation_714_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_715_Arg : TypeAlias = Raw
class Variation_715(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Light aircraft <= 7000 kg',
        2: 'Reserved',
        3: '7000 kg < Medium aircraft < 136000 kg',
        4: 'Reserved',
        5: '136000 kg <= Heavy aircraft',
        6: 'Highly manoeuvrable (5g acceleration capability) and high speed (>400 knots cruise)',
        7: 'Reserved',
        8: 'Reserved',
        9: 'Reserved',
        10: 'Rotocraft',
        11: 'Glider / sailplane',
        12: 'Lighter-than-air',
        13: 'Unmanned aerial vehicle',
        14: 'Space / transatmospheric vehicle',
        15: 'Ultralight / handglider / paraglider',
        16: 'Parachutist / skydiver',
        17: 'Reserved',
        18: 'Reserved',
        19: 'Reserved',
        20: 'Surface emergency vehicle',
        21: 'Surface service vehicle',
        22: 'Fixed ground or tethered obstruction',
        23: 'Reserved',
        24: 'Reserved',
    }

    def __init__(self, arg : Variation_715_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_716_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_716(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, '°')

    def __init__(self, arg : Variation_716_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_717_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°C']]]
class Variation_717(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 2, '°C')

    def __init__(self, arg : Variation_717_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_718_Arg = TypedDict('Variation_718_Arg', {
    'WS': Union[Variation_707, Variation_707_Arg],
    'WD': Union[Variation_716, Variation_716_Arg],
    'TMP': Union[Variation_717, Variation_717_Arg],
    'TRB': Union[Variation_0, Variation_0_Arg],
}, total=False)
class Variation_718(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('WS', Variation_707),
        ('WD', Variation_716),
        ('TMP', Variation_717),
        ('TRB', Variation_0),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'WS': (Variation_707, 0x80),
        'WD': (Variation_716, 0x40),
        'TMP': (Variation_717, 0x20),
        'TRB': (Variation_0, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['WS']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WD']) -> Type[Variation_716]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TMP']) -> Type[Variation_717]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRB']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['WS'], Literal['WD'], Literal['TMP'], Literal['TRB']]) -> Union[Type['Variation_707'], Type['Variation_716'], Type['Variation_717'], Type['Variation_0']]:
        if key == 'WS':
            return Variation_707
        if key == 'WD':
            return Variation_716
        if key == 'TMP':
            return Variation_717
        if key == 'TRB':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Optional[Variation_718_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['WS'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_718':
        ...

    @overload
    def set_item(self, name : Literal['WD'], val : Union[Variation_716, Variation_716_Arg]) -> 'Variation_718':
        ...

    @overload
    def set_item(self, name : Literal['TMP'], val : Union[Variation_717, Variation_717_Arg]) -> 'Variation_718':
        ...

    @overload
    def set_item(self, name : Literal['TRB'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_718':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['WS']) -> 'Variation_718':
        ...

    @overload
    def del_item(self, name : Literal['WD']) -> 'Variation_718':
        ...

    @overload
    def del_item(self, name : Literal['TMP']) -> 'Variation_718':
        ...

    @overload
    def del_item(self, name : Literal['TRB']) -> 'Variation_718':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['WS']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['WD']) -> Variation_716:
        ...

    @overload
    def get_item(self, name : Literal['TMP']) -> Variation_717:
        ...

    @overload
    def get_item(self, name : Literal['TRB']) -> Variation_0:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_719_Arg : TypeAlias = Raw
class Variation_719(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No source information provided',
        1: 'Source Information provided',
    }

    def __init__(self, arg : Variation_719_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_720_Arg : TypeAlias = Raw
class Variation_720(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Aircraft Altitude (Holding Altitude)',
        2: 'MCP/FCU Selected Altitude',
        3: 'FMS Selected Altitude',
    }

    def __init__(self, arg : Variation_720_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_721_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_721(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 13
    quantity = Quantity('Signed', 25.0, 0, 'ft')

    def __init__(self, arg : Variation_721_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_722_Arg_Group = TypedDict('Variation_722_Arg_Group', {
    'SAS': Union[Variation_719, Variation_719_Arg],
    'SRC': Union[Variation_720, Variation_720_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_722_Arg : TypeAlias = Union[Raw, Variation_722_Arg_Group]
class Variation_722(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAS', Variation_719),
        ('SRC', Variation_720),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAS': ('Source Availability', Variation_719, 0, 1),
        'SRC': ('Source', Variation_720, 1, 2),
        'ALT': ('Altitude', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAS']) -> Type[Variation_719]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_720]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAS'], Literal['SRC'], Literal['ALT']]) -> Union[Type['Variation_719'], Type['Variation_720'], Type['Variation_721']]:
        if key == 'SAS':
            return Variation_719
        if key == 'SRC':
            return Variation_720
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_722_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAS']) -> Variation_719:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_720:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['SAS'], Literal['SRC'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAS'], val : Union[Variation_719, Variation_719_Arg]) -> 'Variation_722':
        ...

    @overload
    def set_item(self, name : Literal['SRC'], val : Union[Variation_720, Variation_720_Arg]) -> 'Variation_722':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_722':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_723_Arg : TypeAlias = Raw
class Variation_723(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Not active',
        1: 'Active',
    }

    def __init__(self, arg : Variation_723_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_724_Arg : TypeAlias = Raw
class Variation_724(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Not active',
        1: 'Active',
    }

    def __init__(self, arg : Variation_724_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_725_Arg : TypeAlias = Raw
class Variation_725(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not active',
        1: 'Active',
    }

    def __init__(self, arg : Variation_725_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_726_Arg_Group = TypedDict('Variation_726_Arg_Group', {
    'MV': Union[Variation_723, Variation_723_Arg],
    'AH': Union[Variation_724, Variation_724_Arg],
    'AM': Union[Variation_725, Variation_725_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_726_Arg : TypeAlias = Union[Raw, Variation_726_Arg_Group]
class Variation_726(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('MV', Variation_723),
        ('AH', Variation_724),
        ('AM', Variation_725),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MV': ('Manage Vertical Mode', Variation_723, 0, 1),
        'AH': ('Altitude Hold Mode', Variation_724, 1, 1),
        'AM': ('Approach Mode', Variation_725, 2, 1),
        'ALT': ('Altitude', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MV']) -> Type[Variation_723]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AH']) -> Type[Variation_724]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AM']) -> Type[Variation_725]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Union[Type['Variation_723'], Type['Variation_724'], Type['Variation_725'], Type['Variation_721']]:
        if key == 'MV':
            return Variation_723
        if key == 'AH':
            return Variation_724
        if key == 'AM':
            return Variation_725
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_726_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MV']) -> Variation_723:
        ...

    @overload
    def get_item(self, name : Literal['AH']) -> Variation_724:
        ...

    @overload
    def get_item(self, name : Literal['AM']) -> Variation_725:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MV'], val : Union[Variation_723, Variation_723_Arg]) -> 'Variation_726':
        ...

    @overload
    def set_item(self, name : Literal['AH'], val : Union[Variation_724, Variation_724_Arg]) -> 'Variation_726':
        ...

    @overload
    def set_item(self, name : Literal['AM'], val : Union[Variation_725, Variation_725_Arg]) -> 'Variation_726':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_726':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_727_Arg : TypeAlias = Raw
class Variation_727(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Trajectory Intent Data is available for this aircraft',
        1: 'Trajectory Intent Data is not available for this aircraft',
    }

    def __init__(self, arg : Variation_727_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_728_Arg : TypeAlias = Raw
class Variation_728(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Trajectory Intent Data is valid',
        1: 'Trajectory Intent Data is not valid',
    }

    def __init__(self, arg : Variation_728_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_729_Arg_Group_1 = TypedDict('Variation_729_Arg_Group_1', {
    'NAV': Union[Variation_727, Variation_727_Arg],
    'NVB': Union[Variation_728, Variation_728_Arg],
})
Variation_729_Arg : TypeAlias = Union[
    int,
    Variation_729_Arg_Group_1,
    Tuple[int],
]
class Variation_729(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('NAV', Variation_727),
            ('NVB', Variation_728),
            Spare(2, 5),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NAV': ('', Variation_727, 0, 1),
        'NVB': ('', Variation_728, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NAV']) -> Type[Variation_727]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NVB']) -> Type[Variation_728]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NAV'], Literal['NVB']]) -> Union[Type['Variation_727'], Type['Variation_728']]:
        if key == 'NAV':
            return Variation_727
        if key == 'NVB':
            return Variation_728
        assert_never(key)

    def __init__(self, arg : Variation_729_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_729_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NAV']) -> Variation_727:
        ...

    @overload
    def get_item(self, name : Literal['NVB']) -> Variation_728:
        ...

    def get_item(self, name : Union[Literal['NAV'], Literal['NVB']]) -> Any:
        return self._get_item(name)

Variation_730_Arg : TypeAlias = Raw
class Variation_730(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'TCP number available',
        1: 'TCP number not available',
    }

    def __init__(self, arg : Variation_730_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_731_Arg : TypeAlias = Raw
class Variation_731(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'TCP compliance',
        1: 'TCP non-compliance',
    }

    def __init__(self, arg : Variation_731_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_732_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_732(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 10.0, 0, 'ft')

    def __init__(self, arg : Variation_732_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_733_Arg : TypeAlias = Raw
class Variation_733(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 4
    table = {
        0: 'Unknown',
        1: 'Fly by waypoint (LT)',
        2: 'Fly over waypoint (LT)',
        3: 'Hold pattern (LT)',
        4: 'Procedure hold (LT)',
        5: 'Procedure turn (LT)',
        6: 'RF leg (LT)',
        7: 'Top of climb (VT)',
        8: 'Top of descent (VT)',
        9: 'Start of level (VT)',
        10: 'Cross-over altitude (VT)',
        11: 'Transition altitude (VT)',
    }

    def __init__(self, arg : Variation_733_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_734_Arg : TypeAlias = Raw
class Variation_734(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'N/A',
        1: 'Turn right',
        2: 'Turn left',
        3: 'No turn',
    }

    def __init__(self, arg : Variation_734_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_735_Arg : TypeAlias = Raw
class Variation_735(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'TTR not available',
        1: 'TTR available',
    }

    def __init__(self, arg : Variation_735_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_736_Arg : TypeAlias = Raw
class Variation_736(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'TOV available',
        1: 'TOV not available',
    }

    def __init__(self, arg : Variation_736_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_737_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_737(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 24
    quantity = Quantity('Unsigned', 1.0, 0, 's')

    def __init__(self, arg : Variation_737_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_738_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_738(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0e-2, 0, 'NM')

    def __init__(self, arg : Variation_738_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_739_Arg_Group = TypedDict('Variation_739_Arg_Group', {
    'TCA': Union[Variation_730, Variation_730_Arg],
    'NC': Union[Variation_731, Variation_731_Arg],
    'TCPN': Union[Variation_377, Variation_377_Arg],
    'ALT': Union[Variation_732, Variation_732_Arg],
    'LAT': Union[Variation_691, Variation_691_Arg],
    'LON': Union[Variation_691, Variation_691_Arg],
    'PT': Union[Variation_733, Variation_733_Arg],
    'TD': Union[Variation_734, Variation_734_Arg],
    'TRA': Union[Variation_735, Variation_735_Arg],
    'TOA': Union[Variation_736, Variation_736_Arg],
    'TOV': Union[Variation_737, Variation_737_Arg],
    'TTR': Union[Variation_738, Variation_738_Arg],
})
Variation_739_Arg : TypeAlias = Union[Raw, Variation_739_Arg_Group]
class Variation_739(Group):
    variation = 'Group'

    bit_size = 120

    subitems_list = [
        ('TCA', Variation_730),
        ('NC', Variation_731),
        ('TCPN', Variation_377),
        ('ALT', Variation_732),
        ('LAT', Variation_691),
        ('LON', Variation_691),
        ('PT', Variation_733),
        ('TD', Variation_734),
        ('TRA', Variation_735),
        ('TOA', Variation_736),
        ('TOV', Variation_737),
        ('TTR', Variation_738),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TCA': ('', Variation_730, 0, 1),
        'NC': ('', Variation_731, 1, 1),
        'TCPN': ('', Variation_377, 2, 6),
        'ALT': ('Altitude in Two\'s Complement Form', Variation_732, 8, 16),
        'LAT': ('In WGS.84 in Two\'s Complement', Variation_691, 24, 24),
        'LON': ('In WGS.84 in Two\'s Complement', Variation_691, 48, 24),
        'PT': ('Point Type', Variation_733, 72, 4),
        'TD': ('', Variation_734, 76, 2),
        'TRA': ('', Variation_735, 78, 1),
        'TOA': ('', Variation_736, 79, 1),
        'TOV': ('Time Over Point', Variation_737, 80, 24),
        'TTR': ('TCP Turn Radius', Variation_738, 104, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TCA']) -> Type[Variation_730]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NC']) -> Type[Variation_731]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TCPN']) -> Type[Variation_377]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_732]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PT']) -> Type[Variation_733]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TD']) -> Type[Variation_734]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRA']) -> Type[Variation_735]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOA']) -> Type[Variation_736]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOV']) -> Type[Variation_737]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTR']) -> Type[Variation_738]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TCA'], Literal['NC'], Literal['TCPN'], Literal['ALT'], Literal['LAT'], Literal['LON'], Literal['PT'], Literal['TD'], Literal['TRA'], Literal['TOA'], Literal['TOV'], Literal['TTR']]) -> Union[Type['Variation_730'], Type['Variation_731'], Type['Variation_377'], Type['Variation_732'], Type['Variation_691'], Type['Variation_691'], Type['Variation_733'], Type['Variation_734'], Type['Variation_735'], Type['Variation_736'], Type['Variation_737'], Type['Variation_738']]:
        if key == 'TCA':
            return Variation_730
        if key == 'NC':
            return Variation_731
        if key == 'TCPN':
            return Variation_377
        if key == 'ALT':
            return Variation_732
        if key == 'LAT':
            return Variation_691
        if key == 'LON':
            return Variation_691
        if key == 'PT':
            return Variation_733
        if key == 'TD':
            return Variation_734
        if key == 'TRA':
            return Variation_735
        if key == 'TOA':
            return Variation_736
        if key == 'TOV':
            return Variation_737
        if key == 'TTR':
            return Variation_738
        assert_never(key)

    def __init__(self, arg : Variation_739_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TCA']) -> Variation_730:
        ...

    @overload
    def get_item(self, name : Literal['NC']) -> Variation_731:
        ...

    @overload
    def get_item(self, name : Literal['TCPN']) -> Variation_377:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_732:
        ...

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['PT']) -> Variation_733:
        ...

    @overload
    def get_item(self, name : Literal['TD']) -> Variation_734:
        ...

    @overload
    def get_item(self, name : Literal['TRA']) -> Variation_735:
        ...

    @overload
    def get_item(self, name : Literal['TOA']) -> Variation_736:
        ...

    @overload
    def get_item(self, name : Literal['TOV']) -> Variation_737:
        ...

    @overload
    def get_item(self, name : Literal['TTR']) -> Variation_738:
        ...

    def get_item(self, name : Union[Literal['TCA'], Literal['NC'], Literal['TCPN'], Literal['ALT'], Literal['LAT'], Literal['LON'], Literal['PT'], Literal['TD'], Literal['TRA'], Literal['TOA'], Literal['TOV'], Literal['TTR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TCA'], val : Union[Variation_730, Variation_730_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['NC'], val : Union[Variation_731, Variation_731_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TCPN'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_732, Variation_732_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['PT'], val : Union[Variation_733, Variation_733_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TD'], val : Union[Variation_734, Variation_734_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TRA'], val : Union[Variation_735, Variation_735_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TOA'], val : Union[Variation_736, Variation_736_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TOV'], val : Union[Variation_737, Variation_737_Arg]) -> 'Variation_739':
        ...

    @overload
    def set_item(self, name : Literal['TTR'], val : Union[Variation_738, Variation_738_Arg]) -> 'Variation_739':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_740_Arg : TypeAlias = List[Union[Variation_739, Variation_739_Arg]]
class Variation_740(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 120
    variation_type = Variation_739

    @classmethod
    def spec(cls) -> Type[Variation_739]:
        return Variation_739

    def __init__(self, arg : List[Union[Variation_739, Variation_739_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_741_Arg = TypedDict('Variation_741_Arg', {
    'TIS': Union[Variation_729, Variation_729_Arg],
    'TID': Union[Variation_740, Variation_740_Arg],
}, total=False)
class Variation_741(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('TIS', Variation_729),
        ('TID', Variation_740),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'TIS': (Variation_729, 0x80),
        'TID': (Variation_740, 0x40),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TIS']) -> Type[Variation_729]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_740]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TIS'], Literal['TID']]) -> Union[Type['Variation_729'], Type['Variation_740']]:
        if key == 'TIS':
            return Variation_729
        if key == 'TID':
            return Variation_740
        assert_never(key)

    def __init__(self, arg : Optional[Variation_741_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['TIS'], val : Union[Variation_729, Variation_729_Arg]) -> 'Variation_741':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_740, Variation_740_Arg]) -> 'Variation_741':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['TIS']) -> 'Variation_741':
        ...

    @overload
    def del_item(self, name : Literal['TID']) -> 'Variation_741':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['TIS']) -> Variation_729:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_740:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_742_Arg = TypedDict('Variation_742_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_690, Variation_690_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_697, Variation_697_Arg],
    '210': Union[Variation_703, Variation_703_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_707, Variation_707_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '155': Union[Variation_365, Variation_365_Arg],
    '157': Union[Variation_365, Variation_365_Arg],
    '160': Union[Variation_709, Variation_709_Arg],
    '165': Union[Variation_712, Variation_712_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '095': Union[Variation_0, Variation_0_Arg],
    '032': Union[Variation_713, Variation_713_Arg],
    '200': Union[Variation_714, Variation_714_Arg],
    '020': Union[Variation_715, Variation_715_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_722, Variation_722_Arg],
    '148': Union[Variation_726, Variation_726_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_742(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_690),
        ('030', Variation_81),
        ('130', Variation_692),
        ('080', Variation_279),
        ('140', Variation_288),
        ('090', Variation_697),
        ('210', Variation_703),
        ('230', Variation_704),
        ('145', Variation_361),
        ('150', Variation_706),
        ('151', Variation_707),
        ('152', Variation_14),
        ('155', Variation_365),
        ('157', Variation_365),
        ('160', Variation_709),
        ('165', Variation_712),
        ('170', Variation_201),
        ('095', Variation_0),
        ('032', Variation_713),
        ('200', Variation_714),
        ('020', Variation_715),
        ('220', Variation_718),
        ('146', Variation_722),
        ('148', Variation_726),
        ('110', Variation_741),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '040': (Variation_690, 0x4000000000),
        '030': (Variation_81, 0x2000000000),
        '130': (Variation_692, 0x1000000000),
        '080': (Variation_279, 0x0800000000),
        '140': (Variation_288, 0x0400000000),
        '090': (Variation_697, 0x0200000000),
        '210': (Variation_703, 0x0180000000),
        '230': (Variation_704, 0x0140000000),
        '145': (Variation_361, 0x0120000000),
        '150': (Variation_706, 0x0110000000),
        '151': (Variation_707, 0x0108000000),
        '152': (Variation_14, 0x0104000000),
        '155': (Variation_365, 0x0102000000),
        '157': (Variation_365, 0x0101800000),
        '160': (Variation_709, 0x0101400000),
        '165': (Variation_712, 0x0101200000),
        '170': (Variation_201, 0x0101100000),
        '095': (Variation_0, 0x0101080000),
        '032': (Variation_713, 0x0101040000),
        '200': (Variation_714, 0x0101020000),
        '020': (Variation_715, 0x0101018000),
        '220': (Variation_718, 0x0101014000),
        '146': (Variation_722, 0x0101012000),
        '148': (Variation_726, 0x0101011000),
        '110': (Variation_741, 0x0101010800),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_690]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_697]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_703]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_709]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_712]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['095']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['032']) -> Type[Variation_713]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_714]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_715]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_722]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_726]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['030'], Literal['130'], Literal['080'], Literal['140'], Literal['090'], Literal['210'], Literal['230'], Literal['145'], Literal['150'], Literal['151'], Literal['152'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['170'], Literal['095'], Literal['032'], Literal['200'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_690'], Type['Variation_81'], Type['Variation_692'], Type['Variation_279'], Type['Variation_288'], Type['Variation_697'], Type['Variation_703'], Type['Variation_704'], Type['Variation_361'], Type['Variation_706'], Type['Variation_707'], Type['Variation_14'], Type['Variation_365'], Type['Variation_365'], Type['Variation_709'], Type['Variation_712'], Type['Variation_201'], Type['Variation_0'], Type['Variation_713'], Type['Variation_714'], Type['Variation_715'], Type['Variation_718'], Type['Variation_722'], Type['Variation_726'], Type['Variation_741'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_690
        if key == '030':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '080':
            return Variation_279
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_697
        if key == '210':
            return Variation_703
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_707
        if key == '152':
            return Variation_14
        if key == '155':
            return Variation_365
        if key == '157':
            return Variation_365
        if key == '160':
            return Variation_709
        if key == '165':
            return Variation_712
        if key == '170':
            return Variation_201
        if key == '095':
            return Variation_0
        if key == '032':
            return Variation_713
        if key == '200':
            return Variation_714
        if key == '020':
            return Variation_715
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_722
        if key == '148':
            return Variation_726
        if key == '110':
            return Variation_741
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_742_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_690, Variation_690_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_697, Variation_697_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_703, Variation_703_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_709, Variation_709_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_712, Variation_712_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['095'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['032'], val : Union[Variation_713, Variation_713_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_714, Variation_714_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_715, Variation_715_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_722, Variation_722_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_726, Variation_726_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_742':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_742':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['095']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['032']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_742':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_742':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_690:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_697:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_703:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_709:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_712:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['095']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['032']) -> Variation_713:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_714:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_715:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_722:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_726:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_743_Arg = TypedDict('Variation_743_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_690, Variation_690_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_636, Variation_636_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_697, Variation_697_Arg],
    '210': Union[Variation_703, Variation_703_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_707, Variation_707_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '155': Union[Variation_365, Variation_365_Arg],
    '157': Union[Variation_365, Variation_365_Arg],
    '160': Union[Variation_709, Variation_709_Arg],
    '165': Union[Variation_712, Variation_712_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '095': Union[Variation_0, Variation_0_Arg],
    '032': Union[Variation_713, Variation_713_Arg],
    '200': Union[Variation_714, Variation_714_Arg],
    '020': Union[Variation_715, Variation_715_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_722, Variation_722_Arg],
    '148': Union[Variation_726, Variation_726_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_743(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_690),
        ('030', Variation_81),
        ('130', Variation_636),
        ('080', Variation_279),
        ('140', Variation_288),
        ('090', Variation_697),
        ('210', Variation_703),
        ('230', Variation_704),
        ('145', Variation_361),
        ('150', Variation_706),
        ('151', Variation_707),
        ('152', Variation_14),
        ('155', Variation_365),
        ('157', Variation_365),
        ('160', Variation_709),
        ('165', Variation_712),
        ('170', Variation_201),
        ('095', Variation_0),
        ('032', Variation_713),
        ('200', Variation_714),
        ('020', Variation_715),
        ('220', Variation_718),
        ('146', Variation_722),
        ('148', Variation_726),
        ('110', Variation_741),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '040': (Variation_690, 0x4000000000),
        '030': (Variation_81, 0x2000000000),
        '130': (Variation_636, 0x1000000000),
        '080': (Variation_279, 0x0800000000),
        '140': (Variation_288, 0x0400000000),
        '090': (Variation_697, 0x0200000000),
        '210': (Variation_703, 0x0180000000),
        '230': (Variation_704, 0x0140000000),
        '145': (Variation_361, 0x0120000000),
        '150': (Variation_706, 0x0110000000),
        '151': (Variation_707, 0x0108000000),
        '152': (Variation_14, 0x0104000000),
        '155': (Variation_365, 0x0102000000),
        '157': (Variation_365, 0x0101800000),
        '160': (Variation_709, 0x0101400000),
        '165': (Variation_712, 0x0101200000),
        '170': (Variation_201, 0x0101100000),
        '095': (Variation_0, 0x0101080000),
        '032': (Variation_713, 0x0101040000),
        '200': (Variation_714, 0x0101020000),
        '020': (Variation_715, 0x0101018000),
        '220': (Variation_718, 0x0101014000),
        '146': (Variation_722, 0x0101012000),
        '148': (Variation_726, 0x0101011000),
        '110': (Variation_741, 0x0101010800),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_690]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_697]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_703]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_709]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_712]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['095']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['032']) -> Type[Variation_713]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_714]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_715]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_722]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_726]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['030'], Literal['130'], Literal['080'], Literal['140'], Literal['090'], Literal['210'], Literal['230'], Literal['145'], Literal['150'], Literal['151'], Literal['152'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['170'], Literal['095'], Literal['032'], Literal['200'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_690'], Type['Variation_81'], Type['Variation_636'], Type['Variation_279'], Type['Variation_288'], Type['Variation_697'], Type['Variation_703'], Type['Variation_704'], Type['Variation_361'], Type['Variation_706'], Type['Variation_707'], Type['Variation_14'], Type['Variation_365'], Type['Variation_365'], Type['Variation_709'], Type['Variation_712'], Type['Variation_201'], Type['Variation_0'], Type['Variation_713'], Type['Variation_714'], Type['Variation_715'], Type['Variation_718'], Type['Variation_722'], Type['Variation_726'], Type['Variation_741'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_690
        if key == '030':
            return Variation_81
        if key == '130':
            return Variation_636
        if key == '080':
            return Variation_279
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_697
        if key == '210':
            return Variation_703
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_707
        if key == '152':
            return Variation_14
        if key == '155':
            return Variation_365
        if key == '157':
            return Variation_365
        if key == '160':
            return Variation_709
        if key == '165':
            return Variation_712
        if key == '170':
            return Variation_201
        if key == '095':
            return Variation_0
        if key == '032':
            return Variation_713
        if key == '200':
            return Variation_714
        if key == '020':
            return Variation_715
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_722
        if key == '148':
            return Variation_726
        if key == '110':
            return Variation_741
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_743_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_690, Variation_690_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_697, Variation_697_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_703, Variation_703_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_709, Variation_709_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_712, Variation_712_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['095'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['032'], val : Union[Variation_713, Variation_713_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_714, Variation_714_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_715, Variation_715_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_722, Variation_722_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_726, Variation_726_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_743':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_743':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['095']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['032']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_743':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_743':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_690:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_697:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_703:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_709:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_712:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['095']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['032']) -> Variation_713:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_714:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_715:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_722:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_726:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_744_Arg : TypeAlias = Raw
class Variation_744(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-3/A code derived during last update',
        1: 'Mode-3/A code not extracted during the last update',
    }

    def __init__(self, arg : Variation_744_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_745_Arg_Group = TypedDict('Variation_745_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_744, Variation_744_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_745_Arg : TypeAlias = Union[Raw, Variation_745_Arg_Group]
class Variation_745(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_744),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_744, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_744]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_744'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_744
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_745_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_744:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_745':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_745':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_744, Variation_744_Arg]) -> 'Variation_745':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_745':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_746_Arg = TypedDict('Variation_746_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_690, Variation_690_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_636, Variation_636_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_697, Variation_697_Arg],
    '210': Union[Variation_703, Variation_703_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_707, Variation_707_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '155': Union[Variation_365, Variation_365_Arg],
    '157': Union[Variation_365, Variation_365_Arg],
    '160': Union[Variation_709, Variation_709_Arg],
    '165': Union[Variation_712, Variation_712_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '095': Union[Variation_0, Variation_0_Arg],
    '032': Union[Variation_713, Variation_713_Arg],
    '200': Union[Variation_714, Variation_714_Arg],
    '020': Union[Variation_715, Variation_715_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_722, Variation_722_Arg],
    '148': Union[Variation_726, Variation_726_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '070': Union[Variation_745, Variation_745_Arg],
    '131': Union[Variation_0, Variation_0_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_746(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_690),
        ('030', Variation_81),
        ('130', Variation_636),
        ('080', Variation_279),
        ('140', Variation_288),
        ('090', Variation_697),
        ('210', Variation_703),
        ('230', Variation_704),
        ('145', Variation_361),
        ('150', Variation_706),
        ('151', Variation_707),
        ('152', Variation_14),
        ('155', Variation_365),
        ('157', Variation_365),
        ('160', Variation_709),
        ('165', Variation_712),
        ('170', Variation_201),
        ('095', Variation_0),
        ('032', Variation_713),
        ('200', Variation_714),
        ('020', Variation_715),
        ('220', Variation_718),
        ('146', Variation_722),
        ('148', Variation_726),
        ('110', Variation_741),
        ('070', Variation_745),
        ('131', Variation_0),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '040': (Variation_690, 0x4000000000),
        '030': (Variation_81, 0x2000000000),
        '130': (Variation_636, 0x1000000000),
        '080': (Variation_279, 0x0800000000),
        '140': (Variation_288, 0x0400000000),
        '090': (Variation_697, 0x0200000000),
        '210': (Variation_703, 0x0180000000),
        '230': (Variation_704, 0x0140000000),
        '145': (Variation_361, 0x0120000000),
        '150': (Variation_706, 0x0110000000),
        '151': (Variation_707, 0x0108000000),
        '152': (Variation_14, 0x0104000000),
        '155': (Variation_365, 0x0102000000),
        '157': (Variation_365, 0x0101800000),
        '160': (Variation_709, 0x0101400000),
        '165': (Variation_712, 0x0101200000),
        '170': (Variation_201, 0x0101100000),
        '095': (Variation_0, 0x0101080000),
        '032': (Variation_713, 0x0101040000),
        '200': (Variation_714, 0x0101020000),
        '020': (Variation_715, 0x0101018000),
        '220': (Variation_718, 0x0101014000),
        '146': (Variation_722, 0x0101012000),
        '148': (Variation_726, 0x0101011000),
        '110': (Variation_741, 0x0101010800),
        '070': (Variation_745, 0x0101010400),
        '131': (Variation_0, 0x0101010200),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_690]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_697]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_703]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_709]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_712]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['095']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['032']) -> Type[Variation_713]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_714]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_715]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_722]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_726]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_745]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['030'], Literal['130'], Literal['080'], Literal['140'], Literal['090'], Literal['210'], Literal['230'], Literal['145'], Literal['150'], Literal['151'], Literal['152'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['170'], Literal['095'], Literal['032'], Literal['200'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['070'], Literal['131'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_690'], Type['Variation_81'], Type['Variation_636'], Type['Variation_279'], Type['Variation_288'], Type['Variation_697'], Type['Variation_703'], Type['Variation_704'], Type['Variation_361'], Type['Variation_706'], Type['Variation_707'], Type['Variation_14'], Type['Variation_365'], Type['Variation_365'], Type['Variation_709'], Type['Variation_712'], Type['Variation_201'], Type['Variation_0'], Type['Variation_713'], Type['Variation_714'], Type['Variation_715'], Type['Variation_718'], Type['Variation_722'], Type['Variation_726'], Type['Variation_741'], Type['Variation_745'], Type['Variation_0'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_690
        if key == '030':
            return Variation_81
        if key == '130':
            return Variation_636
        if key == '080':
            return Variation_279
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_697
        if key == '210':
            return Variation_703
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_707
        if key == '152':
            return Variation_14
        if key == '155':
            return Variation_365
        if key == '157':
            return Variation_365
        if key == '160':
            return Variation_709
        if key == '165':
            return Variation_712
        if key == '170':
            return Variation_201
        if key == '095':
            return Variation_0
        if key == '032':
            return Variation_713
        if key == '200':
            return Variation_714
        if key == '020':
            return Variation_715
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_722
        if key == '148':
            return Variation_726
        if key == '110':
            return Variation_741
        if key == '070':
            return Variation_745
        if key == '131':
            return Variation_0
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_746_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_690, Variation_690_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_697, Variation_697_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_703, Variation_703_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_709, Variation_709_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_712, Variation_712_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['095'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['032'], val : Union[Variation_713, Variation_713_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_714, Variation_714_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_715, Variation_715_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_722, Variation_722_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_726, Variation_726_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_745, Variation_745_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_746':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_746':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['095']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['032']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_746':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_746':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_690:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_697:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_703:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_709:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_712:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['095']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['032']) -> Variation_713:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_714:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_715:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_722:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_726:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_745:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_747_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['hPa']]]
class Variation_747(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    quantity = Quantity('Unsigned', 0.1, 0, 'hPa')

    def __init__(self, arg : Variation_747_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_748_Arg_Group = TypedDict('Variation_748_Arg_Group', {
    'BPS': Union[Variation_747, Variation_747_Arg],
})
Variation_748_Arg : TypeAlias = Union[Raw, Variation_748_Arg_Group]
class Variation_748(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('BPS', Variation_747),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'BPS': ('Barometric Pressure Setting', Variation_747, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['BPS']]) -> Union[Type['Variation_747']]:
        if key == 'BPS':
            return Variation_747
        assert_never(key)

    def __init__(self, arg : Variation_748_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['BPS']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['BPS'], val : Union[Variation_747, Variation_747_Arg]) -> 'Variation_748':
        return self._set_item(name, val) # type: ignore

Variation_749_Arg : TypeAlias = Raw
class Variation_749(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'True North',
        1: 'Magnetic North',
    }

    def __init__(self, arg : Variation_749_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_750_Arg : TypeAlias = Raw
class Variation_750(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Data is either unavailable or invalid',
        1: 'Data is available and valid',
    }

    def __init__(self, arg : Variation_750_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_751_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_751(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 10
    quantity = Quantity('Unsigned', 45.0, 6, '°')

    def __init__(self, arg : Variation_751_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_752_Arg_Group = TypedDict('Variation_752_Arg_Group', {
    'HDR': Union[Variation_749, Variation_749_Arg],
    'STAT': Union[Variation_750, Variation_750_Arg],
    'SH': Union[Variation_751, Variation_751_Arg],
})
Variation_752_Arg : TypeAlias = Union[Raw, Variation_752_Arg_Group]
class Variation_752(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('HDR', Variation_749),
        ('STAT', Variation_750),
        ('SH', Variation_751),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'HDR': ('Horizontal Reference Direction', Variation_749, 4, 1),
        'STAT': ('Selected Heading Status', Variation_750, 5, 1),
        'SH': ('Selected Heading', Variation_751, 6, 10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['HDR']) -> Type[Variation_749]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_750]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SH']) -> Type[Variation_751]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['HDR'], Literal['STAT'], Literal['SH']]) -> Union[Type['Variation_749'], Type['Variation_750'], Type['Variation_751']]:
        if key == 'HDR':
            return Variation_749
        if key == 'STAT':
            return Variation_750
        if key == 'SH':
            return Variation_751
        assert_never(key)

    def __init__(self, arg : Variation_752_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['HDR']) -> Variation_749:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_750:
        ...

    @overload
    def get_item(self, name : Literal['SH']) -> Variation_751:
        ...

    def get_item(self, name : Union[Literal['HDR'], Literal['STAT'], Literal['SH']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['HDR'], val : Union[Variation_749, Variation_749_Arg]) -> 'Variation_752':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_750, Variation_750_Arg]) -> 'Variation_752':
        ...

    @overload
    def set_item(self, name : Literal['SH'], val : Union[Variation_751, Variation_751_Arg]) -> 'Variation_752':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_753_Arg : TypeAlias = Raw
class Variation_753(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Autopilot not engaged',
        1: 'Autopilot engaged',
    }

    def __init__(self, arg : Variation_753_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_754_Arg : TypeAlias = Raw
class Variation_754(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Vertical Navigation not active',
        1: 'Vertical Navigation active',
    }

    def __init__(self, arg : Variation_754_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_755_Arg : TypeAlias = Raw
class Variation_755(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Altitude Hold not engaged',
        1: 'Altitude Hold engaged',
    }

    def __init__(self, arg : Variation_755_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_756_Arg : TypeAlias = Raw
class Variation_756(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Approach Mode not active',
        1: 'Approach Mode active',
    }

    def __init__(self, arg : Variation_756_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_757_Arg_Group = TypedDict('Variation_757_Arg_Group', {
    'AP': Union[Variation_753, Variation_753_Arg],
    'VN': Union[Variation_754, Variation_754_Arg],
    'AH': Union[Variation_755, Variation_755_Arg],
    'AM': Union[Variation_756, Variation_756_Arg],
})
Variation_757_Arg : TypeAlias = Union[Raw, Variation_757_Arg_Group]
class Variation_757(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('AP', Variation_753),
        ('VN', Variation_754),
        ('AH', Variation_755),
        ('AM', Variation_756),
        Spare(4, 4),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AP': ('Autopilot', Variation_753, 0, 1),
        'VN': ('Vertical Navigation', Variation_754, 1, 1),
        'AH': ('Altitude Hold', Variation_755, 2, 1),
        'AM': ('Approach Mode', Variation_756, 3, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AP']) -> Type[Variation_753]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VN']) -> Type[Variation_754]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AH']) -> Type[Variation_755]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AM']) -> Type[Variation_756]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AP'], Literal['VN'], Literal['AH'], Literal['AM']]) -> Union[Type['Variation_753'], Type['Variation_754'], Type['Variation_755'], Type['Variation_756']]:
        if key == 'AP':
            return Variation_753
        if key == 'VN':
            return Variation_754
        if key == 'AH':
            return Variation_755
        if key == 'AM':
            return Variation_756
        assert_never(key)

    def __init__(self, arg : Variation_757_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AP']) -> Variation_753:
        ...

    @overload
    def get_item(self, name : Literal['VN']) -> Variation_754:
        ...

    @overload
    def get_item(self, name : Literal['AH']) -> Variation_755:
        ...

    @overload
    def get_item(self, name : Literal['AM']) -> Variation_756:
        ...

    def get_item(self, name : Union[Literal['AP'], Literal['VN'], Literal['AH'], Literal['AM']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AP'], val : Union[Variation_753, Variation_753_Arg]) -> 'Variation_757':
        ...

    @overload
    def set_item(self, name : Literal['VN'], val : Union[Variation_754, Variation_754_Arg]) -> 'Variation_757':
        ...

    @overload
    def set_item(self, name : Literal['AH'], val : Union[Variation_755, Variation_755_Arg]) -> 'Variation_757':
        ...

    @overload
    def set_item(self, name : Literal['AM'], val : Union[Variation_756, Variation_756_Arg]) -> 'Variation_757':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_758_Arg : TypeAlias = Raw
class Variation_758(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Aircraft has not stopped',
        1: 'Aircraft has stopped',
    }

    def __init__(self, arg : Variation_758_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_759_Arg : TypeAlias = Raw
class Variation_759(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Heading/Ground Track data is not valid',
        1: 'Heading/Ground Track data is valid',
    }

    def __init__(self, arg : Variation_759_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_760_Arg : TypeAlias = Raw
class Variation_760(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Heading data provided',
        1: 'Ground Track provided',
    }

    def __init__(self, arg : Variation_760_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_761_Arg : TypeAlias = Raw
class Variation_761(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'True North',
        1: 'Magnetic North',
    }

    def __init__(self, arg : Variation_761_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_762_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['kt']]]
class Variation_762(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 11
    quantity = Quantity('Unsigned', 1.0, 3, 'kt')

    def __init__(self, arg : Variation_762_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_763_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_763(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    quantity = Quantity('Unsigned', 45.0, 4, '°')

    def __init__(self, arg : Variation_763_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_764_Arg_Group_1 = TypedDict('Variation_764_Arg_Group_1', {
    'STP': Union[Variation_758, Variation_758_Arg],
    'HTS': Union[Variation_759, Variation_759_Arg],
    'HTT': Union[Variation_760, Variation_760_Arg],
    'HRD': Union[Variation_761, Variation_761_Arg],
    'GSS': Union[Variation_762, Variation_762_Arg],
})
Variation_764_Arg_Group_2 = TypedDict('Variation_764_Arg_Group_2', {
    'STP': Union[Variation_758, Variation_758_Arg],
    'HTS': Union[Variation_759, Variation_759_Arg],
    'HTT': Union[Variation_760, Variation_760_Arg],
    'HRD': Union[Variation_761, Variation_761_Arg],
    'GSS': Union[Variation_762, Variation_762_Arg],
    'HGT': Union[Variation_763, Variation_763_Arg],
})
Variation_764_Arg : TypeAlias = Union[
    int,
    Variation_764_Arg_Group_1,
    Tuple[int],
    Variation_764_Arg_Group_2,
    Tuple[int,int],
]
class Variation_764(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 16
    ext_bit_size = 8
    groups_bit_sizes = [
        15,
        7,
    ]

    subitems_list = [
        [
            ('STP', Variation_758),
            ('HTS', Variation_759),
            ('HTT', Variation_760),
            ('HRD', Variation_761),
            ('GSS', Variation_762),
        ],
        [
            ('HGT', Variation_763),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STP': ('', Variation_758, 0, 1),
        'HTS': ('', Variation_759, 1, 1),
        'HTT': ('', Variation_760, 2, 1),
        'HRD': ('', Variation_761, 3, 1),
        'GSS': ('Ground Speed', Variation_762, 4, 11),
        'HGT': ('Heading/Ground Track Information', Variation_763, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STP']) -> Type[Variation_758]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HTS']) -> Type[Variation_759]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HTT']) -> Type[Variation_760]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HRD']) -> Type[Variation_761]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GSS']) -> Type[Variation_762]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HGT']) -> Type[Variation_763]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STP'], Literal['HTS'], Literal['HTT'], Literal['HRD'], Literal['GSS'], Literal['HGT']]) -> Union[Type['Variation_758'], Type['Variation_759'], Type['Variation_760'], Type['Variation_761'], Type['Variation_762'], Type['Variation_763']]:
        if key == 'STP':
            return Variation_758
        if key == 'HTS':
            return Variation_759
        if key == 'HTT':
            return Variation_760
        if key == 'HRD':
            return Variation_761
        if key == 'GSS':
            return Variation_762
        if key == 'HGT':
            return Variation_763
        assert_never(key)

    def __init__(self, arg : Variation_764_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_764_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_764_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STP']) -> Variation_758:
        ...

    @overload
    def get_item(self, name : Literal['HTS']) -> Variation_759:
        ...

    @overload
    def get_item(self, name : Literal['HTT']) -> Variation_760:
        ...

    @overload
    def get_item(self, name : Literal['HRD']) -> Variation_761:
        ...

    @overload
    def get_item(self, name : Literal['GSS']) -> Variation_762:
        ...

    @overload
    def get_item(self, name : Literal['HGT']) -> Variation_763:
        ...

    def get_item(self, name : Union[Literal['STP'], Literal['HTS'], Literal['HTT'], Literal['HRD'], Literal['GSS'], Literal['HGT']]) -> Any:
        return self._get_item(name)

Variation_765_Arg : TypeAlias = Raw
class Variation_765(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Target is not 1090 ES IN capable',
        1: 'Target is 1090 ES IN capable',
    }

    def __init__(self, arg : Variation_765_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_766_Arg : TypeAlias = Raw
class Variation_766(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Target is not UAT IN capable',
        1: 'Target is UAT IN capable',
    }

    def __init__(self, arg : Variation_766_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_767_Arg_Group_1 = TypedDict('Variation_767_Arg_Group_1', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
})
Variation_767_Arg : TypeAlias = Union[
    int,
    Variation_767_Arg_Group_1,
    Tuple[int],
]
class Variation_767(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('ES', Variation_765),
            ('UAT', Variation_766),
            Spare(2, 5),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ES': ('', Variation_765, 0, 1),
        'UAT': ('', Variation_766, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ES']) -> Type[Variation_765]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_766]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ES'], Literal['UAT']]) -> Union[Type['Variation_765'], Type['Variation_766']]:
        if key == 'ES':
            return Variation_765
        if key == 'UAT':
            return Variation_766
        assert_never(key)

    def __init__(self, arg : Variation_767_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_767_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ES']) -> Variation_765:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_766:
        ...

    def get_item(self, name : Union[Literal['ES'], Literal['UAT']]) -> Any:
        return self._get_item(name)

Variation_768_Arg : TypeAlias = Raw
class Variation_768(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No Mode 5 interrogation',
        1: 'Mode 5 interrogation',
    }

    def __init__(self, arg : Variation_768_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_769_Arg : TypeAlias = Raw
class Variation_769(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'No authenticated Mode 5 ID reply/report',
        1: 'Authenticated Mode 5 ID reply/report',
    }

    def __init__(self, arg : Variation_769_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_770_Arg : TypeAlias = Raw
class Variation_770(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No authenticated Mode 5 Data reply or Report',
        1: 'Authenticated Mode 5 Data reply or Report (i.e any valid Mode 5 reply type other than ID)',
    }

    def __init__(self, arg : Variation_770_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_771_Arg : TypeAlias = Raw
class Variation_771(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Mode 1 code not present or not from Mode 5 reply/report',
        1: 'Mode 1 code from Mode 5 reply/report',
    }

    def __init__(self, arg : Variation_771_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_772_Arg : TypeAlias = Raw
class Variation_772(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Mode 2 code not present or not from Mode 5 reply/report',
        1: 'Mode 2 code from Mode 5 reply/report',
    }

    def __init__(self, arg : Variation_772_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_773_Arg : TypeAlias = Raw
class Variation_773(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Mode 3 code not present or not from Mode 5 reply/report',
        1: 'Mode 3 code from Mode 5 reply/report',
    }

    def __init__(self, arg : Variation_773_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_774_Arg : TypeAlias = Raw
class Variation_774(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Flightlevel not present or not from Mode 5 reply/report',
        1: 'Flightlevel from Mode 5 reply/report',
    }

    def __init__(self, arg : Variation_774_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_775_Arg : TypeAlias = Raw
class Variation_775(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Position not from Mode 5 report (ADS-B report)',
        1: 'Position from Mode 5 report',
    }

    def __init__(self, arg : Variation_775_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_776_Arg_Group = TypedDict('Variation_776_Arg_Group', {
    'M5': Union[Variation_768, Variation_768_Arg],
    'ID': Union[Variation_769, Variation_769_Arg],
    'DA': Union[Variation_770, Variation_770_Arg],
    'M1': Union[Variation_771, Variation_771_Arg],
    'M2': Union[Variation_772, Variation_772_Arg],
    'M3': Union[Variation_773, Variation_773_Arg],
    'MC': Union[Variation_774, Variation_774_Arg],
    'PO': Union[Variation_775, Variation_775_Arg],
})
Variation_776_Arg : TypeAlias = Union[Raw, Variation_776_Arg_Group]
class Variation_776(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('M5', Variation_768),
        ('ID', Variation_769),
        ('DA', Variation_770),
        ('M1', Variation_771),
        ('M2', Variation_772),
        ('M3', Variation_773),
        ('MC', Variation_774),
        ('PO', Variation_775),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'M5': ('', Variation_768, 0, 1),
        'ID': ('', Variation_769, 1, 1),
        'DA': ('', Variation_770, 2, 1),
        'M1': ('', Variation_771, 3, 1),
        'M2': ('', Variation_772, 4, 1),
        'M3': ('', Variation_773, 5, 1),
        'MC': ('', Variation_774, 6, 1),
        'PO': ('', Variation_775, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['M5']) -> Type[Variation_768]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_769]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DA']) -> Type[Variation_770]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M1']) -> Type[Variation_771]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M2']) -> Type[Variation_772]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M3']) -> Type[Variation_773]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MC']) -> Type[Variation_774]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PO']) -> Type[Variation_775]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['M5'], Literal['ID'], Literal['DA'], Literal['M1'], Literal['M2'], Literal['M3'], Literal['MC'], Literal['PO']]) -> Union[Type['Variation_768'], Type['Variation_769'], Type['Variation_770'], Type['Variation_771'], Type['Variation_772'], Type['Variation_773'], Type['Variation_774'], Type['Variation_775']]:
        if key == 'M5':
            return Variation_768
        if key == 'ID':
            return Variation_769
        if key == 'DA':
            return Variation_770
        if key == 'M1':
            return Variation_771
        if key == 'M2':
            return Variation_772
        if key == 'M3':
            return Variation_773
        if key == 'MC':
            return Variation_774
        if key == 'PO':
            return Variation_775
        assert_never(key)

    def __init__(self, arg : Variation_776_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['M5']) -> Variation_768:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_769:
        ...

    @overload
    def get_item(self, name : Literal['DA']) -> Variation_770:
        ...

    @overload
    def get_item(self, name : Literal['M1']) -> Variation_771:
        ...

    @overload
    def get_item(self, name : Literal['M2']) -> Variation_772:
        ...

    @overload
    def get_item(self, name : Literal['M3']) -> Variation_773:
        ...

    @overload
    def get_item(self, name : Literal['MC']) -> Variation_774:
        ...

    @overload
    def get_item(self, name : Literal['PO']) -> Variation_775:
        ...

    def get_item(self, name : Union[Literal['M5'], Literal['ID'], Literal['DA'], Literal['M1'], Literal['M2'], Literal['M3'], Literal['MC'], Literal['PO']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['M5'], val : Union[Variation_768, Variation_768_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['ID'], val : Union[Variation_769, Variation_769_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['DA'], val : Union[Variation_770, Variation_770_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['M1'], val : Union[Variation_771, Variation_771_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['M2'], val : Union[Variation_772, Variation_772_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['M3'], val : Union[Variation_773, Variation_773_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['MC'], val : Union[Variation_774, Variation_774_Arg]) -> 'Variation_776':
        ...

    @overload
    def set_item(self, name : Literal['PO'], val : Union[Variation_775, Variation_775_Arg]) -> 'Variation_776':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_777_Arg : TypeAlias = Raw
class Variation_777(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 14

    def __init__(self, arg : Variation_777_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_778_Arg : TypeAlias = Raw
class Variation_778(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 11

    def __init__(self, arg : Variation_778_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_779_Arg_Group = TypedDict('Variation_779_Arg_Group', {
    'PIN': Union[Variation_777, Variation_777_Arg],
    'NO': Union[Variation_778, Variation_778_Arg],
})
Variation_779_Arg : TypeAlias = Union[Raw, Variation_779_Arg_Group]
class Variation_779(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        Spare(0, 2),
        ('PIN', Variation_777),
        Spare(0, 5),
        ('NO', Variation_778),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PIN': ('PIN Code', Variation_777, 2, 14),
        'NO': ('National Origin Code', Variation_778, 21, 11),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PIN']) -> Type[Variation_777]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NO']) -> Type[Variation_778]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PIN'], Literal['NO']]) -> Union[Type['Variation_777'], Type['Variation_778']]:
        if key == 'PIN':
            return Variation_777
        if key == 'NO':
            return Variation_778
        assert_never(key)

    def __init__(self, arg : Variation_779_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PIN']) -> Variation_777:
        ...

    @overload
    def get_item(self, name : Literal['NO']) -> Variation_778:
        ...

    def get_item(self, name : Union[Literal['PIN'], Literal['NO']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PIN'], val : Union[Variation_777, Variation_777_Arg]) -> 'Variation_779':
        ...

    @overload
    def set_item(self, name : Literal['NO'], val : Union[Variation_778, Variation_778_Arg]) -> 'Variation_779':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_780_Arg : TypeAlias = Raw
class Variation_780(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode 1 code as derived from the report of the transponder',
        1: 'Smoothed Mode 1 code as provided by a local tracker',
    }

    def __init__(self, arg : Variation_780_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_781_Arg_Group = TypedDict('Variation_781_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'L': Union[Variation_780, Variation_780_Arg],
    'EM1': Union[Variation_19, Variation_19_Arg],
})
Variation_781_Arg : TypeAlias = Union[Raw, Variation_781_Arg_Group]
class Variation_781(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        Spare(1, 1),
        ('L', Variation_780),
        Spare(3, 1),
        ('EM1', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'L': ('', Variation_780, 2, 1),
        'EM1': ('Extended Mode 1 Code in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_780]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EM1']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['L'], Literal['EM1']]) -> Union[Type['Variation_16'], Type['Variation_780'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'L':
            return Variation_780
        if key == 'EM1':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_781_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_780:
        ...

    @overload
    def get_item(self, name : Literal['EM1']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['L'], Literal['EM1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_781':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_780, Variation_780_Arg]) -> 'Variation_781':
        ...

    @overload
    def set_item(self, name : Literal['EM1'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_781':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_782_Arg : TypeAlias = Raw
class Variation_782(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'X-Pulse not present',
        1: 'X-pulse present',
    }

    def __init__(self, arg : Variation_782_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_783_Arg : TypeAlias = Raw
class Variation_783(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no authenticated Data reply or Report received',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_783_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_784_Arg : TypeAlias = Raw
class Variation_784(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no Mode C reply',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_784_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_785_Arg : TypeAlias = Raw
class Variation_785(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no Mode 3/A reply',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_785_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_786_Arg : TypeAlias = Raw
class Variation_786(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: '0 X-pulse set to zero or no Mode 2 reply',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_786_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_787_Arg : TypeAlias = Raw
class Variation_787(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no Mode 1 reply',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_787_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_788_Arg_Group = TypedDict('Variation_788_Arg_Group', {
    'XP': Union[Variation_782, Variation_782_Arg],
    'X5': Union[Variation_783, Variation_783_Arg],
    'XC': Union[Variation_784, Variation_784_Arg],
    'X3': Union[Variation_785, Variation_785_Arg],
    'X2': Union[Variation_786, Variation_786_Arg],
    'X1': Union[Variation_787, Variation_787_Arg],
})
Variation_788_Arg : TypeAlias = Union[Raw, Variation_788_Arg_Group]
class Variation_788(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 2),
        ('XP', Variation_782),
        ('X5', Variation_783),
        ('XC', Variation_784),
        ('X3', Variation_785),
        ('X2', Variation_786),
        ('X1', Variation_787),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'XP': ('X-pulse from Mode 5 PIN Reply/report', Variation_782, 2, 1),
        'X5': ('X-pulse from Mode 5 Data Reply or Report', Variation_783, 3, 1),
        'XC': ('X-pulse from Mode C Reply', Variation_784, 4, 1),
        'X3': ('X-pulse from Mode 3/A Reply', Variation_785, 5, 1),
        'X2': ('X-pulse from Mode 2 Reply', Variation_786, 6, 1),
        'X1': ('X-pulse from Mode 1 Reply', Variation_787, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['XP']) -> Type[Variation_782]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X5']) -> Type[Variation_783]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XC']) -> Type[Variation_784]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X3']) -> Type[Variation_785]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X2']) -> Type[Variation_786]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X1']) -> Type[Variation_787]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['XP'], Literal['X5'], Literal['XC'], Literal['X3'], Literal['X2'], Literal['X1']]) -> Union[Type['Variation_782'], Type['Variation_783'], Type['Variation_784'], Type['Variation_785'], Type['Variation_786'], Type['Variation_787']]:
        if key == 'XP':
            return Variation_782
        if key == 'X5':
            return Variation_783
        if key == 'XC':
            return Variation_784
        if key == 'X3':
            return Variation_785
        if key == 'X2':
            return Variation_786
        if key == 'X1':
            return Variation_787
        assert_never(key)

    def __init__(self, arg : Variation_788_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['XP']) -> Variation_782:
        ...

    @overload
    def get_item(self, name : Literal['X5']) -> Variation_783:
        ...

    @overload
    def get_item(self, name : Literal['XC']) -> Variation_784:
        ...

    @overload
    def get_item(self, name : Literal['X3']) -> Variation_785:
        ...

    @overload
    def get_item(self, name : Literal['X2']) -> Variation_786:
        ...

    @overload
    def get_item(self, name : Literal['X1']) -> Variation_787:
        ...

    def get_item(self, name : Union[Literal['XP'], Literal['X5'], Literal['XC'], Literal['X3'], Literal['X2'], Literal['X1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['XP'], val : Union[Variation_782, Variation_782_Arg]) -> 'Variation_788':
        ...

    @overload
    def set_item(self, name : Literal['X5'], val : Union[Variation_783, Variation_783_Arg]) -> 'Variation_788':
        ...

    @overload
    def set_item(self, name : Literal['XC'], val : Union[Variation_784, Variation_784_Arg]) -> 'Variation_788':
        ...

    @overload
    def set_item(self, name : Literal['X3'], val : Union[Variation_785, Variation_785_Arg]) -> 'Variation_788':
        ...

    @overload
    def set_item(self, name : Literal['X2'], val : Union[Variation_786, Variation_786_Arg]) -> 'Variation_788':
        ...

    @overload
    def set_item(self, name : Literal['X1'], val : Union[Variation_787, Variation_787_Arg]) -> 'Variation_788':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_789_Arg_Group = TypedDict('Variation_789_Arg_Group', {
    'FOM': Union[Variation_376, Variation_376_Arg],
})
Variation_789_Arg : TypeAlias = Union[Raw, Variation_789_Arg_Group]
class Variation_789(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 3),
        ('FOM', Variation_376),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FOM': ('Figure of Merit', Variation_376, 3, 5),
    }

    @classmethod
    def spec(cls, key : Union[Literal['FOM']]) -> Union[Type['Variation_376']]:
        if key == 'FOM':
            return Variation_376
        assert_never(key)

    def __init__(self, arg : Variation_789_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['FOM']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['FOM'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_789':
        return self._set_item(name, val) # type: ignore

Variation_790_Arg_Group = TypedDict('Variation_790_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'L': Union[Variation_26, Variation_26_Arg],
    'MODE2': Union[Variation_19, Variation_19_Arg],
})
Variation_790_Arg : TypeAlias = Union[Raw, Variation_790_Arg_Group]
class Variation_790(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        Spare(1, 1),
        ('L', Variation_26),
        Spare(3, 1),
        ('MODE2', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'L': ('', Variation_26, 2, 1),
        'MODE2': ('Mode 2 Code in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_26]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE2']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['L'], Literal['MODE2']]) -> Union[Type['Variation_16'], Type['Variation_26'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'L':
            return Variation_26
        if key == 'MODE2':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_790_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_26:
        ...

    @overload
    def get_item(self, name : Literal['MODE2']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['L'], Literal['MODE2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_790':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_26, Variation_26_Arg]) -> 'Variation_790':
        ...

    @overload
    def set_item(self, name : Literal['MODE2'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_790':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_791_Arg = TypedDict('Variation_791_Arg', {
    'SUM': Union[Variation_776, Variation_776_Arg],
    'PNO': Union[Variation_779, Variation_779_Arg],
    'EM1': Union[Variation_781, Variation_781_Arg],
    'XP': Union[Variation_788, Variation_788_Arg],
    'FOM': Union[Variation_789, Variation_789_Arg],
    'M2': Union[Variation_790, Variation_790_Arg],
}, total=False)
class Variation_791(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('SUM', Variation_776),
        ('PNO', Variation_779),
        ('EM1', Variation_781),
        ('XP', Variation_788),
        ('FOM', Variation_789),
        ('M2', Variation_790),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'SUM': (Variation_776, 0x80),
        'PNO': (Variation_779, 0x40),
        'EM1': (Variation_781, 0x20),
        'XP': (Variation_788, 0x10),
        'FOM': (Variation_789, 0x08),
        'M2': (Variation_790, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SUM']) -> Type[Variation_776]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PNO']) -> Type[Variation_779]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EM1']) -> Type[Variation_781]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XP']) -> Type[Variation_788]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FOM']) -> Type[Variation_789]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M2']) -> Type[Variation_790]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SUM'], Literal['PNO'], Literal['EM1'], Literal['XP'], Literal['FOM'], Literal['M2']]) -> Union[Type['Variation_776'], Type['Variation_779'], Type['Variation_781'], Type['Variation_788'], Type['Variation_789'], Type['Variation_790']]:
        if key == 'SUM':
            return Variation_776
        if key == 'PNO':
            return Variation_779
        if key == 'EM1':
            return Variation_781
        if key == 'XP':
            return Variation_788
        if key == 'FOM':
            return Variation_789
        if key == 'M2':
            return Variation_790
        assert_never(key)

    def __init__(self, arg : Optional[Variation_791_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['SUM'], val : Union[Variation_776, Variation_776_Arg]) -> 'Variation_791':
        ...

    @overload
    def set_item(self, name : Literal['PNO'], val : Union[Variation_779, Variation_779_Arg]) -> 'Variation_791':
        ...

    @overload
    def set_item(self, name : Literal['EM1'], val : Union[Variation_781, Variation_781_Arg]) -> 'Variation_791':
        ...

    @overload
    def set_item(self, name : Literal['XP'], val : Union[Variation_788, Variation_788_Arg]) -> 'Variation_791':
        ...

    @overload
    def set_item(self, name : Literal['FOM'], val : Union[Variation_789, Variation_789_Arg]) -> 'Variation_791':
        ...

    @overload
    def set_item(self, name : Literal['M2'], val : Union[Variation_790, Variation_790_Arg]) -> 'Variation_791':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['SUM']) -> 'Variation_791':
        ...

    @overload
    def del_item(self, name : Literal['PNO']) -> 'Variation_791':
        ...

    @overload
    def del_item(self, name : Literal['EM1']) -> 'Variation_791':
        ...

    @overload
    def del_item(self, name : Literal['XP']) -> 'Variation_791':
        ...

    @overload
    def del_item(self, name : Literal['FOM']) -> 'Variation_791':
        ...

    @overload
    def del_item(self, name : Literal['M2']) -> 'Variation_791':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['SUM']) -> Variation_776:
        ...

    @overload
    def get_item(self, name : Literal['PNO']) -> Variation_779:
        ...

    @overload
    def get_item(self, name : Literal['EM1']) -> Variation_781:
        ...

    @overload
    def get_item(self, name : Literal['XP']) -> Variation_788:
        ...

    @overload
    def get_item(self, name : Literal['FOM']) -> Variation_789:
        ...

    @overload
    def get_item(self, name : Literal['M2']) -> Variation_790:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_792_Arg = TypedDict('Variation_792_Arg', {
    'BPS': Union[Variation_748, Variation_748_Arg],
    'SH': Union[Variation_752, Variation_752_Arg],
    'NAV': Union[Variation_757, Variation_757_Arg],
    'GAO': Union[Variation_0, Variation_0_Arg],
    'SGV': Union[Variation_764, Variation_764_Arg],
    'STA': Union[Variation_767, Variation_767_Arg],
    'TNH': Union[Variation_14, Variation_14_Arg],
    'MES': Union[Variation_791, Variation_791_Arg],
}, total=False)
class Variation_792(Compound):
    variation = 'Compound'

    fspec_fx = False
    fspec_max_bytes = 1

    subitems_list = [
        ('BPS', Variation_748),
        ('SH', Variation_752),
        ('NAV', Variation_757),
        ('GAO', Variation_0),
        ('SGV', Variation_764),
        ('STA', Variation_767),
        ('TNH', Variation_14),
        ('MES', Variation_791),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'BPS': (Variation_748, 0x80),
        'SH': (Variation_752, 0x40),
        'NAV': (Variation_757, 0x20),
        'GAO': (Variation_0, 0x10),
        'SGV': (Variation_764, 0x08),
        'STA': (Variation_767, 0x04),
        'TNH': (Variation_14, 0x02),
        'MES': (Variation_791, 0x01),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_748]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SH']) -> Type[Variation_752]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NAV']) -> Type[Variation_757]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAO']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SGV']) -> Type[Variation_764]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STA']) -> Type[Variation_767]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TNH']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MES']) -> Type[Variation_791]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['BPS'], Literal['SH'], Literal['NAV'], Literal['GAO'], Literal['SGV'], Literal['STA'], Literal['TNH'], Literal['MES']]) -> Union[Type['Variation_748'], Type['Variation_752'], Type['Variation_757'], Type['Variation_0'], Type['Variation_764'], Type['Variation_767'], Type['Variation_14'], Type['Variation_791']]:
        if key == 'BPS':
            return Variation_748
        if key == 'SH':
            return Variation_752
        if key == 'NAV':
            return Variation_757
        if key == 'GAO':
            return Variation_0
        if key == 'SGV':
            return Variation_764
        if key == 'STA':
            return Variation_767
        if key == 'TNH':
            return Variation_14
        if key == 'MES':
            return Variation_791
        assert_never(key)

    def __init__(self, arg : Optional[Variation_792_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_748, Variation_748_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['SH'], val : Union[Variation_752, Variation_752_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['NAV'], val : Union[Variation_757, Variation_757_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['GAO'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['SGV'], val : Union[Variation_764, Variation_764_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['STA'], val : Union[Variation_767, Variation_767_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['TNH'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_792':
        ...

    @overload
    def set_item(self, name : Literal['MES'], val : Union[Variation_791, Variation_791_Arg]) -> 'Variation_792':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['SH']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['NAV']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['GAO']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['SGV']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['STA']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['TNH']) -> 'Variation_792':
        ...

    @overload
    def del_item(self, name : Literal['MES']) -> 'Variation_792':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_748:
        ...

    @overload
    def get_item(self, name : Literal['SH']) -> Variation_752:
        ...

    @overload
    def get_item(self, name : Literal['NAV']) -> Variation_757:
        ...

    @overload
    def get_item(self, name : Literal['GAO']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SGV']) -> Variation_764:
        ...

    @overload
    def get_item(self, name : Literal['STA']) -> Variation_767:
        ...

    @overload
    def get_item(self, name : Literal['TNH']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['MES']) -> Variation_791:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_793_Arg : TypeAlias = Raw
class Variation_793(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Element not populated',
        1: 'Element populated',
    }

    def __init__(self, arg : Variation_793_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_794_Arg : TypeAlias = Raw
class Variation_794(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'MCP/FCU Mode Bits not populated',
        1: 'MCP/FCU Mode Bits populated',
    }

    def __init__(self, arg : Variation_794_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_795_Arg_Group = TypedDict('Variation_795_Arg_Group', {
    'EP': Union[Variation_793, Variation_793_Arg],
    'VAL': Union[Variation_794, Variation_794_Arg],
})
Variation_795_Arg : TypeAlias = Union[Raw, Variation_795_Arg_Group]
class Variation_795(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_793),
        ('VAL', Variation_794),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_793, 0, 1),
        'VAL': ('Value', Variation_794, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_793]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_794]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_793'], Type['Variation_794']]:
        if key == 'EP':
            return Variation_793
        if key == 'VAL':
            return Variation_794
        assert_never(key)

    def __init__(self, arg : Variation_795_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_793:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_794:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_793, Variation_793_Arg]) -> 'Variation_795':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_794, Variation_794_Arg]) -> 'Variation_795':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_796_Arg_Group = TypedDict('Variation_796_Arg_Group', {
    'AP': Union[Variation_753, Variation_753_Arg],
    'VN': Union[Variation_754, Variation_754_Arg],
    'AH': Union[Variation_755, Variation_755_Arg],
    'AM': Union[Variation_756, Variation_756_Arg],
    'MFM': Union[Variation_795, Variation_795_Arg],
})
Variation_796_Arg : TypeAlias = Union[Raw, Variation_796_Arg_Group]
class Variation_796(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('AP', Variation_753),
        ('VN', Variation_754),
        ('AH', Variation_755),
        ('AM', Variation_756),
        ('MFM', Variation_795),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AP': ('Autopilot', Variation_753, 0, 1),
        'VN': ('Vertical Navigation', Variation_754, 1, 1),
        'AH': ('Altitude Hold', Variation_755, 2, 1),
        'AM': ('Approach Mode', Variation_756, 3, 1),
        'MFM': ('Status of MCP/FCU Mode Bits', Variation_795, 4, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AP']) -> Type[Variation_753]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VN']) -> Type[Variation_754]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AH']) -> Type[Variation_755]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AM']) -> Type[Variation_756]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MFM']) -> Type[Variation_795]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AP'], Literal['VN'], Literal['AH'], Literal['AM'], Literal['MFM']]) -> Union[Type['Variation_753'], Type['Variation_754'], Type['Variation_755'], Type['Variation_756'], Type['Variation_795']]:
        if key == 'AP':
            return Variation_753
        if key == 'VN':
            return Variation_754
        if key == 'AH':
            return Variation_755
        if key == 'AM':
            return Variation_756
        if key == 'MFM':
            return Variation_795
        assert_never(key)

    def __init__(self, arg : Variation_796_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AP']) -> Variation_753:
        ...

    @overload
    def get_item(self, name : Literal['VN']) -> Variation_754:
        ...

    @overload
    def get_item(self, name : Literal['AH']) -> Variation_755:
        ...

    @overload
    def get_item(self, name : Literal['AM']) -> Variation_756:
        ...

    @overload
    def get_item(self, name : Literal['MFM']) -> Variation_795:
        ...

    def get_item(self, name : Union[Literal['AP'], Literal['VN'], Literal['AH'], Literal['AM'], Literal['MFM']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AP'], val : Union[Variation_753, Variation_753_Arg]) -> 'Variation_796':
        ...

    @overload
    def set_item(self, name : Literal['VN'], val : Union[Variation_754, Variation_754_Arg]) -> 'Variation_796':
        ...

    @overload
    def set_item(self, name : Literal['AH'], val : Union[Variation_755, Variation_755_Arg]) -> 'Variation_796':
        ...

    @overload
    def set_item(self, name : Literal['AM'], val : Union[Variation_756, Variation_756_Arg]) -> 'Variation_796':
        ...

    @overload
    def set_item(self, name : Literal['MFM'], val : Union[Variation_795, Variation_795_Arg]) -> 'Variation_796':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_797_Arg : TypeAlias = Raw
class Variation_797(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Element not populated',
        1: 'Element populated',
    }

    def __init__(self, arg : Variation_797_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_798_Arg : TypeAlias = Raw
class Variation_798(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: 'Not RCE',
        1: 'TABS (see Note 2)',
        2: 'Reserved for future use',
        3: 'Other RCE',
    }

    def __init__(self, arg : Variation_798_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_799_Arg_Group = TypedDict('Variation_799_Arg_Group', {
    'EP': Union[Variation_797, Variation_797_Arg],
    'VAL': Union[Variation_798, Variation_798_Arg],
})
Variation_799_Arg : TypeAlias = Union[Raw, Variation_799_Arg_Group]
class Variation_799(Group):
    variation = 'Group'

    bit_size = 3

    subitems_list = [
        ('EP', Variation_797),
        ('VAL', Variation_798),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_797, 0, 1),
        'VAL': ('Value', Variation_798, 1, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_797]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_798]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_797'], Type['Variation_798']]:
        if key == 'EP':
            return Variation_797
        if key == 'VAL':
            return Variation_798
        assert_never(key)

    def __init__(self, arg : Variation_799_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_797:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_798:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_797, Variation_797_Arg]) -> 'Variation_799':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_798, Variation_798_Arg]) -> 'Variation_799':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_800_Arg : TypeAlias = Raw
class Variation_800(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Element not populated',
        1: 'Element populated',
    }

    def __init__(self, arg : Variation_800_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_801_Arg : TypeAlias = Raw
class Variation_801(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Reply Rate Limiting is not active',
        1: 'Reply Rate Limiting is active',
    }

    def __init__(self, arg : Variation_801_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_802_Arg_Group = TypedDict('Variation_802_Arg_Group', {
    'EP': Union[Variation_800, Variation_800_Arg],
    'VAL': Union[Variation_801, Variation_801_Arg],
})
Variation_802_Arg : TypeAlias = Union[Raw, Variation_802_Arg_Group]
class Variation_802(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_800),
        ('VAL', Variation_801),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_800, 0, 1),
        'VAL': ('Value', Variation_801, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_800]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_801]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_800'], Type['Variation_801']]:
        if key == 'EP':
            return Variation_800
        if key == 'VAL':
            return Variation_801
        assert_never(key)

    def __init__(self, arg : Variation_802_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_800:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_801:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_800, Variation_800_Arg]) -> 'Variation_802':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_801, Variation_801_Arg]) -> 'Variation_802':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_803_Arg : TypeAlias = Raw
class Variation_803(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Element not populated',
        1: 'Element populated',
    }

    def __init__(self, arg : Variation_803_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_804_Arg : TypeAlias = Raw
class Variation_804(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 3
    table = {
        0: 'No emergency / not reported',
        1: 'General emergency',
        2: 'UAS/RPAS - Lost link',
        3: 'Minimum fuel',
        4: 'No communications',
        5: 'Unlawful interference',
        6: 'Aircraft in Distress',
        7: 'Aircraft in Distress Manual Activation',
    }

    def __init__(self, arg : Variation_804_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_805_Arg_Group = TypedDict('Variation_805_Arg_Group', {
    'EP': Union[Variation_803, Variation_803_Arg],
    'VAL': Union[Variation_804, Variation_804_Arg],
})
Variation_805_Arg : TypeAlias = Union[Raw, Variation_805_Arg_Group]
class Variation_805(Group):
    variation = 'Group'

    bit_size = 4

    subitems_list = [
        ('EP', Variation_803),
        ('VAL', Variation_804),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_803, 0, 1),
        'VAL': ('Value', Variation_804, 1, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_803]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_804]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_803'], Type['Variation_804']]:
        if key == 'EP':
            return Variation_803
        if key == 'VAL':
            return Variation_804
        assert_never(key)

    def __init__(self, arg : Variation_805_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_803:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_804:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_803, Variation_803_Arg]) -> 'Variation_805':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_804, Variation_804_Arg]) -> 'Variation_805':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_806_Arg : TypeAlias = Raw
class Variation_806(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Unavailable, Unknown, or less than 70 W',
        1: '70 W',
        2: '125 W',
        3: '200 W',
    }

    def __init__(self, arg : Variation_806_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_807_Arg_Group = TypedDict('Variation_807_Arg_Group', {
    'EP': Union[Variation_793, Variation_793_Arg],
    'VAL': Union[Variation_806, Variation_806_Arg],
})
Variation_807_Arg : TypeAlias = Union[Raw, Variation_807_Arg_Group]
class Variation_807(Group):
    variation = 'Group'

    bit_size = 3

    subitems_list = [
        ('EP', Variation_793),
        ('VAL', Variation_806),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_793, 0, 1),
        'VAL': ('Value', Variation_806, 1, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_793]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_806]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_793'], Type['Variation_806']]:
        if key == 'EP':
            return Variation_793
        if key == 'VAL':
            return Variation_806
        assert_never(key)

    def __init__(self, arg : Variation_807_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_793:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_806:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_793, Variation_793_Arg]) -> 'Variation_807':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_806, Variation_806_Arg]) -> 'Variation_807':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_808_Arg : TypeAlias = Raw
class Variation_808(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Transponder #1 (left/pilot side or single)',
        2: 'Transponder #2 (right/co-pilot side)',
        3: 'Transponder #3 (auxiliary or Backup)',
    }

    def __init__(self, arg : Variation_808_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_809_Arg_Group = TypedDict('Variation_809_Arg_Group', {
    'EP': Union[Variation_803, Variation_803_Arg],
    'VAL': Union[Variation_808, Variation_808_Arg],
})
Variation_809_Arg : TypeAlias = Union[Raw, Variation_809_Arg_Group]
class Variation_809(Group):
    variation = 'Group'

    bit_size = 3

    subitems_list = [
        ('EP', Variation_803),
        ('VAL', Variation_808),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_803, 0, 1),
        'VAL': ('Value', Variation_808, 1, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_803]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_808]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_803'], Type['Variation_808']]:
        if key == 'EP':
            return Variation_803
        if key == 'VAL':
            return Variation_808
        assert_never(key)

    def __init__(self, arg : Variation_809_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_803:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_808:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_803, Variation_803_Arg]) -> 'Variation_809':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_808, Variation_808_Arg]) -> 'Variation_809':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_810_Arg : TypeAlias = Raw
class Variation_810(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Element not populated',
        1: 'Element populated',
    }

    def __init__(self, arg : Variation_810_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_811_Arg : TypeAlias = Raw
class Variation_811(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Manned Operation',
        1: 'Unmanned Operation',
    }

    def __init__(self, arg : Variation_811_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_812_Arg_Group = TypedDict('Variation_812_Arg_Group', {
    'EP': Union[Variation_810, Variation_810_Arg],
    'VAL': Union[Variation_811, Variation_811_Arg],
})
Variation_812_Arg : TypeAlias = Union[Raw, Variation_812_Arg_Group]
class Variation_812(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_810),
        ('VAL', Variation_811),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_810, 0, 1),
        'VAL': ('Value', Variation_811, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_810]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_811]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_810'], Type['Variation_811']]:
        if key == 'EP':
            return Variation_810
        if key == 'VAL':
            return Variation_811
        assert_never(key)

    def __init__(self, arg : Variation_812_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_810:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_811:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_810, Variation_810_Arg]) -> 'Variation_812':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_811, Variation_811_Arg]) -> 'Variation_812':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_813_Arg : TypeAlias = Raw
class Variation_813(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'RWC Corrective Alert not active',
        1: 'RWC Corrective Alert active',
    }

    def __init__(self, arg : Variation_813_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_814_Arg_Group = TypedDict('Variation_814_Arg_Group', {
    'EP': Union[Variation_800, Variation_800_Arg],
    'VAL': Union[Variation_813, Variation_813_Arg],
})
Variation_814_Arg : TypeAlias = Union[Raw, Variation_814_Arg_Group]
class Variation_814(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_800),
        ('VAL', Variation_813),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_800, 0, 1),
        'VAL': ('Value', Variation_813, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_800]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_813]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_800'], Type['Variation_813']]:
        if key == 'EP':
            return Variation_800
        if key == 'VAL':
            return Variation_813
        assert_never(key)

    def __init__(self, arg : Variation_814_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_800:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_813:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_800, Variation_800_Arg]) -> 'Variation_814':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_813, Variation_813_Arg]) -> 'Variation_814':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_815_Arg : TypeAlias = Raw
class Variation_815(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No RWC Capability',
        1: 'RWC/RA/OCM Capability',
        2: 'RWC/OCM Capability',
        3: 'Invalid ASTERIX Value',
    }

    def __init__(self, arg : Variation_815_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_816_Arg_Group = TypedDict('Variation_816_Arg_Group', {
    'EP': Union[Variation_803, Variation_803_Arg],
    'VAL': Union[Variation_815, Variation_815_Arg],
})
Variation_816_Arg : TypeAlias = Union[Raw, Variation_816_Arg_Group]
class Variation_816(Group):
    variation = 'Group'

    bit_size = 3

    subitems_list = [
        ('EP', Variation_803),
        ('VAL', Variation_815),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_803, 0, 1),
        'VAL': ('Value', Variation_815, 1, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_803]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_815]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_803'], Type['Variation_815']]:
        if key == 'EP':
            return Variation_803
        if key == 'VAL':
            return Variation_815
        assert_never(key)

    def __init__(self, arg : Variation_816_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_803:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_815:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_803, Variation_803_Arg]) -> 'Variation_816':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_815, Variation_815_Arg]) -> 'Variation_816':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_817_Arg_Group = TypedDict('Variation_817_Arg_Group', {
    'EP': Union[Variation_810, Variation_810_Arg],
    'VAL': Union[Variation_97, Variation_97_Arg],
})
Variation_817_Arg : TypeAlias = Union[Raw, Variation_817_Arg_Group]
class Variation_817(Group):
    variation = 'Group'

    bit_size = 4

    subitems_list = [
        ('EP', Variation_810),
        ('VAL', Variation_97),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_810, 0, 1),
        'VAL': ('Value', Variation_97, 1, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_810]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_97]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_810'], Type['Variation_97']]:
        if key == 'EP':
            return Variation_810
        if key == 'VAL':
            return Variation_97
        assert_never(key)

    def __init__(self, arg : Variation_817_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_810:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_97:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_810, Variation_810_Arg]) -> 'Variation_817':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_97, Variation_97_Arg]) -> 'Variation_817':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_818_Arg : TypeAlias = Raw
class Variation_818(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Vertical Only',
        1: 'Horizontal Only',
        2: 'Blended',
        3: 'Vertical Only or Horizontal Only per intruder',
    }

    def __init__(self, arg : Variation_818_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_819_Arg_Group = TypedDict('Variation_819_Arg_Group', {
    'EP': Union[Variation_803, Variation_803_Arg],
    'VAL': Union[Variation_818, Variation_818_Arg],
})
Variation_819_Arg : TypeAlias = Union[Raw, Variation_819_Arg_Group]
class Variation_819(Group):
    variation = 'Group'

    bit_size = 3

    subitems_list = [
        ('EP', Variation_803),
        ('VAL', Variation_818),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_803, 0, 1),
        'VAL': ('Value', Variation_818, 1, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_803]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_818]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_803'], Type['Variation_818']]:
        if key == 'EP':
            return Variation_803
        if key == 'VAL':
            return Variation_818
        assert_never(key)

    def __init__(self, arg : Variation_819_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_803:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_818:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_803, Variation_803_Arg]) -> 'Variation_819':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_818, Variation_818_Arg]) -> 'Variation_819':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_820_Arg : TypeAlias = Raw
class Variation_820(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3
    table = {
        0: 'Active CAS (TCAS II) or no CAS',
        1: 'Active CAS (not TCAS II)',
        2: 'Active CAS (not TCAS II) with OCM transmit capability',
        3: 'Active CAS of Junior Status',
        4: 'Passive CAS with 1030TCAS Resolution Message receive capability',
        5: 'Passive CAS with only OCM receive capability',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_820_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_821_Arg_Group = TypedDict('Variation_821_Arg_Group', {
    'EP': Union[Variation_810, Variation_810_Arg],
    'VAL': Union[Variation_820, Variation_820_Arg],
})
Variation_821_Arg : TypeAlias = Union[Raw, Variation_821_Arg_Group]
class Variation_821(Group):
    variation = 'Group'

    bit_size = 4

    subitems_list = [
        ('EP', Variation_810),
        ('VAL', Variation_820),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Population Bit', Variation_810, 0, 1),
        'VAL': ('Value', Variation_820, 1, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_810]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_820]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_810'], Type['Variation_820']]:
        if key == 'EP':
            return Variation_810
        if key == 'VAL':
            return Variation_820
        assert_never(key)

    def __init__(self, arg : Variation_821_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_810:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_820:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_810, Variation_810_Arg]) -> 'Variation_821':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_820, Variation_820_Arg]) -> 'Variation_821':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_822_Arg : TypeAlias = Raw
class Variation_822(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Element Not Populated',
        1: 'Element Populated',
    }

    def __init__(self, arg : Variation_822_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_823_Arg : TypeAlias = Raw
class Variation_823(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 5
    table = {
        0: 'No data',
        1: '0 ≤ TAO ≤ 1',
        2: '1 < TAO ≤ 2',
        3: '2 < TAO ≤ 4',
        4: '4 < TAO ≤ 6',
        5: '6 < TAO ≤ 8',
        6: '8 < TAO ≤ 10',
        7: '10 < TAO ≤ 12',
        8: '12 < TAO ≤ 14',
        9: '14 < TAO ≤ 16',
        10: '16 < TAO ≤ 18',
        11: '18 < TAO ≤ 20',
        12: '20 < TAO ≤ 22',
        13: '22 < TAO ≤ 24',
        14: '24 < TAO ≤ 26',
        15: '26 < TAO ≤ 28',
        16: '28 < TAO ≤ 30',
        17: '30 < TAO ≤ 32',
        18: '32 < TAO ≤ 34',
        19: '34 < TAO ≤ 36',
        20: '36 < TAO ≤ 38',
        21: '38 < TAO ≤ 40',
        22: '40 < TAO ≤ 42',
        23: '42 < TAO ≤ 44',
        24: '44 < TAO ≤ 46',
        25: '46 < TAO ≤ 48',
        26: '48 < TAO ≤ 50',
        27: '50 < TAO ≤ 52',
        28: '52 < TAO ≤ 54',
        29: '54 < TAO ≤ 56',
        30: '56 < TAO ≤ 58',
        31: 'TAO > 58',
    }

    def __init__(self, arg : Variation_823_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_824_Arg_Group = TypedDict('Variation_824_Arg_Group', {
    'EP': Union[Variation_822, Variation_822_Arg],
    'VAL': Union[Variation_823, Variation_823_Arg],
})
Variation_824_Arg : TypeAlias = Union[Raw, Variation_824_Arg_Group]
class Variation_824(Group):
    variation = 'Group'

    bit_size = 7

    subitems_list = [
        ('EP', Variation_822),
        ('VAL', Variation_823),
        Spare(6, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_822, 0, 1),
        'VAL': ('Value', Variation_823, 1, 5),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_822]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_823]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_822'], Type['Variation_823']]:
        if key == 'EP':
            return Variation_822
        if key == 'VAL':
            return Variation_823
        assert_never(key)

    def __init__(self, arg : Variation_824_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_822:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_823:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_822, Variation_822_Arg]) -> 'Variation_824':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_823, Variation_823_Arg]) -> 'Variation_824':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_825_Arg_Group_1 = TypedDict('Variation_825_Arg_Group_1', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
})
Variation_825_Arg_Group_2 = TypedDict('Variation_825_Arg_Group_2', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
    'PS3': Union[Variation_805, Variation_805_Arg],
    'TPW': Union[Variation_807, Variation_807_Arg],
})
Variation_825_Arg_Group_3 = TypedDict('Variation_825_Arg_Group_3', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
    'PS3': Union[Variation_805, Variation_805_Arg],
    'TPW': Union[Variation_807, Variation_807_Arg],
    'TSI': Union[Variation_809, Variation_809_Arg],
    'MUO': Union[Variation_812, Variation_812_Arg],
    'RWC': Union[Variation_814, Variation_814_Arg],
})
Variation_825_Arg_Group_4 = TypedDict('Variation_825_Arg_Group_4', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
    'PS3': Union[Variation_805, Variation_805_Arg],
    'TPW': Union[Variation_807, Variation_807_Arg],
    'TSI': Union[Variation_809, Variation_809_Arg],
    'MUO': Union[Variation_812, Variation_812_Arg],
    'RWC': Union[Variation_814, Variation_814_Arg],
    'DAA': Union[Variation_816, Variation_816_Arg],
    'DF17CA': Union[Variation_817, Variation_817_Arg],
})
Variation_825_Arg_Group_5 = TypedDict('Variation_825_Arg_Group_5', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
    'PS3': Union[Variation_805, Variation_805_Arg],
    'TPW': Union[Variation_807, Variation_807_Arg],
    'TSI': Union[Variation_809, Variation_809_Arg],
    'MUO': Union[Variation_812, Variation_812_Arg],
    'RWC': Union[Variation_814, Variation_814_Arg],
    'DAA': Union[Variation_816, Variation_816_Arg],
    'DF17CA': Union[Variation_817, Variation_817_Arg],
    'SVH': Union[Variation_819, Variation_819_Arg],
    'CATC': Union[Variation_821, Variation_821_Arg],
})
Variation_825_Arg_Group_6 = TypedDict('Variation_825_Arg_Group_6', {
    'ES': Union[Variation_765, Variation_765_Arg],
    'UAT': Union[Variation_766, Variation_766_Arg],
    'RCE': Union[Variation_799, Variation_799_Arg],
    'RRL': Union[Variation_802, Variation_802_Arg],
    'PS3': Union[Variation_805, Variation_805_Arg],
    'TPW': Union[Variation_807, Variation_807_Arg],
    'TSI': Union[Variation_809, Variation_809_Arg],
    'MUO': Union[Variation_812, Variation_812_Arg],
    'RWC': Union[Variation_814, Variation_814_Arg],
    'DAA': Union[Variation_816, Variation_816_Arg],
    'DF17CA': Union[Variation_817, Variation_817_Arg],
    'SVH': Union[Variation_819, Variation_819_Arg],
    'CATC': Union[Variation_821, Variation_821_Arg],
    'TAO': Union[Variation_824, Variation_824_Arg],
})
Variation_825_Arg : TypeAlias = Union[
    int,
    Variation_825_Arg_Group_1,
    Tuple[int],
    Variation_825_Arg_Group_2,
    Tuple[int,int],
    Variation_825_Arg_Group_3,
    Tuple[int,int,int],
    Variation_825_Arg_Group_4,
    Tuple[int,int,int,int],
    Variation_825_Arg_Group_5,
    Tuple[int,int,int,int,int],
    Variation_825_Arg_Group_6,
    Tuple[int,int,int,int,int,int],
]
class Variation_825(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('ES', Variation_765),
            ('UAT', Variation_766),
            ('RCE', Variation_799),
            ('RRL', Variation_802),
        ],
        [
            ('PS3', Variation_805),
            ('TPW', Variation_807),
        ],
        [
            ('TSI', Variation_809),
            ('MUO', Variation_812),
            ('RWC', Variation_814),
        ],
        [
            ('DAA', Variation_816),
            ('DF17CA', Variation_817),
        ],
        [
            ('SVH', Variation_819),
            ('CATC', Variation_821),
        ],
        [
            ('TAO', Variation_824),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ES': ('ES IN Capability', Variation_765, 0, 1),
        'UAT': ('UAT IN Capability', Variation_766, 1, 1),
        'RCE': ('Reduced Capability Equipment', Variation_799, 2, 3),
        'RRL': ('Reply Rate Limiting', Variation_802, 5, 2),
        'PS3': ('Priority Status for Version 3 ADS-B Systems', Variation_805, 0, 4),
        'TPW': ('Transmit Power', Variation_807, 4, 3),
        'TSI': ('Transponder Side Indication', Variation_809, 0, 3),
        'MUO': ('Manned / Unmanned Operation', Variation_812, 3, 2),
        'RWC': ('Remain Well Clear Corrective Alert', Variation_814, 5, 2),
        'DAA': ('Detectand Avoid Capabilities', Variation_816, 0, 3),
        'DF17CA': ('Transponder Capability', Variation_817, 3, 4),
        'SVH': ('Sense Vertical & Horizontal', Variation_819, 0, 3),
        'CATC': ('CAS Type & Capability', Variation_821, 3, 4),
        'TAO': ('Transponder Antenna Offset', Variation_824, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ES']) -> Type[Variation_765]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_766]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RCE']) -> Type[Variation_799]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RRL']) -> Type[Variation_802]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PS3']) -> Type[Variation_805]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TPW']) -> Type[Variation_807]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSI']) -> Type[Variation_809]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MUO']) -> Type[Variation_812]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RWC']) -> Type[Variation_814]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DAA']) -> Type[Variation_816]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DF17CA']) -> Type[Variation_817]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SVH']) -> Type[Variation_819]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CATC']) -> Type[Variation_821]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAO']) -> Type[Variation_824]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ES'], Literal['UAT'], Literal['RCE'], Literal['RRL'], Literal['PS3'], Literal['TPW'], Literal['TSI'], Literal['MUO'], Literal['RWC'], Literal['DAA'], Literal['DF17CA'], Literal['SVH'], Literal['CATC'], Literal['TAO']]) -> Union[Type['Variation_765'], Type['Variation_766'], Type['Variation_799'], Type['Variation_802'], Type['Variation_805'], Type['Variation_807'], Type['Variation_809'], Type['Variation_812'], Type['Variation_814'], Type['Variation_816'], Type['Variation_817'], Type['Variation_819'], Type['Variation_821'], Type['Variation_824']]:
        if key == 'ES':
            return Variation_765
        if key == 'UAT':
            return Variation_766
        if key == 'RCE':
            return Variation_799
        if key == 'RRL':
            return Variation_802
        if key == 'PS3':
            return Variation_805
        if key == 'TPW':
            return Variation_807
        if key == 'TSI':
            return Variation_809
        if key == 'MUO':
            return Variation_812
        if key == 'RWC':
            return Variation_814
        if key == 'DAA':
            return Variation_816
        if key == 'DF17CA':
            return Variation_817
        if key == 'SVH':
            return Variation_819
        if key == 'CATC':
            return Variation_821
        if key == 'TAO':
            return Variation_824
        assert_never(key)

    def __init__(self, arg : Variation_825_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_825_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_825_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_825_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_825_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            if Variation_825_Arg_Group_5.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(5, arg)); return
            if Variation_825_Arg_Group_6.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(6, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ES']) -> Variation_765:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_766:
        ...

    @overload
    def get_item(self, name : Literal['RCE']) -> Variation_799:
        ...

    @overload
    def get_item(self, name : Literal['RRL']) -> Variation_802:
        ...

    @overload
    def get_item(self, name : Literal['PS3']) -> Variation_805:
        ...

    @overload
    def get_item(self, name : Literal['TPW']) -> Variation_807:
        ...

    @overload
    def get_item(self, name : Literal['TSI']) -> Variation_809:
        ...

    @overload
    def get_item(self, name : Literal['MUO']) -> Variation_812:
        ...

    @overload
    def get_item(self, name : Literal['RWC']) -> Variation_814:
        ...

    @overload
    def get_item(self, name : Literal['DAA']) -> Variation_816:
        ...

    @overload
    def get_item(self, name : Literal['DF17CA']) -> Variation_817:
        ...

    @overload
    def get_item(self, name : Literal['SVH']) -> Variation_819:
        ...

    @overload
    def get_item(self, name : Literal['CATC']) -> Variation_821:
        ...

    @overload
    def get_item(self, name : Literal['TAO']) -> Variation_824:
        ...

    def get_item(self, name : Union[Literal['ES'], Literal['UAT'], Literal['RCE'], Literal['RRL'], Literal['PS3'], Literal['TPW'], Literal['TSI'], Literal['MUO'], Literal['RWC'], Literal['DAA'], Literal['DF17CA'], Literal['SVH'], Literal['CATC'], Literal['TAO']]) -> Any:
        return self._get_item(name)

Variation_826_Arg = TypedDict('Variation_826_Arg', {
    'BPS': Union[Variation_748, Variation_748_Arg],
    'SH': Union[Variation_752, Variation_752_Arg],
    'NAV': Union[Variation_796, Variation_796_Arg],
    'GAO': Union[Variation_0, Variation_0_Arg],
    'SGV': Union[Variation_764, Variation_764_Arg],
    'STA': Union[Variation_825, Variation_825_Arg],
    'TNH': Union[Variation_14, Variation_14_Arg],
    'MES': Union[Variation_791, Variation_791_Arg],
}, total=False)
class Variation_826(Compound):
    variation = 'Compound'

    fspec_fx = False
    fspec_max_bytes = 1

    subitems_list = [
        ('BPS', Variation_748),
        ('SH', Variation_752),
        ('NAV', Variation_796),
        ('GAO', Variation_0),
        ('SGV', Variation_764),
        ('STA', Variation_825),
        ('TNH', Variation_14),
        ('MES', Variation_791),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'BPS': (Variation_748, 0x80),
        'SH': (Variation_752, 0x40),
        'NAV': (Variation_796, 0x20),
        'GAO': (Variation_0, 0x10),
        'SGV': (Variation_764, 0x08),
        'STA': (Variation_825, 0x04),
        'TNH': (Variation_14, 0x02),
        'MES': (Variation_791, 0x01),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_748]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SH']) -> Type[Variation_752]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NAV']) -> Type[Variation_796]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAO']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SGV']) -> Type[Variation_764]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STA']) -> Type[Variation_825]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TNH']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MES']) -> Type[Variation_791]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['BPS'], Literal['SH'], Literal['NAV'], Literal['GAO'], Literal['SGV'], Literal['STA'], Literal['TNH'], Literal['MES']]) -> Union[Type['Variation_748'], Type['Variation_752'], Type['Variation_796'], Type['Variation_0'], Type['Variation_764'], Type['Variation_825'], Type['Variation_14'], Type['Variation_791']]:
        if key == 'BPS':
            return Variation_748
        if key == 'SH':
            return Variation_752
        if key == 'NAV':
            return Variation_796
        if key == 'GAO':
            return Variation_0
        if key == 'SGV':
            return Variation_764
        if key == 'STA':
            return Variation_825
        if key == 'TNH':
            return Variation_14
        if key == 'MES':
            return Variation_791
        assert_never(key)

    def __init__(self, arg : Optional[Variation_826_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_748, Variation_748_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['SH'], val : Union[Variation_752, Variation_752_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['NAV'], val : Union[Variation_796, Variation_796_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['GAO'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['SGV'], val : Union[Variation_764, Variation_764_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['STA'], val : Union[Variation_825, Variation_825_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['TNH'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_826':
        ...

    @overload
    def set_item(self, name : Literal['MES'], val : Union[Variation_791, Variation_791_Arg]) -> 'Variation_826':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['SH']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['NAV']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['GAO']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['SGV']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['STA']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['TNH']) -> 'Variation_826':
        ...

    @overload
    def del_item(self, name : Literal['MES']) -> 'Variation_826':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_748:
        ...

    @overload
    def get_item(self, name : Literal['SH']) -> Variation_752:
        ...

    @overload
    def get_item(self, name : Literal['NAV']) -> Variation_796:
        ...

    @overload
    def get_item(self, name : Literal['GAO']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SGV']) -> Variation_764:
        ...

    @overload
    def get_item(self, name : Literal['STA']) -> Variation_825:
        ...

    @overload
    def get_item(self, name : Literal['TNH']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['MES']) -> Variation_791:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_827_Arg : TypeAlias = Raw
class Variation_827(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: '24-Bit ICAO address',
        1: 'Duplicate address',
        2: 'Surface vehicle address',
        3: 'Anonymous address',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_827_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_828_Arg : TypeAlias = Raw
class Variation_828(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2
    table = {
        0: '25 ft',
        1: '100 ft',
        2: 'Unknown',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_828_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_829_Arg : TypeAlias = Raw
class Variation_829(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Range Check passed, CPR Validation pending',
    }

    def __init__(self, arg : Variation_829_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_830_Arg : TypeAlias = Raw
class Variation_830(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Report from target transponder',
        1: 'Report from field monitor (fixed transponder)',
    }

    def __init__(self, arg : Variation_830_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_831_Arg : TypeAlias = Raw
class Variation_831(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Equipment capable to provide Selected Altitude',
        1: 'Equipment not capable to provide Selected Altitude',
    }

    def __init__(self, arg : Variation_831_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_832_Arg : TypeAlias = Raw
class Variation_832(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Report valid',
        1: 'Report suspect',
        2: 'No information',
        3: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_832_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_833_Arg : TypeAlias = Raw
class Variation_833(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default (see note)',
        1: 'Independent Position Check failed',
    }

    def __init__(self, arg : Variation_833_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_834_Arg : TypeAlias = Raw
class Variation_834(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'NOGO-bit not set',
        1: 'NOGO-bit set',
    }

    def __init__(self, arg : Variation_834_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_835_Arg : TypeAlias = Raw
class Variation_835(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'CPR Validation correct',
        1: 'CPR Validation failed',
    }

    def __init__(self, arg : Variation_835_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_836_Arg : TypeAlias = Raw
class Variation_836(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'LDPJ not detected',
        1: 'LDPJ detected',
    }

    def __init__(self, arg : Variation_836_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_837_Arg : TypeAlias = Raw
class Variation_837(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Range Check failed',
    }

    def __init__(self, arg : Variation_837_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_838_Arg_Group_1 = TypedDict('Variation_838_Arg_Group_1', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
})
Variation_838_Arg_Group_2 = TypedDict('Variation_838_Arg_Group_2', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
})
Variation_838_Arg_Group_3 = TypedDict('Variation_838_Arg_Group_3', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
    'IPC': Union[Variation_833, Variation_833_Arg],
    'NOGO': Union[Variation_834, Variation_834_Arg],
    'CPR': Union[Variation_835, Variation_835_Arg],
    'LDPJ': Union[Variation_836, Variation_836_Arg],
    'RCF': Union[Variation_837, Variation_837_Arg],
})
Variation_838_Arg : TypeAlias = Union[
    int,
    Variation_838_Arg_Group_1,
    Tuple[int],
    Variation_838_Arg_Group_2,
    Tuple[int,int],
    Variation_838_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_838(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('ATP', Variation_827),
            ('ARC', Variation_828),
            ('RC', Variation_829),
            ('RAB', Variation_830),
        ],
        [
            ('DCR', Variation_681),
            ('GBS', Variation_682),
            ('SIM', Variation_683),
            ('TST', Variation_684),
            ('SAA', Variation_831),
            ('CL', Variation_832),
        ],
        [
            Spare(0, 2),
            ('IPC', Variation_833),
            ('NOGO', Variation_834),
            ('CPR', Variation_835),
            ('LDPJ', Variation_836),
            ('RCF', Variation_837),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ATP': ('Address Type', Variation_827, 0, 3),
        'ARC': ('Altitude Reporting Capability', Variation_828, 3, 2),
        'RC': ('Range Check', Variation_829, 5, 1),
        'RAB': ('Report Type', Variation_830, 6, 1),
        'DCR': ('Differential Correction', Variation_681, 0, 1),
        'GBS': ('Ground Bit Setting', Variation_682, 1, 1),
        'SIM': ('Simulated Target', Variation_683, 2, 1),
        'TST': ('Test Target', Variation_684, 3, 1),
        'SAA': ('Selected Altitude Available', Variation_831, 4, 1),
        'CL': ('Confidence Level', Variation_832, 5, 2),
        'IPC': ('Independent Position Check', Variation_833, 2, 1),
        'NOGO': ('No-go Bit Status', Variation_834, 3, 1),
        'CPR': ('Compact Position Reporting', Variation_835, 4, 1),
        'LDPJ': ('Local Decoding Position Jump', Variation_836, 5, 1),
        'RCF': ('Range Check', Variation_837, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ATP']) -> Type[Variation_827]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_828]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RC']) -> Type[Variation_829]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_830]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DCR']) -> Type[Variation_681]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_682]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_683]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_684]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAA']) -> Type[Variation_831]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CL']) -> Type[Variation_832]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IPC']) -> Type[Variation_833]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_834]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPR']) -> Type[Variation_835]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LDPJ']) -> Type[Variation_836]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RCF']) -> Type[Variation_837]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF']]) -> Union[Type['Variation_827'], Type['Variation_828'], Type['Variation_829'], Type['Variation_830'], Type['Variation_681'], Type['Variation_682'], Type['Variation_683'], Type['Variation_684'], Type['Variation_831'], Type['Variation_832'], Type['Variation_833'], Type['Variation_834'], Type['Variation_835'], Type['Variation_836'], Type['Variation_837']]:
        if key == 'ATP':
            return Variation_827
        if key == 'ARC':
            return Variation_828
        if key == 'RC':
            return Variation_829
        if key == 'RAB':
            return Variation_830
        if key == 'DCR':
            return Variation_681
        if key == 'GBS':
            return Variation_682
        if key == 'SIM':
            return Variation_683
        if key == 'TST':
            return Variation_684
        if key == 'SAA':
            return Variation_831
        if key == 'CL':
            return Variation_832
        if key == 'IPC':
            return Variation_833
        if key == 'NOGO':
            return Variation_834
        if key == 'CPR':
            return Variation_835
        if key == 'LDPJ':
            return Variation_836
        if key == 'RCF':
            return Variation_837
        assert_never(key)

    def __init__(self, arg : Variation_838_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_838_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_838_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_838_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ATP']) -> Variation_827:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_828:
        ...

    @overload
    def get_item(self, name : Literal['RC']) -> Variation_829:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_830:
        ...

    @overload
    def get_item(self, name : Literal['DCR']) -> Variation_681:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_682:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_683:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_684:
        ...

    @overload
    def get_item(self, name : Literal['SAA']) -> Variation_831:
        ...

    @overload
    def get_item(self, name : Literal['CL']) -> Variation_832:
        ...

    @overload
    def get_item(self, name : Literal['IPC']) -> Variation_833:
        ...

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_834:
        ...

    @overload
    def get_item(self, name : Literal['CPR']) -> Variation_835:
        ...

    @overload
    def get_item(self, name : Literal['LDPJ']) -> Variation_836:
        ...

    @overload
    def get_item(self, name : Literal['RCF']) -> Variation_837:
        ...

    def get_item(self, name : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF']]) -> Any:
        return self._get_item(name)

Variation_839_Arg_Group = TypedDict('Variation_839_Arg_Group', {
    'TRNUM': Union[Variation_43, Variation_43_Arg],
})
Variation_839_Arg : TypeAlias = Union[Raw, Variation_839_Arg_Group]
class Variation_839(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('TRNUM', Variation_43),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRNUM': ('Track Number', Variation_43, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['TRNUM']]) -> Union[Type['Variation_43']]:
        if key == 'TRNUM':
            return Variation_43
        assert_never(key)

    def __init__(self, arg : Variation_839_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['TRNUM']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['TRNUM'], val : Union[Variation_43, Variation_43_Arg]) -> 'Variation_839':
        return self._set_item(name, val) # type: ignore

Variation_840_Arg : TypeAlias = Raw
class Variation_840(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Value in defined range',
        1: 'Value exceeds defined range',
    }

    def __init__(self, arg : Variation_840_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_841_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['kt']]]
class Variation_841(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 15
    quantity = Quantity('Unsigned', 1.0, 0, 'kt')

    def __init__(self, arg : Variation_841_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_842_Arg_Group = TypedDict('Variation_842_Arg_Group', {
    'RE': Union[Variation_840, Variation_840_Arg],
    'TAS': Union[Variation_841, Variation_841_Arg],
})
Variation_842_Arg : TypeAlias = Union[Raw, Variation_842_Arg_Group]
class Variation_842(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RE', Variation_840),
        ('TAS', Variation_841),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RE': ('Range Exceeded Indicator', Variation_840, 0, 1),
        'TAS': ('True Air Speed', Variation_841, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_840]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_841]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RE'], Literal['TAS']]) -> Union[Type['Variation_840'], Type['Variation_841']]:
        if key == 'RE':
            return Variation_840
        if key == 'TAS':
            return Variation_841
        assert_never(key)

    def __init__(self, arg : Variation_842_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_840:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_841:
        ...

    def get_item(self, name : Union[Literal['RE'], Literal['TAS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_840, Variation_840_Arg]) -> 'Variation_842':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_841, Variation_841_Arg]) -> 'Variation_842':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_843_Arg : TypeAlias = Raw
class Variation_843(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        3: 'Reserved',
        2: 'TOMRp whole seconds = (I021/073) Whole seconds - 1',
        1: 'TOMRp whole seconds = (I021/073) Whole seconds + 1',
        0: 'TOMRp whole seconds = (I021/073) Whole seconds',
    }

    def __init__(self, arg : Variation_843_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_844_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_844(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 30
    quantity = Quantity('Unsigned', 1.0, 30, 's')

    def __init__(self, arg : Variation_844_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_845_Arg_Group = TypedDict('Variation_845_Arg_Group', {
    'FSI': Union[Variation_843, Variation_843_Arg],
    'TOMRP': Union[Variation_844, Variation_844_Arg],
})
Variation_845_Arg : TypeAlias = Union[Raw, Variation_845_Arg_Group]
class Variation_845(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('FSI', Variation_843),
        ('TOMRP', Variation_844),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FSI': ('Full Second Indication', Variation_843, 0, 2),
        'TOMRP': ('Fractional Part of the Time of Message Reception for Position in the Ground Station', Variation_844, 2, 30),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FSI']) -> Type[Variation_843]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOMRP']) -> Type[Variation_844]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FSI'], Literal['TOMRP']]) -> Union[Type['Variation_843'], Type['Variation_844']]:
        if key == 'FSI':
            return Variation_843
        if key == 'TOMRP':
            return Variation_844
        assert_never(key)

    def __init__(self, arg : Variation_845_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['FSI']) -> Variation_843:
        ...

    @overload
    def get_item(self, name : Literal['TOMRP']) -> Variation_844:
        ...

    def get_item(self, name : Union[Literal['FSI'], Literal['TOMRP']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['FSI'], val : Union[Variation_843, Variation_843_Arg]) -> 'Variation_845':
        ...

    @overload
    def set_item(self, name : Literal['TOMRP'], val : Union[Variation_844, Variation_844_Arg]) -> 'Variation_845':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_846_Arg : TypeAlias = Raw
class Variation_846(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        3: 'Reserved',
        2: 'TOMRp whole seconds = (I021/075) Whole seconds - 1',
        1: 'TOMRp whole seconds = (I021/075) Whole seconds + 1',
        0: 'TOMRp whole seconds = (I021/075) Whole seconds',
    }

    def __init__(self, arg : Variation_846_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_847_Arg_Group = TypedDict('Variation_847_Arg_Group', {
    'FSI': Union[Variation_846, Variation_846_Arg],
    'TOMRP': Union[Variation_844, Variation_844_Arg],
})
Variation_847_Arg : TypeAlias = Union[Raw, Variation_847_Arg_Group]
class Variation_847(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('FSI', Variation_846),
        ('TOMRP', Variation_844),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FSI': ('Full Second Indication', Variation_846, 0, 2),
        'TOMRP': ('Fractional Part of the Time of Message Reception for Position in the Ground Station', Variation_844, 2, 30),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FSI']) -> Type[Variation_846]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOMRP']) -> Type[Variation_844]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FSI'], Literal['TOMRP']]) -> Union[Type['Variation_846'], Type['Variation_844']]:
        if key == 'FSI':
            return Variation_846
        if key == 'TOMRP':
            return Variation_844
        assert_never(key)

    def __init__(self, arg : Variation_847_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['FSI']) -> Variation_846:
        ...

    @overload
    def get_item(self, name : Literal['TOMRP']) -> Variation_844:
        ...

    def get_item(self, name : Union[Literal['FSI'], Literal['TOMRP']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['FSI'], val : Union[Variation_846, Variation_846_Arg]) -> 'Variation_847':
        ...

    @overload
    def set_item(self, name : Literal['TOMRP'], val : Union[Variation_844, Variation_844_Arg]) -> 'Variation_847':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_848_Arg : TypeAlias = Raw
class Variation_848(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3

    def __init__(self, arg : Variation_848_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_849_Arg : TypeAlias = Raw
class Variation_849(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 4

    def __init__(self, arg : Variation_849_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_850_Arg : TypeAlias = Raw
class Variation_850(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1

    def __init__(self, arg : Variation_850_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_851_Arg : TypeAlias = Raw
class Variation_851(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2

    def __init__(self, arg : Variation_851_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_852_Arg : TypeAlias = Raw
class Variation_852(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Measured per flight-hour',
        1: 'Measured per sample',
    }

    def __init__(self, arg : Variation_852_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_853_Arg : TypeAlias = Raw
class Variation_853(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 2

    def __init__(self, arg : Variation_853_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_854_Arg : TypeAlias = Raw
class Variation_854(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2

    def __init__(self, arg : Variation_854_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_855_Arg_Group_1 = TypedDict('Variation_855_Arg_Group_1', {
    'NUCRNACV': Union[Variation_848, Variation_848_Arg],
    'NUCPNIC': Union[Variation_849, Variation_849_Arg],
})
Variation_855_Arg_Group_2 = TypedDict('Variation_855_Arg_Group_2', {
    'NUCRNACV': Union[Variation_848, Variation_848_Arg],
    'NUCPNIC': Union[Variation_849, Variation_849_Arg],
    'NICBARO': Union[Variation_850, Variation_850_Arg],
    'SIL': Union[Variation_851, Variation_851_Arg],
    'NACP': Union[Variation_849, Variation_849_Arg],
})
Variation_855_Arg_Group_3 = TypedDict('Variation_855_Arg_Group_3', {
    'NUCRNACV': Union[Variation_848, Variation_848_Arg],
    'NUCPNIC': Union[Variation_849, Variation_849_Arg],
    'NICBARO': Union[Variation_850, Variation_850_Arg],
    'SIL': Union[Variation_851, Variation_851_Arg],
    'NACP': Union[Variation_849, Variation_849_Arg],
    'SILS': Union[Variation_852, Variation_852_Arg],
    'SDA': Union[Variation_853, Variation_853_Arg],
    'GVA': Union[Variation_854, Variation_854_Arg],
})
Variation_855_Arg_Group_4 = TypedDict('Variation_855_Arg_Group_4', {
    'NUCRNACV': Union[Variation_848, Variation_848_Arg],
    'NUCPNIC': Union[Variation_849, Variation_849_Arg],
    'NICBARO': Union[Variation_850, Variation_850_Arg],
    'SIL': Union[Variation_851, Variation_851_Arg],
    'NACP': Union[Variation_849, Variation_849_Arg],
    'SILS': Union[Variation_852, Variation_852_Arg],
    'SDA': Union[Variation_853, Variation_853_Arg],
    'GVA': Union[Variation_854, Variation_854_Arg],
    'PIC': Union[Variation_192, Variation_192_Arg],
})
Variation_855_Arg : TypeAlias = Union[
    int,
    Variation_855_Arg_Group_1,
    Tuple[int],
    Variation_855_Arg_Group_2,
    Tuple[int,int],
    Variation_855_Arg_Group_3,
    Tuple[int,int,int],
    Variation_855_Arg_Group_4,
    Tuple[int,int,int,int],
]
class Variation_855(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('NUCRNACV', Variation_848),
            ('NUCPNIC', Variation_849),
        ],
        [
            ('NICBARO', Variation_850),
            ('SIL', Variation_851),
            ('NACP', Variation_849),
        ],
        [
            Spare(0, 2),
            ('SILS', Variation_852),
            ('SDA', Variation_853),
            ('GVA', Variation_854),
        ],
        [
            ('PIC', Variation_192),
            Spare(4, 3),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NUCRNACV': ('Navigation Uncertainty Category for Velocity NUCr or the Navigation Accuracy Category for Velocity NACv', Variation_848, 0, 3),
        'NUCPNIC': ('Navigation Uncertainty Category for Position NUCp or Navigation Integrity Category NIC', Variation_849, 3, 4),
        'NICBARO': ('Navigation Integrity Category for Barometric Altitude', Variation_850, 0, 1),
        'SIL': ('Surveillance (version 1) or Source (version 2) Integrity Level', Variation_851, 1, 2),
        'NACP': ('Navigation Accuracy Category for Position', Variation_849, 3, 4),
        'SILS': ('SIL-Supplement', Variation_852, 2, 1),
        'SDA': ('Horizontal Position System Design Assurance Level (as Defined in Version 2)', Variation_853, 3, 2),
        'GVA': ('Geometric Altitude Accuracy', Variation_854, 5, 2),
        'PIC': ('Position Integrity Category', Variation_192, 0, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NUCRNACV']) -> Type[Variation_848]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NUCPNIC']) -> Type[Variation_849]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NICBARO']) -> Type[Variation_850]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIL']) -> Type[Variation_851]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NACP']) -> Type[Variation_849]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SILS']) -> Type[Variation_852]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDA']) -> Type[Variation_853]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVA']) -> Type[Variation_854]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PIC']) -> Type[Variation_192]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NUCRNACV'], Literal['NUCPNIC'], Literal['NICBARO'], Literal['SIL'], Literal['NACP'], Literal['SILS'], Literal['SDA'], Literal['GVA'], Literal['PIC']]) -> Union[Type['Variation_848'], Type['Variation_849'], Type['Variation_850'], Type['Variation_851'], Type['Variation_849'], Type['Variation_852'], Type['Variation_853'], Type['Variation_854'], Type['Variation_192']]:
        if key == 'NUCRNACV':
            return Variation_848
        if key == 'NUCPNIC':
            return Variation_849
        if key == 'NICBARO':
            return Variation_850
        if key == 'SIL':
            return Variation_851
        if key == 'NACP':
            return Variation_849
        if key == 'SILS':
            return Variation_852
        if key == 'SDA':
            return Variation_853
        if key == 'GVA':
            return Variation_854
        if key == 'PIC':
            return Variation_192
        assert_never(key)

    def __init__(self, arg : Variation_855_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_855_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_855_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_855_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_855_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NUCRNACV']) -> Variation_848:
        ...

    @overload
    def get_item(self, name : Literal['NUCPNIC']) -> Variation_849:
        ...

    @overload
    def get_item(self, name : Literal['NICBARO']) -> Variation_850:
        ...

    @overload
    def get_item(self, name : Literal['SIL']) -> Variation_851:
        ...

    @overload
    def get_item(self, name : Literal['NACP']) -> Variation_849:
        ...

    @overload
    def get_item(self, name : Literal['SILS']) -> Variation_852:
        ...

    @overload
    def get_item(self, name : Literal['SDA']) -> Variation_853:
        ...

    @overload
    def get_item(self, name : Literal['GVA']) -> Variation_854:
        ...

    @overload
    def get_item(self, name : Literal['PIC']) -> Variation_192:
        ...

    def get_item(self, name : Union[Literal['NUCRNACV'], Literal['NUCPNIC'], Literal['NICBARO'], Literal['SIL'], Literal['NACP'], Literal['SILS'], Literal['SDA'], Literal['GVA'], Literal['PIC']]) -> Any:
        return self._get_item(name)

Variation_856_Arg : TypeAlias = Raw
class Variation_856(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'The MOPS Version is supported by the GS',
        1: 'The MOPS Version is not supported by the GS',
    }

    def __init__(self, arg : Variation_856_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_857_Arg : TypeAlias = Raw
class Variation_857(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 3
    table = {
        0: 'ED102/DO-260 [Ref. 8]',
        1: 'DO-260A [Ref. 9]',
        2: 'ED102A/DO-260B [Ref. 11]',
    }

    def __init__(self, arg : Variation_857_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_858_Arg : TypeAlias = Raw
class Variation_858(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 3
    table = {
        0: 'Other',
        1: 'UAT',
        2: '1090 ES',
        3: 'VDL 4',
        4: 'Not assigned',
        5: 'Not assigned',
        6: 'Not assigned',
        7: 'Not assigned',
    }

    def __init__(self, arg : Variation_858_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_859_Arg_Group = TypedDict('Variation_859_Arg_Group', {
    'VNS': Union[Variation_856, Variation_856_Arg],
    'VN': Union[Variation_857, Variation_857_Arg],
    'LTT': Union[Variation_858, Variation_858_Arg],
})
Variation_859_Arg : TypeAlias = Union[Raw, Variation_859_Arg_Group]
class Variation_859(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 1),
        ('VNS', Variation_856),
        ('VN', Variation_857),
        ('LTT', Variation_858),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VNS': ('Version Not Supported', Variation_856, 1, 1),
        'VN': ('Version Number', Variation_857, 2, 3),
        'LTT': ('Link Technology Type', Variation_858, 5, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VNS']) -> Type[Variation_856]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VN']) -> Type[Variation_857]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LTT']) -> Type[Variation_858]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VNS'], Literal['VN'], Literal['LTT']]) -> Union[Type['Variation_856'], Type['Variation_857'], Type['Variation_858']]:
        if key == 'VNS':
            return Variation_856
        if key == 'VN':
            return Variation_857
        if key == 'LTT':
            return Variation_858
        assert_never(key)

    def __init__(self, arg : Variation_859_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VNS']) -> Variation_856:
        ...

    @overload
    def get_item(self, name : Literal['VN']) -> Variation_857:
        ...

    @overload
    def get_item(self, name : Literal['LTT']) -> Variation_858:
        ...

    def get_item(self, name : Union[Literal['VNS'], Literal['VN'], Literal['LTT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VNS'], val : Union[Variation_856, Variation_856_Arg]) -> 'Variation_859':
        ...

    @overload
    def set_item(self, name : Literal['VN'], val : Union[Variation_857, Variation_857_Arg]) -> 'Variation_859':
        ...

    @overload
    def set_item(self, name : Literal['LTT'], val : Union[Variation_858, Variation_858_Arg]) -> 'Variation_859':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_860_Arg_Group = TypedDict('Variation_860_Arg_Group', {
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_860_Arg : TypeAlias = Union[Raw, Variation_860_Arg_Group]
class Variation_860(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MODE3A']]) -> Union[Type['Variation_19']]:
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_860_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MODE3A']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_860':
        return self._set_item(name, val) # type: ignore

Variation_861_Arg : TypeAlias = Raw
class Variation_861(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No intent change active',
        1: 'Intent change flag raised',
    }

    def __init__(self, arg : Variation_861_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_862_Arg : TypeAlias = Raw
class Variation_862(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'LNAV Mode engaged',
        1: 'LNAV Mode not engaged',
    }

    def __init__(self, arg : Variation_862_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_863_Arg : TypeAlias = Raw
class Variation_863(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No emergency / not reported',
        1: 'General emergency',
        2: 'Lifeguard / medical emergency',
        3: 'Minimum fuel',
        4: 'No communications',
        5: 'Unlawful interference',
        6: 'DOWNED Aircraft',
    }

    def __init__(self, arg : Variation_863_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_864_Arg : TypeAlias = Raw
class Variation_864(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 2
    table = {
        0: 'No condition reported',
        1: 'Permanent Alert (Emergency condition)',
        2: 'Temporary Alert (change in Mode 3/A Code other than emergency)',
        3: 'SPI set',
    }

    def __init__(self, arg : Variation_864_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_865_Arg_Group = TypedDict('Variation_865_Arg_Group', {
    'ICF': Union[Variation_861, Variation_861_Arg],
    'LNAV': Union[Variation_862, Variation_862_Arg],
    'PS': Union[Variation_863, Variation_863_Arg],
    'SS': Union[Variation_864, Variation_864_Arg],
})
Variation_865_Arg : TypeAlias = Union[Raw, Variation_865_Arg_Group]
class Variation_865(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('ICF', Variation_861),
        ('LNAV', Variation_862),
        Spare(2, 1),
        ('PS', Variation_863),
        ('SS', Variation_864),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ICF': ('Intent Change Flag (see Note)', Variation_861, 0, 1),
        'LNAV': ('LNAV Mode', Variation_862, 1, 1),
        'PS': ('Priority Status', Variation_863, 3, 3),
        'SS': ('Surveillance Status', Variation_864, 6, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ICF']) -> Type[Variation_861]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LNAV']) -> Type[Variation_862]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PS']) -> Type[Variation_863]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SS']) -> Type[Variation_864]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ICF'], Literal['LNAV'], Literal['PS'], Literal['SS']]) -> Union[Type['Variation_861'], Type['Variation_862'], Type['Variation_863'], Type['Variation_864']]:
        if key == 'ICF':
            return Variation_861
        if key == 'LNAV':
            return Variation_862
        if key == 'PS':
            return Variation_863
        if key == 'SS':
            return Variation_864
        assert_never(key)

    def __init__(self, arg : Variation_865_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ICF']) -> Variation_861:
        ...

    @overload
    def get_item(self, name : Literal['LNAV']) -> Variation_862:
        ...

    @overload
    def get_item(self, name : Literal['PS']) -> Variation_863:
        ...

    @overload
    def get_item(self, name : Literal['SS']) -> Variation_864:
        ...

    def get_item(self, name : Union[Literal['ICF'], Literal['LNAV'], Literal['PS'], Literal['SS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ICF'], val : Union[Variation_861, Variation_861_Arg]) -> 'Variation_865':
        ...

    @overload
    def set_item(self, name : Literal['LNAV'], val : Union[Variation_862, Variation_862_Arg]) -> 'Variation_865':
        ...

    @overload
    def set_item(self, name : Literal['PS'], val : Union[Variation_863, Variation_863_Arg]) -> 'Variation_865':
        ...

    @overload
    def set_item(self, name : Literal['SS'], val : Union[Variation_864, Variation_864_Arg]) -> 'Variation_865':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_866_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft/min']]]
class Variation_866(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 15
    quantity = Quantity('Signed', 25.0, 2, 'ft/min')

    def __init__(self, arg : Variation_866_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_867_Arg_Group = TypedDict('Variation_867_Arg_Group', {
    'RE': Union[Variation_840, Variation_840_Arg],
    'BVR': Union[Variation_866, Variation_866_Arg],
})
Variation_867_Arg : TypeAlias = Union[Raw, Variation_867_Arg_Group]
class Variation_867(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RE', Variation_840),
        ('BVR', Variation_866),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RE': ('Range Exceeded Indicator', Variation_840, 0, 1),
        'BVR': ('Barometric Vertical Rate', Variation_866, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_840]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_866]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RE'], Literal['BVR']]) -> Union[Type['Variation_840'], Type['Variation_866']]:
        if key == 'RE':
            return Variation_840
        if key == 'BVR':
            return Variation_866
        assert_never(key)

    def __init__(self, arg : Variation_867_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_840:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_866:
        ...

    def get_item(self, name : Union[Literal['RE'], Literal['BVR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_840, Variation_840_Arg]) -> 'Variation_867':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_866, Variation_866_Arg]) -> 'Variation_867':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_868_Arg_Group = TypedDict('Variation_868_Arg_Group', {
    'RE': Union[Variation_840, Variation_840_Arg],
    'GVR': Union[Variation_866, Variation_866_Arg],
})
Variation_868_Arg : TypeAlias = Union[Raw, Variation_868_Arg_Group]
class Variation_868(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RE', Variation_840),
        ('GVR', Variation_866),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RE': ('Range Exceeded Indicator', Variation_840, 0, 1),
        'GVR': ('Geometric Vertical Rate', Variation_866, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_840]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_866]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RE'], Literal['GVR']]) -> Union[Type['Variation_840'], Type['Variation_866']]:
        if key == 'RE':
            return Variation_840
        if key == 'GVR':
            return Variation_866
        assert_never(key)

    def __init__(self, arg : Variation_868_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_840:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_866:
        ...

    def get_item(self, name : Union[Literal['RE'], Literal['GVR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_840, Variation_840_Arg]) -> 'Variation_868':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_866, Variation_866_Arg]) -> 'Variation_868':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_869_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM/s']]]
class Variation_869(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 15
    quantity = Quantity('Unsigned', 1.0, 14, 'NM/s')

    def __init__(self, arg : Variation_869_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_870_Arg_Group = TypedDict('Variation_870_Arg_Group', {
    'RE': Union[Variation_840, Variation_840_Arg],
    'GS': Union[Variation_869, Variation_869_Arg],
    'TA': Union[Variation_14, Variation_14_Arg],
})
Variation_870_Arg : TypeAlias = Union[Raw, Variation_870_Arg_Group]
class Variation_870(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('RE', Variation_840),
        ('GS', Variation_869),
        ('TA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RE': ('Range Exceeded Indicator', Variation_840, 0, 1),
        'GS': ('Ground Speed Referenced to WGS-84', Variation_869, 1, 15),
        'TA': ('Track Angle Clockwise Reference to True North', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_840]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GS']) -> Type[Variation_869]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RE'], Literal['GS'], Literal['TA']]) -> Union[Type['Variation_840'], Type['Variation_869'], Type['Variation_14']]:
        if key == 'RE':
            return Variation_840
        if key == 'GS':
            return Variation_869
        if key == 'TA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_870_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_840:
        ...

    @overload
    def get_item(self, name : Literal['GS']) -> Variation_869:
        ...

    @overload
    def get_item(self, name : Literal['TA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RE'], Literal['GS'], Literal['TA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_840, Variation_840_Arg]) -> 'Variation_870':
        ...

    @overload
    def set_item(self, name : Literal['GS'], val : Union[Variation_869, Variation_869_Arg]) -> 'Variation_870':
        ...

    @overload
    def set_item(self, name : Literal['TA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_870':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_871_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°/s']]]
class Variation_871(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 10
    quantity = Quantity('Signed', 1.0, 5, '°/s')

    def __init__(self, arg : Variation_871_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_872_Arg_Group = TypedDict('Variation_872_Arg_Group', {
    'TAR': Union[Variation_871, Variation_871_Arg],
})
Variation_872_Arg : TypeAlias = Union[Raw, Variation_872_Arg_Group]
class Variation_872(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 6),
        ('TAR', Variation_871),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TAR': ('Track Angle Rate', Variation_871, 6, 10),
    }

    @classmethod
    def spec(cls, key : Union[Literal['TAR']]) -> Union[Type['Variation_871']]:
        if key == 'TAR':
            return Variation_871
        assert_never(key)

    def __init__(self, arg : Variation_872_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['TAR']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['TAR'], val : Union[Variation_871, Variation_871_Arg]) -> 'Variation_872':
        return self._set_item(name, val) # type: ignore

Variation_873_Arg : TypeAlias = Raw
class Variation_873(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'No ADS-B Emitter Category Information',
        1: 'Light aircraft <= 15500 lbs',
        2: '15500 lbs < small aircraft <75000 lbs',
        3: '75000 lbs < medium a/c < 300000 lbs',
        4: 'High Vortex Large',
        5: '300000 lbs <= heavy aircraft',
        6: 'Highly manoeuvrable (5g acceleration capability) and high speed (>400 knots cruise)',
        7: 'Reserved',
        8: 'Reserved',
        9: 'Reserved',
        10: 'Rotocraft',
        11: 'Glider / sailplane',
        12: 'Lighter-than-air',
        13: 'Unmanned aerial vehicle',
        14: 'Space / transatmospheric vehicle',
        15: 'Ultralight / handglider / paraglider',
        16: 'Parachutist / skydiver',
        17: 'Reserved',
        18: 'Reserved',
        19: 'Reserved',
        20: 'Surface emergency vehicle',
        21: 'Surface service vehicle',
        22: 'Fixed ground or tethered obstruction',
        23: 'Cluster obstacle',
        24: 'Line obstacle',
    }

    def __init__(self, arg : Variation_873_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_874_Arg_Group = TypedDict('Variation_874_Arg_Group', {
    'SAS': Union[Variation_719, Variation_719_Arg],
    'S': Union[Variation_720, Variation_720_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_874_Arg : TypeAlias = Union[Raw, Variation_874_Arg_Group]
class Variation_874(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAS', Variation_719),
        ('S', Variation_720),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAS': ('Source Availability', Variation_719, 0, 1),
        'S': ('Source', Variation_720, 1, 2),
        'ALT': ('Altitude', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAS']) -> Type[Variation_719]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['S']) -> Type[Variation_720]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAS'], Literal['S'], Literal['ALT']]) -> Union[Type['Variation_719'], Type['Variation_720'], Type['Variation_721']]:
        if key == 'SAS':
            return Variation_719
        if key == 'S':
            return Variation_720
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_874_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAS']) -> Variation_719:
        ...

    @overload
    def get_item(self, name : Literal['S']) -> Variation_720:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['SAS'], Literal['S'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAS'], val : Union[Variation_719, Variation_719_Arg]) -> 'Variation_874':
        ...

    @overload
    def set_item(self, name : Literal['S'], val : Union[Variation_720, Variation_720_Arg]) -> 'Variation_874':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_874':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_875_Arg : TypeAlias = Raw
class Variation_875(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Not active or unknown',
        1: 'Active',
    }

    def __init__(self, arg : Variation_875_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_876_Arg : TypeAlias = Raw
class Variation_876(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Not active or unknown',
        1: 'Active',
    }

    def __init__(self, arg : Variation_876_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_877_Arg : TypeAlias = Raw
class Variation_877(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not active or unknown',
        1: 'Active',
    }

    def __init__(self, arg : Variation_877_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_878_Arg_Group = TypedDict('Variation_878_Arg_Group', {
    'MV': Union[Variation_875, Variation_875_Arg],
    'AH': Union[Variation_876, Variation_876_Arg],
    'AM': Union[Variation_877, Variation_877_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_878_Arg : TypeAlias = Union[Raw, Variation_878_Arg_Group]
class Variation_878(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('MV', Variation_875),
        ('AH', Variation_876),
        ('AM', Variation_877),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MV': ('Manage Vertical Mode', Variation_875, 0, 1),
        'AH': ('Altitude Hold Mode', Variation_876, 1, 1),
        'AM': ('Approach Mode', Variation_877, 2, 1),
        'ALT': ('Altitude', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MV']) -> Type[Variation_875]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AH']) -> Type[Variation_876]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AM']) -> Type[Variation_877]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Union[Type['Variation_875'], Type['Variation_876'], Type['Variation_877'], Type['Variation_721']]:
        if key == 'MV':
            return Variation_875
        if key == 'AH':
            return Variation_876
        if key == 'AM':
            return Variation_877
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_878_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MV']) -> Variation_875:
        ...

    @overload
    def get_item(self, name : Literal['AH']) -> Variation_876:
        ...

    @overload
    def get_item(self, name : Literal['AM']) -> Variation_877:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MV'], val : Union[Variation_875, Variation_875_Arg]) -> 'Variation_878':
        ...

    @overload
    def set_item(self, name : Literal['AH'], val : Union[Variation_876, Variation_876_Arg]) -> 'Variation_878':
        ...

    @overload
    def set_item(self, name : Literal['AM'], val : Union[Variation_877, Variation_877_Arg]) -> 'Variation_878':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_878':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_879_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_879(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 1, 's')

    def __init__(self, arg : Variation_879_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_880_Arg : TypeAlias = Raw
class Variation_880(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'TCAS II or ACAS RA not active',
        1: 'TCAS RA active',
    }

    def __init__(self, arg : Variation_880_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_881_Arg : TypeAlias = Raw
class Variation_881(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No capability for Trajectory Change Reports',
        1: 'Support for TC+0 reports only',
        2: 'Support for multiple TC reports',
        3: 'Reserved',
    }

    def __init__(self, arg : Variation_881_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_882_Arg : TypeAlias = Raw
class Variation_882(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'No capability to support Target State Reports',
        1: 'Capable of supporting target State Reports',
    }

    def __init__(self, arg : Variation_882_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_883_Arg : TypeAlias = Raw
class Variation_883(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'No capability to generate ARV-reports',
        1: 'Capable of generate ARV-reports',
    }

    def __init__(self, arg : Variation_883_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_884_Arg : TypeAlias = Raw
class Variation_884(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'CDTI not operational',
        1: 'CDTI operational',
    }

    def __init__(self, arg : Variation_884_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_885_Arg : TypeAlias = Raw
class Variation_885(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'TCAS operational',
        1: 'TCAS not operational',
    }

    def __init__(self, arg : Variation_885_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_886_Arg : TypeAlias = Raw
class Variation_886(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Antenna Diversity',
        1: 'Single Antenna only',
    }

    def __init__(self, arg : Variation_886_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_887_Arg_Group = TypedDict('Variation_887_Arg_Group', {
    'RA': Union[Variation_880, Variation_880_Arg],
    'TC': Union[Variation_881, Variation_881_Arg],
    'TS': Union[Variation_882, Variation_882_Arg],
    'ARV': Union[Variation_883, Variation_883_Arg],
    'CDTIA': Union[Variation_884, Variation_884_Arg],
    'NOTTCAS': Union[Variation_885, Variation_885_Arg],
    'SA': Union[Variation_886, Variation_886_Arg],
})
Variation_887_Arg : TypeAlias = Union[Raw, Variation_887_Arg_Group]
class Variation_887(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('RA', Variation_880),
        ('TC', Variation_881),
        ('TS', Variation_882),
        ('ARV', Variation_883),
        ('CDTIA', Variation_884),
        ('NOTTCAS', Variation_885),
        ('SA', Variation_886),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RA': ('TCAS Resolution Advisory Active', Variation_880, 0, 1),
        'TC': ('Target Trajectory Change Report Capability', Variation_881, 1, 2),
        'TS': ('Target State Report Capability', Variation_882, 3, 1),
        'ARV': ('Air-Referenced Velocity Report Capability', Variation_883, 4, 1),
        'CDTIA': ('Cockpit Display of Traffic Information Airborne', Variation_884, 5, 1),
        'NOTTCAS': ('TCAS System Status', Variation_885, 6, 1),
        'SA': ('Single Antenna', Variation_886, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RA']) -> Type[Variation_880]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TC']) -> Type[Variation_881]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TS']) -> Type[Variation_882]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARV']) -> Type[Variation_883]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDTIA']) -> Type[Variation_884]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOTTCAS']) -> Type[Variation_885]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SA']) -> Type[Variation_886]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RA'], Literal['TC'], Literal['TS'], Literal['ARV'], Literal['CDTIA'], Literal['NOTTCAS'], Literal['SA']]) -> Union[Type['Variation_880'], Type['Variation_881'], Type['Variation_882'], Type['Variation_883'], Type['Variation_884'], Type['Variation_885'], Type['Variation_886']]:
        if key == 'RA':
            return Variation_880
        if key == 'TC':
            return Variation_881
        if key == 'TS':
            return Variation_882
        if key == 'ARV':
            return Variation_883
        if key == 'CDTIA':
            return Variation_884
        if key == 'NOTTCAS':
            return Variation_885
        if key == 'SA':
            return Variation_886
        assert_never(key)

    def __init__(self, arg : Variation_887_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RA']) -> Variation_880:
        ...

    @overload
    def get_item(self, name : Literal['TC']) -> Variation_881:
        ...

    @overload
    def get_item(self, name : Literal['TS']) -> Variation_882:
        ...

    @overload
    def get_item(self, name : Literal['ARV']) -> Variation_883:
        ...

    @overload
    def get_item(self, name : Literal['CDTIA']) -> Variation_884:
        ...

    @overload
    def get_item(self, name : Literal['NOTTCAS']) -> Variation_885:
        ...

    @overload
    def get_item(self, name : Literal['SA']) -> Variation_886:
        ...

    def get_item(self, name : Union[Literal['RA'], Literal['TC'], Literal['TS'], Literal['ARV'], Literal['CDTIA'], Literal['NOTTCAS'], Literal['SA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RA'], val : Union[Variation_880, Variation_880_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['TC'], val : Union[Variation_881, Variation_881_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['TS'], val : Union[Variation_882, Variation_882_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['ARV'], val : Union[Variation_883, Variation_883_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['CDTIA'], val : Union[Variation_884, Variation_884_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['NOTTCAS'], val : Union[Variation_885, Variation_885_Arg]) -> 'Variation_887':
        ...

    @overload
    def set_item(self, name : Literal['SA'], val : Union[Variation_886, Variation_886_Arg]) -> 'Variation_887':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_888_Arg : TypeAlias = Raw
class Variation_888(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Position transmitted is not ADS-B position reference point',
        1: 'Position transmitted is the ADS-B position reference point',
    }

    def __init__(self, arg : Variation_888_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_889_Arg : TypeAlias = Raw
class Variation_889(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'CDTI not operational',
        1: 'CDTI operational',
    }

    def __init__(self, arg : Variation_889_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_890_Arg : TypeAlias = Raw
class Variation_890(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: '>= 70 Watts',
        1: '< 70 Watts',
    }

    def __init__(self, arg : Variation_890_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_891_Arg : TypeAlias = Raw
class Variation_891(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Aircraft not receiving ATC-services',
        1: 'Aircraft receiving ATC services',
    }

    def __init__(self, arg : Variation_891_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_892_Arg : TypeAlias = Raw
class Variation_892(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'IDENT switch not active',
        1: 'IDENT switch active',
    }

    def __init__(self, arg : Variation_892_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_893_Arg_Group_1 = TypedDict('Variation_893_Arg_Group_1', {
    'POA': Union[Variation_888, Variation_888_Arg],
    'CDTIS': Union[Variation_889, Variation_889_Arg],
    'B2LOW': Union[Variation_890, Variation_890_Arg],
    'RAS': Union[Variation_891, Variation_891_Arg],
    'IDENT': Union[Variation_892, Variation_892_Arg],
})
Variation_893_Arg_Group_2 = TypedDict('Variation_893_Arg_Group_2', {
    'POA': Union[Variation_888, Variation_888_Arg],
    'CDTIS': Union[Variation_889, Variation_889_Arg],
    'B2LOW': Union[Variation_890, Variation_890_Arg],
    'RAS': Union[Variation_891, Variation_891_Arg],
    'IDENT': Union[Variation_892, Variation_892_Arg],
    'LW': Union[Variation_283, Variation_283_Arg],
})
Variation_893_Arg : TypeAlias = Union[
    int,
    Variation_893_Arg_Group_1,
    Tuple[int],
    Variation_893_Arg_Group_2,
    Tuple[int,int],
]
class Variation_893(Extended):
    variation = 'Extended'

    no_trailing_fx = True
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        8,
    ]

    subitems_list = [
        [
            Spare(0, 2),
            ('POA', Variation_888),
            ('CDTIS', Variation_889),
            ('B2LOW', Variation_890),
            ('RAS', Variation_891),
            ('IDENT', Variation_892),
        ],
        [
            Spare(0, 4),
            ('LW', Variation_283),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'POA': ('Position Offset Applied', Variation_888, 2, 1),
        'CDTIS': ('Cockpit Display of Traffic Information Surface', Variation_889, 3, 1),
        'B2LOW': ('Class B2 Transmit Power Less Than 70 Watts', Variation_890, 4, 1),
        'RAS': ('Receiving ATC Services', Variation_891, 5, 1),
        'IDENT': ('Setting of IDENT Switch', Variation_892, 6, 1),
        'LW': ('Length and Width of the Aircraft', Variation_283, 4, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['POA']) -> Type[Variation_888]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDTIS']) -> Type[Variation_889]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B2LOW']) -> Type[Variation_890]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAS']) -> Type[Variation_891]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IDENT']) -> Type[Variation_892]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LW']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['POA'], Literal['CDTIS'], Literal['B2LOW'], Literal['RAS'], Literal['IDENT'], Literal['LW']]) -> Union[Type['Variation_888'], Type['Variation_889'], Type['Variation_890'], Type['Variation_891'], Type['Variation_892'], Type['Variation_283']]:
        if key == 'POA':
            return Variation_888
        if key == 'CDTIS':
            return Variation_889
        if key == 'B2LOW':
            return Variation_890
        if key == 'RAS':
            return Variation_891
        if key == 'IDENT':
            return Variation_892
        if key == 'LW':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_893_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_893_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_893_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['POA']) -> Variation_888:
        ...

    @overload
    def get_item(self, name : Literal['CDTIS']) -> Variation_889:
        ...

    @overload
    def get_item(self, name : Literal['B2LOW']) -> Variation_890:
        ...

    @overload
    def get_item(self, name : Literal['RAS']) -> Variation_891:
        ...

    @overload
    def get_item(self, name : Literal['IDENT']) -> Variation_892:
        ...

    @overload
    def get_item(self, name : Literal['LW']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['POA'], Literal['CDTIS'], Literal['B2LOW'], Literal['RAS'], Literal['IDENT'], Literal['LW']]) -> Any:
        return self._get_item(name)

Variation_894_Arg : TypeAlias = Raw
class Variation_894(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 14

    def __init__(self, arg : Variation_894_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_895_Arg : TypeAlias = Raw
class Variation_895(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 4

    def __init__(self, arg : Variation_895_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_896_Arg : TypeAlias = Raw
class Variation_896(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1

    def __init__(self, arg : Variation_896_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_897_Arg : TypeAlias = Raw
class Variation_897(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2

    def __init__(self, arg : Variation_897_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_898_Arg : TypeAlias = Raw
class Variation_898(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 26

    def __init__(self, arg : Variation_898_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_899_Arg_Group = TypedDict('Variation_899_Arg_Group', {
    'TYP': Union[Variation_547, Variation_547_Arg],
    'STYP': Union[Variation_224, Variation_224_Arg],
    'ARA': Union[Variation_894, Variation_894_Arg],
    'RAC': Union[Variation_895, Variation_895_Arg],
    'RAT': Union[Variation_896, Variation_896_Arg],
    'MTE': Union[Variation_238, Variation_238_Arg],
    'TTI': Union[Variation_897, Variation_897_Arg],
    'TID': Union[Variation_898, Variation_898_Arg],
})
Variation_899_Arg : TypeAlias = Union[Raw, Variation_899_Arg_Group]
class Variation_899(Group):
    variation = 'Group'

    bit_size = 56

    subitems_list = [
        ('TYP', Variation_547),
        ('STYP', Variation_224),
        ('ARA', Variation_894),
        ('RAC', Variation_895),
        ('RAT', Variation_896),
        ('MTE', Variation_238),
        ('TTI', Variation_897),
        ('TID', Variation_898),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('Message Type (= 28 for 1090 ES, Version 2)', Variation_547, 0, 5),
        'STYP': ('Message Sub-type (= 2 for 1090 ES, Version 2)', Variation_224, 5, 3),
        'ARA': ('Active Resolution Advisories', Variation_894, 8, 14),
        'RAC': ('RAC (RA Complement) Record', Variation_895, 22, 4),
        'RAT': ('RA Terminated', Variation_896, 26, 1),
        'MTE': ('Multiple Threat Encounter', Variation_238, 27, 1),
        'TTI': ('Threat Type Indicator', Variation_897, 28, 2),
        'TID': ('Threat Identity Data', Variation_898, 30, 26),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_547]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STYP']) -> Type[Variation_224]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARA']) -> Type[Variation_894]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAC']) -> Type[Variation_895]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAT']) -> Type[Variation_896]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MTE']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTI']) -> Type[Variation_897]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_898]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['STYP'], Literal['ARA'], Literal['RAC'], Literal['RAT'], Literal['MTE'], Literal['TTI'], Literal['TID']]) -> Union[Type['Variation_547'], Type['Variation_224'], Type['Variation_894'], Type['Variation_895'], Type['Variation_896'], Type['Variation_238'], Type['Variation_897'], Type['Variation_898']]:
        if key == 'TYP':
            return Variation_547
        if key == 'STYP':
            return Variation_224
        if key == 'ARA':
            return Variation_894
        if key == 'RAC':
            return Variation_895
        if key == 'RAT':
            return Variation_896
        if key == 'MTE':
            return Variation_238
        if key == 'TTI':
            return Variation_897
        if key == 'TID':
            return Variation_898
        assert_never(key)

    def __init__(self, arg : Variation_899_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_547:
        ...

    @overload
    def get_item(self, name : Literal['STYP']) -> Variation_224:
        ...

    @overload
    def get_item(self, name : Literal['ARA']) -> Variation_894:
        ...

    @overload
    def get_item(self, name : Literal['RAC']) -> Variation_895:
        ...

    @overload
    def get_item(self, name : Literal['RAT']) -> Variation_896:
        ...

    @overload
    def get_item(self, name : Literal['MTE']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['TTI']) -> Variation_897:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_898:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['STYP'], Literal['ARA'], Literal['RAC'], Literal['RAT'], Literal['MTE'], Literal['TTI'], Literal['TID']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_547, Variation_547_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['STYP'], val : Union[Variation_224, Variation_224_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['ARA'], val : Union[Variation_894, Variation_894_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['RAC'], val : Union[Variation_895, Variation_895_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['RAT'], val : Union[Variation_896, Variation_896_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['MTE'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['TTI'], val : Union[Variation_897, Variation_897_Arg]) -> 'Variation_899':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_898, Variation_898_Arg]) -> 'Variation_899':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_900_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_900(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 0.1, 0, 's')

    def __init__(self, arg : Variation_900_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_901_Arg = TypedDict('Variation_901_Arg', {
    'AOS': Union[Variation_900, Variation_900_Arg],
    'TRD': Union[Variation_900, Variation_900_Arg],
    'M3A': Union[Variation_900, Variation_900_Arg],
    'QI': Union[Variation_900, Variation_900_Arg],
    'TI1': Union[Variation_900, Variation_900_Arg],
    'MAM': Union[Variation_900, Variation_900_Arg],
    'GH': Union[Variation_900, Variation_900_Arg],
    'FL': Union[Variation_900, Variation_900_Arg],
    'ISA': Union[Variation_900, Variation_900_Arg],
    'FSA': Union[Variation_900, Variation_900_Arg],
    'AS': Union[Variation_900, Variation_900_Arg],
    'TAS': Union[Variation_900, Variation_900_Arg],
    'MH': Union[Variation_900, Variation_900_Arg],
    'BVR': Union[Variation_900, Variation_900_Arg],
    'GVR': Union[Variation_900, Variation_900_Arg],
    'GV': Union[Variation_900, Variation_900_Arg],
    'TAR': Union[Variation_900, Variation_900_Arg],
    'TI2': Union[Variation_900, Variation_900_Arg],
    'TS': Union[Variation_900, Variation_900_Arg],
    'MET': Union[Variation_900, Variation_900_Arg],
    'ROA': Union[Variation_900, Variation_900_Arg],
    'ARA': Union[Variation_900, Variation_900_Arg],
    'SCC': Union[Variation_900, Variation_900_Arg],
}, total=False)
class Variation_901(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('AOS', Variation_900),
        ('TRD', Variation_900),
        ('M3A', Variation_900),
        ('QI', Variation_900),
        ('TI1', Variation_900),
        ('MAM', Variation_900),
        ('GH', Variation_900),
        ('FL', Variation_900),
        ('ISA', Variation_900),
        ('FSA', Variation_900),
        ('AS', Variation_900),
        ('TAS', Variation_900),
        ('MH', Variation_900),
        ('BVR', Variation_900),
        ('GVR', Variation_900),
        ('GV', Variation_900),
        ('TAR', Variation_900),
        ('TI2', Variation_900),
        ('TS', Variation_900),
        ('MET', Variation_900),
        ('ROA', Variation_900),
        ('ARA', Variation_900),
        ('SCC', Variation_900),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AOS': (Variation_900, 0x80000000),
        'TRD': (Variation_900, 0x40000000),
        'M3A': (Variation_900, 0x20000000),
        'QI': (Variation_900, 0x10000000),
        'TI1': (Variation_900, 0x08000000),
        'MAM': (Variation_900, 0x04000000),
        'GH': (Variation_900, 0x02000000),
        'FL': (Variation_900, 0x01800000),
        'ISA': (Variation_900, 0x01400000),
        'FSA': (Variation_900, 0x01200000),
        'AS': (Variation_900, 0x01100000),
        'TAS': (Variation_900, 0x01080000),
        'MH': (Variation_900, 0x01040000),
        'BVR': (Variation_900, 0x01020000),
        'GVR': (Variation_900, 0x01018000),
        'GV': (Variation_900, 0x01014000),
        'TAR': (Variation_900, 0x01012000),
        'TI2': (Variation_900, 0x01011000),
        'TS': (Variation_900, 0x01010800),
        'MET': (Variation_900, 0x01010400),
        'ROA': (Variation_900, 0x01010200),
        'ARA': (Variation_900, 0x01010180),
        'SCC': (Variation_900, 0x01010140),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AOS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRD']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M3A']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QI']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TI1']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAM']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GH']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FL']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ISA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MH']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GV']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TI2']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ROA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SCC']) -> Type[Variation_900]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AOS'], Literal['TRD'], Literal['M3A'], Literal['QI'], Literal['TI1'], Literal['MAM'], Literal['GH'], Literal['FL'], Literal['ISA'], Literal['FSA'], Literal['AS'], Literal['TAS'], Literal['MH'], Literal['BVR'], Literal['GVR'], Literal['GV'], Literal['TAR'], Literal['TI2'], Literal['TS'], Literal['MET'], Literal['ROA'], Literal['ARA'], Literal['SCC']]) -> Union[Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900']]:
        if key == 'AOS':
            return Variation_900
        if key == 'TRD':
            return Variation_900
        if key == 'M3A':
            return Variation_900
        if key == 'QI':
            return Variation_900
        if key == 'TI1':
            return Variation_900
        if key == 'MAM':
            return Variation_900
        if key == 'GH':
            return Variation_900
        if key == 'FL':
            return Variation_900
        if key == 'ISA':
            return Variation_900
        if key == 'FSA':
            return Variation_900
        if key == 'AS':
            return Variation_900
        if key == 'TAS':
            return Variation_900
        if key == 'MH':
            return Variation_900
        if key == 'BVR':
            return Variation_900
        if key == 'GVR':
            return Variation_900
        if key == 'GV':
            return Variation_900
        if key == 'TAR':
            return Variation_900
        if key == 'TI2':
            return Variation_900
        if key == 'TS':
            return Variation_900
        if key == 'MET':
            return Variation_900
        if key == 'ROA':
            return Variation_900
        if key == 'ARA':
            return Variation_900
        if key == 'SCC':
            return Variation_900
        assert_never(key)

    def __init__(self, arg : Optional[Variation_901_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AOS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TRD'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['M3A'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['QI'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TI1'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['MAM'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['GH'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['FL'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['ISA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['FSA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['AS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['MH'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['GV'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TI2'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['TS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['ROA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['ARA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    @overload
    def set_item(self, name : Literal['SCC'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_901':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AOS']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TRD']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['M3A']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['QI']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TI1']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['MAM']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['GH']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['FL']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['ISA']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['FSA']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['AS']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['MH']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['GV']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TI2']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['TS']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['ROA']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['ARA']) -> 'Variation_901':
        ...

    @overload
    def del_item(self, name : Literal['SCC']) -> 'Variation_901':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AOS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TRD']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['M3A']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['QI']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TI1']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MAM']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GH']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['FL']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['ISA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['FSA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['AS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MH']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GV']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TI2']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['ROA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['ARA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['SCC']) -> Variation_900:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_902_Arg = TypedDict('Variation_902_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_838, Variation_838_Arg],
    '161': Union[Variation_839, Variation_839_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '071': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '131': Union[Variation_619, Variation_619_Arg],
    '072': Union[Variation_81, Variation_81_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_842, Variation_842_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '073': Union[Variation_81, Variation_81_Arg],
    '074': Union[Variation_845, Variation_845_Arg],
    '075': Union[Variation_81, Variation_81_Arg],
    '076': Union[Variation_847, Variation_847_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_855, Variation_855_Arg],
    '210': Union[Variation_859, Variation_859_Arg],
    '070': Union[Variation_860, Variation_860_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '200': Union[Variation_865, Variation_865_Arg],
    '155': Union[Variation_867, Variation_867_Arg],
    '157': Union[Variation_868, Variation_868_Arg],
    '160': Union[Variation_870, Variation_870_Arg],
    '165': Union[Variation_872, Variation_872_Arg],
    '077': Union[Variation_81, Variation_81_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '020': Union[Variation_873, Variation_873_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_874, Variation_874_Arg],
    '148': Union[Variation_878, Variation_878_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '016': Union[Variation_879, Variation_879_Arg],
    '008': Union[Variation_887, Variation_887_Arg],
    '271': Union[Variation_893, Variation_893_Arg],
    '132': Union[Variation_29, Variation_29_Arg],
    '250': Union[Variation_322, Variation_322_Arg],
    '260': Union[Variation_899, Variation_899_Arg],
    '400': Union[Variation_0, Variation_0_Arg],
    '295': Union[Variation_901, Variation_901_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_902(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 7

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_838),
        ('161', Variation_839),
        ('015', Variation_0),
        ('071', Variation_81),
        ('130', Variation_692),
        ('131', Variation_619),
        ('072', Variation_81),
        ('150', Variation_706),
        ('151', Variation_842),
        ('080', Variation_279),
        ('073', Variation_81),
        ('074', Variation_845),
        ('075', Variation_81),
        ('076', Variation_847),
        ('140', Variation_288),
        ('090', Variation_855),
        ('210', Variation_859),
        ('070', Variation_860),
        ('230', Variation_704),
        ('145', Variation_361),
        ('152', Variation_14),
        ('200', Variation_865),
        ('155', Variation_867),
        ('157', Variation_868),
        ('160', Variation_870),
        ('165', Variation_872),
        ('077', Variation_81),
        ('170', Variation_201),
        ('020', Variation_873),
        ('220', Variation_718),
        ('146', Variation_874),
        ('148', Variation_878),
        ('110', Variation_741),
        ('016', Variation_879),
        ('008', Variation_887),
        ('271', Variation_893),
        ('132', Variation_29),
        ('250', Variation_322),
        ('260', Variation_899),
        ('400', Variation_0),
        ('295', Variation_901),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000000000),
        '040': (Variation_838, 0x40000000000000),
        '161': (Variation_839, 0x20000000000000),
        '015': (Variation_0, 0x10000000000000),
        '071': (Variation_81, 0x08000000000000),
        '130': (Variation_692, 0x04000000000000),
        '131': (Variation_619, 0x02000000000000),
        '072': (Variation_81, 0x01800000000000),
        '150': (Variation_706, 0x01400000000000),
        '151': (Variation_842, 0x01200000000000),
        '080': (Variation_279, 0x01100000000000),
        '073': (Variation_81, 0x01080000000000),
        '074': (Variation_845, 0x01040000000000),
        '075': (Variation_81, 0x01020000000000),
        '076': (Variation_847, 0x01018000000000),
        '140': (Variation_288, 0x01014000000000),
        '090': (Variation_855, 0x01012000000000),
        '210': (Variation_859, 0x01011000000000),
        '070': (Variation_860, 0x01010800000000),
        '230': (Variation_704, 0x01010400000000),
        '145': (Variation_361, 0x01010200000000),
        '152': (Variation_14, 0x01010180000000),
        '200': (Variation_865, 0x01010140000000),
        '155': (Variation_867, 0x01010120000000),
        '157': (Variation_868, 0x01010110000000),
        '160': (Variation_870, 0x01010108000000),
        '165': (Variation_872, 0x01010104000000),
        '077': (Variation_81, 0x01010102000000),
        '170': (Variation_201, 0x01010101800000),
        '020': (Variation_873, 0x01010101400000),
        '220': (Variation_718, 0x01010101200000),
        '146': (Variation_874, 0x01010101100000),
        '148': (Variation_878, 0x01010101080000),
        '110': (Variation_741, 0x01010101040000),
        '016': (Variation_879, 0x01010101020000),
        '008': (Variation_887, 0x01010101018000),
        '271': (Variation_893, 0x01010101014000),
        '132': (Variation_29, 0x01010101012000),
        '250': (Variation_322, 0x01010101011000),
        '260': (Variation_899, 0x01010101010800),
        '400': (Variation_0, 0x01010101010400),
        '295': (Variation_901, 0x01010101010200),
        'RE': (Variation_62, 0x01010101010104),
        'SP': (Variation_62, 0x01010101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_838]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_839]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['071']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['072']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_842]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['073']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_845]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_847]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_855]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_859]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_860]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_865]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_867]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_868]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_870]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_872]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['077']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_873]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_874]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_878]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_887]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['271']) -> Type[Variation_893]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['132']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_899]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_901]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['161'], Literal['015'], Literal['071'], Literal['130'], Literal['131'], Literal['072'], Literal['150'], Literal['151'], Literal['080'], Literal['073'], Literal['074'], Literal['075'], Literal['076'], Literal['140'], Literal['090'], Literal['210'], Literal['070'], Literal['230'], Literal['145'], Literal['152'], Literal['200'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['077'], Literal['170'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['016'], Literal['008'], Literal['271'], Literal['132'], Literal['250'], Literal['260'], Literal['400'], Literal['295'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_838'], Type['Variation_839'], Type['Variation_0'], Type['Variation_81'], Type['Variation_692'], Type['Variation_619'], Type['Variation_81'], Type['Variation_706'], Type['Variation_842'], Type['Variation_279'], Type['Variation_81'], Type['Variation_845'], Type['Variation_81'], Type['Variation_847'], Type['Variation_288'], Type['Variation_855'], Type['Variation_859'], Type['Variation_860'], Type['Variation_704'], Type['Variation_361'], Type['Variation_14'], Type['Variation_865'], Type['Variation_867'], Type['Variation_868'], Type['Variation_870'], Type['Variation_872'], Type['Variation_81'], Type['Variation_201'], Type['Variation_873'], Type['Variation_718'], Type['Variation_874'], Type['Variation_878'], Type['Variation_741'], Type['Variation_879'], Type['Variation_887'], Type['Variation_893'], Type['Variation_29'], Type['Variation_322'], Type['Variation_899'], Type['Variation_0'], Type['Variation_901'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_838
        if key == '161':
            return Variation_839
        if key == '015':
            return Variation_0
        if key == '071':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '131':
            return Variation_619
        if key == '072':
            return Variation_81
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_842
        if key == '080':
            return Variation_279
        if key == '073':
            return Variation_81
        if key == '074':
            return Variation_845
        if key == '075':
            return Variation_81
        if key == '076':
            return Variation_847
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_855
        if key == '210':
            return Variation_859
        if key == '070':
            return Variation_860
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '152':
            return Variation_14
        if key == '200':
            return Variation_865
        if key == '155':
            return Variation_867
        if key == '157':
            return Variation_868
        if key == '160':
            return Variation_870
        if key == '165':
            return Variation_872
        if key == '077':
            return Variation_81
        if key == '170':
            return Variation_201
        if key == '020':
            return Variation_873
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_874
        if key == '148':
            return Variation_878
        if key == '110':
            return Variation_741
        if key == '016':
            return Variation_879
        if key == '008':
            return Variation_887
        if key == '271':
            return Variation_893
        if key == '132':
            return Variation_29
        if key == '250':
            return Variation_322
        if key == '260':
            return Variation_899
        if key == '400':
            return Variation_0
        if key == '295':
            return Variation_901
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_902_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_838, Variation_838_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_839, Variation_839_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['071'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['072'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_842, Variation_842_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['073'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_845, Variation_845_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_847, Variation_847_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_855, Variation_855_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_859, Variation_859_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_860, Variation_860_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_865, Variation_865_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_867, Variation_867_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_868, Variation_868_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_870, Variation_870_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_872, Variation_872_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['077'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_873, Variation_873_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_874, Variation_874_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_878, Variation_878_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_879, Variation_879_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_887, Variation_887_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['271'], val : Union[Variation_893, Variation_893_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['132'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_899, Variation_899_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_901, Variation_901_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_902':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_902':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['071']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['072']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['073']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['077']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['271']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['132']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_902':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_902':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_838:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_839:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['071']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['072']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_842:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['073']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_845:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_847:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_855:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_859:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_860:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_865:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_867:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_868:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_870:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_872:
        ...

    @overload
    def get_item(self, name : Literal['077']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_873:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_874:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_878:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_887:
        ...

    @overload
    def get_item(self, name : Literal['271']) -> Variation_893:
        ...

    @overload
    def get_item(self, name : Literal['132']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_899:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_901:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_903_Arg : TypeAlias = Raw
class Variation_903(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No military emergency',
        1: 'Military emergency',
    }

    def __init__(self, arg : Variation_903_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_904_Arg_Group = TypedDict('Variation_904_Arg_Group', {
    'ICF': Union[Variation_861, Variation_861_Arg],
    'LNAV': Union[Variation_862, Variation_862_Arg],
    'ME': Union[Variation_903, Variation_903_Arg],
    'PS': Union[Variation_863, Variation_863_Arg],
    'SS': Union[Variation_864, Variation_864_Arg],
})
Variation_904_Arg : TypeAlias = Union[Raw, Variation_904_Arg_Group]
class Variation_904(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('ICF', Variation_861),
        ('LNAV', Variation_862),
        ('ME', Variation_903),
        ('PS', Variation_863),
        ('SS', Variation_864),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ICF': ('Intent Change Flag (see Note)', Variation_861, 0, 1),
        'LNAV': ('LNAV Mode', Variation_862, 1, 1),
        'ME': ('Military Emergency', Variation_903, 2, 1),
        'PS': ('Priority Status', Variation_863, 3, 3),
        'SS': ('Surveillance Status', Variation_864, 6, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ICF']) -> Type[Variation_861]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LNAV']) -> Type[Variation_862]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_903]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PS']) -> Type[Variation_863]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SS']) -> Type[Variation_864]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ICF'], Literal['LNAV'], Literal['ME'], Literal['PS'], Literal['SS']]) -> Union[Type['Variation_861'], Type['Variation_862'], Type['Variation_903'], Type['Variation_863'], Type['Variation_864']]:
        if key == 'ICF':
            return Variation_861
        if key == 'LNAV':
            return Variation_862
        if key == 'ME':
            return Variation_903
        if key == 'PS':
            return Variation_863
        if key == 'SS':
            return Variation_864
        assert_never(key)

    def __init__(self, arg : Variation_904_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ICF']) -> Variation_861:
        ...

    @overload
    def get_item(self, name : Literal['LNAV']) -> Variation_862:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_903:
        ...

    @overload
    def get_item(self, name : Literal['PS']) -> Variation_863:
        ...

    @overload
    def get_item(self, name : Literal['SS']) -> Variation_864:
        ...

    def get_item(self, name : Union[Literal['ICF'], Literal['LNAV'], Literal['ME'], Literal['PS'], Literal['SS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ICF'], val : Union[Variation_861, Variation_861_Arg]) -> 'Variation_904':
        ...

    @overload
    def set_item(self, name : Literal['LNAV'], val : Union[Variation_862, Variation_862_Arg]) -> 'Variation_904':
        ...

    @overload
    def set_item(self, name : Literal['ME'], val : Union[Variation_903, Variation_903_Arg]) -> 'Variation_904':
        ...

    @overload
    def set_item(self, name : Literal['PS'], val : Union[Variation_863, Variation_863_Arg]) -> 'Variation_904':
        ...

    @overload
    def set_item(self, name : Literal['SS'], val : Union[Variation_864, Variation_864_Arg]) -> 'Variation_904':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_905_Arg_Group_1 = TypedDict('Variation_905_Arg_Group_1', {
    'POA': Union[Variation_888, Variation_888_Arg],
    'CDTIS': Union[Variation_889, Variation_889_Arg],
    'B2LOW': Union[Variation_890, Variation_890_Arg],
    'RAS': Union[Variation_891, Variation_891_Arg],
    'IDENT': Union[Variation_892, Variation_892_Arg],
})
Variation_905_Arg_Group_2 = TypedDict('Variation_905_Arg_Group_2', {
    'POA': Union[Variation_888, Variation_888_Arg],
    'CDTIS': Union[Variation_889, Variation_889_Arg],
    'B2LOW': Union[Variation_890, Variation_890_Arg],
    'RAS': Union[Variation_891, Variation_891_Arg],
    'IDENT': Union[Variation_892, Variation_892_Arg],
    'LW': Union[Variation_192, Variation_192_Arg],
})
Variation_905_Arg : TypeAlias = Union[
    int,
    Variation_905_Arg_Group_1,
    Tuple[int],
    Variation_905_Arg_Group_2,
    Tuple[int,int],
]
class Variation_905(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            Spare(0, 2),
            ('POA', Variation_888),
            ('CDTIS', Variation_889),
            ('B2LOW', Variation_890),
            ('RAS', Variation_891),
            ('IDENT', Variation_892),
        ],
        [
            ('LW', Variation_192),
            Spare(4, 3),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'POA': ('Position Offset Applied', Variation_888, 2, 1),
        'CDTIS': ('Cockpit Display of Traffic Information Surface', Variation_889, 3, 1),
        'B2LOW': ('Class B2 Transmit Power Less Than 70 Watts', Variation_890, 4, 1),
        'RAS': ('Receiving ATC Services', Variation_891, 5, 1),
        'IDENT': ('Setting of IDENT Switch', Variation_892, 6, 1),
        'LW': ('Length and Width of the Aircraft', Variation_192, 0, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['POA']) -> Type[Variation_888]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDTIS']) -> Type[Variation_889]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B2LOW']) -> Type[Variation_890]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAS']) -> Type[Variation_891]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IDENT']) -> Type[Variation_892]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LW']) -> Type[Variation_192]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['POA'], Literal['CDTIS'], Literal['B2LOW'], Literal['RAS'], Literal['IDENT'], Literal['LW']]) -> Union[Type['Variation_888'], Type['Variation_889'], Type['Variation_890'], Type['Variation_891'], Type['Variation_892'], Type['Variation_192']]:
        if key == 'POA':
            return Variation_888
        if key == 'CDTIS':
            return Variation_889
        if key == 'B2LOW':
            return Variation_890
        if key == 'RAS':
            return Variation_891
        if key == 'IDENT':
            return Variation_892
        if key == 'LW':
            return Variation_192
        assert_never(key)

    def __init__(self, arg : Variation_905_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_905_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_905_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['POA']) -> Variation_888:
        ...

    @overload
    def get_item(self, name : Literal['CDTIS']) -> Variation_889:
        ...

    @overload
    def get_item(self, name : Literal['B2LOW']) -> Variation_890:
        ...

    @overload
    def get_item(self, name : Literal['RAS']) -> Variation_891:
        ...

    @overload
    def get_item(self, name : Literal['IDENT']) -> Variation_892:
        ...

    @overload
    def get_item(self, name : Literal['LW']) -> Variation_192:
        ...

    def get_item(self, name : Union[Literal['POA'], Literal['CDTIS'], Literal['B2LOW'], Literal['RAS'], Literal['IDENT'], Literal['LW']]) -> Any:
        return self._get_item(name)

Variation_906_Arg = TypedDict('Variation_906_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_838, Variation_838_Arg],
    '161': Union[Variation_839, Variation_839_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '071': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '131': Union[Variation_619, Variation_619_Arg],
    '072': Union[Variation_81, Variation_81_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_842, Variation_842_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '073': Union[Variation_81, Variation_81_Arg],
    '074': Union[Variation_845, Variation_845_Arg],
    '075': Union[Variation_81, Variation_81_Arg],
    '076': Union[Variation_847, Variation_847_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_855, Variation_855_Arg],
    '210': Union[Variation_859, Variation_859_Arg],
    '070': Union[Variation_860, Variation_860_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '200': Union[Variation_904, Variation_904_Arg],
    '155': Union[Variation_867, Variation_867_Arg],
    '157': Union[Variation_868, Variation_868_Arg],
    '160': Union[Variation_870, Variation_870_Arg],
    '165': Union[Variation_872, Variation_872_Arg],
    '077': Union[Variation_81, Variation_81_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '020': Union[Variation_873, Variation_873_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_874, Variation_874_Arg],
    '148': Union[Variation_878, Variation_878_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '016': Union[Variation_879, Variation_879_Arg],
    '008': Union[Variation_887, Variation_887_Arg],
    '271': Union[Variation_905, Variation_905_Arg],
    '132': Union[Variation_29, Variation_29_Arg],
    '250': Union[Variation_322, Variation_322_Arg],
    '260': Union[Variation_899, Variation_899_Arg],
    '400': Union[Variation_0, Variation_0_Arg],
    '295': Union[Variation_901, Variation_901_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_906(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 7

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_838),
        ('161', Variation_839),
        ('015', Variation_0),
        ('071', Variation_81),
        ('130', Variation_692),
        ('131', Variation_619),
        ('072', Variation_81),
        ('150', Variation_706),
        ('151', Variation_842),
        ('080', Variation_279),
        ('073', Variation_81),
        ('074', Variation_845),
        ('075', Variation_81),
        ('076', Variation_847),
        ('140', Variation_288),
        ('090', Variation_855),
        ('210', Variation_859),
        ('070', Variation_860),
        ('230', Variation_704),
        ('145', Variation_361),
        ('152', Variation_14),
        ('200', Variation_904),
        ('155', Variation_867),
        ('157', Variation_868),
        ('160', Variation_870),
        ('165', Variation_872),
        ('077', Variation_81),
        ('170', Variation_201),
        ('020', Variation_873),
        ('220', Variation_718),
        ('146', Variation_874),
        ('148', Variation_878),
        ('110', Variation_741),
        ('016', Variation_879),
        ('008', Variation_887),
        ('271', Variation_905),
        ('132', Variation_29),
        ('250', Variation_322),
        ('260', Variation_899),
        ('400', Variation_0),
        ('295', Variation_901),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000000000),
        '040': (Variation_838, 0x40000000000000),
        '161': (Variation_839, 0x20000000000000),
        '015': (Variation_0, 0x10000000000000),
        '071': (Variation_81, 0x08000000000000),
        '130': (Variation_692, 0x04000000000000),
        '131': (Variation_619, 0x02000000000000),
        '072': (Variation_81, 0x01800000000000),
        '150': (Variation_706, 0x01400000000000),
        '151': (Variation_842, 0x01200000000000),
        '080': (Variation_279, 0x01100000000000),
        '073': (Variation_81, 0x01080000000000),
        '074': (Variation_845, 0x01040000000000),
        '075': (Variation_81, 0x01020000000000),
        '076': (Variation_847, 0x01018000000000),
        '140': (Variation_288, 0x01014000000000),
        '090': (Variation_855, 0x01012000000000),
        '210': (Variation_859, 0x01011000000000),
        '070': (Variation_860, 0x01010800000000),
        '230': (Variation_704, 0x01010400000000),
        '145': (Variation_361, 0x01010200000000),
        '152': (Variation_14, 0x01010180000000),
        '200': (Variation_904, 0x01010140000000),
        '155': (Variation_867, 0x01010120000000),
        '157': (Variation_868, 0x01010110000000),
        '160': (Variation_870, 0x01010108000000),
        '165': (Variation_872, 0x01010104000000),
        '077': (Variation_81, 0x01010102000000),
        '170': (Variation_201, 0x01010101800000),
        '020': (Variation_873, 0x01010101400000),
        '220': (Variation_718, 0x01010101200000),
        '146': (Variation_874, 0x01010101100000),
        '148': (Variation_878, 0x01010101080000),
        '110': (Variation_741, 0x01010101040000),
        '016': (Variation_879, 0x01010101020000),
        '008': (Variation_887, 0x01010101018000),
        '271': (Variation_905, 0x01010101014000),
        '132': (Variation_29, 0x01010101012000),
        '250': (Variation_322, 0x01010101011000),
        '260': (Variation_899, 0x01010101010800),
        '400': (Variation_0, 0x01010101010400),
        '295': (Variation_901, 0x01010101010200),
        'RE': (Variation_62, 0x01010101010104),
        'SP': (Variation_62, 0x01010101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_838]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_839]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['071']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['072']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_842]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['073']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_845]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_847]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_855]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_859]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_860]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_904]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_867]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_868]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_870]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_872]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['077']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_873]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_874]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_878]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_887]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['271']) -> Type[Variation_905]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['132']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_899]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_901]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['161'], Literal['015'], Literal['071'], Literal['130'], Literal['131'], Literal['072'], Literal['150'], Literal['151'], Literal['080'], Literal['073'], Literal['074'], Literal['075'], Literal['076'], Literal['140'], Literal['090'], Literal['210'], Literal['070'], Literal['230'], Literal['145'], Literal['152'], Literal['200'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['077'], Literal['170'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['016'], Literal['008'], Literal['271'], Literal['132'], Literal['250'], Literal['260'], Literal['400'], Literal['295'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_838'], Type['Variation_839'], Type['Variation_0'], Type['Variation_81'], Type['Variation_692'], Type['Variation_619'], Type['Variation_81'], Type['Variation_706'], Type['Variation_842'], Type['Variation_279'], Type['Variation_81'], Type['Variation_845'], Type['Variation_81'], Type['Variation_847'], Type['Variation_288'], Type['Variation_855'], Type['Variation_859'], Type['Variation_860'], Type['Variation_704'], Type['Variation_361'], Type['Variation_14'], Type['Variation_904'], Type['Variation_867'], Type['Variation_868'], Type['Variation_870'], Type['Variation_872'], Type['Variation_81'], Type['Variation_201'], Type['Variation_873'], Type['Variation_718'], Type['Variation_874'], Type['Variation_878'], Type['Variation_741'], Type['Variation_879'], Type['Variation_887'], Type['Variation_905'], Type['Variation_29'], Type['Variation_322'], Type['Variation_899'], Type['Variation_0'], Type['Variation_901'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_838
        if key == '161':
            return Variation_839
        if key == '015':
            return Variation_0
        if key == '071':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '131':
            return Variation_619
        if key == '072':
            return Variation_81
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_842
        if key == '080':
            return Variation_279
        if key == '073':
            return Variation_81
        if key == '074':
            return Variation_845
        if key == '075':
            return Variation_81
        if key == '076':
            return Variation_847
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_855
        if key == '210':
            return Variation_859
        if key == '070':
            return Variation_860
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '152':
            return Variation_14
        if key == '200':
            return Variation_904
        if key == '155':
            return Variation_867
        if key == '157':
            return Variation_868
        if key == '160':
            return Variation_870
        if key == '165':
            return Variation_872
        if key == '077':
            return Variation_81
        if key == '170':
            return Variation_201
        if key == '020':
            return Variation_873
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_874
        if key == '148':
            return Variation_878
        if key == '110':
            return Variation_741
        if key == '016':
            return Variation_879
        if key == '008':
            return Variation_887
        if key == '271':
            return Variation_905
        if key == '132':
            return Variation_29
        if key == '250':
            return Variation_322
        if key == '260':
            return Variation_899
        if key == '400':
            return Variation_0
        if key == '295':
            return Variation_901
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_906_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_838, Variation_838_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_839, Variation_839_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['071'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['072'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_842, Variation_842_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['073'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_845, Variation_845_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_847, Variation_847_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_855, Variation_855_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_859, Variation_859_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_860, Variation_860_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_904, Variation_904_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_867, Variation_867_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_868, Variation_868_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_870, Variation_870_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_872, Variation_872_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['077'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_873, Variation_873_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_874, Variation_874_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_878, Variation_878_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_879, Variation_879_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_887, Variation_887_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['271'], val : Union[Variation_905, Variation_905_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['132'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_899, Variation_899_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_901, Variation_901_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_906':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_906':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['071']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['072']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['073']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['077']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['271']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['132']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_906':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_906':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_838:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_839:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['071']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['072']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_842:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['073']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_845:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_847:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_855:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_859:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_860:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_904:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_867:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_868:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_870:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_872:
        ...

    @overload
    def get_item(self, name : Literal['077']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_873:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_874:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_878:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_887:
        ...

    @overload
    def get_item(self, name : Literal['271']) -> Variation_905:
        ...

    @overload
    def get_item(self, name : Literal['132']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_899:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_901:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_907_Arg : TypeAlias = Raw
class Variation_907(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default',
        1: 'List Lookup failed (see note)',
    }

    def __init__(self, arg : Variation_907_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_908_Arg_Group_1 = TypedDict('Variation_908_Arg_Group_1', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
})
Variation_908_Arg_Group_2 = TypedDict('Variation_908_Arg_Group_2', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
})
Variation_908_Arg_Group_3 = TypedDict('Variation_908_Arg_Group_3', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
    'LLC': Union[Variation_907, Variation_907_Arg],
    'IPC': Union[Variation_833, Variation_833_Arg],
    'NOGO': Union[Variation_834, Variation_834_Arg],
    'CPR': Union[Variation_835, Variation_835_Arg],
    'LDPJ': Union[Variation_836, Variation_836_Arg],
    'RCF': Union[Variation_837, Variation_837_Arg],
})
Variation_908_Arg : TypeAlias = Union[
    int,
    Variation_908_Arg_Group_1,
    Tuple[int],
    Variation_908_Arg_Group_2,
    Tuple[int,int],
    Variation_908_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_908(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('ATP', Variation_827),
            ('ARC', Variation_828),
            ('RC', Variation_829),
            ('RAB', Variation_830),
        ],
        [
            ('DCR', Variation_681),
            ('GBS', Variation_682),
            ('SIM', Variation_683),
            ('TST', Variation_684),
            ('SAA', Variation_831),
            ('CL', Variation_832),
        ],
        [
            Spare(0, 1),
            ('LLC', Variation_907),
            ('IPC', Variation_833),
            ('NOGO', Variation_834),
            ('CPR', Variation_835),
            ('LDPJ', Variation_836),
            ('RCF', Variation_837),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ATP': ('Address Type', Variation_827, 0, 3),
        'ARC': ('Altitude Reporting Capability', Variation_828, 3, 2),
        'RC': ('Range Check', Variation_829, 5, 1),
        'RAB': ('Report Type', Variation_830, 6, 1),
        'DCR': ('Differential Correction', Variation_681, 0, 1),
        'GBS': ('Ground Bit Setting', Variation_682, 1, 1),
        'SIM': ('Simulated Target', Variation_683, 2, 1),
        'TST': ('Test Target', Variation_684, 3, 1),
        'SAA': ('Selected Altitude Available', Variation_831, 4, 1),
        'CL': ('Confidence Level', Variation_832, 5, 2),
        'LLC': ('List Lookup Check', Variation_907, 1, 1),
        'IPC': ('Independent Position Check', Variation_833, 2, 1),
        'NOGO': ('No-go Bit Status', Variation_834, 3, 1),
        'CPR': ('Compact Position Reporting', Variation_835, 4, 1),
        'LDPJ': ('Local Decoding Position Jump', Variation_836, 5, 1),
        'RCF': ('Range Check', Variation_837, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ATP']) -> Type[Variation_827]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_828]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RC']) -> Type[Variation_829]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_830]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DCR']) -> Type[Variation_681]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_682]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_683]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_684]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAA']) -> Type[Variation_831]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CL']) -> Type[Variation_832]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LLC']) -> Type[Variation_907]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IPC']) -> Type[Variation_833]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_834]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPR']) -> Type[Variation_835]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LDPJ']) -> Type[Variation_836]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RCF']) -> Type[Variation_837]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['LLC'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF']]) -> Union[Type['Variation_827'], Type['Variation_828'], Type['Variation_829'], Type['Variation_830'], Type['Variation_681'], Type['Variation_682'], Type['Variation_683'], Type['Variation_684'], Type['Variation_831'], Type['Variation_832'], Type['Variation_907'], Type['Variation_833'], Type['Variation_834'], Type['Variation_835'], Type['Variation_836'], Type['Variation_837']]:
        if key == 'ATP':
            return Variation_827
        if key == 'ARC':
            return Variation_828
        if key == 'RC':
            return Variation_829
        if key == 'RAB':
            return Variation_830
        if key == 'DCR':
            return Variation_681
        if key == 'GBS':
            return Variation_682
        if key == 'SIM':
            return Variation_683
        if key == 'TST':
            return Variation_684
        if key == 'SAA':
            return Variation_831
        if key == 'CL':
            return Variation_832
        if key == 'LLC':
            return Variation_907
        if key == 'IPC':
            return Variation_833
        if key == 'NOGO':
            return Variation_834
        if key == 'CPR':
            return Variation_835
        if key == 'LDPJ':
            return Variation_836
        if key == 'RCF':
            return Variation_837
        assert_never(key)

    def __init__(self, arg : Variation_908_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_908_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_908_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_908_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ATP']) -> Variation_827:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_828:
        ...

    @overload
    def get_item(self, name : Literal['RC']) -> Variation_829:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_830:
        ...

    @overload
    def get_item(self, name : Literal['DCR']) -> Variation_681:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_682:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_683:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_684:
        ...

    @overload
    def get_item(self, name : Literal['SAA']) -> Variation_831:
        ...

    @overload
    def get_item(self, name : Literal['CL']) -> Variation_832:
        ...

    @overload
    def get_item(self, name : Literal['LLC']) -> Variation_907:
        ...

    @overload
    def get_item(self, name : Literal['IPC']) -> Variation_833:
        ...

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_834:
        ...

    @overload
    def get_item(self, name : Literal['CPR']) -> Variation_835:
        ...

    @overload
    def get_item(self, name : Literal['LDPJ']) -> Variation_836:
        ...

    @overload
    def get_item(self, name : Literal['RCF']) -> Variation_837:
        ...

    def get_item(self, name : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['LLC'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF']]) -> Any:
        return self._get_item(name)

Variation_909_Arg = TypedDict('Variation_909_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_908, Variation_908_Arg],
    '161': Union[Variation_839, Variation_839_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '071': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '131': Union[Variation_619, Variation_619_Arg],
    '072': Union[Variation_81, Variation_81_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_842, Variation_842_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '073': Union[Variation_81, Variation_81_Arg],
    '074': Union[Variation_845, Variation_845_Arg],
    '075': Union[Variation_81, Variation_81_Arg],
    '076': Union[Variation_847, Variation_847_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_855, Variation_855_Arg],
    '210': Union[Variation_859, Variation_859_Arg],
    '070': Union[Variation_860, Variation_860_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '200': Union[Variation_904, Variation_904_Arg],
    '155': Union[Variation_867, Variation_867_Arg],
    '157': Union[Variation_868, Variation_868_Arg],
    '160': Union[Variation_870, Variation_870_Arg],
    '165': Union[Variation_872, Variation_872_Arg],
    '077': Union[Variation_81, Variation_81_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '020': Union[Variation_873, Variation_873_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_874, Variation_874_Arg],
    '148': Union[Variation_878, Variation_878_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '016': Union[Variation_879, Variation_879_Arg],
    '008': Union[Variation_887, Variation_887_Arg],
    '271': Union[Variation_905, Variation_905_Arg],
    '132': Union[Variation_29, Variation_29_Arg],
    '250': Union[Variation_322, Variation_322_Arg],
    '260': Union[Variation_899, Variation_899_Arg],
    '400': Union[Variation_0, Variation_0_Arg],
    '295': Union[Variation_901, Variation_901_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_909(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 7

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_908),
        ('161', Variation_839),
        ('015', Variation_0),
        ('071', Variation_81),
        ('130', Variation_692),
        ('131', Variation_619),
        ('072', Variation_81),
        ('150', Variation_706),
        ('151', Variation_842),
        ('080', Variation_279),
        ('073', Variation_81),
        ('074', Variation_845),
        ('075', Variation_81),
        ('076', Variation_847),
        ('140', Variation_288),
        ('090', Variation_855),
        ('210', Variation_859),
        ('070', Variation_860),
        ('230', Variation_704),
        ('145', Variation_361),
        ('152', Variation_14),
        ('200', Variation_904),
        ('155', Variation_867),
        ('157', Variation_868),
        ('160', Variation_870),
        ('165', Variation_872),
        ('077', Variation_81),
        ('170', Variation_201),
        ('020', Variation_873),
        ('220', Variation_718),
        ('146', Variation_874),
        ('148', Variation_878),
        ('110', Variation_741),
        ('016', Variation_879),
        ('008', Variation_887),
        ('271', Variation_905),
        ('132', Variation_29),
        ('250', Variation_322),
        ('260', Variation_899),
        ('400', Variation_0),
        ('295', Variation_901),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000000000),
        '040': (Variation_908, 0x40000000000000),
        '161': (Variation_839, 0x20000000000000),
        '015': (Variation_0, 0x10000000000000),
        '071': (Variation_81, 0x08000000000000),
        '130': (Variation_692, 0x04000000000000),
        '131': (Variation_619, 0x02000000000000),
        '072': (Variation_81, 0x01800000000000),
        '150': (Variation_706, 0x01400000000000),
        '151': (Variation_842, 0x01200000000000),
        '080': (Variation_279, 0x01100000000000),
        '073': (Variation_81, 0x01080000000000),
        '074': (Variation_845, 0x01040000000000),
        '075': (Variation_81, 0x01020000000000),
        '076': (Variation_847, 0x01018000000000),
        '140': (Variation_288, 0x01014000000000),
        '090': (Variation_855, 0x01012000000000),
        '210': (Variation_859, 0x01011000000000),
        '070': (Variation_860, 0x01010800000000),
        '230': (Variation_704, 0x01010400000000),
        '145': (Variation_361, 0x01010200000000),
        '152': (Variation_14, 0x01010180000000),
        '200': (Variation_904, 0x01010140000000),
        '155': (Variation_867, 0x01010120000000),
        '157': (Variation_868, 0x01010110000000),
        '160': (Variation_870, 0x01010108000000),
        '165': (Variation_872, 0x01010104000000),
        '077': (Variation_81, 0x01010102000000),
        '170': (Variation_201, 0x01010101800000),
        '020': (Variation_873, 0x01010101400000),
        '220': (Variation_718, 0x01010101200000),
        '146': (Variation_874, 0x01010101100000),
        '148': (Variation_878, 0x01010101080000),
        '110': (Variation_741, 0x01010101040000),
        '016': (Variation_879, 0x01010101020000),
        '008': (Variation_887, 0x01010101018000),
        '271': (Variation_905, 0x01010101014000),
        '132': (Variation_29, 0x01010101012000),
        '250': (Variation_322, 0x01010101011000),
        '260': (Variation_899, 0x01010101010800),
        '400': (Variation_0, 0x01010101010400),
        '295': (Variation_901, 0x01010101010200),
        'RE': (Variation_62, 0x01010101010104),
        'SP': (Variation_62, 0x01010101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_908]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_839]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['071']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['072']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_842]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['073']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_845]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_847]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_855]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_859]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_860]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_904]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_867]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_868]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_870]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_872]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['077']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_873]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_874]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_878]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_887]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['271']) -> Type[Variation_905]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['132']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_899]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_901]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['161'], Literal['015'], Literal['071'], Literal['130'], Literal['131'], Literal['072'], Literal['150'], Literal['151'], Literal['080'], Literal['073'], Literal['074'], Literal['075'], Literal['076'], Literal['140'], Literal['090'], Literal['210'], Literal['070'], Literal['230'], Literal['145'], Literal['152'], Literal['200'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['077'], Literal['170'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['016'], Literal['008'], Literal['271'], Literal['132'], Literal['250'], Literal['260'], Literal['400'], Literal['295'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_908'], Type['Variation_839'], Type['Variation_0'], Type['Variation_81'], Type['Variation_692'], Type['Variation_619'], Type['Variation_81'], Type['Variation_706'], Type['Variation_842'], Type['Variation_279'], Type['Variation_81'], Type['Variation_845'], Type['Variation_81'], Type['Variation_847'], Type['Variation_288'], Type['Variation_855'], Type['Variation_859'], Type['Variation_860'], Type['Variation_704'], Type['Variation_361'], Type['Variation_14'], Type['Variation_904'], Type['Variation_867'], Type['Variation_868'], Type['Variation_870'], Type['Variation_872'], Type['Variation_81'], Type['Variation_201'], Type['Variation_873'], Type['Variation_718'], Type['Variation_874'], Type['Variation_878'], Type['Variation_741'], Type['Variation_879'], Type['Variation_887'], Type['Variation_905'], Type['Variation_29'], Type['Variation_322'], Type['Variation_899'], Type['Variation_0'], Type['Variation_901'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_908
        if key == '161':
            return Variation_839
        if key == '015':
            return Variation_0
        if key == '071':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '131':
            return Variation_619
        if key == '072':
            return Variation_81
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_842
        if key == '080':
            return Variation_279
        if key == '073':
            return Variation_81
        if key == '074':
            return Variation_845
        if key == '075':
            return Variation_81
        if key == '076':
            return Variation_847
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_855
        if key == '210':
            return Variation_859
        if key == '070':
            return Variation_860
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '152':
            return Variation_14
        if key == '200':
            return Variation_904
        if key == '155':
            return Variation_867
        if key == '157':
            return Variation_868
        if key == '160':
            return Variation_870
        if key == '165':
            return Variation_872
        if key == '077':
            return Variation_81
        if key == '170':
            return Variation_201
        if key == '020':
            return Variation_873
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_874
        if key == '148':
            return Variation_878
        if key == '110':
            return Variation_741
        if key == '016':
            return Variation_879
        if key == '008':
            return Variation_887
        if key == '271':
            return Variation_905
        if key == '132':
            return Variation_29
        if key == '250':
            return Variation_322
        if key == '260':
            return Variation_899
        if key == '400':
            return Variation_0
        if key == '295':
            return Variation_901
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_909_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_908, Variation_908_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_839, Variation_839_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['071'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['072'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_842, Variation_842_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['073'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_845, Variation_845_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_847, Variation_847_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_855, Variation_855_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_859, Variation_859_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_860, Variation_860_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_904, Variation_904_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_867, Variation_867_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_868, Variation_868_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_870, Variation_870_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_872, Variation_872_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['077'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_873, Variation_873_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_874, Variation_874_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_878, Variation_878_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_879, Variation_879_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_887, Variation_887_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['271'], val : Union[Variation_905, Variation_905_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['132'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_899, Variation_899_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_901, Variation_901_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_909':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_909':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['071']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['072']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['073']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['077']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['271']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['132']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_909':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_909':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_908:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_839:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['071']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['072']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_842:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['073']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_845:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_847:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_855:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_859:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_860:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_904:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_867:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_868:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_870:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_872:
        ...

    @overload
    def get_item(self, name : Literal['077']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_873:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_874:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_878:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_887:
        ...

    @overload
    def get_item(self, name : Literal['271']) -> Variation_905:
        ...

    @overload
    def get_item(self, name : Literal['132']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_899:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_901:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_910_Arg : TypeAlias = Raw
class Variation_910(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 3
    table = {
        0: 'ED102/DO-260 [Ref. 7]',
        1: 'DO-260A [Ref. 8]',
        2: 'ED102A/DO-260B [Ref. 10]',
        3: 'ED-102B/DO-260C [Ref. 11]',
    }

    def __init__(self, arg : Variation_910_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_911_Arg_Group = TypedDict('Variation_911_Arg_Group', {
    'VNS': Union[Variation_856, Variation_856_Arg],
    'VN': Union[Variation_910, Variation_910_Arg],
    'LTT': Union[Variation_858, Variation_858_Arg],
})
Variation_911_Arg : TypeAlias = Union[Raw, Variation_911_Arg_Group]
class Variation_911(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 1),
        ('VNS', Variation_856),
        ('VN', Variation_910),
        ('LTT', Variation_858),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VNS': ('Version Not Supported', Variation_856, 1, 1),
        'VN': ('Version Number', Variation_910, 2, 3),
        'LTT': ('Link Technology Type', Variation_858, 5, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VNS']) -> Type[Variation_856]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VN']) -> Type[Variation_910]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LTT']) -> Type[Variation_858]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VNS'], Literal['VN'], Literal['LTT']]) -> Union[Type['Variation_856'], Type['Variation_910'], Type['Variation_858']]:
        if key == 'VNS':
            return Variation_856
        if key == 'VN':
            return Variation_910
        if key == 'LTT':
            return Variation_858
        assert_never(key)

    def __init__(self, arg : Variation_911_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VNS']) -> Variation_856:
        ...

    @overload
    def get_item(self, name : Literal['VN']) -> Variation_910:
        ...

    @overload
    def get_item(self, name : Literal['LTT']) -> Variation_858:
        ...

    def get_item(self, name : Union[Literal['VNS'], Literal['VN'], Literal['LTT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VNS'], val : Union[Variation_856, Variation_856_Arg]) -> 'Variation_911':
        ...

    @overload
    def set_item(self, name : Literal['VN'], val : Union[Variation_910, Variation_910_Arg]) -> 'Variation_911':
        ...

    @overload
    def set_item(self, name : Literal['LTT'], val : Union[Variation_858, Variation_858_Arg]) -> 'Variation_911':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_912_Arg = TypedDict('Variation_912_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_908, Variation_908_Arg],
    '161': Union[Variation_839, Variation_839_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '071': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '131': Union[Variation_619, Variation_619_Arg],
    '072': Union[Variation_81, Variation_81_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_842, Variation_842_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '073': Union[Variation_81, Variation_81_Arg],
    '074': Union[Variation_845, Variation_845_Arg],
    '075': Union[Variation_81, Variation_81_Arg],
    '076': Union[Variation_847, Variation_847_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_855, Variation_855_Arg],
    '210': Union[Variation_911, Variation_911_Arg],
    '070': Union[Variation_860, Variation_860_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '200': Union[Variation_904, Variation_904_Arg],
    '155': Union[Variation_867, Variation_867_Arg],
    '157': Union[Variation_868, Variation_868_Arg],
    '160': Union[Variation_870, Variation_870_Arg],
    '165': Union[Variation_872, Variation_872_Arg],
    '077': Union[Variation_81, Variation_81_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '020': Union[Variation_873, Variation_873_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_874, Variation_874_Arg],
    '148': Union[Variation_878, Variation_878_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '016': Union[Variation_879, Variation_879_Arg],
    '008': Union[Variation_887, Variation_887_Arg],
    '271': Union[Variation_905, Variation_905_Arg],
    '132': Union[Variation_29, Variation_29_Arg],
    '250': Union[Variation_322, Variation_322_Arg],
    '260': Union[Variation_899, Variation_899_Arg],
    '400': Union[Variation_0, Variation_0_Arg],
    '295': Union[Variation_901, Variation_901_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_912(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 7

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_908),
        ('161', Variation_839),
        ('015', Variation_0),
        ('071', Variation_81),
        ('130', Variation_692),
        ('131', Variation_619),
        ('072', Variation_81),
        ('150', Variation_706),
        ('151', Variation_842),
        ('080', Variation_279),
        ('073', Variation_81),
        ('074', Variation_845),
        ('075', Variation_81),
        ('076', Variation_847),
        ('140', Variation_288),
        ('090', Variation_855),
        ('210', Variation_911),
        ('070', Variation_860),
        ('230', Variation_704),
        ('145', Variation_361),
        ('152', Variation_14),
        ('200', Variation_904),
        ('155', Variation_867),
        ('157', Variation_868),
        ('160', Variation_870),
        ('165', Variation_872),
        ('077', Variation_81),
        ('170', Variation_201),
        ('020', Variation_873),
        ('220', Variation_718),
        ('146', Variation_874),
        ('148', Variation_878),
        ('110', Variation_741),
        ('016', Variation_879),
        ('008', Variation_887),
        ('271', Variation_905),
        ('132', Variation_29),
        ('250', Variation_322),
        ('260', Variation_899),
        ('400', Variation_0),
        ('295', Variation_901),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000000000),
        '040': (Variation_908, 0x40000000000000),
        '161': (Variation_839, 0x20000000000000),
        '015': (Variation_0, 0x10000000000000),
        '071': (Variation_81, 0x08000000000000),
        '130': (Variation_692, 0x04000000000000),
        '131': (Variation_619, 0x02000000000000),
        '072': (Variation_81, 0x01800000000000),
        '150': (Variation_706, 0x01400000000000),
        '151': (Variation_842, 0x01200000000000),
        '080': (Variation_279, 0x01100000000000),
        '073': (Variation_81, 0x01080000000000),
        '074': (Variation_845, 0x01040000000000),
        '075': (Variation_81, 0x01020000000000),
        '076': (Variation_847, 0x01018000000000),
        '140': (Variation_288, 0x01014000000000),
        '090': (Variation_855, 0x01012000000000),
        '210': (Variation_911, 0x01011000000000),
        '070': (Variation_860, 0x01010800000000),
        '230': (Variation_704, 0x01010400000000),
        '145': (Variation_361, 0x01010200000000),
        '152': (Variation_14, 0x01010180000000),
        '200': (Variation_904, 0x01010140000000),
        '155': (Variation_867, 0x01010120000000),
        '157': (Variation_868, 0x01010110000000),
        '160': (Variation_870, 0x01010108000000),
        '165': (Variation_872, 0x01010104000000),
        '077': (Variation_81, 0x01010102000000),
        '170': (Variation_201, 0x01010101800000),
        '020': (Variation_873, 0x01010101400000),
        '220': (Variation_718, 0x01010101200000),
        '146': (Variation_874, 0x01010101100000),
        '148': (Variation_878, 0x01010101080000),
        '110': (Variation_741, 0x01010101040000),
        '016': (Variation_879, 0x01010101020000),
        '008': (Variation_887, 0x01010101018000),
        '271': (Variation_905, 0x01010101014000),
        '132': (Variation_29, 0x01010101012000),
        '250': (Variation_322, 0x01010101011000),
        '260': (Variation_899, 0x01010101010800),
        '400': (Variation_0, 0x01010101010400),
        '295': (Variation_901, 0x01010101010200),
        'RE': (Variation_62, 0x01010101010104),
        'SP': (Variation_62, 0x01010101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_908]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_839]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['071']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['072']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_842]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['073']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_845]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_847]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_855]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_911]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_860]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_904]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_867]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_868]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_870]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_872]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['077']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_873]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_874]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_878]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_887]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['271']) -> Type[Variation_905]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['132']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_899]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_901]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['161'], Literal['015'], Literal['071'], Literal['130'], Literal['131'], Literal['072'], Literal['150'], Literal['151'], Literal['080'], Literal['073'], Literal['074'], Literal['075'], Literal['076'], Literal['140'], Literal['090'], Literal['210'], Literal['070'], Literal['230'], Literal['145'], Literal['152'], Literal['200'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['077'], Literal['170'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['016'], Literal['008'], Literal['271'], Literal['132'], Literal['250'], Literal['260'], Literal['400'], Literal['295'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_908'], Type['Variation_839'], Type['Variation_0'], Type['Variation_81'], Type['Variation_692'], Type['Variation_619'], Type['Variation_81'], Type['Variation_706'], Type['Variation_842'], Type['Variation_279'], Type['Variation_81'], Type['Variation_845'], Type['Variation_81'], Type['Variation_847'], Type['Variation_288'], Type['Variation_855'], Type['Variation_911'], Type['Variation_860'], Type['Variation_704'], Type['Variation_361'], Type['Variation_14'], Type['Variation_904'], Type['Variation_867'], Type['Variation_868'], Type['Variation_870'], Type['Variation_872'], Type['Variation_81'], Type['Variation_201'], Type['Variation_873'], Type['Variation_718'], Type['Variation_874'], Type['Variation_878'], Type['Variation_741'], Type['Variation_879'], Type['Variation_887'], Type['Variation_905'], Type['Variation_29'], Type['Variation_322'], Type['Variation_899'], Type['Variation_0'], Type['Variation_901'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_908
        if key == '161':
            return Variation_839
        if key == '015':
            return Variation_0
        if key == '071':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '131':
            return Variation_619
        if key == '072':
            return Variation_81
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_842
        if key == '080':
            return Variation_279
        if key == '073':
            return Variation_81
        if key == '074':
            return Variation_845
        if key == '075':
            return Variation_81
        if key == '076':
            return Variation_847
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_855
        if key == '210':
            return Variation_911
        if key == '070':
            return Variation_860
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '152':
            return Variation_14
        if key == '200':
            return Variation_904
        if key == '155':
            return Variation_867
        if key == '157':
            return Variation_868
        if key == '160':
            return Variation_870
        if key == '165':
            return Variation_872
        if key == '077':
            return Variation_81
        if key == '170':
            return Variation_201
        if key == '020':
            return Variation_873
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_874
        if key == '148':
            return Variation_878
        if key == '110':
            return Variation_741
        if key == '016':
            return Variation_879
        if key == '008':
            return Variation_887
        if key == '271':
            return Variation_905
        if key == '132':
            return Variation_29
        if key == '250':
            return Variation_322
        if key == '260':
            return Variation_899
        if key == '400':
            return Variation_0
        if key == '295':
            return Variation_901
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_912_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_908, Variation_908_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_839, Variation_839_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['071'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['072'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_842, Variation_842_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['073'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_845, Variation_845_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_847, Variation_847_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_855, Variation_855_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_911, Variation_911_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_860, Variation_860_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_904, Variation_904_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_867, Variation_867_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_868, Variation_868_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_870, Variation_870_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_872, Variation_872_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['077'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_873, Variation_873_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_874, Variation_874_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_878, Variation_878_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_879, Variation_879_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_887, Variation_887_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['271'], val : Union[Variation_905, Variation_905_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['132'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_899, Variation_899_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_901, Variation_901_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_912':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_912':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['071']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['072']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['073']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['077']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['271']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['132']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_912':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_912':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_908:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_839:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['071']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['072']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_842:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['073']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_845:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_847:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_855:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_911:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_860:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_904:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_867:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_868:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_870:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_872:
        ...

    @overload
    def get_item(self, name : Literal['077']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_873:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_874:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_878:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_887:
        ...

    @overload
    def get_item(self, name : Literal['271']) -> Variation_905:
        ...

    @overload
    def get_item(self, name : Literal['132']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_899:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_901:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_913_Arg : TypeAlias = Raw
class Variation_913(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 6

    def __init__(self, arg : Variation_913_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_914_Arg_Group = TypedDict('Variation_914_Arg_Group', {
    'EP': Union[Variation_803, Variation_803_Arg],
    'VAL': Union[Variation_913, Variation_913_Arg],
})
Variation_914_Arg : TypeAlias = Union[Raw, Variation_914_Arg_Group]
class Variation_914(Group):
    variation = 'Group'

    bit_size = 7

    subitems_list = [
        ('EP', Variation_803),
        ('VAL', Variation_913),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('Element Populated Bit', Variation_803, 0, 1),
        'VAL': ('Value', Variation_913, 1, 6),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_803]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_913]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_803'], Type['Variation_913']]:
        if key == 'EP':
            return Variation_803
        if key == 'VAL':
            return Variation_913
        assert_never(key)

    def __init__(self, arg : Variation_914_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_803:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_913:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_803, Variation_803_Arg]) -> 'Variation_914':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_913, Variation_913_Arg]) -> 'Variation_914':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_915_Arg_Group_1 = TypedDict('Variation_915_Arg_Group_1', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
})
Variation_915_Arg_Group_2 = TypedDict('Variation_915_Arg_Group_2', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
})
Variation_915_Arg_Group_3 = TypedDict('Variation_915_Arg_Group_3', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
    'LLC': Union[Variation_907, Variation_907_Arg],
    'IPC': Union[Variation_833, Variation_833_Arg],
    'NOGO': Union[Variation_834, Variation_834_Arg],
    'CPR': Union[Variation_835, Variation_835_Arg],
    'LDPJ': Union[Variation_836, Variation_836_Arg],
    'RCF': Union[Variation_837, Variation_837_Arg],
})
Variation_915_Arg_Group_4 = TypedDict('Variation_915_Arg_Group_4', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
    'LLC': Union[Variation_907, Variation_907_Arg],
    'IPC': Union[Variation_833, Variation_833_Arg],
    'NOGO': Union[Variation_834, Variation_834_Arg],
    'CPR': Union[Variation_835, Variation_835_Arg],
    'LDPJ': Union[Variation_836, Variation_836_Arg],
    'RCF': Union[Variation_837, Variation_837_Arg],
    'TBC': Union[Variation_914, Variation_914_Arg],
})
Variation_915_Arg_Group_5 = TypedDict('Variation_915_Arg_Group_5', {
    'ATP': Union[Variation_827, Variation_827_Arg],
    'ARC': Union[Variation_828, Variation_828_Arg],
    'RC': Union[Variation_829, Variation_829_Arg],
    'RAB': Union[Variation_830, Variation_830_Arg],
    'DCR': Union[Variation_681, Variation_681_Arg],
    'GBS': Union[Variation_682, Variation_682_Arg],
    'SIM': Union[Variation_683, Variation_683_Arg],
    'TST': Union[Variation_684, Variation_684_Arg],
    'SAA': Union[Variation_831, Variation_831_Arg],
    'CL': Union[Variation_832, Variation_832_Arg],
    'LLC': Union[Variation_907, Variation_907_Arg],
    'IPC': Union[Variation_833, Variation_833_Arg],
    'NOGO': Union[Variation_834, Variation_834_Arg],
    'CPR': Union[Variation_835, Variation_835_Arg],
    'LDPJ': Union[Variation_836, Variation_836_Arg],
    'RCF': Union[Variation_837, Variation_837_Arg],
    'TBC': Union[Variation_914, Variation_914_Arg],
    'MBC': Union[Variation_914, Variation_914_Arg],
})
Variation_915_Arg : TypeAlias = Union[
    int,
    Variation_915_Arg_Group_1,
    Tuple[int],
    Variation_915_Arg_Group_2,
    Tuple[int,int],
    Variation_915_Arg_Group_3,
    Tuple[int,int,int],
    Variation_915_Arg_Group_4,
    Tuple[int,int,int,int],
    Variation_915_Arg_Group_5,
    Tuple[int,int,int,int,int],
]
class Variation_915(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('ATP', Variation_827),
            ('ARC', Variation_828),
            ('RC', Variation_829),
            ('RAB', Variation_830),
        ],
        [
            ('DCR', Variation_681),
            ('GBS', Variation_682),
            ('SIM', Variation_683),
            ('TST', Variation_684),
            ('SAA', Variation_831),
            ('CL', Variation_832),
        ],
        [
            Spare(0, 1),
            ('LLC', Variation_907),
            ('IPC', Variation_833),
            ('NOGO', Variation_834),
            ('CPR', Variation_835),
            ('LDPJ', Variation_836),
            ('RCF', Variation_837),
        ],
        [
            ('TBC', Variation_914),
        ],
        [
            ('MBC', Variation_914),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ATP': ('Address Type', Variation_827, 0, 3),
        'ARC': ('Altitude Reporting Capability', Variation_828, 3, 2),
        'RC': ('Range Check', Variation_829, 5, 1),
        'RAB': ('Report Type', Variation_830, 6, 1),
        'DCR': ('Differential Correction', Variation_681, 0, 1),
        'GBS': ('Ground Bit Setting', Variation_682, 1, 1),
        'SIM': ('Simulated Target', Variation_683, 2, 1),
        'TST': ('Test Target', Variation_684, 3, 1),
        'SAA': ('Selected Altitude Available', Variation_831, 4, 1),
        'CL': ('Confidence Level', Variation_832, 5, 2),
        'LLC': ('List Lookup Check', Variation_907, 1, 1),
        'IPC': ('Independent Position Check', Variation_833, 2, 1),
        'NOGO': ('No-go Bit Status', Variation_834, 3, 1),
        'CPR': ('Compact Position Reporting', Variation_835, 4, 1),
        'LDPJ': ('Local Decoding Position Jump', Variation_836, 5, 1),
        'RCF': ('Range Check', Variation_837, 6, 1),
        'TBC': ('Total Bits Corrected', Variation_914, 0, 7),
        'MBC': ('Maximum Bits Corrected', Variation_914, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ATP']) -> Type[Variation_827]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_828]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RC']) -> Type[Variation_829]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_830]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DCR']) -> Type[Variation_681]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_682]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_683]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_684]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAA']) -> Type[Variation_831]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CL']) -> Type[Variation_832]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LLC']) -> Type[Variation_907]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IPC']) -> Type[Variation_833]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_834]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CPR']) -> Type[Variation_835]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LDPJ']) -> Type[Variation_836]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RCF']) -> Type[Variation_837]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TBC']) -> Type[Variation_914]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MBC']) -> Type[Variation_914]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['LLC'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF'], Literal['TBC'], Literal['MBC']]) -> Union[Type['Variation_827'], Type['Variation_828'], Type['Variation_829'], Type['Variation_830'], Type['Variation_681'], Type['Variation_682'], Type['Variation_683'], Type['Variation_684'], Type['Variation_831'], Type['Variation_832'], Type['Variation_907'], Type['Variation_833'], Type['Variation_834'], Type['Variation_835'], Type['Variation_836'], Type['Variation_837'], Type['Variation_914'], Type['Variation_914']]:
        if key == 'ATP':
            return Variation_827
        if key == 'ARC':
            return Variation_828
        if key == 'RC':
            return Variation_829
        if key == 'RAB':
            return Variation_830
        if key == 'DCR':
            return Variation_681
        if key == 'GBS':
            return Variation_682
        if key == 'SIM':
            return Variation_683
        if key == 'TST':
            return Variation_684
        if key == 'SAA':
            return Variation_831
        if key == 'CL':
            return Variation_832
        if key == 'LLC':
            return Variation_907
        if key == 'IPC':
            return Variation_833
        if key == 'NOGO':
            return Variation_834
        if key == 'CPR':
            return Variation_835
        if key == 'LDPJ':
            return Variation_836
        if key == 'RCF':
            return Variation_837
        if key == 'TBC':
            return Variation_914
        if key == 'MBC':
            return Variation_914
        assert_never(key)

    def __init__(self, arg : Variation_915_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_915_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_915_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_915_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_915_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            if Variation_915_Arg_Group_5.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(5, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ATP']) -> Variation_827:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_828:
        ...

    @overload
    def get_item(self, name : Literal['RC']) -> Variation_829:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_830:
        ...

    @overload
    def get_item(self, name : Literal['DCR']) -> Variation_681:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_682:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_683:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_684:
        ...

    @overload
    def get_item(self, name : Literal['SAA']) -> Variation_831:
        ...

    @overload
    def get_item(self, name : Literal['CL']) -> Variation_832:
        ...

    @overload
    def get_item(self, name : Literal['LLC']) -> Variation_907:
        ...

    @overload
    def get_item(self, name : Literal['IPC']) -> Variation_833:
        ...

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_834:
        ...

    @overload
    def get_item(self, name : Literal['CPR']) -> Variation_835:
        ...

    @overload
    def get_item(self, name : Literal['LDPJ']) -> Variation_836:
        ...

    @overload
    def get_item(self, name : Literal['RCF']) -> Variation_837:
        ...

    @overload
    def get_item(self, name : Literal['TBC']) -> Variation_914:
        ...

    @overload
    def get_item(self, name : Literal['MBC']) -> Variation_914:
        ...

    def get_item(self, name : Union[Literal['ATP'], Literal['ARC'], Literal['RC'], Literal['RAB'], Literal['DCR'], Literal['GBS'], Literal['SIM'], Literal['TST'], Literal['SAA'], Literal['CL'], Literal['LLC'], Literal['IPC'], Literal['NOGO'], Literal['CPR'], Literal['LDPJ'], Literal['RCF'], Literal['TBC'], Literal['MBC']]) -> Any:
        return self._get_item(name)

Variation_916_Arg = TypedDict('Variation_916_Arg', {
    'AOS': Union[Variation_900, Variation_900_Arg],
    'TRD': Union[Variation_900, Variation_900_Arg],
    'M3A': Union[Variation_900, Variation_900_Arg],
    'QI': Union[Variation_900, Variation_900_Arg],
    'TI1': Union[Variation_900, Variation_900_Arg],
    'MAM': Union[Variation_900, Variation_900_Arg],
    'GH': Union[Variation_900, Variation_900_Arg],
    'FL': Union[Variation_900, Variation_900_Arg],
    'SAL': Union[Variation_900, Variation_900_Arg],
    'FSA': Union[Variation_900, Variation_900_Arg],
    'AS': Union[Variation_900, Variation_900_Arg],
    'TAS': Union[Variation_900, Variation_900_Arg],
    'MH': Union[Variation_900, Variation_900_Arg],
    'BVR': Union[Variation_900, Variation_900_Arg],
    'GVR': Union[Variation_900, Variation_900_Arg],
    'GV': Union[Variation_900, Variation_900_Arg],
    'TAR': Union[Variation_900, Variation_900_Arg],
    'TI2': Union[Variation_900, Variation_900_Arg],
    'TS': Union[Variation_900, Variation_900_Arg],
    'MET': Union[Variation_900, Variation_900_Arg],
    'ROA': Union[Variation_900, Variation_900_Arg],
    'ARA': Union[Variation_900, Variation_900_Arg],
    'SCC': Union[Variation_900, Variation_900_Arg],
}, total=False)
class Variation_916(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('AOS', Variation_900),
        ('TRD', Variation_900),
        ('M3A', Variation_900),
        ('QI', Variation_900),
        ('TI1', Variation_900),
        ('MAM', Variation_900),
        ('GH', Variation_900),
        ('FL', Variation_900),
        ('SAL', Variation_900),
        ('FSA', Variation_900),
        ('AS', Variation_900),
        ('TAS', Variation_900),
        ('MH', Variation_900),
        ('BVR', Variation_900),
        ('GVR', Variation_900),
        ('GV', Variation_900),
        ('TAR', Variation_900),
        ('TI2', Variation_900),
        ('TS', Variation_900),
        ('MET', Variation_900),
        ('ROA', Variation_900),
        ('ARA', Variation_900),
        ('SCC', Variation_900),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'AOS': (Variation_900, 0x80000000),
        'TRD': (Variation_900, 0x40000000),
        'M3A': (Variation_900, 0x20000000),
        'QI': (Variation_900, 0x10000000),
        'TI1': (Variation_900, 0x08000000),
        'MAM': (Variation_900, 0x04000000),
        'GH': (Variation_900, 0x02000000),
        'FL': (Variation_900, 0x01800000),
        'SAL': (Variation_900, 0x01400000),
        'FSA': (Variation_900, 0x01200000),
        'AS': (Variation_900, 0x01100000),
        'TAS': (Variation_900, 0x01080000),
        'MH': (Variation_900, 0x01040000),
        'BVR': (Variation_900, 0x01020000),
        'GVR': (Variation_900, 0x01018000),
        'GV': (Variation_900, 0x01014000),
        'TAR': (Variation_900, 0x01012000),
        'TI2': (Variation_900, 0x01011000),
        'TS': (Variation_900, 0x01010800),
        'MET': (Variation_900, 0x01010400),
        'ROA': (Variation_900, 0x01010200),
        'ARA': (Variation_900, 0x01010180),
        'SCC': (Variation_900, 0x01010140),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AOS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRD']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M3A']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QI']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TI1']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAM']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GH']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FL']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAL']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MH']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GV']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TI2']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TS']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ROA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARA']) -> Type[Variation_900]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SCC']) -> Type[Variation_900]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AOS'], Literal['TRD'], Literal['M3A'], Literal['QI'], Literal['TI1'], Literal['MAM'], Literal['GH'], Literal['FL'], Literal['SAL'], Literal['FSA'], Literal['AS'], Literal['TAS'], Literal['MH'], Literal['BVR'], Literal['GVR'], Literal['GV'], Literal['TAR'], Literal['TI2'], Literal['TS'], Literal['MET'], Literal['ROA'], Literal['ARA'], Literal['SCC']]) -> Union[Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900'], Type['Variation_900']]:
        if key == 'AOS':
            return Variation_900
        if key == 'TRD':
            return Variation_900
        if key == 'M3A':
            return Variation_900
        if key == 'QI':
            return Variation_900
        if key == 'TI1':
            return Variation_900
        if key == 'MAM':
            return Variation_900
        if key == 'GH':
            return Variation_900
        if key == 'FL':
            return Variation_900
        if key == 'SAL':
            return Variation_900
        if key == 'FSA':
            return Variation_900
        if key == 'AS':
            return Variation_900
        if key == 'TAS':
            return Variation_900
        if key == 'MH':
            return Variation_900
        if key == 'BVR':
            return Variation_900
        if key == 'GVR':
            return Variation_900
        if key == 'GV':
            return Variation_900
        if key == 'TAR':
            return Variation_900
        if key == 'TI2':
            return Variation_900
        if key == 'TS':
            return Variation_900
        if key == 'MET':
            return Variation_900
        if key == 'ROA':
            return Variation_900
        if key == 'ARA':
            return Variation_900
        if key == 'SCC':
            return Variation_900
        assert_never(key)

    def __init__(self, arg : Optional[Variation_916_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['AOS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TRD'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['M3A'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['QI'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TI1'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['MAM'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['GH'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['FL'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['SAL'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['FSA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['AS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['MH'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['GV'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TI2'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['TS'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['ROA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['ARA'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    @overload
    def set_item(self, name : Literal['SCC'], val : Union[Variation_900, Variation_900_Arg]) -> 'Variation_916':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['AOS']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TRD']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['M3A']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['QI']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TI1']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['MAM']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['GH']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['FL']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['SAL']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['FSA']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['AS']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['MH']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['GV']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TI2']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['TS']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['ROA']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['ARA']) -> 'Variation_916':
        ...

    @overload
    def del_item(self, name : Literal['SCC']) -> 'Variation_916':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['AOS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TRD']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['M3A']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['QI']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TI1']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MAM']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GH']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['FL']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['SAL']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['FSA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['AS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MH']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['GV']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TI2']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['TS']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['ROA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['ARA']) -> Variation_900:
        ...

    @overload
    def get_item(self, name : Literal['SCC']) -> Variation_900:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_917_Arg = TypedDict('Variation_917_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '040': Union[Variation_915, Variation_915_Arg],
    '161': Union[Variation_839, Variation_839_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '071': Union[Variation_81, Variation_81_Arg],
    '130': Union[Variation_692, Variation_692_Arg],
    '131': Union[Variation_619, Variation_619_Arg],
    '072': Union[Variation_81, Variation_81_Arg],
    '150': Union[Variation_706, Variation_706_Arg],
    '151': Union[Variation_842, Variation_842_Arg],
    '080': Union[Variation_279, Variation_279_Arg],
    '073': Union[Variation_81, Variation_81_Arg],
    '074': Union[Variation_845, Variation_845_Arg],
    '075': Union[Variation_81, Variation_81_Arg],
    '076': Union[Variation_847, Variation_847_Arg],
    '140': Union[Variation_288, Variation_288_Arg],
    '090': Union[Variation_855, Variation_855_Arg],
    '210': Union[Variation_911, Variation_911_Arg],
    '070': Union[Variation_860, Variation_860_Arg],
    '230': Union[Variation_704, Variation_704_Arg],
    '145': Union[Variation_361, Variation_361_Arg],
    '152': Union[Variation_14, Variation_14_Arg],
    '200': Union[Variation_904, Variation_904_Arg],
    '155': Union[Variation_867, Variation_867_Arg],
    '157': Union[Variation_868, Variation_868_Arg],
    '160': Union[Variation_870, Variation_870_Arg],
    '165': Union[Variation_872, Variation_872_Arg],
    '077': Union[Variation_81, Variation_81_Arg],
    '170': Union[Variation_201, Variation_201_Arg],
    '020': Union[Variation_873, Variation_873_Arg],
    '220': Union[Variation_718, Variation_718_Arg],
    '146': Union[Variation_874, Variation_874_Arg],
    '148': Union[Variation_878, Variation_878_Arg],
    '110': Union[Variation_741, Variation_741_Arg],
    '016': Union[Variation_879, Variation_879_Arg],
    '008': Union[Variation_887, Variation_887_Arg],
    '271': Union[Variation_905, Variation_905_Arg],
    '132': Union[Variation_29, Variation_29_Arg],
    '250': Union[Variation_322, Variation_322_Arg],
    '260': Union[Variation_899, Variation_899_Arg],
    '400': Union[Variation_0, Variation_0_Arg],
    '295': Union[Variation_916, Variation_916_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_917(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 7

    subitems_list = [
        ('010', Variation_1),
        ('040', Variation_915),
        ('161', Variation_839),
        ('015', Variation_0),
        ('071', Variation_81),
        ('130', Variation_692),
        ('131', Variation_619),
        ('072', Variation_81),
        ('150', Variation_706),
        ('151', Variation_842),
        ('080', Variation_279),
        ('073', Variation_81),
        ('074', Variation_845),
        ('075', Variation_81),
        ('076', Variation_847),
        ('140', Variation_288),
        ('090', Variation_855),
        ('210', Variation_911),
        ('070', Variation_860),
        ('230', Variation_704),
        ('145', Variation_361),
        ('152', Variation_14),
        ('200', Variation_904),
        ('155', Variation_867),
        ('157', Variation_868),
        ('160', Variation_870),
        ('165', Variation_872),
        ('077', Variation_81),
        ('170', Variation_201),
        ('020', Variation_873),
        ('220', Variation_718),
        ('146', Variation_874),
        ('148', Variation_878),
        ('110', Variation_741),
        ('016', Variation_879),
        ('008', Variation_887),
        ('271', Variation_905),
        ('132', Variation_29),
        ('250', Variation_322),
        ('260', Variation_899),
        ('400', Variation_0),
        ('295', Variation_916),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000000000),
        '040': (Variation_915, 0x40000000000000),
        '161': (Variation_839, 0x20000000000000),
        '015': (Variation_0, 0x10000000000000),
        '071': (Variation_81, 0x08000000000000),
        '130': (Variation_692, 0x04000000000000),
        '131': (Variation_619, 0x02000000000000),
        '072': (Variation_81, 0x01800000000000),
        '150': (Variation_706, 0x01400000000000),
        '151': (Variation_842, 0x01200000000000),
        '080': (Variation_279, 0x01100000000000),
        '073': (Variation_81, 0x01080000000000),
        '074': (Variation_845, 0x01040000000000),
        '075': (Variation_81, 0x01020000000000),
        '076': (Variation_847, 0x01018000000000),
        '140': (Variation_288, 0x01014000000000),
        '090': (Variation_855, 0x01012000000000),
        '210': (Variation_911, 0x01011000000000),
        '070': (Variation_860, 0x01010800000000),
        '230': (Variation_704, 0x01010400000000),
        '145': (Variation_361, 0x01010200000000),
        '152': (Variation_14, 0x01010180000000),
        '200': (Variation_904, 0x01010140000000),
        '155': (Variation_867, 0x01010120000000),
        '157': (Variation_868, 0x01010110000000),
        '160': (Variation_870, 0x01010108000000),
        '165': (Variation_872, 0x01010104000000),
        '077': (Variation_81, 0x01010102000000),
        '170': (Variation_201, 0x01010101800000),
        '020': (Variation_873, 0x01010101400000),
        '220': (Variation_718, 0x01010101200000),
        '146': (Variation_874, 0x01010101100000),
        '148': (Variation_878, 0x01010101080000),
        '110': (Variation_741, 0x01010101040000),
        '016': (Variation_879, 0x01010101020000),
        '008': (Variation_887, 0x01010101018000),
        '271': (Variation_905, 0x01010101014000),
        '132': (Variation_29, 0x01010101012000),
        '250': (Variation_322, 0x01010101011000),
        '260': (Variation_899, 0x01010101010800),
        '400': (Variation_0, 0x01010101010400),
        '295': (Variation_916, 0x01010101010200),
        'RE': (Variation_62, 0x01010101010104),
        'SP': (Variation_62, 0x01010101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_915]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_839]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['071']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['131']) -> Type[Variation_619]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['072']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['150']) -> Type[Variation_706]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['151']) -> Type[Variation_842]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['073']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['074']) -> Type[Variation_845]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['075']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['076']) -> Type[Variation_847]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_855]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_911]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_860]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['145']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['152']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_904]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['155']) -> Type[Variation_867]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['157']) -> Type[Variation_868]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['160']) -> Type[Variation_870]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['165']) -> Type[Variation_872]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['077']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_873]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_718]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['146']) -> Type[Variation_874]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['148']) -> Type[Variation_878]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_741]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['016']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['008']) -> Type[Variation_887]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['271']) -> Type[Variation_905]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['132']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_899]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_916]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['040'], Literal['161'], Literal['015'], Literal['071'], Literal['130'], Literal['131'], Literal['072'], Literal['150'], Literal['151'], Literal['080'], Literal['073'], Literal['074'], Literal['075'], Literal['076'], Literal['140'], Literal['090'], Literal['210'], Literal['070'], Literal['230'], Literal['145'], Literal['152'], Literal['200'], Literal['155'], Literal['157'], Literal['160'], Literal['165'], Literal['077'], Literal['170'], Literal['020'], Literal['220'], Literal['146'], Literal['148'], Literal['110'], Literal['016'], Literal['008'], Literal['271'], Literal['132'], Literal['250'], Literal['260'], Literal['400'], Literal['295'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_915'], Type['Variation_839'], Type['Variation_0'], Type['Variation_81'], Type['Variation_692'], Type['Variation_619'], Type['Variation_81'], Type['Variation_706'], Type['Variation_842'], Type['Variation_279'], Type['Variation_81'], Type['Variation_845'], Type['Variation_81'], Type['Variation_847'], Type['Variation_288'], Type['Variation_855'], Type['Variation_911'], Type['Variation_860'], Type['Variation_704'], Type['Variation_361'], Type['Variation_14'], Type['Variation_904'], Type['Variation_867'], Type['Variation_868'], Type['Variation_870'], Type['Variation_872'], Type['Variation_81'], Type['Variation_201'], Type['Variation_873'], Type['Variation_718'], Type['Variation_874'], Type['Variation_878'], Type['Variation_741'], Type['Variation_879'], Type['Variation_887'], Type['Variation_905'], Type['Variation_29'], Type['Variation_322'], Type['Variation_899'], Type['Variation_0'], Type['Variation_916'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '040':
            return Variation_915
        if key == '161':
            return Variation_839
        if key == '015':
            return Variation_0
        if key == '071':
            return Variation_81
        if key == '130':
            return Variation_692
        if key == '131':
            return Variation_619
        if key == '072':
            return Variation_81
        if key == '150':
            return Variation_706
        if key == '151':
            return Variation_842
        if key == '080':
            return Variation_279
        if key == '073':
            return Variation_81
        if key == '074':
            return Variation_845
        if key == '075':
            return Variation_81
        if key == '076':
            return Variation_847
        if key == '140':
            return Variation_288
        if key == '090':
            return Variation_855
        if key == '210':
            return Variation_911
        if key == '070':
            return Variation_860
        if key == '230':
            return Variation_704
        if key == '145':
            return Variation_361
        if key == '152':
            return Variation_14
        if key == '200':
            return Variation_904
        if key == '155':
            return Variation_867
        if key == '157':
            return Variation_868
        if key == '160':
            return Variation_870
        if key == '165':
            return Variation_872
        if key == '077':
            return Variation_81
        if key == '170':
            return Variation_201
        if key == '020':
            return Variation_873
        if key == '220':
            return Variation_718
        if key == '146':
            return Variation_874
        if key == '148':
            return Variation_878
        if key == '110':
            return Variation_741
        if key == '016':
            return Variation_879
        if key == '008':
            return Variation_887
        if key == '271':
            return Variation_905
        if key == '132':
            return Variation_29
        if key == '250':
            return Variation_322
        if key == '260':
            return Variation_899
        if key == '400':
            return Variation_0
        if key == '295':
            return Variation_916
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_917_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_915, Variation_915_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_839, Variation_839_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['071'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['131'], val : Union[Variation_619, Variation_619_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['072'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['150'], val : Union[Variation_706, Variation_706_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['151'], val : Union[Variation_842, Variation_842_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['073'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['074'], val : Union[Variation_845, Variation_845_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['075'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['076'], val : Union[Variation_847, Variation_847_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_855, Variation_855_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_911, Variation_911_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_860, Variation_860_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['145'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['152'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_904, Variation_904_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['155'], val : Union[Variation_867, Variation_867_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['157'], val : Union[Variation_868, Variation_868_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['160'], val : Union[Variation_870, Variation_870_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['165'], val : Union[Variation_872, Variation_872_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['077'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_873, Variation_873_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_718, Variation_718_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['146'], val : Union[Variation_874, Variation_874_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['148'], val : Union[Variation_878, Variation_878_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_741, Variation_741_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['016'], val : Union[Variation_879, Variation_879_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['008'], val : Union[Variation_887, Variation_887_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['271'], val : Union[Variation_905, Variation_905_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['132'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_899, Variation_899_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_916, Variation_916_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_917':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_917':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['071']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['131']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['072']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['150']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['151']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['073']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['074']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['075']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['076']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['145']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['152']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['155']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['157']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['160']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['165']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['077']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['146']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['148']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['016']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['008']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['271']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['132']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_917':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_917':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_915:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_839:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['071']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['131']) -> Variation_619:
        ...

    @overload
    def get_item(self, name : Literal['072']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['150']) -> Variation_706:
        ...

    @overload
    def get_item(self, name : Literal['151']) -> Variation_842:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['073']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['074']) -> Variation_845:
        ...

    @overload
    def get_item(self, name : Literal['075']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['076']) -> Variation_847:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_855:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_911:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_860:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['145']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['152']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_904:
        ...

    @overload
    def get_item(self, name : Literal['155']) -> Variation_867:
        ...

    @overload
    def get_item(self, name : Literal['157']) -> Variation_868:
        ...

    @overload
    def get_item(self, name : Literal['160']) -> Variation_870:
        ...

    @overload
    def get_item(self, name : Literal['165']) -> Variation_872:
        ...

    @overload
    def get_item(self, name : Literal['077']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_873:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_718:
        ...

    @overload
    def get_item(self, name : Literal['146']) -> Variation_874:
        ...

    @overload
    def get_item(self, name : Literal['148']) -> Variation_878:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_741:
        ...

    @overload
    def get_item(self, name : Literal['016']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['008']) -> Variation_887:
        ...

    @overload
    def get_item(self, name : Literal['271']) -> Variation_905:
        ...

    @overload
    def get_item(self, name : Literal['132']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_899:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_916:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_918_Arg : TypeAlias = Raw
class Variation_918(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Ground station status report',
        2: 'Service status report',
        3: 'Service statistics report',
    }

    def __init__(self, arg : Variation_918_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_919_Arg : TypeAlias = Raw
class Variation_919(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4
    table = {
        1: 'ADS-B VDL4',
        2: 'ADS-B Ext Squitter',
        3: 'ADS-B UAT',
        4: 'TIS-B VDL4',
        5: 'TIS-B Ext Squitter',
        6: 'TIS-B UAT',
        7: 'FIS-B VDL4',
        8: 'GRAS VDL4',
        9: 'MLT',
    }

    def __init__(self, arg : Variation_919_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_920_Arg_Group = TypedDict('Variation_920_Arg_Group', {
    'SID': Union[Variation_192, Variation_192_Arg],
    'STYP': Union[Variation_919, Variation_919_Arg],
})
Variation_920_Arg : TypeAlias = Union[Raw, Variation_920_Arg_Group]
class Variation_920(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('SID', Variation_192),
        ('STYP', Variation_919),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SID': ('Service Identification', Variation_192, 0, 4),
        'STYP': ('Type of Service', Variation_919, 4, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SID']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STYP']) -> Type[Variation_919]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SID'], Literal['STYP']]) -> Union[Type['Variation_192'], Type['Variation_919']]:
        if key == 'SID':
            return Variation_192
        if key == 'STYP':
            return Variation_919
        assert_never(key)

    def __init__(self, arg : Variation_920_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SID']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['STYP']) -> Variation_919:
        ...

    def get_item(self, name : Union[Literal['SID'], Literal['STYP']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SID'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_920':
        ...

    @overload
    def set_item(self, name : Literal['STYP'], val : Union[Variation_919, Variation_919_Arg]) -> 'Variation_920':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_921_Arg : TypeAlias = Raw
class Variation_921(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Data is released for operational use',
        1: 'Data must not be used operationally',
    }

    def __init__(self, arg : Variation_921_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_922_Arg : TypeAlias = Raw
class Variation_922(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default, no overload',
        1: 'Overload in DP',
    }

    def __init__(self, arg : Variation_922_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_923_Arg : TypeAlias = Raw
class Variation_923(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default, no overload',
        1: 'Overload in transmission subsystem',
    }

    def __init__(self, arg : Variation_923_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_924_Arg : TypeAlias = Raw
class Variation_924(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Monitoring system not connected or unknown',
        1: 'Monitoring system connected',
    }

    def __init__(self, arg : Variation_924_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_925_Arg : TypeAlias = Raw
class Variation_925(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Valid',
        1: 'Invalid',
    }

    def __init__(self, arg : Variation_925_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_926_Arg : TypeAlias = Raw
class Variation_926(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'No spoofing detected',
        1: 'Potential spoofing attack',
    }

    def __init__(self, arg : Variation_926_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_927_Arg : TypeAlias = Raw
class Variation_927(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Track numbering has restarted',
    }

    def __init__(self, arg : Variation_927_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_928_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_928(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    quantity = Quantity('Unsigned', 1.0, 0, 's')

    def __init__(self, arg : Variation_928_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_929_Arg_Group_1 = TypedDict('Variation_929_Arg_Group_1', {
    'NOGO': Union[Variation_921, Variation_921_Arg],
    'ODP': Union[Variation_922, Variation_922_Arg],
    'OXT': Union[Variation_923, Variation_923_Arg],
    'MSC': Union[Variation_924, Variation_924_Arg],
    'TSV': Union[Variation_925, Variation_925_Arg],
    'SPO': Union[Variation_926, Variation_926_Arg],
    'RN': Union[Variation_927, Variation_927_Arg],
})
Variation_929_Arg_Group_2 = TypedDict('Variation_929_Arg_Group_2', {
    'NOGO': Union[Variation_921, Variation_921_Arg],
    'ODP': Union[Variation_922, Variation_922_Arg],
    'OXT': Union[Variation_923, Variation_923_Arg],
    'MSC': Union[Variation_924, Variation_924_Arg],
    'TSV': Union[Variation_925, Variation_925_Arg],
    'SPO': Union[Variation_926, Variation_926_Arg],
    'RN': Union[Variation_927, Variation_927_Arg],
    'GSSP': Union[Variation_928, Variation_928_Arg],
})
Variation_929_Arg : TypeAlias = Union[
    int,
    Variation_929_Arg_Group_1,
    Tuple[int],
    Variation_929_Arg_Group_2,
    Tuple[int,int],
]
class Variation_929(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('NOGO', Variation_921),
            ('ODP', Variation_922),
            ('OXT', Variation_923),
            ('MSC', Variation_924),
            ('TSV', Variation_925),
            ('SPO', Variation_926),
            ('RN', Variation_927),
        ],
        [
            ('GSSP', Variation_928),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('Operational Release Status of the Data', Variation_921, 0, 1),
        'ODP': ('Data Processor Overload Indicator', Variation_922, 1, 1),
        'OXT': ('Ground Interface Data Communications Overload', Variation_923, 2, 1),
        'MSC': ('Monitoring System Connected Status', Variation_924, 3, 1),
        'TSV': ('Time Source Validity', Variation_925, 4, 1),
        'SPO': ('Indication of Spoofing Attack', Variation_926, 5, 1),
        'RN': ('Renumbering Indication for Track ID', Variation_927, 6, 1),
        'GSSP': ('Ground Station Status Reporting Period', Variation_928, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_921]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ODP']) -> Type[Variation_922]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OXT']) -> Type[Variation_923]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_924]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_925]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPO']) -> Type[Variation_926]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RN']) -> Type[Variation_927]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GSSP']) -> Type[Variation_928]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['ODP'], Literal['OXT'], Literal['MSC'], Literal['TSV'], Literal['SPO'], Literal['RN'], Literal['GSSP']]) -> Union[Type['Variation_921'], Type['Variation_922'], Type['Variation_923'], Type['Variation_924'], Type['Variation_925'], Type['Variation_926'], Type['Variation_927'], Type['Variation_928']]:
        if key == 'NOGO':
            return Variation_921
        if key == 'ODP':
            return Variation_922
        if key == 'OXT':
            return Variation_923
        if key == 'MSC':
            return Variation_924
        if key == 'TSV':
            return Variation_925
        if key == 'SPO':
            return Variation_926
        if key == 'RN':
            return Variation_927
        if key == 'GSSP':
            return Variation_928
        assert_never(key)

    def __init__(self, arg : Variation_929_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_929_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_929_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_921:
        ...

    @overload
    def get_item(self, name : Literal['ODP']) -> Variation_922:
        ...

    @overload
    def get_item(self, name : Literal['OXT']) -> Variation_923:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_924:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_925:
        ...

    @overload
    def get_item(self, name : Literal['SPO']) -> Variation_926:
        ...

    @overload
    def get_item(self, name : Literal['RN']) -> Variation_927:
        ...

    @overload
    def get_item(self, name : Literal['GSSP']) -> Variation_928:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['ODP'], Literal['OXT'], Literal['MSC'], Literal['TSV'], Literal['SPO'], Literal['RN'], Literal['GSSP']]) -> Any:
        return self._get_item(name)

Variation_930_Arg : TypeAlias = Raw
class Variation_930(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No information',
        1: 'NRA class',
        2: 'Reserved for future use',
        3: 'Reserved for future use',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_930_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_931_Arg_Group_1 = TypedDict('Variation_931_Arg_Group_1', {
    'RP': Union[Variation_879, Variation_879_Arg],
    'SC': Union[Variation_930, Variation_930_Arg],
})
Variation_931_Arg_Group_2 = TypedDict('Variation_931_Arg_Group_2', {
    'RP': Union[Variation_879, Variation_879_Arg],
    'SC': Union[Variation_930, Variation_930_Arg],
    'SSRP': Union[Variation_928, Variation_928_Arg],
})
Variation_931_Arg : TypeAlias = Union[
    int,
    Variation_931_Arg_Group_1,
    Tuple[int],
    Variation_931_Arg_Group_2,
    Tuple[int,int],
]
class Variation_931(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 16
    ext_bit_size = 8
    groups_bit_sizes = [
        15,
        7,
    ]

    subitems_list = [
        [
            ('RP', Variation_879),
            ('SC', Variation_930),
            Spare(3, 4),
        ],
        [
            ('SSRP', Variation_928),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RP': ('Report Period for Category 021 Reports', Variation_879, 0, 8),
        'SC': ('Service Class', Variation_930, 0, 3),
        'SSRP': ('Service Status Reporting Period', Variation_928, 0, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RP']) -> Type[Variation_879]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SC']) -> Type[Variation_930]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSRP']) -> Type[Variation_928]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RP'], Literal['SC'], Literal['SSRP']]) -> Union[Type['Variation_879'], Type['Variation_930'], Type['Variation_928']]:
        if key == 'RP':
            return Variation_879
        if key == 'SC':
            return Variation_930
        if key == 'SSRP':
            return Variation_928
        assert_never(key)

    def __init__(self, arg : Variation_931_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_931_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_931_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RP']) -> Variation_879:
        ...

    @overload
    def get_item(self, name : Literal['SC']) -> Variation_930:
        ...

    @overload
    def get_item(self, name : Literal['SSRP']) -> Variation_928:
        ...

    def get_item(self, name : Union[Literal['RP'], Literal['SC'], Literal['SSRP']]) -> Any:
        return self._get_item(name)

Variation_932_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_932(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 0, 'NM')

    def __init__(self, arg : Variation_932_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_933_Arg : TypeAlias = Raw
class Variation_933(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3
    table = {
        0: 'Unknown',
        1: 'Failed',
        2: 'Disabled',
        3: 'Degraded',
        4: 'Normal',
        5: 'Initialisation',
    }

    def __init__(self, arg : Variation_933_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_934_Arg_Group_1 = TypedDict('Variation_934_Arg_Group_1', {
    'STAT': Union[Variation_933, Variation_933_Arg],
})
Variation_934_Arg : TypeAlias = Union[
    int,
    Variation_934_Arg_Group_1,
    Tuple[int],
]
class Variation_934(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            Spare(0, 4),
            ('STAT', Variation_933),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STAT': ('Status of the Service', Variation_933, 4, 3),
    }

    @classmethod
    def spec(cls, key : Union[Literal['STAT']]) -> Union[Type['Variation_933']]:
        if key == 'STAT':
            return Variation_933
        assert_never(key)

    def __init__(self, arg : Variation_934_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_934_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['STAT']) -> Any:
        return self._get_item(name)

Variation_935_Arg : TypeAlias = Raw
class Variation_935(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Number of unknown messages received',
        1: 'Number of too old messages received',
        2: 'Number of failed message conversions',
        3: 'Total Number of messages received',
        4: 'Total Number of messages transmitted',
        20: 'Number of TIS-B management messages received',
        21: 'Number of Basic messages received',
        22: 'Number of High Dynamic messages received',
        23: 'Number of Full Position messages received',
        24: 'Number of Basic Ground  messages received',
        25: 'Number of TCP messages received',
        26: 'Number of UTC time  messages received',
        27: 'Number of Data messages received',
        28: 'Number of High Resolution messages received',
        29: 'Number of Aircraft Target Airborne messages received',
        30: 'Number of Aircraft Target Ground messages received',
        31: 'Number of Ground Vehicle Target messages received',
        32: 'Number of 2 slots TCP messages received',
    }

    def __init__(self, arg : Variation_935_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_936_Arg : TypeAlias = Raw
class Variation_936(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'From midnight',
        1: 'From the last report',
    }

    def __init__(self, arg : Variation_936_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_937_Arg_Group = TypedDict('Variation_937_Arg_Group', {
    'TYPE': Union[Variation_935, Variation_935_Arg],
    'REF': Union[Variation_936, Variation_936_Arg],
    'CV': Union[Variation_541, Variation_541_Arg],
})
Variation_937_Arg : TypeAlias = Union[Raw, Variation_937_Arg_Group]
class Variation_937(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('TYPE', Variation_935),
        ('REF', Variation_936),
        Spare(1, 7),
        ('CV', Variation_541),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYPE': ('Type of Report Counter', Variation_935, 0, 8),
        'REF': ('Reference from which the Messages Are Countered', Variation_936, 8, 1),
        'CV': ('32-bit Counter Value', Variation_541, 16, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYPE']) -> Type[Variation_935]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REF']) -> Type[Variation_936]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CV']) -> Type[Variation_541]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYPE'], Literal['REF'], Literal['CV']]) -> Union[Type['Variation_935'], Type['Variation_936'], Type['Variation_541']]:
        if key == 'TYPE':
            return Variation_935
        if key == 'REF':
            return Variation_936
        if key == 'CV':
            return Variation_541
        assert_never(key)

    def __init__(self, arg : Variation_937_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYPE']) -> Variation_935:
        ...

    @overload
    def get_item(self, name : Literal['REF']) -> Variation_936:
        ...

    @overload
    def get_item(self, name : Literal['CV']) -> Variation_541:
        ...

    def get_item(self, name : Union[Literal['TYPE'], Literal['REF'], Literal['CV']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYPE'], val : Union[Variation_935, Variation_935_Arg]) -> 'Variation_937':
        ...

    @overload
    def set_item(self, name : Literal['REF'], val : Union[Variation_936, Variation_936_Arg]) -> 'Variation_937':
        ...

    @overload
    def set_item(self, name : Literal['CV'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_937':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_938_Arg : TypeAlias = List[Union[Variation_937, Variation_937_Arg]]
class Variation_938(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 48
    variation_type = Variation_937

    @classmethod
    def spec(cls) -> Type[Variation_937]:
        return Variation_937

    def __init__(self, arg : List[Union[Variation_937, Variation_937_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_939_Arg = TypedDict('Variation_939_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_918, Variation_918_Arg],
    '015': Union[Variation_920, Variation_920_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '100': Union[Variation_929, Variation_929_Arg],
    '101': Union[Variation_931, Variation_931_Arg],
    '200': Union[Variation_932, Variation_932_Arg],
    '110': Union[Variation_934, Variation_934_Arg],
    '120': Union[Variation_938, Variation_938_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_939(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_918),
        ('015', Variation_920),
        ('070', Variation_81),
        ('100', Variation_929),
        ('101', Variation_931),
        ('200', Variation_932),
        ('110', Variation_934),
        ('120', Variation_938),
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_918, 0x4000),
        '015': (Variation_920, 0x2000),
        '070': (Variation_81, 0x1000),
        '100': (Variation_929, 0x0800),
        '101': (Variation_931, 0x0400),
        '200': (Variation_932, 0x0200),
        '110': (Variation_934, 0x0180),
        '120': (Variation_938, 0x0140),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_918]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_920]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_929]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['101']) -> Type[Variation_931]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_932]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_934]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_938]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['070'], Literal['100'], Literal['101'], Literal['200'], Literal['110'], Literal['120'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_918'], Type['Variation_920'], Type['Variation_81'], Type['Variation_929'], Type['Variation_931'], Type['Variation_932'], Type['Variation_934'], Type['Variation_938'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_918
        if key == '015':
            return Variation_920
        if key == '070':
            return Variation_81
        if key == '100':
            return Variation_929
        if key == '101':
            return Variation_931
        if key == '200':
            return Variation_932
        if key == '110':
            return Variation_934
        if key == '120':
            return Variation_938
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_939_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_918, Variation_918_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_920, Variation_920_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_929, Variation_929_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['101'], val : Union[Variation_931, Variation_931_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_932, Variation_932_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_934, Variation_934_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_938, Variation_938_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_939':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_939':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['101']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_939':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_939':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_918:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_920:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_929:
        ...

    @overload
    def get_item(self, name : Literal['101']) -> Variation_931:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_932:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_934:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_938:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_940_Arg_Group = TypedDict('Variation_940_Arg_Group', {
    'RTYP': Union[Variation_23, Variation_23_Arg],
    'RG': Union[Variation_432, Variation_432_Arg],
})
Variation_940_Arg : TypeAlias = Union[Raw, Variation_940_Arg_Group]
class Variation_940(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('RTYP', Variation_23),
        ('RG', Variation_432),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RTYP': ('Report Type', Variation_23, 0, 7),
        'RG': ('Report Generation', Variation_432, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RTYP']) -> Type[Variation_23]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RG']) -> Type[Variation_432]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RTYP'], Literal['RG']]) -> Union[Type['Variation_23'], Type['Variation_432']]:
        if key == 'RTYP':
            return Variation_23
        if key == 'RG':
            return Variation_432
        assert_never(key)

    def __init__(self, arg : Variation_940_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RTYP']) -> Variation_23:
        ...

    @overload
    def get_item(self, name : Literal['RG']) -> Variation_432:
        ...

    def get_item(self, name : Union[Literal['RTYP'], Literal['RG']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RTYP'], val : Union[Variation_23, Variation_23_Arg]) -> 'Variation_940':
        ...

    @overload
    def set_item(self, name : Literal['RG'], val : Union[Variation_432, Variation_432_Arg]) -> 'Variation_940':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_941_Arg : TypeAlias = Raw
class Variation_941(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Operational',
        1: 'Operational but in Standby',
        2: 'Maintenance',
        3: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_941_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_942_Arg : TypeAlias = Raw
class Variation_942(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 4
    table = {
        0: 'Running',
        1: 'Failed',
        2: 'Degraded',
        3: 'Undefined',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
        8: 'Reserved for future use',
        9: 'Reserved for future use',
        10: 'Reserved for future use',
        11: 'Reserved for future use',
        12: 'Reserved for future use',
        13: 'Reserved for future use',
        14: 'Reserved for future use',
        15: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_942_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_943_Arg : TypeAlias = Raw
class Variation_943(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 3
    table = {
        0: 'Running / OK',
        1: 'Failed',
        2: 'Degraded',
        3: 'Undefined',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_943_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_944_Arg : TypeAlias = Raw
class Variation_944(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3
    table = {
        0: 'OK',
        1: 'Failed',
        2: 'Degraded',
        3: 'Undefined',
        4: 'Reserved for future use',
        5: 'Reserved for future use',
        6: 'Reserved for future use',
        7: 'Reserved for future use',
    }

    def __init__(self, arg : Variation_944_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_945_Arg_Group_1 = TypedDict('Variation_945_Arg_Group_1', {
    'NOGO': Union[Variation_921, Variation_921_Arg],
    'OPS': Union[Variation_941, Variation_941_Arg],
    'SSTAT': Union[Variation_942, Variation_942_Arg],
})
Variation_945_Arg_Group_2 = TypedDict('Variation_945_Arg_Group_2', {
    'NOGO': Union[Variation_921, Variation_921_Arg],
    'OPS': Union[Variation_941, Variation_941_Arg],
    'SSTAT': Union[Variation_942, Variation_942_Arg],
    'SYSTAT': Union[Variation_943, Variation_943_Arg],
    'SESTAT': Union[Variation_944, Variation_944_Arg],
})
Variation_945_Arg : TypeAlias = Union[
    int,
    Variation_945_Arg_Group_1,
    Tuple[int],
    Variation_945_Arg_Group_2,
    Tuple[int,int],
]
class Variation_945(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('NOGO', Variation_921),
            ('OPS', Variation_941),
            ('SSTAT', Variation_942),
        ],
        [
            Spare(0, 1),
            ('SYSTAT', Variation_943),
            ('SESTAT', Variation_944),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('', Variation_921, 0, 1),
        'OPS': ('', Variation_941, 1, 2),
        'SSTAT': ('', Variation_942, 3, 4),
        'SYSTAT': ('', Variation_943, 1, 3),
        'SESTAT': ('', Variation_944, 4, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_921]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OPS']) -> Type[Variation_941]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSTAT']) -> Type[Variation_942]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SYSTAT']) -> Type[Variation_943]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SESTAT']) -> Type[Variation_944]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['OPS'], Literal['SSTAT'], Literal['SYSTAT'], Literal['SESTAT']]) -> Union[Type['Variation_921'], Type['Variation_941'], Type['Variation_942'], Type['Variation_943'], Type['Variation_944']]:
        if key == 'NOGO':
            return Variation_921
        if key == 'OPS':
            return Variation_941
        if key == 'SSTAT':
            return Variation_942
        if key == 'SYSTAT':
            return Variation_943
        if key == 'SESTAT':
            return Variation_944
        assert_never(key)

    def __init__(self, arg : Variation_945_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_945_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_945_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_921:
        ...

    @overload
    def get_item(self, name : Literal['OPS']) -> Variation_941:
        ...

    @overload
    def get_item(self, name : Literal['SSTAT']) -> Variation_942:
        ...

    @overload
    def get_item(self, name : Literal['SYSTAT']) -> Variation_943:
        ...

    @overload
    def get_item(self, name : Literal['SESTAT']) -> Variation_944:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['OPS'], Literal['SSTAT'], Literal['SYSTAT'], Literal['SESTAT']]) -> Any:
        return self._get_item(name)

Variation_946_Arg : TypeAlias = Raw
class Variation_946(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'No error detected (shall not be sent)',
        1: 'Error Code Undefined',
        2: 'Time Source Invalid',
        3: 'Time Source Coasting',
        4: 'Track ID numbering has restarted',
        5: 'Data Processor Overload',
        6: 'Ground Interface Data Communications Overload',
        7: 'System stopped by operator',
        8: 'CBIT failed',
        9: 'Test Target Failure',
        10: 'Reserved for allocation by the AMG',
        11: 'Reserved for allocation by the AMG',
        12: 'Reserved for allocation by the AMG',
        13: 'Reserved for allocation by the AMG',
        14: 'Reserved for allocation by the AMG',
        15: 'Reserved for allocation by the AMG',
        16: 'Reserved for allocation by the AMG',
        17: 'Reserved for allocation by the AMG',
        18: 'Reserved for allocation by the AMG',
        19: 'Reserved for allocation by the AMG',
        20: 'Reserved for allocation by the AMG',
        21: 'Reserved for allocation by the AMG',
        22: 'Reserved for allocation by the AMG',
        23: 'Reserved for allocation by the AMG',
        24: 'Reserved for allocation by the AMG',
        25: 'Reserved for allocation by the AMG',
        26: 'Reserved for allocation by the AMG',
        27: 'Reserved for allocation by the AMG',
        28: 'Reserved for allocation by the AMG',
        29: 'Reserved for allocation by the AMG',
        30: 'Reserved for allocation by the AMG',
        31: 'Reserved for allocation by the AMG',
        32: 'Reserved for allocation by system manufacturers',
        33: 'Reserved for allocation by system manufacturers',
        34: 'Reserved for allocation by system manufacturers',
        35: 'Reserved for allocation by system manufacturers',
        36: 'Reserved for allocation by system manufacturers',
        37: 'Reserved for allocation by system manufacturers',
        38: 'Reserved for allocation by system manufacturers',
        39: 'Reserved for allocation by system manufacturers',
        40: 'Reserved for allocation by system manufacturers',
        41: 'Reserved for allocation by system manufacturers',
        42: 'Reserved for allocation by system manufacturers',
        43: 'Reserved for allocation by system manufacturers',
        44: 'Reserved for allocation by system manufacturers',
        45: 'Reserved for allocation by system manufacturers',
        46: 'Reserved for allocation by system manufacturers',
        47: 'Reserved for allocation by system manufacturers',
        48: 'Reserved for allocation by system manufacturers',
        49: 'Reserved for allocation by system manufacturers',
        50: 'Reserved for allocation by system manufacturers',
        51: 'Reserved for allocation by system manufacturers',
        52: 'Reserved for allocation by system manufacturers',
        53: 'Reserved for allocation by system manufacturers',
        54: 'Reserved for allocation by system manufacturers',
        55: 'Reserved for allocation by system manufacturers',
        56: 'Reserved for allocation by system manufacturers',
        57: 'Reserved for allocation by system manufacturers',
        58: 'Reserved for allocation by system manufacturers',
        59: 'Reserved for allocation by system manufacturers',
        60: 'Reserved for allocation by system manufacturers',
        61: 'Reserved for allocation by system manufacturers',
        62: 'Reserved for allocation by system manufacturers',
        63: 'Reserved for allocation by system manufacturers',
        64: 'Reserved for allocation by system manufacturers',
        65: 'Reserved for allocation by system manufacturers',
        66: 'Reserved for allocation by system manufacturers',
        67: 'Reserved for allocation by system manufacturers',
        68: 'Reserved for allocation by system manufacturers',
        69: 'Reserved for allocation by system manufacturers',
        70: 'Reserved for allocation by system manufacturers',
        71: 'Reserved for allocation by system manufacturers',
        72: 'Reserved for allocation by system manufacturers',
        73: 'Reserved for allocation by system manufacturers',
        74: 'Reserved for allocation by system manufacturers',
        75: 'Reserved for allocation by system manufacturers',
        76: 'Reserved for allocation by system manufacturers',
        77: 'Reserved for allocation by system manufacturers',
        78: 'Reserved for allocation by system manufacturers',
        79: 'Reserved for allocation by system manufacturers',
        80: 'Reserved for allocation by system manufacturers',
        81: 'Reserved for allocation by system manufacturers',
        82: 'Reserved for allocation by system manufacturers',
        83: 'Reserved for allocation by system manufacturers',
        84: 'Reserved for allocation by system manufacturers',
        85: 'Reserved for allocation by system manufacturers',
        86: 'Reserved for allocation by system manufacturers',
        87: 'Reserved for allocation by system manufacturers',
        88: 'Reserved for allocation by system manufacturers',
        89: 'Reserved for allocation by system manufacturers',
        90: 'Reserved for allocation by system manufacturers',
        91: 'Reserved for allocation by system manufacturers',
        92: 'Reserved for allocation by system manufacturers',
        93: 'Reserved for allocation by system manufacturers',
        94: 'Reserved for allocation by system manufacturers',
        95: 'Reserved for allocation by system manufacturers',
        96: 'Reserved for allocation by system manufacturers',
        97: 'Reserved for allocation by system manufacturers',
        98: 'Reserved for allocation by system manufacturers',
        99: 'Reserved for allocation by system manufacturers',
        100: 'Reserved for allocation by system manufacturers',
        101: 'Reserved for allocation by system manufacturers',
        102: 'Reserved for allocation by system manufacturers',
        103: 'Reserved for allocation by system manufacturers',
        104: 'Reserved for allocation by system manufacturers',
        105: 'Reserved for allocation by system manufacturers',
        106: 'Reserved for allocation by system manufacturers',
        107: 'Reserved for allocation by system manufacturers',
        108: 'Reserved for allocation by system manufacturers',
        109: 'Reserved for allocation by system manufacturers',
        110: 'Reserved for allocation by system manufacturers',
        111: 'Reserved for allocation by system manufacturers',
        112: 'Reserved for allocation by system manufacturers',
        113: 'Reserved for allocation by system manufacturers',
        114: 'Reserved for allocation by system manufacturers',
        115: 'Reserved for allocation by system manufacturers',
        116: 'Reserved for allocation by system manufacturers',
        117: 'Reserved for allocation by system manufacturers',
        118: 'Reserved for allocation by system manufacturers',
        119: 'Reserved for allocation by system manufacturers',
        120: 'Reserved for allocation by system manufacturers',
        121: 'Reserved for allocation by system manufacturers',
        122: 'Reserved for allocation by system manufacturers',
        123: 'Reserved for allocation by system manufacturers',
        124: 'Reserved for allocation by system manufacturers',
        125: 'Reserved for allocation by system manufacturers',
        126: 'Reserved for allocation by system manufacturers',
        127: 'Reserved for allocation by system manufacturers',
        128: 'Reserved for allocation by system manufacturers',
        129: 'Reserved for allocation by system manufacturers',
        130: 'Reserved for allocation by system manufacturers',
        131: 'Reserved for allocation by system manufacturers',
        132: 'Reserved for allocation by system manufacturers',
        133: 'Reserved for allocation by system manufacturers',
        134: 'Reserved for allocation by system manufacturers',
        135: 'Reserved for allocation by system manufacturers',
        136: 'Reserved for allocation by system manufacturers',
        137: 'Reserved for allocation by system manufacturers',
        138: 'Reserved for allocation by system manufacturers',
        139: 'Reserved for allocation by system manufacturers',
        140: 'Reserved for allocation by system manufacturers',
        141: 'Reserved for allocation by system manufacturers',
        142: 'Reserved for allocation by system manufacturers',
        143: 'Reserved for allocation by system manufacturers',
        144: 'Reserved for allocation by system manufacturers',
        145: 'Reserved for allocation by system manufacturers',
        146: 'Reserved for allocation by system manufacturers',
        147: 'Reserved for allocation by system manufacturers',
        148: 'Reserved for allocation by system manufacturers',
        149: 'Reserved for allocation by system manufacturers',
        150: 'Reserved for allocation by system manufacturers',
        151: 'Reserved for allocation by system manufacturers',
        152: 'Reserved for allocation by system manufacturers',
        153: 'Reserved for allocation by system manufacturers',
        154: 'Reserved for allocation by system manufacturers',
        155: 'Reserved for allocation by system manufacturers',
        156: 'Reserved for allocation by system manufacturers',
        157: 'Reserved for allocation by system manufacturers',
        158: 'Reserved for allocation by system manufacturers',
        159: 'Reserved for allocation by system manufacturers',
        160: 'Reserved for allocation by system manufacturers',
        161: 'Reserved for allocation by system manufacturers',
        162: 'Reserved for allocation by system manufacturers',
        163: 'Reserved for allocation by system manufacturers',
        164: 'Reserved for allocation by system manufacturers',
        165: 'Reserved for allocation by system manufacturers',
        166: 'Reserved for allocation by system manufacturers',
        167: 'Reserved for allocation by system manufacturers',
        168: 'Reserved for allocation by system manufacturers',
        169: 'Reserved for allocation by system manufacturers',
        170: 'Reserved for allocation by system manufacturers',
        171: 'Reserved for allocation by system manufacturers',
        172: 'Reserved for allocation by system manufacturers',
        173: 'Reserved for allocation by system manufacturers',
        174: 'Reserved for allocation by system manufacturers',
        175: 'Reserved for allocation by system manufacturers',
        176: 'Reserved for allocation by system manufacturers',
        177: 'Reserved for allocation by system manufacturers',
        178: 'Reserved for allocation by system manufacturers',
        179: 'Reserved for allocation by system manufacturers',
        180: 'Reserved for allocation by system manufacturers',
        181: 'Reserved for allocation by system manufacturers',
        182: 'Reserved for allocation by system manufacturers',
        183: 'Reserved for allocation by system manufacturers',
        184: 'Reserved for allocation by system manufacturers',
        185: 'Reserved for allocation by system manufacturers',
        186: 'Reserved for allocation by system manufacturers',
        187: 'Reserved for allocation by system manufacturers',
        188: 'Reserved for allocation by system manufacturers',
        189: 'Reserved for allocation by system manufacturers',
        190: 'Reserved for allocation by system manufacturers',
        191: 'Reserved for allocation by system manufacturers',
        192: 'Reserved for allocation by system manufacturers',
        193: 'Reserved for allocation by system manufacturers',
        194: 'Reserved for allocation by system manufacturers',
        195: 'Reserved for allocation by system manufacturers',
        196: 'Reserved for allocation by system manufacturers',
        197: 'Reserved for allocation by system manufacturers',
        198: 'Reserved for allocation by system manufacturers',
        199: 'Reserved for allocation by system manufacturers',
        200: 'Reserved for allocation by system manufacturers',
        201: 'Reserved for allocation by system manufacturers',
        202: 'Reserved for allocation by system manufacturers',
        203: 'Reserved for allocation by system manufacturers',
        204: 'Reserved for allocation by system manufacturers',
        205: 'Reserved for allocation by system manufacturers',
        206: 'Reserved for allocation by system manufacturers',
        207: 'Reserved for allocation by system manufacturers',
        208: 'Reserved for allocation by system manufacturers',
        209: 'Reserved for allocation by system manufacturers',
        210: 'Reserved for allocation by system manufacturers',
        211: 'Reserved for allocation by system manufacturers',
        212: 'Reserved for allocation by system manufacturers',
        213: 'Reserved for allocation by system manufacturers',
        214: 'Reserved for allocation by system manufacturers',
        215: 'Reserved for allocation by system manufacturers',
        216: 'Reserved for allocation by system manufacturers',
        217: 'Reserved for allocation by system manufacturers',
        218: 'Reserved for allocation by system manufacturers',
        219: 'Reserved for allocation by system manufacturers',
        220: 'Reserved for allocation by system manufacturers',
        221: 'Reserved for allocation by system manufacturers',
        222: 'Reserved for allocation by system manufacturers',
        223: 'Reserved for allocation by system manufacturers',
        224: 'Reserved for allocation by system manufacturers',
        225: 'Reserved for allocation by system manufacturers',
        226: 'Reserved for allocation by system manufacturers',
        227: 'Reserved for allocation by system manufacturers',
        228: 'Reserved for allocation by system manufacturers',
        229: 'Reserved for allocation by system manufacturers',
        230: 'Reserved for allocation by system manufacturers',
        231: 'Reserved for allocation by system manufacturers',
        232: 'Reserved for allocation by system manufacturers',
        233: 'Reserved for allocation by system manufacturers',
        234: 'Reserved for allocation by system manufacturers',
        235: 'Reserved for allocation by system manufacturers',
        236: 'Reserved for allocation by system manufacturers',
        237: 'Reserved for allocation by system manufacturers',
        238: 'Reserved for allocation by system manufacturers',
        239: 'Reserved for allocation by system manufacturers',
        240: 'Reserved for allocation by system manufacturers',
        241: 'Reserved for allocation by system manufacturers',
        242: 'Reserved for allocation by system manufacturers',
        243: 'Reserved for allocation by system manufacturers',
        244: 'Reserved for allocation by system manufacturers',
        245: 'Reserved for allocation by system manufacturers',
        246: 'Reserved for allocation by system manufacturers',
        247: 'Reserved for allocation by system manufacturers',
        248: 'Reserved for allocation by system manufacturers',
        249: 'Reserved for allocation by system manufacturers',
        250: 'Reserved for allocation by system manufacturers',
        251: 'Reserved for allocation by system manufacturers',
        252: 'Reserved for allocation by system manufacturers',
        253: 'Reserved for allocation by system manufacturers',
        254: 'Reserved for allocation by system manufacturers',
        255: 'Reserved for allocation by system manufacturers',
    }

    def __init__(self, arg : Variation_946_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_947_Arg : TypeAlias = List[Union[Variation_946, Variation_946_Arg]]
class Variation_947(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 8
    variation_type = Variation_946

    @classmethod
    def spec(cls) -> Type[Variation_946]:
        return Variation_946

    def __init__(self, arg : List[Union[Variation_946, Variation_946_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_948_Arg : TypeAlias = Raw
class Variation_948(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 6
    table = {
        0: 'No Error Detected',
        1: 'Error Code Undefined',
        2: 'Reserved for allocation by the AMG',
        3: 'Reserved for allocation by the AMG',
        4: 'Reserved for allocation by the AMG',
        5: 'Reserved for allocation by the AMG',
        6: 'Reserved for allocation by the AMG',
        7: 'Reserved for allocation by the AMG',
        8: 'Reserved for allocation by the AMG',
        9: 'Reserved for allocation by the AMG',
        10: 'Reserved for allocation by the AMG',
        11: 'Reserved for allocation by the AMG',
        12: 'Reserved for allocation by the AMG',
        13: 'Reserved for allocation by the AMG',
        14: 'Reserved for allocation by the AMG',
        15: 'Reserved for allocation by the AMG',
        16: 'Reserved for allocation by system manufacturers',
        17: 'Reserved for allocation by system manufacturers',
        18: 'Reserved for allocation by system manufacturers',
        19: 'Reserved for allocation by system manufacturers',
        20: 'Reserved for allocation by system manufacturers',
        21: 'Reserved for allocation by system manufacturers',
        22: 'Reserved for allocation by system manufacturers',
        23: 'Reserved for allocation by system manufacturers',
        24: 'Reserved for allocation by system manufacturers',
        25: 'Reserved for allocation by system manufacturers',
        26: 'Reserved for allocation by system manufacturers',
        27: 'Reserved for allocation by system manufacturers',
        28: 'Reserved for allocation by system manufacturers',
        29: 'Reserved for allocation by system manufacturers',
        30: 'Reserved for allocation by system manufacturers',
        31: 'Reserved for allocation by system manufacturers',
        32: 'Reserved for allocation by system manufacturers',
        33: 'Reserved for allocation by system manufacturers',
        34: 'Reserved for allocation by system manufacturers',
        35: 'Reserved for allocation by system manufacturers',
        36: 'Reserved for allocation by system manufacturers',
        37: 'Reserved for allocation by system manufacturers',
        38: 'Reserved for allocation by system manufacturers',
        39: 'Reserved for allocation by system manufacturers',
        40: 'Reserved for allocation by system manufacturers',
        41: 'Reserved for allocation by system manufacturers',
        42: 'Reserved for allocation by system manufacturers',
        43: 'Reserved for allocation by system manufacturers',
        44: 'Reserved for allocation by system manufacturers',
        45: 'Reserved for allocation by system manufacturers',
        46: 'Reserved for allocation by system manufacturers',
        47: 'Reserved for allocation by system manufacturers',
        48: 'Reserved for allocation by system manufacturers',
        49: 'Reserved for allocation by system manufacturers',
        50: 'Reserved for allocation by system manufacturers',
        51: 'Reserved for allocation by system manufacturers',
        52: 'Reserved for allocation by system manufacturers',
        53: 'Reserved for allocation by system manufacturers',
        54: 'Reserved for allocation by system manufacturers',
        55: 'Reserved for allocation by system manufacturers',
        56: 'Reserved for allocation by system manufacturers',
        57: 'Reserved for allocation by system manufacturers',
        58: 'Reserved for allocation by system manufacturers',
        59: 'Reserved for allocation by system manufacturers',
        60: 'Reserved for allocation by system manufacturers',
        61: 'Reserved for allocation by system manufacturers',
        62: 'Reserved for allocation by system manufacturers',
        63: 'Reserved for allocation by system manufacturers',
    }

    def __init__(self, arg : Variation_948_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_949_Arg : TypeAlias = Raw
class Variation_949(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 2
    table = {
        0: 'Running',
        1: 'Failed',
        2: 'Maintenance',
        3: 'Reserved',
    }

    def __init__(self, arg : Variation_949_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_950_Arg_Group = TypedDict('Variation_950_Arg_Group', {
    'CID': Union[Variation_64, Variation_64_Arg],
    'ERRC': Union[Variation_948, Variation_948_Arg],
    'CS': Union[Variation_949, Variation_949_Arg],
})
Variation_950_Arg : TypeAlias = Union[Raw, Variation_950_Arg_Group]
class Variation_950(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('CID', Variation_64),
        ('ERRC', Variation_948),
        ('CS', Variation_949),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CID': ('Component ID', Variation_64, 0, 16),
        'ERRC': ('Error Code', Variation_948, 16, 6),
        'CS': ('Component State/Mode', Variation_949, 22, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CID']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ERRC']) -> Type[Variation_948]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CS']) -> Type[Variation_949]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CID'], Literal['ERRC'], Literal['CS']]) -> Union[Type['Variation_64'], Type['Variation_948'], Type['Variation_949']]:
        if key == 'CID':
            return Variation_64
        if key == 'ERRC':
            return Variation_948
        if key == 'CS':
            return Variation_949
        assert_never(key)

    def __init__(self, arg : Variation_950_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CID']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['ERRC']) -> Variation_948:
        ...

    @overload
    def get_item(self, name : Literal['CS']) -> Variation_949:
        ...

    def get_item(self, name : Union[Literal['CID'], Literal['ERRC'], Literal['CS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CID'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_950':
        ...

    @overload
    def set_item(self, name : Literal['ERRC'], val : Union[Variation_948, Variation_948_Arg]) -> 'Variation_950':
        ...

    @overload
    def set_item(self, name : Literal['CS'], val : Union[Variation_949, Variation_949_Arg]) -> 'Variation_950':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_951_Arg : TypeAlias = List[Union[Variation_950, Variation_950_Arg]]
class Variation_951(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_950

    @classmethod
    def spec(cls) -> Type[Variation_950]:
        return Variation_950

    def __init__(self, arg : List[Union[Variation_950, Variation_950_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_952_Arg : TypeAlias = Raw
class Variation_952(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Number of unknown messages received',
        1: 'Number of too old messages received',
        2: 'Number of failed message conversions',
        3: 'Total Number of messages received',
        4: 'Total number of messages transmitted',
        5: 'Reserved for AMG',
        6: 'Reserved for AMG',
        7: 'Reserved for AMG',
        8: 'Reserved for AMG',
        9: 'Reserved for AMG',
        10: 'Reserved for AMG',
        11: 'Reserved for AMG',
        12: 'Reserved for AMG',
        13: 'Reserved for AMG',
        14: 'Reserved for AMG',
        15: 'Reserved for AMG',
        16: 'Reserved for AMG',
        17: 'Reserved for AMG',
        18: 'Reserved for AMG',
        19: 'Reserved for AMG',
        20: 'Implementation specific',
        21: 'Implementation specific',
        22: 'Implementation specific',
        23: 'Implementation specific',
        24: 'Implementation specific',
        25: 'Implementation specific',
        26: 'Implementation specific',
        27: 'Implementation specific',
        28: 'Implementation specific',
        29: 'Implementation specific',
        30: 'Implementation specific',
        31: 'Implementation specific',
        32: 'Implementation specific',
        33: 'Implementation specific',
        34: 'Implementation specific',
        35: 'Implementation specific',
        36: 'Implementation specific',
        37: 'Implementation specific',
        38: 'Implementation specific',
        39: 'Implementation specific',
        40: 'Implementation specific',
        41: 'Implementation specific',
        42: 'Implementation specific',
        43: 'Implementation specific',
        44: 'Implementation specific',
        45: 'Implementation specific',
        46: 'Implementation specific',
        47: 'Implementation specific',
        48: 'Implementation specific',
        49: 'Implementation specific',
        50: 'Implementation specific',
        51: 'Implementation specific',
        52: 'Implementation specific',
        53: 'Implementation specific',
        54: 'Implementation specific',
        55: 'Implementation specific',
        56: 'Implementation specific',
        57: 'Implementation specific',
        58: 'Implementation specific',
        59: 'Implementation specific',
        60: 'Implementation specific',
        61: 'Implementation specific',
        62: 'Implementation specific',
        63: 'Implementation specific',
        64: 'Implementation specific',
        65: 'Implementation specific',
        66: 'Implementation specific',
        67: 'Implementation specific',
        68: 'Implementation specific',
        69: 'Implementation specific',
        70: 'Implementation specific',
        71: 'Implementation specific',
        72: 'Implementation specific',
        73: 'Implementation specific',
        74: 'Implementation specific',
        75: 'Implementation specific',
        76: 'Implementation specific',
        77: 'Implementation specific',
        78: 'Implementation specific',
        79: 'Implementation specific',
        80: 'Implementation specific',
        81: 'Implementation specific',
        82: 'Implementation specific',
        83: 'Implementation specific',
        84: 'Implementation specific',
        85: 'Implementation specific',
        86: 'Implementation specific',
        87: 'Implementation specific',
        88: 'Implementation specific',
        89: 'Implementation specific',
        90: 'Implementation specific',
        91: 'Implementation specific',
        92: 'Implementation specific',
        93: 'Implementation specific',
        94: 'Implementation specific',
        95: 'Implementation specific',
        96: 'Implementation specific',
        97: 'Implementation specific',
        98: 'Implementation specific',
        99: 'Implementation specific',
        100: 'Implementation specific',
        101: 'Implementation specific',
        102: 'Implementation specific',
        103: 'Implementation specific',
        104: 'Implementation specific',
        105: 'Implementation specific',
        106: 'Implementation specific',
        107: 'Implementation specific',
        108: 'Implementation specific',
        109: 'Implementation specific',
        110: 'Implementation specific',
        111: 'Implementation specific',
        112: 'Implementation specific',
        113: 'Implementation specific',
        114: 'Implementation specific',
        115: 'Implementation specific',
        116: 'Implementation specific',
        117: 'Implementation specific',
        118: 'Implementation specific',
        119: 'Implementation specific',
        120: 'Implementation specific',
        121: 'Implementation specific',
        122: 'Implementation specific',
        123: 'Implementation specific',
        124: 'Implementation specific',
        125: 'Implementation specific',
        126: 'Implementation specific',
        127: 'Implementation specific',
        128: 'Implementation specific',
        129: 'Implementation specific',
        130: 'Implementation specific',
        131: 'Implementation specific',
        132: 'Implementation specific',
        133: 'Implementation specific',
        134: 'Implementation specific',
        135: 'Implementation specific',
        136: 'Implementation specific',
        137: 'Implementation specific',
        138: 'Implementation specific',
        139: 'Implementation specific',
        140: 'Implementation specific',
        141: 'Implementation specific',
        142: 'Implementation specific',
        143: 'Implementation specific',
        144: 'Implementation specific',
        145: 'Implementation specific',
        146: 'Implementation specific',
        147: 'Implementation specific',
        148: 'Implementation specific',
        149: 'Implementation specific',
        150: 'Implementation specific',
        151: 'Implementation specific',
        152: 'Implementation specific',
        153: 'Implementation specific',
        154: 'Implementation specific',
        155: 'Implementation specific',
        156: 'Implementation specific',
        157: 'Implementation specific',
        158: 'Implementation specific',
        159: 'Implementation specific',
        160: 'Implementation specific',
        161: 'Implementation specific',
        162: 'Implementation specific',
        163: 'Implementation specific',
        164: 'Implementation specific',
        165: 'Implementation specific',
        166: 'Implementation specific',
        167: 'Implementation specific',
        168: 'Implementation specific',
        169: 'Implementation specific',
        170: 'Implementation specific',
        171: 'Implementation specific',
        172: 'Implementation specific',
        173: 'Implementation specific',
        174: 'Implementation specific',
        175: 'Implementation specific',
        176: 'Implementation specific',
        177: 'Implementation specific',
        178: 'Implementation specific',
        179: 'Implementation specific',
        180: 'Implementation specific',
        181: 'Implementation specific',
        182: 'Implementation specific',
        183: 'Implementation specific',
        184: 'Implementation specific',
        185: 'Implementation specific',
        186: 'Implementation specific',
        187: 'Implementation specific',
        188: 'Implementation specific',
        189: 'Implementation specific',
        190: 'Implementation specific',
        191: 'Implementation specific',
        192: 'Implementation specific',
        193: 'Implementation specific',
        194: 'Implementation specific',
        195: 'Implementation specific',
        196: 'Implementation specific',
        197: 'Implementation specific',
        198: 'Implementation specific',
        199: 'Implementation specific',
        200: 'Implementation specific',
        201: 'Implementation specific',
        202: 'Implementation specific',
        203: 'Implementation specific',
        204: 'Implementation specific',
        205: 'Implementation specific',
        206: 'Implementation specific',
        207: 'Implementation specific',
        208: 'Implementation specific',
        209: 'Implementation specific',
        210: 'Implementation specific',
        211: 'Implementation specific',
        212: 'Implementation specific',
        213: 'Implementation specific',
        214: 'Implementation specific',
        215: 'Implementation specific',
        216: 'Implementation specific',
        217: 'Implementation specific',
        218: 'Implementation specific',
        219: 'Implementation specific',
        220: 'Implementation specific',
        221: 'Implementation specific',
        222: 'Implementation specific',
        223: 'Implementation specific',
        224: 'Implementation specific',
        225: 'Implementation specific',
        226: 'Implementation specific',
        227: 'Implementation specific',
        228: 'Implementation specific',
        229: 'Implementation specific',
        230: 'Implementation specific',
        231: 'Implementation specific',
        232: 'Implementation specific',
        233: 'Implementation specific',
        234: 'Implementation specific',
        235: 'Implementation specific',
        236: 'Implementation specific',
        237: 'Implementation specific',
        238: 'Implementation specific',
        239: 'Implementation specific',
        240: 'Implementation specific',
        241: 'Implementation specific',
        242: 'Implementation specific',
        243: 'Implementation specific',
        244: 'Implementation specific',
        245: 'Implementation specific',
        246: 'Implementation specific',
        247: 'Implementation specific',
        248: 'Implementation specific',
        249: 'Implementation specific',
        250: 'Implementation specific',
        251: 'Implementation specific',
        252: 'Implementation specific',
        253: 'Implementation specific',
        254: 'Implementation specific',
        255: 'Implementation specific',
    }

    def __init__(self, arg : Variation_952_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_953_Arg : TypeAlias = Raw
class Variation_953(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'From UTC midnight',
        1: 'From the previous report',
    }

    def __init__(self, arg : Variation_953_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_954_Arg_Group = TypedDict('Variation_954_Arg_Group', {
    'TYPE': Union[Variation_952, Variation_952_Arg],
    'REF': Union[Variation_953, Variation_953_Arg],
    'COUNT': Union[Variation_541, Variation_541_Arg],
})
Variation_954_Arg : TypeAlias = Union[Raw, Variation_954_Arg_Group]
class Variation_954(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('TYPE', Variation_952),
        ('REF', Variation_953),
        Spare(1, 7),
        ('COUNT', Variation_541),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYPE': ('Type of Report Counter', Variation_952, 0, 8),
        'REF': ('Reference from which the Messages Are Counted', Variation_953, 8, 1),
        'COUNT': ('Counter Value', Variation_541, 16, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYPE']) -> Type[Variation_952]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REF']) -> Type[Variation_953]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COUNT']) -> Type[Variation_541]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYPE'], Literal['REF'], Literal['COUNT']]) -> Union[Type['Variation_952'], Type['Variation_953'], Type['Variation_541']]:
        if key == 'TYPE':
            return Variation_952
        if key == 'REF':
            return Variation_953
        if key == 'COUNT':
            return Variation_541
        assert_never(key)

    def __init__(self, arg : Variation_954_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYPE']) -> Variation_952:
        ...

    @overload
    def get_item(self, name : Literal['REF']) -> Variation_953:
        ...

    @overload
    def get_item(self, name : Literal['COUNT']) -> Variation_541:
        ...

    def get_item(self, name : Union[Literal['TYPE'], Literal['REF'], Literal['COUNT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYPE'], val : Union[Variation_952, Variation_952_Arg]) -> 'Variation_954':
        ...

    @overload
    def set_item(self, name : Literal['REF'], val : Union[Variation_953, Variation_953_Arg]) -> 'Variation_954':
        ...

    @overload
    def set_item(self, name : Literal['COUNT'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_954':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_955_Arg : TypeAlias = List[Union[Variation_954, Variation_954_Arg]]
class Variation_955(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 48
    variation_type = Variation_954

    @classmethod
    def spec(cls) -> Type[Variation_954]:
        return Variation_954

    def __init__(self, arg : List[Union[Variation_954, Variation_954_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_956_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_956(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Signed', 180.0, 32, '°')

    def __init__(self, arg : Variation_956_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_957_Arg_Group = TypedDict('Variation_957_Arg_Group', {
    'LAT': Union[Variation_956, Variation_956_Arg],
    'LON': Union[Variation_956, Variation_956_Arg],
})
Variation_957_Arg : TypeAlias = Union[Raw, Variation_957_Arg_Group]
class Variation_957(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('LAT', Variation_956),
        ('LON', Variation_956),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude', Variation_956, 0, 32),
        'LON': ('Longitude', Variation_956, 32, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_956]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_956]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_956'], Type['Variation_956']]:
        if key == 'LAT':
            return Variation_956
        if key == 'LON':
            return Variation_956
        assert_never(key)

    def __init__(self, arg : Variation_957_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_956:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_956:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_956, Variation_956_Arg]) -> 'Variation_957':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_956, Variation_956_Arg]) -> 'Variation_957':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_958_Arg = TypedDict('Variation_958_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_940, Variation_940_Arg],
    '200': Union[Variation_279, Variation_279_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '020': Union[Variation_201, Variation_201_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '100': Union[Variation_945, Variation_945_Arg],
    '105': Union[Variation_947, Variation_947_Arg],
    '120': Union[Variation_951, Variation_951_Arg],
    '140': Union[Variation_955, Variation_955_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    '600': Union[Variation_957, Variation_957_Arg],
    '610': Union[Variation_302, Variation_302_Arg],
}, total=False)
class Variation_958(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_940),
        ('200', Variation_279),
        ('015', Variation_0),
        ('020', Variation_201),
        ('070', Variation_81),
        ('100', Variation_945),
        ('105', Variation_947),
        ('120', Variation_951),
        ('140', Variation_955),
        ('SP', Variation_62),
        ('600', Variation_957),
        ('610', Variation_302),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_940, 0x4000),
        '200': (Variation_279, 0x2000),
        '015': (Variation_0, 0x1000),
        '020': (Variation_201, 0x0800),
        '070': (Variation_81, 0x0400),
        '100': (Variation_945, 0x0200),
        '105': (Variation_947, 0x0180),
        '120': (Variation_951, 0x0140),
        '140': (Variation_955, 0x0120),
        'SP': (Variation_62, 0x0110),
        '600': (Variation_957, 0x0108),
        '610': (Variation_302, 0x0104),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_940]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_945]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_947]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_951]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_955]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['600']) -> Type[Variation_957]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['610']) -> Type[Variation_302]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['200'], Literal['015'], Literal['020'], Literal['070'], Literal['100'], Literal['105'], Literal['120'], Literal['140'], Literal['SP'], Literal['600'], Literal['610']]) -> Union[Type['Variation_1'], Type['Variation_940'], Type['Variation_279'], Type['Variation_0'], Type['Variation_201'], Type['Variation_81'], Type['Variation_945'], Type['Variation_947'], Type['Variation_951'], Type['Variation_955'], Type['Variation_62'], Type['Variation_957'], Type['Variation_302']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_940
        if key == '200':
            return Variation_279
        if key == '015':
            return Variation_0
        if key == '020':
            return Variation_201
        if key == '070':
            return Variation_81
        if key == '100':
            return Variation_945
        if key == '105':
            return Variation_947
        if key == '120':
            return Variation_951
        if key == '140':
            return Variation_955
        if key == 'SP':
            return Variation_62
        if key == '600':
            return Variation_957
        if key == '610':
            return Variation_302
        assert_never(key)

    def __init__(self, arg : Optional[Variation_958_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_940, Variation_940_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_945, Variation_945_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_947, Variation_947_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_951, Variation_951_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_955, Variation_955_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['600'], val : Union[Variation_957, Variation_957_Arg]) -> 'Variation_958':
        ...

    @overload
    def set_item(self, name : Literal['610'], val : Union[Variation_302, Variation_302_Arg]) -> 'Variation_958':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['600']) -> 'Variation_958':
        ...

    @overload
    def del_item(self, name : Literal['610']) -> 'Variation_958':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_940:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_945:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_947:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_951:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_955:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['600']) -> Variation_957:
        ...

    @overload
    def get_item(self, name : Literal['610']) -> Variation_302:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_959_Arg : TypeAlias = Raw
class Variation_959(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 4
    table = {
        1: 'Information sent by an FPPS',
    }

    def __init__(self, arg : Variation_959_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_960_Arg : TypeAlias = Raw
class Variation_960(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4
    table = {
        1: 'Flight Plan to track initial correlation',
        2: 'Miniplan update',
        3: 'End of correlation',
        4: 'Miniplan Cancellation',
        5: 'Retained Miniplan',
    }

    def __init__(self, arg : Variation_960_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_961_Arg_Group = TypedDict('Variation_961_Arg_Group', {
    'FAMILY': Union[Variation_959, Variation_959_Arg],
    'NATURE': Union[Variation_960, Variation_960_Arg],
})
Variation_961_Arg : TypeAlias = Union[Raw, Variation_961_Arg_Group]
class Variation_961(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('FAMILY', Variation_959),
        ('NATURE', Variation_960),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FAMILY': ('', Variation_959, 0, 4),
        'NATURE': ('', Variation_960, 4, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['FAMILY']) -> Type[Variation_959]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NATURE']) -> Type[Variation_960]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['FAMILY'], Literal['NATURE']]) -> Union[Type['Variation_959'], Type['Variation_960']]:
        if key == 'FAMILY':
            return Variation_959
        if key == 'NATURE':
            return Variation_960
        assert_never(key)

    def __init__(self, arg : Variation_961_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['FAMILY']) -> Variation_959:
        ...

    @overload
    def get_item(self, name : Literal['NATURE']) -> Variation_960:
        ...

    def get_item(self, name : Union[Literal['FAMILY'], Literal['NATURE']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['FAMILY'], val : Union[Variation_959, Variation_959_Arg]) -> 'Variation_961':
        ...

    @overload
    def set_item(self, name : Literal['NATURE'], val : Union[Variation_960, Variation_960_Arg]) -> 'Variation_961':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_962_Arg_Group_1 = TypedDict('Variation_962_Arg_Group_1', {
    'SUI': Union[Variation_0, Variation_0_Arg],
    'STN': Union[Variation_225, Variation_225_Arg],
})
Variation_962_Arg : TypeAlias = Union[
    int,
    Variation_962_Arg_Group_1,
    Tuple[int],
]
class Variation_962(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 24
    ext_bit_size = 24
    groups_bit_sizes = [
        23,
    ]

    subitems_list = [
        [
            ('SUI', Variation_0),
            ('STN', Variation_225),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SUI': ('System Unit Identification', Variation_0, 0, 8),
        'STN': ('System Track Number', Variation_225, 0, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SUI']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STN']) -> Type[Variation_225]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SUI'], Literal['STN']]) -> Union[Type['Variation_0'], Type['Variation_225']]:
        if key == 'SUI':
            return Variation_0
        if key == 'STN':
            return Variation_225
        assert_never(key)

    def __init__(self, arg : Variation_962_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_962_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SUI']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['STN']) -> Variation_225:
        ...

    def get_item(self, name : Union[Literal['SUI'], Literal['STN']]) -> Any:
        return self._get_item(name)

Variation_963_Arg_Group = TypedDict('Variation_963_Arg_Group', {
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_963_Arg : TypeAlias = Union[Raw, Variation_963_Arg_Group]
class Variation_963(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MODE3A': ('(Mode 3/A Code) 4 Digits, Octal Representation', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MODE3A']]) -> Union[Type['Variation_19']]:
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_963_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MODE3A']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_963':
        return self._set_item(name, val) # type: ignore

Variation_964_Arg : TypeAlias = Raw
class Variation_964(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1

    def __init__(self, arg : Variation_964_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_965_Arg : TypeAlias = Raw
class Variation_965(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1

    def __init__(self, arg : Variation_965_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_966_Arg_Group = TypedDict('Variation_966_Arg_Group', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_159, Variation_159_Arg],
    'SP3': Union[Variation_239, Variation_239_Arg],
    'SP2': Union[Variation_964, Variation_964_Arg],
    'SP1': Union[Variation_965, Variation_965_Arg],
})
Variation_966_Arg : TypeAlias = Union[Raw, Variation_966_Arg_Group]
class Variation_966(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('GATOAT', Variation_158),
        ('FR1FR2', Variation_159),
        ('SP3', Variation_239),
        ('SP2', Variation_964),
        ('SP1', Variation_965),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GATOAT': ('', Variation_158, 0, 2),
        'FR1FR2': ('', Variation_159, 2, 2),
        'SP3': ('', Variation_239, 4, 1),
        'SP2': ('', Variation_964, 5, 1),
        'SP1': ('', Variation_965, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GATOAT']) -> Type[Variation_158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR1FR2']) -> Type[Variation_159]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP3']) -> Type[Variation_239]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP2']) -> Type[Variation_964]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP1']) -> Type[Variation_965]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['SP3'], Literal['SP2'], Literal['SP1']]) -> Union[Type['Variation_158'], Type['Variation_159'], Type['Variation_239'], Type['Variation_964'], Type['Variation_965']]:
        if key == 'GATOAT':
            return Variation_158
        if key == 'FR1FR2':
            return Variation_159
        if key == 'SP3':
            return Variation_239
        if key == 'SP2':
            return Variation_964
        if key == 'SP1':
            return Variation_965
        assert_never(key)

    def __init__(self, arg : Variation_966_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GATOAT']) -> Variation_158:
        ...

    @overload
    def get_item(self, name : Literal['FR1FR2']) -> Variation_159:
        ...

    @overload
    def get_item(self, name : Literal['SP3']) -> Variation_239:
        ...

    @overload
    def get_item(self, name : Literal['SP2']) -> Variation_964:
        ...

    @overload
    def get_item(self, name : Literal['SP1']) -> Variation_965:
        ...

    def get_item(self, name : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['SP3'], Literal['SP2'], Literal['SP1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GATOAT'], val : Union[Variation_158, Variation_158_Arg]) -> 'Variation_966':
        ...

    @overload
    def set_item(self, name : Literal['FR1FR2'], val : Union[Variation_159, Variation_159_Arg]) -> 'Variation_966':
        ...

    @overload
    def set_item(self, name : Literal['SP3'], val : Union[Variation_239, Variation_239_Arg]) -> 'Variation_966':
        ...

    @overload
    def set_item(self, name : Literal['SP2'], val : Union[Variation_964, Variation_964_Arg]) -> 'Variation_966':
        ...

    @overload
    def set_item(self, name : Literal['SP1'], val : Union[Variation_965, Variation_965_Arg]) -> 'Variation_966':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_967_Arg_Group = TypedDict('Variation_967_Arg_Group', {
    'CEN': Union[Variation_0, Variation_0_Arg],
    'POS': Union[Variation_0, Variation_0_Arg],
})
Variation_967_Arg : TypeAlias = Union[Raw, Variation_967_Arg_Group]
class Variation_967(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('CEN', Variation_0),
        ('POS', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CEN': ('Centre', Variation_0, 0, 8),
        'POS': ('Position', Variation_0, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CEN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CEN'], Literal['POS']]) -> Union[Type['Variation_0'], Type['Variation_0']]:
        if key == 'CEN':
            return Variation_0
        if key == 'POS':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_967_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CEN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['CEN'], Literal['POS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CEN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_967':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_967':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_968_Arg : TypeAlias = Raw
class Variation_968(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 3

    def __init__(self, arg : Variation_968_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_969_Arg : TypeAlias = Raw
class Variation_969(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 3

    def __init__(self, arg : Variation_969_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_970_Arg_Group = TypedDict('Variation_970_Arg_Group', {
    'OCT1': Union[Variation_97, Variation_97_Arg],
    'OCT2': Union[Variation_968, Variation_968_Arg],
    'OCT3': Union[Variation_969, Variation_969_Arg],
    'OCT4': Union[Variation_224, Variation_224_Arg],
})
Variation_970_Arg : TypeAlias = Union[Raw, Variation_970_Arg_Group]
class Variation_970(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('OCT1', Variation_97),
        ('OCT2', Variation_968),
        ('OCT3', Variation_969),
        ('OCT4', Variation_224),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'OCT1': ('1st Octal Digit', Variation_97, 4, 3),
        'OCT2': ('2nd Octal Digit', Variation_968, 7, 3),
        'OCT3': ('3rd Octal Digit', Variation_969, 10, 3),
        'OCT4': ('4th Octal Digit', Variation_224, 13, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['OCT1']) -> Type[Variation_97]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OCT2']) -> Type[Variation_968]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OCT3']) -> Type[Variation_969]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OCT4']) -> Type[Variation_224]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['OCT1'], Literal['OCT2'], Literal['OCT3'], Literal['OCT4']]) -> Union[Type['Variation_97'], Type['Variation_968'], Type['Variation_969'], Type['Variation_224']]:
        if key == 'OCT1':
            return Variation_97
        if key == 'OCT2':
            return Variation_968
        if key == 'OCT3':
            return Variation_969
        if key == 'OCT4':
            return Variation_224
        assert_never(key)

    def __init__(self, arg : Variation_970_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['OCT1']) -> Variation_97:
        ...

    @overload
    def get_item(self, name : Literal['OCT2']) -> Variation_968:
        ...

    @overload
    def get_item(self, name : Literal['OCT3']) -> Variation_969:
        ...

    @overload
    def get_item(self, name : Literal['OCT4']) -> Variation_224:
        ...

    def get_item(self, name : Union[Literal['OCT1'], Literal['OCT2'], Literal['OCT3'], Literal['OCT4']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['OCT1'], val : Union[Variation_97, Variation_97_Arg]) -> 'Variation_970':
        ...

    @overload
    def set_item(self, name : Literal['OCT2'], val : Union[Variation_968, Variation_968_Arg]) -> 'Variation_970':
        ...

    @overload
    def set_item(self, name : Literal['OCT3'], val : Union[Variation_969, Variation_969_Arg]) -> 'Variation_970':
        ...

    @overload
    def set_item(self, name : Literal['OCT4'], val : Union[Variation_224, Variation_224_Arg]) -> 'Variation_970':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_971_Arg : TypeAlias = List[Union[Variation_970, Variation_970_Arg]]
class Variation_971(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_970

    @classmethod
    def spec(cls) -> Type[Variation_970]:
        return Variation_970

    def __init__(self, arg : List[Union[Variation_970, Variation_970_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_972_Arg : TypeAlias = Raw
class Variation_972(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Plan Number',
        1: 'Unit 1 internal flight number',
        2: 'Unit 2 internal flight number',
        3: 'Unit 3 internal flight number',
    }

    def __init__(self, arg : Variation_972_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_973_Arg_Group = TypedDict('Variation_973_Arg_Group', {
    'TYP': Union[Variation_972, Variation_972_Arg],
    'NBR': Union[Variation_368, Variation_368_Arg],
})
Variation_973_Arg : TypeAlias = Union[Raw, Variation_973_Arg_Group]
class Variation_973(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_972),
        Spare(2, 3),
        ('NBR', Variation_368),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_972, 0, 2),
        'NBR': ('', Variation_368, 5, 27),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_972]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NBR']) -> Type[Variation_368]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['NBR']]) -> Union[Type['Variation_972'], Type['Variation_368']]:
        if key == 'TYP':
            return Variation_972
        if key == 'NBR':
            return Variation_368
        assert_never(key)

    def __init__(self, arg : Variation_973_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_972:
        ...

    @overload
    def get_item(self, name : Literal['NBR']) -> Variation_368:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['NBR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_972, Variation_972_Arg]) -> 'Variation_973':
        ...

    @overload
    def set_item(self, name : Literal['NBR'], val : Union[Variation_368, Variation_368_Arg]) -> 'Variation_973':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_974_Arg : TypeAlias = Raw
class Variation_974(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Approved',
        2: 'Exempt',
        3: 'Not approved',
    }

    def __init__(self, arg : Variation_974_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_975_Arg : TypeAlias = Raw
class Variation_975(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'Normal Priority Flight',
        1: 'High Priority Flight',
    }

    def __init__(self, arg : Variation_975_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_976_Arg_Group = TypedDict('Variation_976_Arg_Group', {
    'RVSM': Union[Variation_974, Variation_974_Arg],
    'HPR': Union[Variation_975, Variation_975_Arg],
})
Variation_976_Arg : TypeAlias = Union[Raw, Variation_976_Arg_Group]
class Variation_976(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 5),
        ('RVSM', Variation_974),
        ('HPR', Variation_975),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RVSM': ('', Variation_974, 5, 2),
        'HPR': ('', Variation_975, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RVSM']) -> Type[Variation_974]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_975]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RVSM'], Literal['HPR']]) -> Union[Type['Variation_974'], Type['Variation_975']]:
        if key == 'RVSM':
            return Variation_974
        if key == 'HPR':
            return Variation_975
        assert_never(key)

    def __init__(self, arg : Variation_976_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RVSM']) -> Variation_974:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_975:
        ...

    def get_item(self, name : Union[Literal['RVSM'], Literal['HPR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RVSM'], val : Union[Variation_974, Variation_974_Arg]) -> 'Variation_976':
        ...

    @overload
    def set_item(self, name : Literal['HPR'], val : Union[Variation_975, Variation_975_Arg]) -> 'Variation_976':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_977_Arg : TypeAlias = Union[Raw,str]
class Variation_977(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    string_type = StringAscii()

    def __init__(self, arg : Variation_977_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, str):
            super().__init__(self._from_string(arg)); return
        assert_never(arg)

    def to_string(self) -> str:
        return self._to_string()

Variation_978_Arg_Group = TypedDict('Variation_978_Arg_Group', {
    'NU1': Union[Variation_977, Variation_977_Arg],
    'NU2': Union[Variation_977, Variation_977_Arg],
    'LTR': Union[Variation_977, Variation_977_Arg],
})
Variation_978_Arg : TypeAlias = Union[Raw, Variation_978_Arg_Group]
class Variation_978(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('NU1', Variation_977),
        ('NU2', Variation_977),
        ('LTR', Variation_977),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NU1': ('First Number', Variation_977, 0, 8),
        'NU2': ('Second Number', Variation_977, 8, 8),
        'LTR': ('Letter', Variation_977, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NU1']) -> Type[Variation_977]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NU2']) -> Type[Variation_977]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LTR']) -> Type[Variation_977]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NU1'], Literal['NU2'], Literal['LTR']]) -> Union[Type['Variation_977'], Type['Variation_977'], Type['Variation_977']]:
        if key == 'NU1':
            return Variation_977
        if key == 'NU2':
            return Variation_977
        if key == 'LTR':
            return Variation_977
        assert_never(key)

    def __init__(self, arg : Variation_978_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NU1']) -> Variation_977:
        ...

    @overload
    def get_item(self, name : Literal['NU2']) -> Variation_977:
        ...

    @overload
    def get_item(self, name : Literal['LTR']) -> Variation_977:
        ...

    def get_item(self, name : Union[Literal['NU1'], Literal['NU2'], Literal['LTR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NU1'], val : Union[Variation_977, Variation_977_Arg]) -> 'Variation_978':
        ...

    @overload
    def set_item(self, name : Literal['NU2'], val : Union[Variation_977, Variation_977_Arg]) -> 'Variation_978':
        ...

    @overload
    def set_item(self, name : Literal['LTR'], val : Union[Variation_977, Variation_977_Arg]) -> 'Variation_978':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_979_Arg : TypeAlias = Raw
class Variation_979(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5
    table = {
        0: 'Scheduled Off-Block Time',
        1: 'Estimated Off-Block Time',
        2: 'Estimated Take-Off Time',
        3: 'Actual Off-Block Time',
        4: 'Predicted Time at Runway Hold',
        5: 'Actual Time at Runway Hold',
        6: 'Actual Line-Up Time',
        7: 'Actual Take-Off Time',
        8: 'Estimated Time of Arrival',
        9: 'Predicted Landing Time',
        10: 'Actual Landing Time',
        11: 'Actual Time off Runway',
        12: 'Predicted Time to Gate',
        13: 'Actual On-Block Time',
    }

    def __init__(self, arg : Variation_979_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_980_Arg : TypeAlias = Raw
class Variation_980(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Today',
        1: 'Yesterday',
        2: 'Tomorrow',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_980_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_981_Arg_Group = TypedDict('Variation_981_Arg_Group', {
    'TYP': Union[Variation_979, Variation_979_Arg],
    'DAY': Union[Variation_980, Variation_980_Arg],
    'HOR': Union[Variation_376, Variation_376_Arg],
    'MIN': Union[Variation_377, Variation_377_Arg],
    'AVS': Union[Variation_378, Variation_378_Arg],
    'SEC': Union[Variation_377, Variation_377_Arg],
})
Variation_981_Arg : TypeAlias = Union[Raw, Variation_981_Arg_Group]
class Variation_981(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_979),
        ('DAY', Variation_980),
        Spare(7, 4),
        ('HOR', Variation_376),
        Spare(0, 2),
        ('MIN', Variation_377),
        ('AVS', Variation_378),
        Spare(1, 1),
        ('SEC', Variation_377),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_979, 0, 5),
        'DAY': ('', Variation_980, 5, 2),
        'HOR': ('', Variation_376, 11, 5),
        'MIN': ('', Variation_377, 18, 6),
        'AVS': ('', Variation_378, 24, 1),
        'SEC': ('', Variation_377, 26, 6),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_979]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DAY']) -> Type[Variation_980]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HOR']) -> Type[Variation_376]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MIN']) -> Type[Variation_377]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVS']) -> Type[Variation_378]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SEC']) -> Type[Variation_377]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Union[Type['Variation_979'], Type['Variation_980'], Type['Variation_376'], Type['Variation_377'], Type['Variation_378'], Type['Variation_377']]:
        if key == 'TYP':
            return Variation_979
        if key == 'DAY':
            return Variation_980
        if key == 'HOR':
            return Variation_376
        if key == 'MIN':
            return Variation_377
        if key == 'AVS':
            return Variation_378
        if key == 'SEC':
            return Variation_377
        assert_never(key)

    def __init__(self, arg : Variation_981_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_979:
        ...

    @overload
    def get_item(self, name : Literal['DAY']) -> Variation_980:
        ...

    @overload
    def get_item(self, name : Literal['HOR']) -> Variation_376:
        ...

    @overload
    def get_item(self, name : Literal['MIN']) -> Variation_377:
        ...

    @overload
    def get_item(self, name : Literal['AVS']) -> Variation_378:
        ...

    @overload
    def get_item(self, name : Literal['SEC']) -> Variation_377:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_979, Variation_979_Arg]) -> 'Variation_981':
        ...

    @overload
    def set_item(self, name : Literal['DAY'], val : Union[Variation_980, Variation_980_Arg]) -> 'Variation_981':
        ...

    @overload
    def set_item(self, name : Literal['HOR'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_981':
        ...

    @overload
    def set_item(self, name : Literal['MIN'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_981':
        ...

    @overload
    def set_item(self, name : Literal['AVS'], val : Union[Variation_378, Variation_378_Arg]) -> 'Variation_981':
        ...

    @overload
    def set_item(self, name : Literal['SEC'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_981':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_982_Arg : TypeAlias = List[Union[Variation_981, Variation_981_Arg]]
class Variation_982(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_981

    @classmethod
    def spec(cls) -> Type[Variation_981]:
        return Variation_981

    def __init__(self, arg : List[Union[Variation_981, Variation_981_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_983_Arg : TypeAlias = Raw
class Variation_983(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Empty',
        1: 'Occupied',
        2: 'Unknown',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_983_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_984_Arg : TypeAlias = Raw
class Variation_984(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Available',
        1: 'Not available',
        2: 'Unknown',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_984_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_985_Arg_Group = TypedDict('Variation_985_Arg_Group', {
    'EMP': Union[Variation_983, Variation_983_Arg],
    'AVL': Union[Variation_984, Variation_984_Arg],
})
Variation_985_Arg : TypeAlias = Union[Raw, Variation_985_Arg_Group]
class Variation_985(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('EMP', Variation_983),
        ('AVL', Variation_984),
        Spare(4, 4),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EMP': ('', Variation_983, 0, 2),
        'AVL': ('', Variation_984, 2, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EMP']) -> Type[Variation_983]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVL']) -> Type[Variation_984]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EMP'], Literal['AVL']]) -> Union[Type['Variation_983'], Type['Variation_984']]:
        if key == 'EMP':
            return Variation_983
        if key == 'AVL':
            return Variation_984
        assert_never(key)

    def __init__(self, arg : Variation_985_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EMP']) -> Variation_983:
        ...

    @overload
    def get_item(self, name : Literal['AVL']) -> Variation_984:
        ...

    def get_item(self, name : Union[Literal['EMP'], Literal['AVL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EMP'], val : Union[Variation_983, Variation_983_Arg]) -> 'Variation_985':
        ...

    @overload
    def set_item(self, name : Literal['AVL'], val : Union[Variation_984, Variation_984_Arg]) -> 'Variation_985':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_986_Arg = TypedDict('Variation_986_Arg', {
    'IFI': Union[Variation_973, Variation_973_Arg],
    'RVP': Union[Variation_976, Variation_976_Arg],
    'RDS': Union[Variation_978, Variation_978_Arg],
    'TOD': Union[Variation_982, Variation_982_Arg],
    'AST': Union[Variation_166, Variation_166_Arg],
    'STS': Union[Variation_985, Variation_985_Arg],
    'SID': Union[Variation_149, Variation_149_Arg],
    'STAR': Union[Variation_149, Variation_149_Arg],
}, total=False)
class Variation_986(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('IFI', Variation_973),
        ('RVP', Variation_976),
        ('RDS', Variation_978),
        ('TOD', Variation_982),
        ('AST', Variation_166),
        ('STS', Variation_985),
        ('SID', Variation_149),
        ('STAR', Variation_149),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'IFI': (Variation_973, 0x8000),
        'RVP': (Variation_976, 0x4000),
        'RDS': (Variation_978, 0x2000),
        'TOD': (Variation_982, 0x1000),
        'AST': (Variation_166, 0x0800),
        'STS': (Variation_985, 0x0400),
        'SID': (Variation_149, 0x0200),
        'STAR': (Variation_149, 0x0180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['IFI']) -> Type[Variation_973]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RVP']) -> Type[Variation_976]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDS']) -> Type[Variation_978]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOD']) -> Type[Variation_982]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AST']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STS']) -> Type[Variation_985]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SID']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAR']) -> Type[Variation_149]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['IFI'], Literal['RVP'], Literal['RDS'], Literal['TOD'], Literal['AST'], Literal['STS'], Literal['SID'], Literal['STAR']]) -> Union[Type['Variation_973'], Type['Variation_976'], Type['Variation_978'], Type['Variation_982'], Type['Variation_166'], Type['Variation_985'], Type['Variation_149'], Type['Variation_149']]:
        if key == 'IFI':
            return Variation_973
        if key == 'RVP':
            return Variation_976
        if key == 'RDS':
            return Variation_978
        if key == 'TOD':
            return Variation_982
        if key == 'AST':
            return Variation_166
        if key == 'STS':
            return Variation_985
        if key == 'SID':
            return Variation_149
        if key == 'STAR':
            return Variation_149
        assert_never(key)

    def __init__(self, arg : Optional[Variation_986_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['IFI'], val : Union[Variation_973, Variation_973_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['RVP'], val : Union[Variation_976, Variation_976_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['RDS'], val : Union[Variation_978, Variation_978_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['TOD'], val : Union[Variation_982, Variation_982_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['AST'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['STS'], val : Union[Variation_985, Variation_985_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['SID'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_986':
        ...

    @overload
    def set_item(self, name : Literal['STAR'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_986':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['IFI']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['RVP']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['RDS']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['TOD']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['AST']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['STS']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['SID']) -> 'Variation_986':
        ...

    @overload
    def del_item(self, name : Literal['STAR']) -> 'Variation_986':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['IFI']) -> Variation_973:
        ...

    @overload
    def get_item(self, name : Literal['RVP']) -> Variation_976:
        ...

    @overload
    def get_item(self, name : Literal['RDS']) -> Variation_978:
        ...

    @overload
    def get_item(self, name : Literal['TOD']) -> Variation_982:
        ...

    @overload
    def get_item(self, name : Literal['AST']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['STS']) -> Variation_985:
        ...

    @overload
    def get_item(self, name : Literal['SID']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['STAR']) -> Variation_149:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_987_Arg = TypedDict('Variation_987_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_64, Variation_64_Arg],
    '018': Union[Variation_1, Variation_1_Arg],
    '035': Union[Variation_961, Variation_961_Arg],
    '020': Union[Variation_81, Variation_81_Arg],
    '040': Union[Variation_64, Variation_64_Arg],
    '050': Union[Variation_962, Variation_962_Arg],
    '060': Union[Variation_963, Variation_963_Arg],
    '400': Union[Variation_149, Variation_149_Arg],
    '410': Union[Variation_64, Variation_64_Arg],
    '420': Union[Variation_966, Variation_966_Arg],
    '440': Union[Variation_331, Variation_331_Arg],
    '450': Union[Variation_331, Variation_331_Arg],
    '480': Union[Variation_169, Variation_169_Arg],
    '490': Union[Variation_967, Variation_967_Arg],
    '430': Union[Variation_331, Variation_331_Arg],
    '435': Union[Variation_371, Variation_371_Arg],
    '460': Union[Variation_971, Variation_971_Arg],
    '500': Union[Variation_986, Variation_986_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_987(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 3

    subitems_list = [
        ('010', Variation_1),
        ('015', Variation_64),
        ('018', Variation_1),
        ('035', Variation_961),
        ('020', Variation_81),
        ('040', Variation_64),
        ('050', Variation_962),
        ('060', Variation_963),
        ('400', Variation_149),
        ('410', Variation_64),
        ('420', Variation_966),
        ('440', Variation_331),
        ('450', Variation_331),
        ('480', Variation_169),
        ('490', Variation_967),
        ('430', Variation_331),
        ('435', Variation_371),
        ('460', Variation_971),
        ('500', Variation_986),
        None,
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x800000),
        '015': (Variation_64, 0x400000),
        '018': (Variation_1, 0x200000),
        '035': (Variation_961, 0x100000),
        '020': (Variation_81, 0x080000),
        '040': (Variation_64, 0x040000),
        '050': (Variation_962, 0x020000),
        '060': (Variation_963, 0x018000),
        '400': (Variation_149, 0x014000),
        '410': (Variation_64, 0x012000),
        '420': (Variation_966, 0x011000),
        '440': (Variation_331, 0x010800),
        '450': (Variation_331, 0x010400),
        '480': (Variation_169, 0x010200),
        '490': (Variation_967, 0x010180),
        '430': (Variation_331, 0x010140),
        '435': (Variation_371, 0x010120),
        '460': (Variation_971, 0x010110),
        '500': (Variation_986, 0x010108),
        'RE': (Variation_62, 0x010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['018']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['035']) -> Type[Variation_961]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_962]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_963]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['400']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['410']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['420']) -> Type[Variation_966]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['440']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['450']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['480']) -> Type[Variation_169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['490']) -> Type[Variation_967]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['430']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['435']) -> Type[Variation_371]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['460']) -> Type[Variation_971]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_986]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['018'], Literal['035'], Literal['020'], Literal['040'], Literal['050'], Literal['060'], Literal['400'], Literal['410'], Literal['420'], Literal['440'], Literal['450'], Literal['480'], Literal['490'], Literal['430'], Literal['435'], Literal['460'], Literal['500'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_64'], Type['Variation_1'], Type['Variation_961'], Type['Variation_81'], Type['Variation_64'], Type['Variation_962'], Type['Variation_963'], Type['Variation_149'], Type['Variation_64'], Type['Variation_966'], Type['Variation_331'], Type['Variation_331'], Type['Variation_169'], Type['Variation_967'], Type['Variation_331'], Type['Variation_371'], Type['Variation_971'], Type['Variation_986'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_64
        if key == '018':
            return Variation_1
        if key == '035':
            return Variation_961
        if key == '020':
            return Variation_81
        if key == '040':
            return Variation_64
        if key == '050':
            return Variation_962
        if key == '060':
            return Variation_963
        if key == '400':
            return Variation_149
        if key == '410':
            return Variation_64
        if key == '420':
            return Variation_966
        if key == '440':
            return Variation_331
        if key == '450':
            return Variation_331
        if key == '480':
            return Variation_169
        if key == '490':
            return Variation_967
        if key == '430':
            return Variation_331
        if key == '435':
            return Variation_371
        if key == '460':
            return Variation_971
        if key == '500':
            return Variation_986
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_987_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['018'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['035'], val : Union[Variation_961, Variation_961_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_962, Variation_962_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_963, Variation_963_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['400'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['410'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['420'], val : Union[Variation_966, Variation_966_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['440'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['450'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['480'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['490'], val : Union[Variation_967, Variation_967_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['430'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['435'], val : Union[Variation_371, Variation_371_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['460'], val : Union[Variation_971, Variation_971_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_986, Variation_986_Arg]) -> 'Variation_987':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_987':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['018']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['035']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['400']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['410']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['420']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['440']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['450']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['480']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['490']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['430']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['435']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['460']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_987':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_987':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['018']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['035']) -> Variation_961:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_962:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_963:
        ...

    @overload
    def get_item(self, name : Literal['400']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['410']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['420']) -> Variation_966:
        ...

    @overload
    def get_item(self, name : Literal['440']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['450']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['480']) -> Variation_169:
        ...

    @overload
    def get_item(self, name : Literal['490']) -> Variation_967:
        ...

    @overload
    def get_item(self, name : Literal['430']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['435']) -> Variation_371:
        ...

    @overload
    def get_item(self, name : Literal['460']) -> Variation_971:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_986:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_988_Arg : TypeAlias = Raw
class Variation_988(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'North marker message',
        2: 'Sector crossing message',
        3: 'Geographical filtering message',
        4: 'Jamming strobe message',
    }

    def __init__(self, arg : Variation_988_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_989_Arg : TypeAlias = Raw
class Variation_989(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'System is released for operational use',
        1: 'Operational use of System is inhibited, i.e. the data shall be discarded by an operational SDPS',
    }

    def __init__(self, arg : Variation_989_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_990_Arg : TypeAlias = Raw
class Variation_990(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'RDPC-1 selected',
        1: 'RDPC-2 selected',
    }

    def __init__(self, arg : Variation_990_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_991_Arg : TypeAlias = Raw
class Variation_991(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default situation',
        1: 'Reset of RDPC',
    }

    def __init__(self, arg : Variation_991_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_992_Arg : TypeAlias = Raw
class Variation_992(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default, no overload',
        1: 'Overload in RDP',
    }

    def __init__(self, arg : Variation_992_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_993_Arg : TypeAlias = Raw
class Variation_993(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default, no overload',
        1: 'Overload in transmission subsystem',
    }

    def __init__(self, arg : Variation_993_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_994_Arg : TypeAlias = Raw
class Variation_994(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Monitoring system connected',
        1: 'Monitoring system disconnected',
    }

    def __init__(self, arg : Variation_994_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_995_Arg : TypeAlias = Raw
class Variation_995(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Valid',
        1: 'Invalid',
    }

    def __init__(self, arg : Variation_995_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_996_Arg_Group = TypedDict('Variation_996_Arg_Group', {
    'NOGO': Union[Variation_989, Variation_989_Arg],
    'RDPC': Union[Variation_990, Variation_990_Arg],
    'RDPR': Union[Variation_991, Variation_991_Arg],
    'OVLRDP': Union[Variation_992, Variation_992_Arg],
    'OVLXMT': Union[Variation_993, Variation_993_Arg],
    'MSC': Union[Variation_994, Variation_994_Arg],
    'TSV': Union[Variation_995, Variation_995_Arg],
})
Variation_996_Arg : TypeAlias = Union[Raw, Variation_996_Arg_Group]
class Variation_996(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('NOGO', Variation_989),
        ('RDPC', Variation_990),
        ('RDPR', Variation_991),
        ('OVLRDP', Variation_992),
        ('OVLXMT', Variation_993),
        ('MSC', Variation_994),
        ('TSV', Variation_995),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('Operational Release Status of the System', Variation_989, 0, 1),
        'RDPC': ('Radar Data Processor Chain Selection Status', Variation_990, 1, 1),
        'RDPR': ('Event to Signal a Reset/restart of the Selected Radar Data Processor Chain, I.e. Expect a New Assignment of Track Numbers', Variation_991, 2, 1),
        'OVLRDP': ('Radar Data Processor Overload Indicator', Variation_992, 3, 1),
        'OVLXMT': ('Transmission Subsystem Overload Status', Variation_993, 4, 1),
        'MSC': ('Monitoring System Connected Status', Variation_994, 5, 1),
        'TSV': ('Time Source Validity', Variation_995, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_989]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDPC']) -> Type[Variation_990]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDPR']) -> Type[Variation_991]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVLRDP']) -> Type[Variation_992]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVLXMT']) -> Type[Variation_993]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_994]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_995]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['RDPC'], Literal['RDPR'], Literal['OVLRDP'], Literal['OVLXMT'], Literal['MSC'], Literal['TSV']]) -> Union[Type['Variation_989'], Type['Variation_990'], Type['Variation_991'], Type['Variation_992'], Type['Variation_993'], Type['Variation_994'], Type['Variation_995']]:
        if key == 'NOGO':
            return Variation_989
        if key == 'RDPC':
            return Variation_990
        if key == 'RDPR':
            return Variation_991
        if key == 'OVLRDP':
            return Variation_992
        if key == 'OVLXMT':
            return Variation_993
        if key == 'MSC':
            return Variation_994
        if key == 'TSV':
            return Variation_995
        assert_never(key)

    def __init__(self, arg : Variation_996_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_989:
        ...

    @overload
    def get_item(self, name : Literal['RDPC']) -> Variation_990:
        ...

    @overload
    def get_item(self, name : Literal['RDPR']) -> Variation_991:
        ...

    @overload
    def get_item(self, name : Literal['OVLRDP']) -> Variation_992:
        ...

    @overload
    def get_item(self, name : Literal['OVLXMT']) -> Variation_993:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_994:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_995:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['RDPC'], Literal['RDPR'], Literal['OVLRDP'], Literal['OVLXMT'], Literal['MSC'], Literal['TSV']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NOGO'], val : Union[Variation_989, Variation_989_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['RDPC'], val : Union[Variation_990, Variation_990_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['RDPR'], val : Union[Variation_991, Variation_991_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['OVLRDP'], val : Union[Variation_992, Variation_992_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['OVLXMT'], val : Union[Variation_993, Variation_993_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['MSC'], val : Union[Variation_994, Variation_994_Arg]) -> 'Variation_996':
        ...

    @overload
    def set_item(self, name : Literal['TSV'], val : Union[Variation_995, Variation_995_Arg]) -> 'Variation_996':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_997_Arg : TypeAlias = Raw
class Variation_997(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Antenna 1',
        1: 'Antenna 2',
    }

    def __init__(self, arg : Variation_997_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_998_Arg : TypeAlias = Raw
class Variation_998(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No channel selected',
        1: 'Channel A only selected',
        2: 'Channel B only selected',
        3: 'Diversity mode ; Channel A and B selected',
    }

    def __init__(self, arg : Variation_998_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_999_Arg : TypeAlias = Raw
class Variation_999(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'No overload',
        1: 'Overload',
    }

    def __init__(self, arg : Variation_999_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1000_Arg : TypeAlias = Raw
class Variation_1000(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Monitoring system connected',
        1: 'Monitoring system disconnected',
    }

    def __init__(self, arg : Variation_1000_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1001_Arg_Group = TypedDict('Variation_1001_Arg_Group', {
    'ANT': Union[Variation_997, Variation_997_Arg],
    'CHAB': Union[Variation_998, Variation_998_Arg],
    'OVL': Union[Variation_999, Variation_999_Arg],
    'MSC': Union[Variation_1000, Variation_1000_Arg],
})
Variation_1001_Arg : TypeAlias = Union[Raw, Variation_1001_Arg_Group]
class Variation_1001(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('ANT', Variation_997),
        ('CHAB', Variation_998),
        ('OVL', Variation_999),
        ('MSC', Variation_1000),
        Spare(5, 3),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ANT': ('Selected Antenna', Variation_997, 0, 1),
        'CHAB': ('Channel A/B Selection Status', Variation_998, 1, 2),
        'OVL': ('Overload Condition', Variation_999, 3, 1),
        'MSC': ('Monitoring System Connected Status', Variation_1000, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ANT']) -> Type[Variation_997]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHAB']) -> Type[Variation_998]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVL']) -> Type[Variation_999]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_1000]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ANT'], Literal['CHAB'], Literal['OVL'], Literal['MSC']]) -> Union[Type['Variation_997'], Type['Variation_998'], Type['Variation_999'], Type['Variation_1000']]:
        if key == 'ANT':
            return Variation_997
        if key == 'CHAB':
            return Variation_998
        if key == 'OVL':
            return Variation_999
        if key == 'MSC':
            return Variation_1000
        assert_never(key)

    def __init__(self, arg : Variation_1001_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ANT']) -> Variation_997:
        ...

    @overload
    def get_item(self, name : Literal['CHAB']) -> Variation_998:
        ...

    @overload
    def get_item(self, name : Literal['OVL']) -> Variation_999:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_1000:
        ...

    def get_item(self, name : Union[Literal['ANT'], Literal['CHAB'], Literal['OVL'], Literal['MSC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ANT'], val : Union[Variation_997, Variation_997_Arg]) -> 'Variation_1001':
        ...

    @overload
    def set_item(self, name : Literal['CHAB'], val : Union[Variation_998, Variation_998_Arg]) -> 'Variation_1001':
        ...

    @overload
    def set_item(self, name : Literal['OVL'], val : Union[Variation_999, Variation_999_Arg]) -> 'Variation_1001':
        ...

    @overload
    def set_item(self, name : Literal['MSC'], val : Union[Variation_1000, Variation_1000_Arg]) -> 'Variation_1001':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1002_Arg : TypeAlias = Raw
class Variation_1002(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No channel selected',
        1: 'Channel A only selected',
        2: 'Channel B only selected',
        3: 'Invalid combination',
    }

    def __init__(self, arg : Variation_1002_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1003_Arg_Group = TypedDict('Variation_1003_Arg_Group', {
    'ANT': Union[Variation_997, Variation_997_Arg],
    'CHAB': Union[Variation_1002, Variation_1002_Arg],
    'OVL': Union[Variation_999, Variation_999_Arg],
    'MSC': Union[Variation_1000, Variation_1000_Arg],
})
Variation_1003_Arg : TypeAlias = Union[Raw, Variation_1003_Arg_Group]
class Variation_1003(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('ANT', Variation_997),
        ('CHAB', Variation_1002),
        ('OVL', Variation_999),
        ('MSC', Variation_1000),
        Spare(5, 3),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ANT': ('Selected Antenna', Variation_997, 0, 1),
        'CHAB': ('Channel A/B Selection Status', Variation_1002, 1, 2),
        'OVL': ('Overload Condition', Variation_999, 3, 1),
        'MSC': ('Monitoring System Connected Status:', Variation_1000, 4, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ANT']) -> Type[Variation_997]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHAB']) -> Type[Variation_1002]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVL']) -> Type[Variation_999]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_1000]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ANT'], Literal['CHAB'], Literal['OVL'], Literal['MSC']]) -> Union[Type['Variation_997'], Type['Variation_1002'], Type['Variation_999'], Type['Variation_1000']]:
        if key == 'ANT':
            return Variation_997
        if key == 'CHAB':
            return Variation_1002
        if key == 'OVL':
            return Variation_999
        if key == 'MSC':
            return Variation_1000
        assert_never(key)

    def __init__(self, arg : Variation_1003_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ANT']) -> Variation_997:
        ...

    @overload
    def get_item(self, name : Literal['CHAB']) -> Variation_1002:
        ...

    @overload
    def get_item(self, name : Literal['OVL']) -> Variation_999:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_1000:
        ...

    def get_item(self, name : Union[Literal['ANT'], Literal['CHAB'], Literal['OVL'], Literal['MSC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ANT'], val : Union[Variation_997, Variation_997_Arg]) -> 'Variation_1003':
        ...

    @overload
    def set_item(self, name : Literal['CHAB'], val : Union[Variation_1002, Variation_1002_Arg]) -> 'Variation_1003':
        ...

    @overload
    def set_item(self, name : Literal['OVL'], val : Union[Variation_999, Variation_999_Arg]) -> 'Variation_1003':
        ...

    @overload
    def set_item(self, name : Literal['MSC'], val : Union[Variation_1000, Variation_1000_Arg]) -> 'Variation_1003':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1004_Arg : TypeAlias = Raw
class Variation_1004(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No channel selected',
        1: 'Channel A only selected',
        2: 'Channel B only selected',
        3: 'Illegal combination',
    }

    def __init__(self, arg : Variation_1004_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1005_Arg : TypeAlias = Raw
class Variation_1005(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Channel A in use',
        1: 'Channel B in use',
    }

    def __init__(self, arg : Variation_1005_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1006_Arg : TypeAlias = Raw
class Variation_1006(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Channel A in use',
        1: 'Channel B in use',
    }

    def __init__(self, arg : Variation_1006_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1007_Arg : TypeAlias = Raw
class Variation_1007(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'No overload',
        1: 'Overload',
    }

    def __init__(self, arg : Variation_1007_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1008_Arg : TypeAlias = Raw
class Variation_1008(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No overload',
        1: 'Overload',
    }

    def __init__(self, arg : Variation_1008_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1009_Arg_Group = TypedDict('Variation_1009_Arg_Group', {
    'ANT': Union[Variation_997, Variation_997_Arg],
    'CHAB': Union[Variation_1004, Variation_1004_Arg],
    'OVLSUR': Union[Variation_999, Variation_999_Arg],
    'MSC': Union[Variation_1000, Variation_1000_Arg],
    'SCF': Union[Variation_1005, Variation_1005_Arg],
    'DLF': Union[Variation_1006, Variation_1006_Arg],
    'OVLSCF': Union[Variation_1007, Variation_1007_Arg],
    'OVLDLF': Union[Variation_1008, Variation_1008_Arg],
})
Variation_1009_Arg : TypeAlias = Union[Raw, Variation_1009_Arg_Group]
class Variation_1009(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('ANT', Variation_997),
        ('CHAB', Variation_1004),
        ('OVLSUR', Variation_999),
        ('MSC', Variation_1000),
        ('SCF', Variation_1005),
        ('DLF', Variation_1006),
        ('OVLSCF', Variation_1007),
        ('OVLDLF', Variation_1008),
        Spare(1, 7),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'ANT': ('Selected Antenna', Variation_997, 0, 1),
        'CHAB': ('Channel A/B Selection Status', Variation_1004, 1, 2),
        'OVLSUR': ('Overload Condition', Variation_999, 3, 1),
        'MSC': ('Monitoring System Connected Status:', Variation_1000, 4, 1),
        'SCF': ('Channel A/B Selection Status for Surveillance Co-ordination Function', Variation_1005, 5, 1),
        'DLF': ('Channel A/B Selection Status for Data Link Function', Variation_1006, 6, 1),
        'OVLSCF': ('Overload in Surveillance Co-ordination Function', Variation_1007, 7, 1),
        'OVLDLF': ('Overload in Data Link Function', Variation_1008, 8, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ANT']) -> Type[Variation_997]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHAB']) -> Type[Variation_1004]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVLSUR']) -> Type[Variation_999]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_1000]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SCF']) -> Type[Variation_1005]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DLF']) -> Type[Variation_1006]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVLSCF']) -> Type[Variation_1007]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVLDLF']) -> Type[Variation_1008]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ANT'], Literal['CHAB'], Literal['OVLSUR'], Literal['MSC'], Literal['SCF'], Literal['DLF'], Literal['OVLSCF'], Literal['OVLDLF']]) -> Union[Type['Variation_997'], Type['Variation_1004'], Type['Variation_999'], Type['Variation_1000'], Type['Variation_1005'], Type['Variation_1006'], Type['Variation_1007'], Type['Variation_1008']]:
        if key == 'ANT':
            return Variation_997
        if key == 'CHAB':
            return Variation_1004
        if key == 'OVLSUR':
            return Variation_999
        if key == 'MSC':
            return Variation_1000
        if key == 'SCF':
            return Variation_1005
        if key == 'DLF':
            return Variation_1006
        if key == 'OVLSCF':
            return Variation_1007
        if key == 'OVLDLF':
            return Variation_1008
        assert_never(key)

    def __init__(self, arg : Variation_1009_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['ANT']) -> Variation_997:
        ...

    @overload
    def get_item(self, name : Literal['CHAB']) -> Variation_1004:
        ...

    @overload
    def get_item(self, name : Literal['OVLSUR']) -> Variation_999:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_1000:
        ...

    @overload
    def get_item(self, name : Literal['SCF']) -> Variation_1005:
        ...

    @overload
    def get_item(self, name : Literal['DLF']) -> Variation_1006:
        ...

    @overload
    def get_item(self, name : Literal['OVLSCF']) -> Variation_1007:
        ...

    @overload
    def get_item(self, name : Literal['OVLDLF']) -> Variation_1008:
        ...

    def get_item(self, name : Union[Literal['ANT'], Literal['CHAB'], Literal['OVLSUR'], Literal['MSC'], Literal['SCF'], Literal['DLF'], Literal['OVLSCF'], Literal['OVLDLF']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['ANT'], val : Union[Variation_997, Variation_997_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['CHAB'], val : Union[Variation_1004, Variation_1004_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['OVLSUR'], val : Union[Variation_999, Variation_999_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['MSC'], val : Union[Variation_1000, Variation_1000_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['SCF'], val : Union[Variation_1005, Variation_1005_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['DLF'], val : Union[Variation_1006, Variation_1006_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['OVLSCF'], val : Union[Variation_1007, Variation_1007_Arg]) -> 'Variation_1009':
        ...

    @overload
    def set_item(self, name : Literal['OVLDLF'], val : Union[Variation_1008, Variation_1008_Arg]) -> 'Variation_1009':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1010_Arg = TypedDict('Variation_1010_Arg', {
    'COM': Union[Variation_996, Variation_996_Arg],
    'PSR': Union[Variation_1001, Variation_1001_Arg],
    'SSR': Union[Variation_1003, Variation_1003_Arg],
    'MDS': Union[Variation_1009, Variation_1009_Arg],
}, total=False)
class Variation_1010(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('COM', Variation_996),
        None,
        None,
        ('PSR', Variation_1001),
        ('SSR', Variation_1003),
        ('MDS', Variation_1009),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'COM': (Variation_996, 0x80),
        'PSR': (Variation_1001, 0x10),
        'SSR': (Variation_1003, 0x08),
        'MDS': (Variation_1009, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_996]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_1001]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_1003]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_1009]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['PSR'], Literal['SSR'], Literal['MDS']]) -> Union[Type['Variation_996'], Type['Variation_1001'], Type['Variation_1003'], Type['Variation_1009']]:
        if key == 'COM':
            return Variation_996
        if key == 'PSR':
            return Variation_1001
        if key == 'SSR':
            return Variation_1003
        if key == 'MDS':
            return Variation_1009
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1010_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_996, Variation_996_Arg]) -> 'Variation_1010':
        ...

    @overload
    def set_item(self, name : Literal['PSR'], val : Union[Variation_1001, Variation_1001_Arg]) -> 'Variation_1010':
        ...

    @overload
    def set_item(self, name : Literal['SSR'], val : Union[Variation_1003, Variation_1003_Arg]) -> 'Variation_1010':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_1009, Variation_1009_Arg]) -> 'Variation_1010':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1010':
        ...

    @overload
    def del_item(self, name : Literal['PSR']) -> 'Variation_1010':
        ...

    @overload
    def del_item(self, name : Literal['SSR']) -> 'Variation_1010':
        ...

    @overload
    def del_item(self, name : Literal['MDS']) -> 'Variation_1010':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_996:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_1001:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_1003:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_1009:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1011_Arg : TypeAlias = Raw
class Variation_1011(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 3
    table = {
        0: 'No reduction active',
        1: 'Reduction step 1 active',
        2: 'Reduction step 2 active',
        3: 'Reduction step 3 active',
        4: 'Reduction step 4 active',
        5: 'Reduction step 5 active',
        6: 'Reduction step 6 active',
        7: 'Reduction step 7 active',
    }

    def __init__(self, arg : Variation_1011_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1012_Arg : TypeAlias = Raw
class Variation_1012(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 3
    table = {
        0: 'No reduction active',
        1: 'Reduction step 1 active',
        2: 'Reduction step 2 active',
        3: 'Reduction step 3 active',
        4: 'Reduction step 4 active',
        5: 'Reduction step 5 active',
        6: 'Reduction step 6 active',
        7: 'Reduction step 7 active',
    }

    def __init__(self, arg : Variation_1012_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1013_Arg_Group = TypedDict('Variation_1013_Arg_Group', {
    'REDRDP': Union[Variation_1011, Variation_1011_Arg],
    'REDXMT': Union[Variation_1012, Variation_1012_Arg],
})
Variation_1013_Arg : TypeAlias = Union[Raw, Variation_1013_Arg_Group]
class Variation_1013(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 1),
        ('REDRDP', Variation_1011),
        ('REDXMT', Variation_1012),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'REDRDP': ('Reduction Steps in Use for An Overload of the RDP', Variation_1011, 1, 3),
        'REDXMT': ('Reduction Steps in Use for An Overload of the Transmission Subsystem', Variation_1012, 4, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['REDRDP']) -> Type[Variation_1011]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REDXMT']) -> Type[Variation_1012]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['REDRDP'], Literal['REDXMT']]) -> Union[Type['Variation_1011'], Type['Variation_1012']]:
        if key == 'REDRDP':
            return Variation_1011
        if key == 'REDXMT':
            return Variation_1012
        assert_never(key)

    def __init__(self, arg : Variation_1013_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['REDRDP']) -> Variation_1011:
        ...

    @overload
    def get_item(self, name : Literal['REDXMT']) -> Variation_1012:
        ...

    def get_item(self, name : Union[Literal['REDRDP'], Literal['REDXMT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['REDRDP'], val : Union[Variation_1011, Variation_1011_Arg]) -> 'Variation_1013':
        ...

    @overload
    def set_item(self, name : Literal['REDXMT'], val : Union[Variation_1012, Variation_1012_Arg]) -> 'Variation_1013':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1014_Arg : TypeAlias = Raw
class Variation_1014(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Linear polarization',
        1: 'Circular polarization',
    }

    def __init__(self, arg : Variation_1014_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1015_Arg : TypeAlias = Raw
class Variation_1015(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'STC Map-1',
        1: 'STC Map-2',
        2: 'STC Map-3',
        3: 'STC Map-4',
    }

    def __init__(self, arg : Variation_1015_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1016_Arg_Group = TypedDict('Variation_1016_Arg_Group', {
    'POL': Union[Variation_1014, Variation_1014_Arg],
    'REDRAD': Union[Variation_1011, Variation_1011_Arg],
    'STC': Union[Variation_1015, Variation_1015_Arg],
})
Variation_1016_Arg : TypeAlias = Union[Raw, Variation_1016_Arg_Group]
class Variation_1016(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('POL', Variation_1014),
        ('REDRAD', Variation_1011),
        ('STC', Variation_1015),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'POL': ('Polarization in Use by PSR', Variation_1014, 0, 1),
        'REDRAD': ('Reduction Steps in Use as Result of An Overload Within the PSR Subsystem', Variation_1011, 1, 3),
        'STC': ('Sensitivity Time Control Map in Use', Variation_1015, 4, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['POL']) -> Type[Variation_1014]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['REDRAD']) -> Type[Variation_1011]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STC']) -> Type[Variation_1015]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['POL'], Literal['REDRAD'], Literal['STC']]) -> Union[Type['Variation_1014'], Type['Variation_1011'], Type['Variation_1015']]:
        if key == 'POL':
            return Variation_1014
        if key == 'REDRAD':
            return Variation_1011
        if key == 'STC':
            return Variation_1015
        assert_never(key)

    def __init__(self, arg : Variation_1016_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['POL']) -> Variation_1014:
        ...

    @overload
    def get_item(self, name : Literal['REDRAD']) -> Variation_1011:
        ...

    @overload
    def get_item(self, name : Literal['STC']) -> Variation_1015:
        ...

    def get_item(self, name : Union[Literal['POL'], Literal['REDRAD'], Literal['STC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['POL'], val : Union[Variation_1014, Variation_1014_Arg]) -> 'Variation_1016':
        ...

    @overload
    def set_item(self, name : Literal['REDRAD'], val : Union[Variation_1011, Variation_1011_Arg]) -> 'Variation_1016':
        ...

    @overload
    def set_item(self, name : Literal['STC'], val : Union[Variation_1015, Variation_1015_Arg]) -> 'Variation_1016':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1017_Arg : TypeAlias = Raw
class Variation_1017(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No reduction active',
        1: 'Reduction step 1 active',
        2: 'Reduction step 2 active',
        3: 'Reduction step 3 active',
        4: 'Reduction step 4 active',
        5: 'Reduction step 5 active',
        6: 'Reduction step 6 active',
        7: 'Reduction step 7 active',
    }

    def __init__(self, arg : Variation_1017_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1018_Arg_Group = TypedDict('Variation_1018_Arg_Group', {
    'REDRAD': Union[Variation_1017, Variation_1017_Arg],
})
Variation_1018_Arg : TypeAlias = Union[Raw, Variation_1018_Arg_Group]
class Variation_1018(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('REDRAD', Variation_1017),
        Spare(3, 5),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'REDRAD': ('Reduction Steps in Use as Result of An Overload Within the SSR Subsystem', Variation_1017, 0, 3),
    }

    @classmethod
    def spec(cls, key : Union[Literal['REDRAD']]) -> Union[Type['Variation_1017']]:
        if key == 'REDRAD':
            return Variation_1017
        assert_never(key)

    def __init__(self, arg : Variation_1018_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['REDRAD']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['REDRAD'], val : Union[Variation_1017, Variation_1017_Arg]) -> 'Variation_1018':
        return self._set_item(name, val) # type: ignore

Variation_1019_Arg : TypeAlias = Raw
class Variation_1019(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Autonomous',
        1: 'Not autonomous',
    }

    def __init__(self, arg : Variation_1019_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1020_Arg_Group = TypedDict('Variation_1020_Arg_Group', {
    'REDRAD': Union[Variation_1017, Variation_1017_Arg],
    'CLU': Union[Variation_1019, Variation_1019_Arg],
})
Variation_1020_Arg : TypeAlias = Union[Raw, Variation_1020_Arg_Group]
class Variation_1020(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('REDRAD', Variation_1017),
        ('CLU', Variation_1019),
        Spare(4, 4),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'REDRAD': ('Reduction Steps in Use as Result of An Overload Within the Mode S Subsystem', Variation_1017, 0, 3),
        'CLU': ('Cluster State', Variation_1019, 3, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['REDRAD']) -> Type[Variation_1017]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CLU']) -> Type[Variation_1019]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['REDRAD'], Literal['CLU']]) -> Union[Type['Variation_1017'], Type['Variation_1019']]:
        if key == 'REDRAD':
            return Variation_1017
        if key == 'CLU':
            return Variation_1019
        assert_never(key)

    def __init__(self, arg : Variation_1020_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['REDRAD']) -> Variation_1017:
        ...

    @overload
    def get_item(self, name : Literal['CLU']) -> Variation_1019:
        ...

    def get_item(self, name : Union[Literal['REDRAD'], Literal['CLU']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['REDRAD'], val : Union[Variation_1017, Variation_1017_Arg]) -> 'Variation_1020':
        ...

    @overload
    def set_item(self, name : Literal['CLU'], val : Union[Variation_1019, Variation_1019_Arg]) -> 'Variation_1020':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1021_Arg = TypedDict('Variation_1021_Arg', {
    'COM': Union[Variation_1013, Variation_1013_Arg],
    'PSR': Union[Variation_1016, Variation_1016_Arg],
    'SSR': Union[Variation_1018, Variation_1018_Arg],
    'MDS': Union[Variation_1020, Variation_1020_Arg],
}, total=False)
class Variation_1021(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('COM', Variation_1013),
        None,
        None,
        ('PSR', Variation_1016),
        ('SSR', Variation_1018),
        ('MDS', Variation_1020),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'COM': (Variation_1013, 0x80),
        'PSR': (Variation_1016, 0x10),
        'SSR': (Variation_1018, 0x08),
        'MDS': (Variation_1020, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_1013]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_1016]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_1018]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_1020]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['PSR'], Literal['SSR'], Literal['MDS']]) -> Union[Type['Variation_1013'], Type['Variation_1016'], Type['Variation_1018'], Type['Variation_1020']]:
        if key == 'COM':
            return Variation_1013
        if key == 'PSR':
            return Variation_1016
        if key == 'SSR':
            return Variation_1018
        if key == 'MDS':
            return Variation_1020
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1021_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_1013, Variation_1013_Arg]) -> 'Variation_1021':
        ...

    @overload
    def set_item(self, name : Literal['PSR'], val : Union[Variation_1016, Variation_1016_Arg]) -> 'Variation_1021':
        ...

    @overload
    def set_item(self, name : Literal['SSR'], val : Union[Variation_1018, Variation_1018_Arg]) -> 'Variation_1021':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_1020, Variation_1020_Arg]) -> 'Variation_1021':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1021':
        ...

    @overload
    def del_item(self, name : Literal['PSR']) -> 'Variation_1021':
        ...

    @overload
    def del_item(self, name : Literal['SSR']) -> 'Variation_1021':
        ...

    @overload
    def del_item(self, name : Literal['MDS']) -> 'Variation_1021':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_1013:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_1016:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_1018:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_1020:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1022_Arg : TypeAlias = Raw
class Variation_1022(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5
    table = {
        0: 'No detection (number of misses)',
        1: 'Single PSR target reports',
        2: 'Single SSR target reports (Non-Mode S)',
        3: 'SSR+PSR target reports (Non-Mode S)',
        4: 'Single All-Call target reports (Mode S)',
        5: 'Single Roll-Call target reports (Mode S)',
        6: 'All-Call + PSR (Mode S) target reports',
        7: 'Roll-Call + PSR (Mode S) target reports',
        8: 'Filter for Weather data',
        9: 'Filter for Jamming Strobe',
        10: 'Filter for PSR data',
        11: 'Filter for SSR/Mode S data',
        12: 'Filter for SSR/Mode S+PSR data',
        13: 'Filter for Enhanced Surveillance data',
        14: 'Filter for PSR+Enhanced Surveillance',
        15: 'Filter for PSR+Enhanced Surveillance + SSR/Mode S data not in Area of Prime Interest',
        16: 'Filter for PSR+Enhanced Surveillance + all SSR/Mode S data',
    }

    def __init__(self, arg : Variation_1022_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1023_Arg_Group = TypedDict('Variation_1023_Arg_Group', {
    'TYP': Union[Variation_1022, Variation_1022_Arg],
    'COUNT': Union[Variation_778, Variation_778_Arg],
})
Variation_1023_Arg : TypeAlias = Union[Raw, Variation_1023_Arg_Group]
class Variation_1023(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('TYP', Variation_1022),
        ('COUNT', Variation_778),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('Type of Message Counter', Variation_1022, 0, 5),
        'COUNT': ('COUNTER', Variation_778, 5, 11),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1022]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COUNT']) -> Type[Variation_778]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['COUNT']]) -> Union[Type['Variation_1022'], Type['Variation_778']]:
        if key == 'TYP':
            return Variation_1022
        if key == 'COUNT':
            return Variation_778
        assert_never(key)

    def __init__(self, arg : Variation_1023_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1022:
        ...

    @overload
    def get_item(self, name : Literal['COUNT']) -> Variation_778:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['COUNT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1022, Variation_1022_Arg]) -> 'Variation_1023':
        ...

    @overload
    def set_item(self, name : Literal['COUNT'], val : Union[Variation_778, Variation_778_Arg]) -> 'Variation_1023':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1024_Arg : TypeAlias = List[Union[Variation_1023, Variation_1023_Arg]]
class Variation_1024(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_1023

    @classmethod
    def spec(cls) -> Type[Variation_1023]:
        return Variation_1023

    def __init__(self, arg : List[Union[Variation_1023, Variation_1023_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1025_Arg_Group = TypedDict('Variation_1025_Arg_Group', {
    'RHOST': Union[Variation_581, Variation_581_Arg],
    'RHOEND': Union[Variation_581, Variation_581_Arg],
    'THETAST': Union[Variation_14, Variation_14_Arg],
    'THETAEND': Union[Variation_14, Variation_14_Arg],
})
Variation_1025_Arg : TypeAlias = Union[Raw, Variation_1025_Arg_Group]
class Variation_1025(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('RHOST', Variation_581),
        ('RHOEND', Variation_581),
        ('THETAST', Variation_14),
        ('THETAEND', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RHOST': ('Rho Start', Variation_581, 0, 16),
        'RHOEND': ('Rho End', Variation_581, 16, 16),
        'THETAST': ('Theta Start', Variation_14, 32, 16),
        'THETAEND': ('Theta End', Variation_14, 48, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RHOST']) -> Type[Variation_581]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RHOEND']) -> Type[Variation_581]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['THETAST']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['THETAEND']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RHOST'], Literal['RHOEND'], Literal['THETAST'], Literal['THETAEND']]) -> Union[Type['Variation_581'], Type['Variation_581'], Type['Variation_14'], Type['Variation_14']]:
        if key == 'RHOST':
            return Variation_581
        if key == 'RHOEND':
            return Variation_581
        if key == 'THETAST':
            return Variation_14
        if key == 'THETAEND':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_1025_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RHOST']) -> Variation_581:
        ...

    @overload
    def get_item(self, name : Literal['RHOEND']) -> Variation_581:
        ...

    @overload
    def get_item(self, name : Literal['THETAST']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['THETAEND']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RHOST'], Literal['RHOEND'], Literal['THETAST'], Literal['THETAEND']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RHOST'], val : Union[Variation_581, Variation_581_Arg]) -> 'Variation_1025':
        ...

    @overload
    def set_item(self, name : Literal['RHOEND'], val : Union[Variation_581, Variation_581_Arg]) -> 'Variation_1025':
        ...

    @overload
    def set_item(self, name : Literal['THETAST'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1025':
        ...

    @overload
    def set_item(self, name : Literal['THETAEND'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1025':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1026_Arg : TypeAlias = Raw
class Variation_1026(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        0: 'Invalid value',
        1: 'Filter for Weather data',
        2: 'Filter for Jamming Strobe',
        3: 'Filter for PSR data',
        4: 'Filter for SSR/Mode S data',
        5: 'Filter for SSR/Mode S + PSR data',
        6: 'Enhanced Surveillance data',
        7: 'Filter for PSR+Enhanced Surveillance data',
        8: 'Filter for PSR+Enhanced Surveillance + SSR/Mode S data not in Area of Prime Interest',
        9: 'Filter for PSR+Enhanced Surveillance + all SSR/Mode S data',
    }

    def __init__(self, arg : Variation_1026_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1027_Arg_Group = TypedDict('Variation_1027_Arg_Group', {
    'HGT': Union[Variation_258, Variation_258_Arg],
    'LAT': Union[Variation_691, Variation_691_Arg],
    'LON': Union[Variation_691, Variation_691_Arg],
})
Variation_1027_Arg : TypeAlias = Union[Raw, Variation_1027_Arg_Group]
class Variation_1027(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('HGT', Variation_258),
        ('LAT', Variation_691),
        ('LON', Variation_691),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'HGT': ('Height of Data Source', Variation_258, 0, 16),
        'LAT': ('Latitude', Variation_691, 16, 24),
        'LON': ('Longitude', Variation_691, 40, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['HGT']) -> Type[Variation_258]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_691]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['HGT'], Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_258'], Type['Variation_691'], Type['Variation_691']]:
        if key == 'HGT':
            return Variation_258
        if key == 'LAT':
            return Variation_691
        if key == 'LON':
            return Variation_691
        assert_never(key)

    def __init__(self, arg : Variation_1027_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['HGT']) -> Variation_258:
        ...

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_691:
        ...

    def get_item(self, name : Union[Literal['HGT'], Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['HGT'], val : Union[Variation_258, Variation_258_Arg]) -> 'Variation_1027':
        ...

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1027':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1027':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1028_Arg_Group = TypedDict('Variation_1028_Arg_Group', {
    'RNG': Union[Variation_90, Variation_90_Arg],
    'AZM': Union[Variation_91, Variation_91_Arg],
})
Variation_1028_Arg : TypeAlias = Union[Raw, Variation_1028_Arg_Group]
class Variation_1028(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('RNG', Variation_90),
        ('AZM', Variation_91),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RNG': ('Range Error', Variation_90, 0, 8),
        'AZM': ('Azimuth Error', Variation_91, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RNG']) -> Type[Variation_90]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AZM']) -> Type[Variation_91]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RNG'], Literal['AZM']]) -> Union[Type['Variation_90'], Type['Variation_91']]:
        if key == 'RNG':
            return Variation_90
        if key == 'AZM':
            return Variation_91
        assert_never(key)

    def __init__(self, arg : Variation_1028_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RNG']) -> Variation_90:
        ...

    @overload
    def get_item(self, name : Literal['AZM']) -> Variation_91:
        ...

    def get_item(self, name : Union[Literal['RNG'], Literal['AZM']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RNG'], val : Union[Variation_90, Variation_90_Arg]) -> 'Variation_1028':
        ...

    @overload
    def set_item(self, name : Literal['AZM'], val : Union[Variation_91, Variation_91_Arg]) -> 'Variation_1028':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1029_Arg = TypedDict('Variation_1029_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_988, Variation_988_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_80, Variation_80_Arg],
    '041': Union[Variation_25, Variation_25_Arg],
    '050': Union[Variation_1010, Variation_1010_Arg],
    '060': Union[Variation_1021, Variation_1021_Arg],
    '070': Union[Variation_1024, Variation_1024_Arg],
    '100': Union[Variation_1025, Variation_1025_Arg],
    '110': Union[Variation_1026, Variation_1026_Arg],
    '120': Union[Variation_1027, Variation_1027_Arg],
    '090': Union[Variation_1028, Variation_1028_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1029(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_988),
        ('030', Variation_81),
        ('020', Variation_80),
        ('041', Variation_25),
        ('050', Variation_1010),
        ('060', Variation_1021),
        ('070', Variation_1024),
        ('100', Variation_1025),
        ('110', Variation_1026),
        ('120', Variation_1027),
        ('090', Variation_1028),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_988, 0x4000),
        '030': (Variation_81, 0x2000),
        '020': (Variation_80, 0x1000),
        '041': (Variation_25, 0x0800),
        '050': (Variation_1010, 0x0400),
        '060': (Variation_1021, 0x0200),
        '070': (Variation_1024, 0x0180),
        '100': (Variation_1025, 0x0140),
        '110': (Variation_1026, 0x0120),
        '120': (Variation_1027, 0x0110),
        '090': (Variation_1028, 0x0108),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_988]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_80]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_1010]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1021]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1024]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1025]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1026]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1027]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1028]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['030'], Literal['020'], Literal['041'], Literal['050'], Literal['060'], Literal['070'], Literal['100'], Literal['110'], Literal['120'], Literal['090'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_988'], Type['Variation_81'], Type['Variation_80'], Type['Variation_25'], Type['Variation_1010'], Type['Variation_1021'], Type['Variation_1024'], Type['Variation_1025'], Type['Variation_1026'], Type['Variation_1027'], Type['Variation_1028'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_988
        if key == '030':
            return Variation_81
        if key == '020':
            return Variation_80
        if key == '041':
            return Variation_25
        if key == '050':
            return Variation_1010
        if key == '060':
            return Variation_1021
        if key == '070':
            return Variation_1024
        if key == '100':
            return Variation_1025
        if key == '110':
            return Variation_1026
        if key == '120':
            return Variation_1027
        if key == '090':
            return Variation_1028
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1029_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_988, Variation_988_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_80, Variation_80_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_1010, Variation_1010_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1021, Variation_1021_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1024, Variation_1024_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1025, Variation_1025_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1026, Variation_1026_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1027, Variation_1027_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1028, Variation_1028_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1029':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1029':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1029':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1029':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_988:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_80:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_1010:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1021:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1024:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1025:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1026:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1027:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1028:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1030_Arg : TypeAlias = Raw
class Variation_1030(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'North marker message',
        2: 'Sector crossing message',
        3: 'Geographical filtering message',
        4: 'Jamming strobe message',
        5: 'Solar Storm Message',
    }

    def __init__(self, arg : Variation_1030_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1031_Arg : TypeAlias = Raw
class Variation_1031(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 5
    table = {
        0: 'No detection (number of misses)',
        1: 'Single PSR target reports',
        2: 'Single SSR target reports (Non-Mode S)',
        3: 'SSR+PSR target reports (Non-Mode S)',
        4: 'Single All-Call target reports (Mode S)',
        5: 'Single Roll-Call target reports (Mode S)',
        6: 'All-Call + PSR (Mode S) target reports',
        7: 'Roll-Call + PSR (Mode S) target reports',
        8: 'Filter for Weather data',
        9: 'Filter for Jamming Strobe',
        10: 'Filter for PSR data',
        11: 'Filter for SSR/Mode S data',
        12: 'Filter for SSR/Mode S+PSR data',
        13: 'Filter for Enhanced Surveillance data',
        14: 'Filter for PSR+Enhanced Surveillance',
        15: 'Filter for PSR+Enhanced Surveillance + SSR/Mode S data not in Area of Prime Interest',
        16: 'Filter for PSR+Enhanced Surveillance + all SSR/Mode S data',
        17: 'Re-Interrogations (per sector)',
        18: 'BDS Swap and wrong DF replies(per sector)',
        19: 'Mode A/C FRUIT (per sector)',
        20: 'Mode S FRUIT (per sector)',
    }

    def __init__(self, arg : Variation_1031_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1032_Arg_Group = TypedDict('Variation_1032_Arg_Group', {
    'TYP': Union[Variation_1031, Variation_1031_Arg],
    'COUNT': Union[Variation_778, Variation_778_Arg],
})
Variation_1032_Arg : TypeAlias = Union[Raw, Variation_1032_Arg_Group]
class Variation_1032(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('TYP', Variation_1031),
        ('COUNT', Variation_778),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('Type of Message Counter', Variation_1031, 0, 5),
        'COUNT': ('COUNTER', Variation_778, 5, 11),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1031]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COUNT']) -> Type[Variation_778]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['COUNT']]) -> Union[Type['Variation_1031'], Type['Variation_778']]:
        if key == 'TYP':
            return Variation_1031
        if key == 'COUNT':
            return Variation_778
        assert_never(key)

    def __init__(self, arg : Variation_1032_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1031:
        ...

    @overload
    def get_item(self, name : Literal['COUNT']) -> Variation_778:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['COUNT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1031, Variation_1031_Arg]) -> 'Variation_1032':
        ...

    @overload
    def set_item(self, name : Literal['COUNT'], val : Union[Variation_778, Variation_778_Arg]) -> 'Variation_1032':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1033_Arg : TypeAlias = List[Union[Variation_1032, Variation_1032_Arg]]
class Variation_1033(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 16
    variation_type = Variation_1032

    @classmethod
    def spec(cls) -> Type[Variation_1032]:
        return Variation_1032

    def __init__(self, arg : List[Union[Variation_1032, Variation_1032_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1034_Arg = TypedDict('Variation_1034_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_1030, Variation_1030_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_80, Variation_80_Arg],
    '041': Union[Variation_25, Variation_25_Arg],
    '050': Union[Variation_1010, Variation_1010_Arg],
    '060': Union[Variation_1021, Variation_1021_Arg],
    '070': Union[Variation_1033, Variation_1033_Arg],
    '100': Union[Variation_1025, Variation_1025_Arg],
    '110': Union[Variation_1026, Variation_1026_Arg],
    '120': Union[Variation_1027, Variation_1027_Arg],
    '090': Union[Variation_1028, Variation_1028_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1034(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_1030),
        ('030', Variation_81),
        ('020', Variation_80),
        ('041', Variation_25),
        ('050', Variation_1010),
        ('060', Variation_1021),
        ('070', Variation_1033),
        ('100', Variation_1025),
        ('110', Variation_1026),
        ('120', Variation_1027),
        ('090', Variation_1028),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_1030, 0x4000),
        '030': (Variation_81, 0x2000),
        '020': (Variation_80, 0x1000),
        '041': (Variation_25, 0x0800),
        '050': (Variation_1010, 0x0400),
        '060': (Variation_1021, 0x0200),
        '070': (Variation_1033, 0x0180),
        '100': (Variation_1025, 0x0140),
        '110': (Variation_1026, 0x0120),
        '120': (Variation_1027, 0x0110),
        '090': (Variation_1028, 0x0108),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_1030]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_80]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_1010]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1021]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1033]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1025]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1026]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1027]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1028]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['030'], Literal['020'], Literal['041'], Literal['050'], Literal['060'], Literal['070'], Literal['100'], Literal['110'], Literal['120'], Literal['090'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_1030'], Type['Variation_81'], Type['Variation_80'], Type['Variation_25'], Type['Variation_1010'], Type['Variation_1021'], Type['Variation_1033'], Type['Variation_1025'], Type['Variation_1026'], Type['Variation_1027'], Type['Variation_1028'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_1030
        if key == '030':
            return Variation_81
        if key == '020':
            return Variation_80
        if key == '041':
            return Variation_25
        if key == '050':
            return Variation_1010
        if key == '060':
            return Variation_1021
        if key == '070':
            return Variation_1033
        if key == '100':
            return Variation_1025
        if key == '110':
            return Variation_1026
        if key == '120':
            return Variation_1027
        if key == '090':
            return Variation_1028
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1034_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_1030, Variation_1030_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_80, Variation_80_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_1010, Variation_1010_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1021, Variation_1021_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1033, Variation_1033_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1025, Variation_1025_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1026, Variation_1026_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1027, Variation_1027_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1028, Variation_1028_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1034':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1034':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1034':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1034':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_1030:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_80:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_1010:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1021:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1033:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1025:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1026:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1027:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1028:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1035_Arg : TypeAlias = Raw
class Variation_1035(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'North marker message',
        2: 'Sector crossing message',
        3: 'Geographical filtering message',
        4: 'Jamming strobe message',
        5: 'Solar Storm Message',
        6: 'SSR Jamming Strobe Message',
        7: 'Mode S Jamming Strobe Message',
    }

    def __init__(self, arg : Variation_1035_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1036_Arg = TypedDict('Variation_1036_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_1035, Variation_1035_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_80, Variation_80_Arg],
    '041': Union[Variation_25, Variation_25_Arg],
    '050': Union[Variation_1010, Variation_1010_Arg],
    '060': Union[Variation_1021, Variation_1021_Arg],
    '070': Union[Variation_1033, Variation_1033_Arg],
    '100': Union[Variation_1025, Variation_1025_Arg],
    '110': Union[Variation_1026, Variation_1026_Arg],
    '120': Union[Variation_1027, Variation_1027_Arg],
    '090': Union[Variation_1028, Variation_1028_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1036(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_1035),
        ('030', Variation_81),
        ('020', Variation_80),
        ('041', Variation_25),
        ('050', Variation_1010),
        ('060', Variation_1021),
        ('070', Variation_1033),
        ('100', Variation_1025),
        ('110', Variation_1026),
        ('120', Variation_1027),
        ('090', Variation_1028),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_1035, 0x4000),
        '030': (Variation_81, 0x2000),
        '020': (Variation_80, 0x1000),
        '041': (Variation_25, 0x0800),
        '050': (Variation_1010, 0x0400),
        '060': (Variation_1021, 0x0200),
        '070': (Variation_1033, 0x0180),
        '100': (Variation_1025, 0x0140),
        '110': (Variation_1026, 0x0120),
        '120': (Variation_1027, 0x0110),
        '090': (Variation_1028, 0x0108),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_1035]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_80]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_25]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_1010]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1021]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1033]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1025]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1026]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1027]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1028]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['030'], Literal['020'], Literal['041'], Literal['050'], Literal['060'], Literal['070'], Literal['100'], Literal['110'], Literal['120'], Literal['090'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_1035'], Type['Variation_81'], Type['Variation_80'], Type['Variation_25'], Type['Variation_1010'], Type['Variation_1021'], Type['Variation_1033'], Type['Variation_1025'], Type['Variation_1026'], Type['Variation_1027'], Type['Variation_1028'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_1035
        if key == '030':
            return Variation_81
        if key == '020':
            return Variation_80
        if key == '041':
            return Variation_25
        if key == '050':
            return Variation_1010
        if key == '060':
            return Variation_1021
        if key == '070':
            return Variation_1033
        if key == '100':
            return Variation_1025
        if key == '110':
            return Variation_1026
        if key == '120':
            return Variation_1027
        if key == '090':
            return Variation_1028
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1036_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_1035, Variation_1035_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_80, Variation_80_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_25, Variation_25_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_1010, Variation_1010_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1021, Variation_1021_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1033, Variation_1033_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1025, Variation_1025_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1026, Variation_1026_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1027, Variation_1027_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1028, Variation_1028_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1036':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1036':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1036':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1036':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_1035:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_80:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_25:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_1010:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1021:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1033:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1025:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1026:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1027:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1028:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1037_Arg : TypeAlias = Raw
class Variation_1037(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No detection',
        1: 'Single PSR detection',
        2: 'Single SSR detection',
        3: 'SSR + PSR detection',
        4: 'Single ModeS All-Call',
        5: 'Single ModeS Roll-Call',
        6: 'ModeS All-Call + PSR',
        7: 'ModeS Roll-Call +PSR',
    }

    def __init__(self, arg : Variation_1037_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1038_Arg : TypeAlias = Raw
class Variation_1038(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Actual target report',
        1: 'Simulated target report',
    }

    def __init__(self, arg : Variation_1038_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1039_Arg : TypeAlias = Raw
class Variation_1039(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Report from RDP Chain 1',
        1: 'Report from RDP Chain 2',
    }

    def __init__(self, arg : Variation_1039_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1040_Arg : TypeAlias = Raw
class Variation_1040(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Absence of SPI',
        1: 'Special Position Identification',
    }

    def __init__(self, arg : Variation_1040_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1041_Arg : TypeAlias = Raw
class Variation_1041(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Report from aircraft transponder',
        1: 'Report from field monitor (fixed transponder)',
    }

    def __init__(self, arg : Variation_1041_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1042_Arg : TypeAlias = Raw
class Variation_1042(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Real target report',
        1: 'Test target report',
    }

    def __init__(self, arg : Variation_1042_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1043_Arg : TypeAlias = Raw
class Variation_1043(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'No Extended Range',
        1: 'Extended Range present',
    }

    def __init__(self, arg : Variation_1043_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1044_Arg : TypeAlias = Raw
class Variation_1044(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No X-Pulse present',
        1: 'X-Pulse present',
    }

    def __init__(self, arg : Variation_1044_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1045_Arg : TypeAlias = Raw
class Variation_1045(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'No military emergency',
        1: 'Military emergency',
    }

    def __init__(self, arg : Variation_1045_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1046_Arg : TypeAlias = Raw
class Variation_1046(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'No military identification',
        1: 'Military identification',
    }

    def __init__(self, arg : Variation_1046_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1047_Arg : TypeAlias = Raw
class Variation_1047(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'No Mode 4 interrogation',
        1: 'Friendly target',
        2: 'Unknown target',
        3: 'No reply',
    }

    def __init__(self, arg : Variation_1047_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1048_Arg_Group_1 = TypedDict('Variation_1048_Arg_Group_1', {
    'TYP': Union[Variation_1037, Variation_1037_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RDP': Union[Variation_1039, Variation_1039_Arg],
    'SPI': Union[Variation_1040, Variation_1040_Arg],
    'RAB': Union[Variation_1041, Variation_1041_Arg],
})
Variation_1048_Arg_Group_2 = TypedDict('Variation_1048_Arg_Group_2', {
    'TYP': Union[Variation_1037, Variation_1037_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RDP': Union[Variation_1039, Variation_1039_Arg],
    'SPI': Union[Variation_1040, Variation_1040_Arg],
    'RAB': Union[Variation_1041, Variation_1041_Arg],
    'TST': Union[Variation_1042, Variation_1042_Arg],
    'ERR': Union[Variation_1043, Variation_1043_Arg],
    'XPP': Union[Variation_1044, Variation_1044_Arg],
    'ME': Union[Variation_1045, Variation_1045_Arg],
    'MI': Union[Variation_1046, Variation_1046_Arg],
    'FOEFRI': Union[Variation_1047, Variation_1047_Arg],
})
Variation_1048_Arg : TypeAlias = Union[
    int,
    Variation_1048_Arg_Group_1,
    Tuple[int],
    Variation_1048_Arg_Group_2,
    Tuple[int,int],
]
class Variation_1048(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('TYP', Variation_1037),
            ('SIM', Variation_1038),
            ('RDP', Variation_1039),
            ('SPI', Variation_1040),
            ('RAB', Variation_1041),
        ],
        [
            ('TST', Variation_1042),
            ('ERR', Variation_1043),
            ('XPP', Variation_1044),
            ('ME', Variation_1045),
            ('MI', Variation_1046),
            ('FOEFRI', Variation_1047),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_1037, 0, 3),
        'SIM': ('', Variation_1038, 3, 1),
        'RDP': ('', Variation_1039, 4, 1),
        'SPI': ('', Variation_1040, 5, 1),
        'RAB': ('', Variation_1041, 6, 1),
        'TST': ('', Variation_1042, 0, 1),
        'ERR': ('', Variation_1043, 1, 1),
        'XPP': ('', Variation_1044, 2, 1),
        'ME': ('', Variation_1045, 3, 1),
        'MI': ('', Variation_1046, 4, 1),
        'FOEFRI': ('', Variation_1047, 5, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1037]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_1038]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDP']) -> Type[Variation_1039]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_1040]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_1041]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_1042]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ERR']) -> Type[Variation_1043]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XPP']) -> Type[Variation_1044]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_1045]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_1046]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FOEFRI']) -> Type[Variation_1047]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['SIM'], Literal['RDP'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['ERR'], Literal['XPP'], Literal['ME'], Literal['MI'], Literal['FOEFRI']]) -> Union[Type['Variation_1037'], Type['Variation_1038'], Type['Variation_1039'], Type['Variation_1040'], Type['Variation_1041'], Type['Variation_1042'], Type['Variation_1043'], Type['Variation_1044'], Type['Variation_1045'], Type['Variation_1046'], Type['Variation_1047']]:
        if key == 'TYP':
            return Variation_1037
        if key == 'SIM':
            return Variation_1038
        if key == 'RDP':
            return Variation_1039
        if key == 'SPI':
            return Variation_1040
        if key == 'RAB':
            return Variation_1041
        if key == 'TST':
            return Variation_1042
        if key == 'ERR':
            return Variation_1043
        if key == 'XPP':
            return Variation_1044
        if key == 'ME':
            return Variation_1045
        if key == 'MI':
            return Variation_1046
        if key == 'FOEFRI':
            return Variation_1047
        assert_never(key)

    def __init__(self, arg : Variation_1048_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1048_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1048_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1037:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_1038:
        ...

    @overload
    def get_item(self, name : Literal['RDP']) -> Variation_1039:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_1040:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_1041:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_1042:
        ...

    @overload
    def get_item(self, name : Literal['ERR']) -> Variation_1043:
        ...

    @overload
    def get_item(self, name : Literal['XPP']) -> Variation_1044:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_1045:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_1046:
        ...

    @overload
    def get_item(self, name : Literal['FOEFRI']) -> Variation_1047:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['SIM'], Literal['RDP'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['ERR'], Literal['XPP'], Literal['ME'], Literal['MI'], Literal['FOEFRI']]) -> Any:
        return self._get_item(name)

Variation_1049_Arg_Group = TypedDict('Variation_1049_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_277, Variation_277_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_1049_Arg : TypeAlias = Union[Raw, Variation_1049_Arg_Group]
class Variation_1049(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_277),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_277, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_277]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_277'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_277
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1049_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_277:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1049':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1049':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_277, Variation_277_Arg]) -> 'Variation_1049':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1049':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1050_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_1050(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 14
    quantity = Quantity('Unsigned', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_1050_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1051_Arg_Group = TypedDict('Variation_1051_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'FL': Union[Variation_1050, Variation_1050_Arg],
})
Variation_1051_Arg : TypeAlias = Union[Raw, Variation_1051_Arg_Group]
class Variation_1051(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('FL', Variation_1050),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'FL': ('', Variation_1050, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FL']) -> Type[Variation_1050]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_1050']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'FL':
            return Variation_1050
        assert_never(key)

    def __init__(self, arg : Variation_1051_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['FL']) -> Variation_1050:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['FL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1051':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1051':
        ...

    @overload
    def set_item(self, name : Literal['FL'], val : Union[Variation_1050, Variation_1050_Arg]) -> 'Variation_1051':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1052_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_1052(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 360.0, 13, '°')

    def __init__(self, arg : Variation_1052_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1053_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_1053(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 8, 'NM')

    def __init__(self, arg : Variation_1053_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1054_Arg = TypedDict('Variation_1054_Arg', {
    'SRL': Union[Variation_1052, Variation_1052_Arg],
    'SRR': Union[Variation_0, Variation_0_Arg],
    'SAM': Union[Variation_29, Variation_29_Arg],
    'PRL': Union[Variation_1052, Variation_1052_Arg],
    'PAM': Union[Variation_29, Variation_29_Arg],
    'RPD': Union[Variation_1053, Variation_1053_Arg],
    'APD': Union[Variation_91, Variation_91_Arg],
}, total=False)
class Variation_1054(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('SRL', Variation_1052),
        ('SRR', Variation_0),
        ('SAM', Variation_29),
        ('PRL', Variation_1052),
        ('PAM', Variation_29),
        ('RPD', Variation_1053),
        ('APD', Variation_91),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'SRL': (Variation_1052, 0x80),
        'SRR': (Variation_0, 0x40),
        'SAM': (Variation_29, 0x20),
        'PRL': (Variation_1052, 0x10),
        'PAM': (Variation_29, 0x08),
        'RPD': (Variation_1053, 0x04),
        'APD': (Variation_91, 0x02),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SRL']) -> Type[Variation_1052]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRR']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAM']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PRL']) -> Type[Variation_1052]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PAM']) -> Type[Variation_29]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RPD']) -> Type[Variation_1053]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['APD']) -> Type[Variation_91]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SRL'], Literal['SRR'], Literal['SAM'], Literal['PRL'], Literal['PAM'], Literal['RPD'], Literal['APD']]) -> Union[Type['Variation_1052'], Type['Variation_0'], Type['Variation_29'], Type['Variation_1052'], Type['Variation_29'], Type['Variation_1053'], Type['Variation_91']]:
        if key == 'SRL':
            return Variation_1052
        if key == 'SRR':
            return Variation_0
        if key == 'SAM':
            return Variation_29
        if key == 'PRL':
            return Variation_1052
        if key == 'PAM':
            return Variation_29
        if key == 'RPD':
            return Variation_1053
        if key == 'APD':
            return Variation_91
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1054_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['SRL'], val : Union[Variation_1052, Variation_1052_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['SRR'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['SAM'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['PRL'], val : Union[Variation_1052, Variation_1052_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['PAM'], val : Union[Variation_29, Variation_29_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['RPD'], val : Union[Variation_1053, Variation_1053_Arg]) -> 'Variation_1054':
        ...

    @overload
    def set_item(self, name : Literal['APD'], val : Union[Variation_91, Variation_91_Arg]) -> 'Variation_1054':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['SRL']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['SRR']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['SAM']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['PRL']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['PAM']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['RPD']) -> 'Variation_1054':
        ...

    @overload
    def del_item(self, name : Literal['APD']) -> 'Variation_1054':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['SRL']) -> Variation_1052:
        ...

    @overload
    def get_item(self, name : Literal['SRR']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SAM']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['PRL']) -> Variation_1052:
        ...

    @overload
    def get_item(self, name : Literal['PAM']) -> Variation_29:
        ...

    @overload
    def get_item(self, name : Literal['RPD']) -> Variation_1053:
        ...

    @overload
    def get_item(self, name : Literal['APD']) -> Variation_91:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1055_Arg_Group = TypedDict('Variation_1055_Arg_Group', {
    'MBDATA': Union[Variation_282, Variation_282_Arg],
    'BDS1': Union[Variation_192, Variation_192_Arg],
    'BDS2': Union[Variation_283, Variation_283_Arg],
})
Variation_1055_Arg : TypeAlias = Union[Raw, Variation_1055_Arg_Group]
class Variation_1055(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('MBDATA', Variation_282),
        ('BDS1', Variation_192),
        ('BDS2', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MBDATA': ('Mode S Comm B Message Data', Variation_282, 0, 56),
        'BDS1': ('Comm B Data Buffer Store 1 Address', Variation_192, 56, 4),
        'BDS2': ('Comm B Data Buffer Store 2 Address', Variation_283, 60, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MBDATA']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS1']) -> Type[Variation_192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BDS2']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Union[Type['Variation_282'], Type['Variation_192'], Type['Variation_283']]:
        if key == 'MBDATA':
            return Variation_282
        if key == 'BDS1':
            return Variation_192
        if key == 'BDS2':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_1055_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MBDATA']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BDS1']) -> Variation_192:
        ...

    @overload
    def get_item(self, name : Literal['BDS2']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['MBDATA'], Literal['BDS1'], Literal['BDS2']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MBDATA'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1055':
        ...

    @overload
    def set_item(self, name : Literal['BDS1'], val : Union[Variation_192, Variation_192_Arg]) -> 'Variation_1055':
        ...

    @overload
    def set_item(self, name : Literal['BDS2'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_1055':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1056_Arg : TypeAlias = List[Union[Variation_1055, Variation_1055_Arg]]
class Variation_1056(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 64
    variation_type = Variation_1055

    @classmethod
    def spec(cls) -> Type[Variation_1055]:
        return Variation_1055

    def __init__(self, arg : List[Union[Variation_1055, Variation_1055_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1057_Arg_Group = TypedDict('Variation_1057_Arg_Group', {
    'X': Union[Variation_583, Variation_583_Arg],
    'Y': Union[Variation_583, Variation_583_Arg],
})
Variation_1057_Arg : TypeAlias = Union[Raw, Variation_1057_Arg_Group]
class Variation_1057(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_583),
        ('Y', Variation_583),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X-Component', Variation_583, 0, 16),
        'Y': ('X-Component', Variation_583, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_583]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_583]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_583'], Type['Variation_583']]:
        if key == 'X':
            return Variation_583
        if key == 'Y':
            return Variation_583
        assert_never(key)

    def __init__(self, arg : Variation_1057_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_583:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_583:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_1057':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_1057':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1058_Arg : TypeAlias = Raw
class Variation_1058(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Confirmed Track',
        1: 'Tentative Track',
    }

    def __init__(self, arg : Variation_1058_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1059_Arg : TypeAlias = Raw
class Variation_1059(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Combined Track',
        1: 'PSR Track',
        2: 'SSR/Mode S Track',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_1059_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1060_Arg : TypeAlias = Raw
class Variation_1060(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Normal confidence',
        1: 'Low confidence in plot to track association',
    }

    def __init__(self, arg : Variation_1060_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1061_Arg : TypeAlias = Raw
class Variation_1061(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'No horizontal man.sensed',
        1: 'Horizontal man. sensed',
    }

    def __init__(self, arg : Variation_1061_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1062_Arg : TypeAlias = Raw
class Variation_1062(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'Maintaining',
        1: 'Climbing',
        2: 'Descending',
        3: 'Unknown',
    }

    def __init__(self, arg : Variation_1062_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1063_Arg : TypeAlias = Raw
class Variation_1063(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Track still alive',
        1: 'End of track lifetime(last report for this track)',
    }

    def __init__(self, arg : Variation_1063_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1064_Arg : TypeAlias = Raw
class Variation_1064(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'True target track',
        1: 'Ghost target track',
    }

    def __init__(self, arg : Variation_1064_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1065_Arg : TypeAlias = Raw
class Variation_1065(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Tracking performed in so-called \'Radar Plane\', i.e. neither slant range correction nor stereographical projection was applied',
        1: 'Slant range correction and a suitable projection technique are used to track in a 2D.reference plane, tangential to the earth model at the Radar Site co-ordinates',
    }

    def __init__(self, arg : Variation_1065_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1066_Arg_Group_1 = TypedDict('Variation_1066_Arg_Group_1', {
    'CNF': Union[Variation_1058, Variation_1058_Arg],
    'RAD': Union[Variation_1059, Variation_1059_Arg],
    'DOU': Union[Variation_1060, Variation_1060_Arg],
    'MAH': Union[Variation_1061, Variation_1061_Arg],
    'CDM': Union[Variation_1062, Variation_1062_Arg],
})
Variation_1066_Arg_Group_2 = TypedDict('Variation_1066_Arg_Group_2', {
    'CNF': Union[Variation_1058, Variation_1058_Arg],
    'RAD': Union[Variation_1059, Variation_1059_Arg],
    'DOU': Union[Variation_1060, Variation_1060_Arg],
    'MAH': Union[Variation_1061, Variation_1061_Arg],
    'CDM': Union[Variation_1062, Variation_1062_Arg],
    'TRE': Union[Variation_1063, Variation_1063_Arg],
    'GHO': Union[Variation_1064, Variation_1064_Arg],
    'SUP': Union[Variation_327, Variation_327_Arg],
    'TCC': Union[Variation_1065, Variation_1065_Arg],
})
Variation_1066_Arg : TypeAlias = Union[
    int,
    Variation_1066_Arg_Group_1,
    Tuple[int],
    Variation_1066_Arg_Group_2,
    Tuple[int,int],
]
class Variation_1066(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('CNF', Variation_1058),
            ('RAD', Variation_1059),
            ('DOU', Variation_1060),
            ('MAH', Variation_1061),
            ('CDM', Variation_1062),
        ],
        [
            ('TRE', Variation_1063),
            ('GHO', Variation_1064),
            ('SUP', Variation_327),
            ('TCC', Variation_1065),
            Spare(4, 3),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CNF': ('Confirmed Vs. Tentative Track', Variation_1058, 0, 1),
        'RAD': ('Type of Sensor(s) Maintaining Track', Variation_1059, 1, 2),
        'DOU': ('Signals Level of Confidence in Plot to Track Association Process', Variation_1060, 3, 1),
        'MAH': ('Manoeuvre Detection in Horizontal Sense', Variation_1061, 4, 1),
        'CDM': ('Climbing / Descending Mode', Variation_1062, 5, 2),
        'TRE': ('Signal for End_of_Track', Variation_1063, 0, 1),
        'GHO': ('Ghost Vs. True Target', Variation_1064, 1, 1),
        'SUP': ('Track Maintained with Track Information from Neighbouring Node B on the Cluster, or Network', Variation_327, 2, 1),
        'TCC': ('Type of Plot Coordinate Transformation Mechanism:', Variation_1065, 3, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_1058]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAD']) -> Type[Variation_1059]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DOU']) -> Type[Variation_1060]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAH']) -> Type[Variation_1061]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CDM']) -> Type[Variation_1062]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRE']) -> Type[Variation_1063]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GHO']) -> Type[Variation_1064]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SUP']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TCC']) -> Type[Variation_1065]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CNF'], Literal['RAD'], Literal['DOU'], Literal['MAH'], Literal['CDM'], Literal['TRE'], Literal['GHO'], Literal['SUP'], Literal['TCC']]) -> Union[Type['Variation_1058'], Type['Variation_1059'], Type['Variation_1060'], Type['Variation_1061'], Type['Variation_1062'], Type['Variation_1063'], Type['Variation_1064'], Type['Variation_327'], Type['Variation_1065']]:
        if key == 'CNF':
            return Variation_1058
        if key == 'RAD':
            return Variation_1059
        if key == 'DOU':
            return Variation_1060
        if key == 'MAH':
            return Variation_1061
        if key == 'CDM':
            return Variation_1062
        if key == 'TRE':
            return Variation_1063
        if key == 'GHO':
            return Variation_1064
        if key == 'SUP':
            return Variation_327
        if key == 'TCC':
            return Variation_1065
        assert_never(key)

    def __init__(self, arg : Variation_1066_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1066_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1066_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_1058:
        ...

    @overload
    def get_item(self, name : Literal['RAD']) -> Variation_1059:
        ...

    @overload
    def get_item(self, name : Literal['DOU']) -> Variation_1060:
        ...

    @overload
    def get_item(self, name : Literal['MAH']) -> Variation_1061:
        ...

    @overload
    def get_item(self, name : Literal['CDM']) -> Variation_1062:
        ...

    @overload
    def get_item(self, name : Literal['TRE']) -> Variation_1063:
        ...

    @overload
    def get_item(self, name : Literal['GHO']) -> Variation_1064:
        ...

    @overload
    def get_item(self, name : Literal['SUP']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['TCC']) -> Variation_1065:
        ...

    def get_item(self, name : Union[Literal['CNF'], Literal['RAD'], Literal['DOU'], Literal['MAH'], Literal['CDM'], Literal['TRE'], Literal['GHO'], Literal['SUP'], Literal['TCC']]) -> Any:
        return self._get_item(name)

Variation_1067_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM']]]
class Variation_1067(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 7, 'NM')

    def __init__(self, arg : Variation_1067_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1068_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['NM/s']]]
class Variation_1068(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 14, 'NM/s')

    def __init__(self, arg : Variation_1068_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1069_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_1069(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 360.0, 12, '°')

    def __init__(self, arg : Variation_1069_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1070_Arg_Group = TypedDict('Variation_1070_Arg_Group', {
    'SIGX': Union[Variation_1067, Variation_1067_Arg],
    'SIGY': Union[Variation_1067, Variation_1067_Arg],
    'SIGV': Union[Variation_1068, Variation_1068_Arg],
    'SIGH': Union[Variation_1069, Variation_1069_Arg],
})
Variation_1070_Arg : TypeAlias = Union[Raw, Variation_1070_Arg_Group]
class Variation_1070(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('SIGX', Variation_1067),
        ('SIGY', Variation_1067),
        ('SIGV', Variation_1068),
        ('SIGH', Variation_1069),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SIGX': ('Sigma (X)) Standard Deviation on the Horizontal Axis of the Local Grid System', Variation_1067, 0, 8),
        'SIGY': ('Sigma (Y)) Standard Deviation on the Vertical Axis of the Local Grid System', Variation_1067, 8, 8),
        'SIGV': ('Sigma (V)) Standard Deviation on the Groundspeed Within the Local Grid System', Variation_1068, 16, 8),
        'SIGH': ('Sigma (H)) Standard Deviation on the Heading Within the Local Grid System', Variation_1069, 24, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SIGX']) -> Type[Variation_1067]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIGY']) -> Type[Variation_1067]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIGV']) -> Type[Variation_1068]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIGH']) -> Type[Variation_1069]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SIGX'], Literal['SIGY'], Literal['SIGV'], Literal['SIGH']]) -> Union[Type['Variation_1067'], Type['Variation_1067'], Type['Variation_1068'], Type['Variation_1069']]:
        if key == 'SIGX':
            return Variation_1067
        if key == 'SIGY':
            return Variation_1067
        if key == 'SIGV':
            return Variation_1068
        if key == 'SIGH':
            return Variation_1069
        assert_never(key)

    def __init__(self, arg : Variation_1070_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SIGX']) -> Variation_1067:
        ...

    @overload
    def get_item(self, name : Literal['SIGY']) -> Variation_1067:
        ...

    @overload
    def get_item(self, name : Literal['SIGV']) -> Variation_1068:
        ...

    @overload
    def get_item(self, name : Literal['SIGH']) -> Variation_1069:
        ...

    def get_item(self, name : Union[Literal['SIGX'], Literal['SIGY'], Literal['SIGV'], Literal['SIGH']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SIGX'], val : Union[Variation_1067, Variation_1067_Arg]) -> 'Variation_1070':
        ...

    @overload
    def set_item(self, name : Literal['SIGY'], val : Union[Variation_1067, Variation_1067_Arg]) -> 'Variation_1070':
        ...

    @overload
    def set_item(self, name : Literal['SIGV'], val : Union[Variation_1068, Variation_1068_Arg]) -> 'Variation_1070':
        ...

    @overload
    def set_item(self, name : Literal['SIGH'], val : Union[Variation_1069, Variation_1069_Arg]) -> 'Variation_1070':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1071_Arg : TypeAlias = Raw
class Variation_1071(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        0: 'Not defined; never used',
        1: 'Multipath Reply (Reflection)',
        2: 'Reply due to sidelobe interrogation/reception',
        3: 'Split plot',
        4: 'Second time around reply',
        5: 'Angel',
        6: 'Slow moving target correlated with road infrastructure (terrestrial vehicle)',
        7: 'Fixed PSR plot',
        8: 'Slow PSR target',
        9: 'Low quality PSR plot',
        10: 'Phantom SSR plot',
        11: 'Non-Matching Mode-3/A Code',
        12: 'Mode C code / Mode S altitude code abnormal value compared to the track',
        13: 'Target in Clutter Area',
        14: 'Maximum Doppler Response in Zero Filter',
        15: 'Transponder anomaly detected',
        16: 'Duplicated or Illegal Mode S Aircraft Address',
        17: 'Mode S error correction applied',
        18: 'Undecodable Mode C code / Mode S altitude code',
        19: 'Birds',
        20: 'Flock of Birds',
        21: 'Mode-1 was present in original reply',
        22: 'Mode-2 was present in original reply',
        23: 'Plot potentially caused by Wind Turbine',
        24: 'Helicopter',
        25: 'Maximum number of re-interrogations reached (surveillance information)',
        26: 'Maximum number of re-interrogations reached (BDS Extractions)',
        27: 'BDS Overlay Incoherence',
        28: 'Potential BDS Swap Detected',
        29: 'Track Update in the Zenithal Gap',
        30: 'Mode S Track re-acquired',
        31: 'Duplicated Mode 5 Pair NO/PIN detected',
    }

    def __init__(self, arg : Variation_1071_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1072_Arg_Group_1 = TypedDict('Variation_1072_Arg_Group_1', {
    'CODE': Union[Variation_1071, Variation_1071_Arg],
})
Variation_1072_Arg : TypeAlias = Union[
    int,
    Variation_1072_Arg_Group_1,
    Tuple[int],
]
class Variation_1072(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('CODE', Variation_1071),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CODE': ('', Variation_1071, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['CODE']]) -> Union[Type['Variation_1071']]:
        if key == 'CODE':
            return Variation_1071
        assert_never(key)

    def __init__(self, arg : Variation_1072_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1072_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['CODE']) -> Any:
        return self._get_item(name)

Variation_1073_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_1073(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 14
    quantity = Quantity('Signed', 25.0, 0, 'ft')

    def __init__(self, arg : Variation_1073_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1074_Arg_Group = TypedDict('Variation_1074_Arg_Group', {
    '3DH': Union[Variation_1073, Variation_1073_Arg],
})
Variation_1074_Arg : TypeAlias = Union[Raw, Variation_1074_Arg_Group]
class Variation_1074(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 2),
        ('3DH', Variation_1073),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        '3DH': ('3D Height, in Binary Notation. Negative Values Are Expressed in Two\'s Complement', Variation_1073, 2, 14),
    }

    @classmethod
    def spec(cls, key : Union[Literal['3DH']]) -> Union[Type['Variation_1073']]:
        if key == '3DH':
            return Variation_1073
        assert_never(key)

    def __init__(self, arg : Variation_1074_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['3DH']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['3DH'], val : Union[Variation_1073, Variation_1073_Arg]) -> 'Variation_1074':
        return self._set_item(name, val) # type: ignore

Variation_1075_Arg : TypeAlias = Raw
class Variation_1075(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Doppler speed is valid',
        1: 'Doppler speed is doubtful',
    }

    def __init__(self, arg : Variation_1075_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1076_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_1076(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 10
    quantity = Quantity('Signed', 1.0, 0, 'm/s')

    def __init__(self, arg : Variation_1076_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1077_Arg_Group = TypedDict('Variation_1077_Arg_Group', {
    'D': Union[Variation_1075, Variation_1075_Arg],
    'CAL': Union[Variation_1076, Variation_1076_Arg],
})
Variation_1077_Arg : TypeAlias = Union[Raw, Variation_1077_Arg_Group]
class Variation_1077(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('D', Variation_1075),
        Spare(1, 5),
        ('CAL', Variation_1076),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'D': ('', Variation_1075, 0, 1),
        'CAL': ('Calculated Doppler Speed, Coded in Two\'s Complement', Variation_1076, 6, 10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['D']) -> Type[Variation_1075]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CAL']) -> Type[Variation_1076]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['D'], Literal['CAL']]) -> Union[Type['Variation_1075'], Type['Variation_1076']]:
        if key == 'D':
            return Variation_1075
        if key == 'CAL':
            return Variation_1076
        assert_never(key)

    def __init__(self, arg : Variation_1077_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['D']) -> Variation_1075:
        ...

    @overload
    def get_item(self, name : Literal['CAL']) -> Variation_1076:
        ...

    def get_item(self, name : Union[Literal['D'], Literal['CAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['D'], val : Union[Variation_1075, Variation_1075_Arg]) -> 'Variation_1077':
        ...

    @overload
    def set_item(self, name : Literal['CAL'], val : Union[Variation_1076, Variation_1076_Arg]) -> 'Variation_1077':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1078_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_1078(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, 'm/s')

    def __init__(self, arg : Variation_1078_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1079_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['MHz']]]
class Variation_1079(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 1.0, 0, 'MHz')

    def __init__(self, arg : Variation_1079_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1080_Arg_Group = TypedDict('Variation_1080_Arg_Group', {
    'DOP': Union[Variation_1078, Variation_1078_Arg],
    'AMB': Union[Variation_1078, Variation_1078_Arg],
    'FRQ': Union[Variation_1079, Variation_1079_Arg],
})
Variation_1080_Arg : TypeAlias = Union[Raw, Variation_1080_Arg_Group]
class Variation_1080(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('DOP', Variation_1078),
        ('AMB', Variation_1078),
        ('FRQ', Variation_1079),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'DOP': ('Doppler Speed', Variation_1078, 0, 16),
        'AMB': ('Ambiguity Range', Variation_1078, 16, 16),
        'FRQ': ('Transmitter Frequency', Variation_1079, 32, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['DOP']) -> Type[Variation_1078]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AMB']) -> Type[Variation_1078]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FRQ']) -> Type[Variation_1079]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['DOP'], Literal['AMB'], Literal['FRQ']]) -> Union[Type['Variation_1078'], Type['Variation_1078'], Type['Variation_1079']]:
        if key == 'DOP':
            return Variation_1078
        if key == 'AMB':
            return Variation_1078
        if key == 'FRQ':
            return Variation_1079
        assert_never(key)

    def __init__(self, arg : Variation_1080_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['DOP']) -> Variation_1078:
        ...

    @overload
    def get_item(self, name : Literal['AMB']) -> Variation_1078:
        ...

    @overload
    def get_item(self, name : Literal['FRQ']) -> Variation_1079:
        ...

    def get_item(self, name : Union[Literal['DOP'], Literal['AMB'], Literal['FRQ']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['DOP'], val : Union[Variation_1078, Variation_1078_Arg]) -> 'Variation_1080':
        ...

    @overload
    def set_item(self, name : Literal['AMB'], val : Union[Variation_1078, Variation_1078_Arg]) -> 'Variation_1080':
        ...

    @overload
    def set_item(self, name : Literal['FRQ'], val : Union[Variation_1079, Variation_1079_Arg]) -> 'Variation_1080':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1081_Arg : TypeAlias = List[Union[Variation_1080, Variation_1080_Arg]]
class Variation_1081(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 48
    variation_type = Variation_1080

    @classmethod
    def spec(cls) -> Type[Variation_1080]:
        return Variation_1080

    def __init__(self, arg : List[Union[Variation_1080, Variation_1080_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1082_Arg = TypedDict('Variation_1082_Arg', {
    'CAL': Union[Variation_1077, Variation_1077_Arg],
    'RDS': Union[Variation_1081, Variation_1081_Arg],
}, total=False)
class Variation_1082(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('CAL', Variation_1077),
        ('RDS', Variation_1081),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'CAL': (Variation_1077, 0x80),
        'RDS': (Variation_1081, 0x40),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CAL']) -> Type[Variation_1077]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDS']) -> Type[Variation_1081]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CAL'], Literal['RDS']]) -> Union[Type['Variation_1077'], Type['Variation_1081']]:
        if key == 'CAL':
            return Variation_1077
        if key == 'RDS':
            return Variation_1081
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1082_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['CAL'], val : Union[Variation_1077, Variation_1077_Arg]) -> 'Variation_1082':
        ...

    @overload
    def set_item(self, name : Literal['RDS'], val : Union[Variation_1081, Variation_1081_Arg]) -> 'Variation_1082':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['CAL']) -> 'Variation_1082':
        ...

    @overload
    def del_item(self, name : Literal['RDS']) -> 'Variation_1082':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['CAL']) -> Variation_1077:
        ...

    @overload
    def get_item(self, name : Literal['RDS']) -> Variation_1081:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1083_Arg : TypeAlias = Raw
class Variation_1083(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No communications capability (surveillance only)',
        1: 'Comm. A and Comm. B capability',
        2: 'Comm. A, Comm. B and Uplink ELM',
        3: 'Comm. A, Comm. B, Uplink ELM and Downlink ELM',
        4: 'Level 5 Transponder capability',
    }

    def __init__(self, arg : Variation_1083_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1084_Arg : TypeAlias = Raw
class Variation_1084(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
        7: 'Unknown',
    }

    def __init__(self, arg : Variation_1084_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1085_Arg : TypeAlias = Raw
class Variation_1085(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'SI-Code Capable',
        1: 'II-Code Capable',
    }

    def __init__(self, arg : Variation_1085_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1086_Arg_Group = TypedDict('Variation_1086_Arg_Group', {
    'COM': Union[Variation_1083, Variation_1083_Arg],
    'STAT': Union[Variation_1084, Variation_1084_Arg],
    'SI': Union[Variation_1085, Variation_1085_Arg],
    'MSSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
})
Variation_1086_Arg : TypeAlias = Union[Raw, Variation_1086_Arg_Group]
class Variation_1086(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('COM', Variation_1083),
        ('STAT', Variation_1084),
        ('SI', Variation_1085),
        Spare(7, 1),
        ('MSSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_1083, 0, 3),
        'STAT': ('Flight Status', Variation_1084, 3, 3),
        'SI': ('SI/II Transponder Capability', Variation_1085, 6, 1),
        'MSSC': ('Mode-S Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS 1,0 Bits 37/40', Variation_283, 12, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_1083]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_1084]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SI']) -> Type[Variation_1085]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['SI'], Literal['MSSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Union[Type['Variation_1083'], Type['Variation_1084'], Type['Variation_1085'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283']]:
        if key == 'COM':
            return Variation_1083
        if key == 'STAT':
            return Variation_1084
        if key == 'SI':
            return Variation_1085
        if key == 'MSSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_1086_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_1083:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_1084:
        ...

    @overload
    def get_item(self, name : Literal['SI']) -> Variation_1085:
        ...

    @overload
    def get_item(self, name : Literal['MSSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['SI'], Literal['MSSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_1083, Variation_1083_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_1084, Variation_1084_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['SI'], val : Union[Variation_1085, Variation_1085_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['MSSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_1086':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_1086':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1087_Arg : TypeAlias = Raw
class Variation_1087(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode-1 code as derived from the reply of the transponder',
        1: 'Smoothed Mode-1 code as provided by a local tracker',
    }

    def __init__(self, arg : Variation_1087_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1088_Arg_Group = TypedDict('Variation_1088_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_1087, Variation_1087_Arg],
    'MODE1': Union[Variation_376, Variation_376_Arg],
})
Variation_1088_Arg : TypeAlias = Union[Raw, Variation_1088_Arg_Group]
class Variation_1088(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_1087),
        ('MODE1', Variation_376),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('', Variation_16, 0, 1),
        'G': ('', Variation_17, 1, 1),
        'L': ('', Variation_1087, 2, 1),
        'MODE1': ('Mode-1 Code', Variation_376, 3, 5),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_1087]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE1']) -> Type[Variation_376]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE1']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_1087'], Type['Variation_376']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_1087
        if key == 'MODE1':
            return Variation_376
        assert_never(key)

    def __init__(self, arg : Variation_1088_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_1087:
        ...

    @overload
    def get_item(self, name : Literal['MODE1']) -> Variation_376:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1088':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1088':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_1087, Variation_1087_Arg]) -> 'Variation_1088':
        ...

    @overload
    def set_item(self, name : Literal['MODE1'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_1088':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1089_Arg : TypeAlias = Raw
class Variation_1089(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'High quality pulse A4',
        1: 'Low quality pulse A4',
    }

    def __init__(self, arg : Variation_1089_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1090_Arg : TypeAlias = Raw
class Variation_1090(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'High quality pulse A2',
        1: 'Low quality pulse A2',
    }

    def __init__(self, arg : Variation_1090_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1091_Arg : TypeAlias = Raw
class Variation_1091(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'High quality pulse B2',
        1: 'Low quality pulse B2',
    }

    def __init__(self, arg : Variation_1091_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1092_Arg : TypeAlias = Raw
class Variation_1092(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'High quality pulse B1',
        1: 'Low quality pulse B1',
    }

    def __init__(self, arg : Variation_1092_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1093_Arg_Group = TypedDict('Variation_1093_Arg_Group', {
    'QA4': Union[Variation_1089, Variation_1089_Arg],
    'QA2': Union[Variation_1090, Variation_1090_Arg],
    'QA1': Union[Variation_44, Variation_44_Arg],
    'QB2': Union[Variation_1091, Variation_1091_Arg],
    'QB1': Union[Variation_1092, Variation_1092_Arg],
})
Variation_1093_Arg : TypeAlias = Union[Raw, Variation_1093_Arg_Group]
class Variation_1093(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 3),
        ('QA4', Variation_1089),
        ('QA2', Variation_1090),
        ('QA1', Variation_44),
        ('QB2', Variation_1091),
        ('QB1', Variation_1092),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QA4': ('', Variation_1089, 3, 1),
        'QA2': ('', Variation_1090, 4, 1),
        'QA1': ('', Variation_44, 5, 1),
        'QB2': ('', Variation_1091, 6, 1),
        'QB1': ('', Variation_1092, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['QA4']) -> Type[Variation_1089]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA2']) -> Type[Variation_1090]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QA1']) -> Type[Variation_44]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB2']) -> Type[Variation_1091]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['QB1']) -> Type[Variation_1092]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['QA4'], Literal['QA2'], Literal['QA1'], Literal['QB2'], Literal['QB1']]) -> Union[Type['Variation_1089'], Type['Variation_1090'], Type['Variation_44'], Type['Variation_1091'], Type['Variation_1092']]:
        if key == 'QA4':
            return Variation_1089
        if key == 'QA2':
            return Variation_1090
        if key == 'QA1':
            return Variation_44
        if key == 'QB2':
            return Variation_1091
        if key == 'QB1':
            return Variation_1092
        assert_never(key)

    def __init__(self, arg : Variation_1093_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['QA4']) -> Variation_1089:
        ...

    @overload
    def get_item(self, name : Literal['QA2']) -> Variation_1090:
        ...

    @overload
    def get_item(self, name : Literal['QA1']) -> Variation_44:
        ...

    @overload
    def get_item(self, name : Literal['QB2']) -> Variation_1091:
        ...

    @overload
    def get_item(self, name : Literal['QB1']) -> Variation_1092:
        ...

    def get_item(self, name : Union[Literal['QA4'], Literal['QA2'], Literal['QA1'], Literal['QB2'], Literal['QB1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['QA4'], val : Union[Variation_1089, Variation_1089_Arg]) -> 'Variation_1093':
        ...

    @overload
    def set_item(self, name : Literal['QA2'], val : Union[Variation_1090, Variation_1090_Arg]) -> 'Variation_1093':
        ...

    @overload
    def set_item(self, name : Literal['QA1'], val : Union[Variation_44, Variation_44_Arg]) -> 'Variation_1093':
        ...

    @overload
    def set_item(self, name : Literal['QB2'], val : Union[Variation_1091, Variation_1091_Arg]) -> 'Variation_1093':
        ...

    @overload
    def set_item(self, name : Literal['QB1'], val : Union[Variation_1092, Variation_1092_Arg]) -> 'Variation_1093':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1094_Arg = TypedDict('Variation_1094_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_1048, Variation_1048_Arg],
    '040': Union[Variation_582, Variation_582_Arg],
    '070': Union[Variation_1049, Variation_1049_Arg],
    '090': Union[Variation_1051, Variation_1051_Arg],
    '130': Union[Variation_1054, Variation_1054_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '240': Union[Variation_201, Variation_201_Arg],
    '250': Union[Variation_1056, Variation_1056_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '042': Union[Variation_1057, Variation_1057_Arg],
    '200': Union[Variation_68, Variation_68_Arg],
    '170': Union[Variation_1066, Variation_1066_Arg],
    '210': Union[Variation_1070, Variation_1070_Arg],
    '030': Union[Variation_1072, Variation_1072_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '110': Union[Variation_1074, Variation_1074_Arg],
    '120': Union[Variation_1082, Variation_1082_Arg],
    '230': Union[Variation_1086, Variation_1086_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '055': Union[Variation_1088, Variation_1088_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '065': Union[Variation_1093, Variation_1093_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1094(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('140', Variation_81),
        ('020', Variation_1048),
        ('040', Variation_582),
        ('070', Variation_1049),
        ('090', Variation_1051),
        ('130', Variation_1054),
        ('220', Variation_279),
        ('240', Variation_201),
        ('250', Variation_1056),
        ('161', Variation_638),
        ('042', Variation_1057),
        ('200', Variation_68),
        ('170', Variation_1066),
        ('210', Variation_1070),
        ('030', Variation_1072),
        ('080', Variation_42),
        ('100', Variation_55),
        ('110', Variation_1074),
        ('120', Variation_1082),
        ('230', Variation_1086),
        ('260', Variation_282),
        ('055', Variation_1088),
        ('050', Variation_27),
        ('065', Variation_1093),
        ('060', Variation_42),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '140': (Variation_81, 0x40000000),
        '020': (Variation_1048, 0x20000000),
        '040': (Variation_582, 0x10000000),
        '070': (Variation_1049, 0x08000000),
        '090': (Variation_1051, 0x04000000),
        '130': (Variation_1054, 0x02000000),
        '220': (Variation_279, 0x01800000),
        '240': (Variation_201, 0x01400000),
        '250': (Variation_1056, 0x01200000),
        '161': (Variation_638, 0x01100000),
        '042': (Variation_1057, 0x01080000),
        '200': (Variation_68, 0x01040000),
        '170': (Variation_1066, 0x01020000),
        '210': (Variation_1070, 0x01018000),
        '030': (Variation_1072, 0x01014000),
        '080': (Variation_42, 0x01012000),
        '100': (Variation_55, 0x01011000),
        '110': (Variation_1074, 0x01010800),
        '120': (Variation_1082, 0x01010400),
        '230': (Variation_1086, 0x01010200),
        '260': (Variation_282, 0x01010180),
        '055': (Variation_1088, 0x01010140),
        '050': (Variation_27, 0x01010120),
        '065': (Variation_1093, 0x01010110),
        '060': (Variation_42, 0x01010108),
        'SP': (Variation_62, 0x01010104),
        'RE': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_1048]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_582]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1049]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1051]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_1054]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['240']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_1056]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_1057]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_68]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_1066]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_1070]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_1072]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1074]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1082]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_1086]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_1088]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['065']) -> Type[Variation_1093]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['140'], Literal['020'], Literal['040'], Literal['070'], Literal['090'], Literal['130'], Literal['220'], Literal['240'], Literal['250'], Literal['161'], Literal['042'], Literal['200'], Literal['170'], Literal['210'], Literal['030'], Literal['080'], Literal['100'], Literal['110'], Literal['120'], Literal['230'], Literal['260'], Literal['055'], Literal['050'], Literal['065'], Literal['060'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_81'], Type['Variation_1048'], Type['Variation_582'], Type['Variation_1049'], Type['Variation_1051'], Type['Variation_1054'], Type['Variation_279'], Type['Variation_201'], Type['Variation_1056'], Type['Variation_638'], Type['Variation_1057'], Type['Variation_68'], Type['Variation_1066'], Type['Variation_1070'], Type['Variation_1072'], Type['Variation_42'], Type['Variation_55'], Type['Variation_1074'], Type['Variation_1082'], Type['Variation_1086'], Type['Variation_282'], Type['Variation_1088'], Type['Variation_27'], Type['Variation_1093'], Type['Variation_42'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '140':
            return Variation_81
        if key == '020':
            return Variation_1048
        if key == '040':
            return Variation_582
        if key == '070':
            return Variation_1049
        if key == '090':
            return Variation_1051
        if key == '130':
            return Variation_1054
        if key == '220':
            return Variation_279
        if key == '240':
            return Variation_201
        if key == '250':
            return Variation_1056
        if key == '161':
            return Variation_638
        if key == '042':
            return Variation_1057
        if key == '200':
            return Variation_68
        if key == '170':
            return Variation_1066
        if key == '210':
            return Variation_1070
        if key == '030':
            return Variation_1072
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '110':
            return Variation_1074
        if key == '120':
            return Variation_1082
        if key == '230':
            return Variation_1086
        if key == '260':
            return Variation_282
        if key == '055':
            return Variation_1088
        if key == '050':
            return Variation_27
        if key == '065':
            return Variation_1093
        if key == '060':
            return Variation_42
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1094_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_1048, Variation_1048_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_582, Variation_582_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1049, Variation_1049_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1051, Variation_1051_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_1054, Variation_1054_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['240'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_1056, Variation_1056_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_1057, Variation_1057_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_68, Variation_68_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_1066, Variation_1066_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_1070, Variation_1070_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_1072, Variation_1072_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1074, Variation_1074_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1082, Variation_1082_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_1086, Variation_1086_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_1088, Variation_1088_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['065'], val : Union[Variation_1093, Variation_1093_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1094':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1094':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['240']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['065']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1094':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1094':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_1048:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_582:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1049:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1051:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_1054:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['240']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_1056:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_1057:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_68:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_1066:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_1070:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_1072:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1074:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1082:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_1086:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_1088:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['065']) -> Variation_1093:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1095_Arg : TypeAlias = Raw
class Variation_1095(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        0: 'Not defined; never used',
        1: 'Multipath Reply (Reflection)',
        2: 'Reply due to sidelobe interrogation/reception',
        3: 'Split plot',
        4: 'Second time around reply',
        5: 'Angel',
        6: 'Slow moving target correlated with road infrastructure (terrestrial vehicle)',
        7: 'Fixed PSR plot',
        8: 'Slow PSR target',
        9: 'Low quality PSR plot',
        10: 'Phantom SSR plot',
        11: 'Non-Matching Mode-3/A Code',
        12: 'Mode C code / Mode S altitude code abnormal value compared to the track',
        13: 'Target in Clutter Area',
        14: 'Maximum Doppler Response in Zero Filter',
        15: 'Transponder anomaly detected',
        16: 'Duplicated or Illegal Mode S Aircraft Address',
        17: 'Mode S error correction applied',
        18: 'Undecodable Mode C code / Mode S altitude code',
        19: 'Birds',
        20: 'Flock of Birds',
        21: 'Mode-1 was present in original reply',
        22: 'Mode-2 was present in original reply',
        23: 'Plot potentially caused by Wind Turbine',
        24: 'Helicopter',
        25: 'Maximum number of re-interrogations reached (surveillance information)',
        26: 'Maximum number of re-interrogations reached (BDS Extractions)',
        27: 'BDS Overlay Incoherence',
        28: 'Potential BDS Swap Detected',
        29: 'Track Update in the Zenithal Gap',
        30: 'Mode S Track re-acquired',
        31: 'Duplicated Mode 5 Pair NO/PIN detected',
        32: 'Wrong DF reply format detected',
        33: 'Transponder anomaly (MS XPD replies with Mode A/C to Mode A/C-only all-call)',
        34: 'Transponder anomaly (SI capability report wrong)',
    }

    def __init__(self, arg : Variation_1095_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1096_Arg_Group_1 = TypedDict('Variation_1096_Arg_Group_1', {
    'CODE': Union[Variation_1095, Variation_1095_Arg],
})
Variation_1096_Arg : TypeAlias = Union[
    int,
    Variation_1096_Arg_Group_1,
    Tuple[int],
]
class Variation_1096(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('CODE', Variation_1095),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CODE': ('', Variation_1095, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['CODE']]) -> Union[Type['Variation_1095']]:
        if key == 'CODE':
            return Variation_1095
        assert_never(key)

    def __init__(self, arg : Variation_1096_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1096_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['CODE']) -> Any:
        return self._get_item(name)

Variation_1097_Arg = TypedDict('Variation_1097_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_1048, Variation_1048_Arg],
    '040': Union[Variation_582, Variation_582_Arg],
    '070': Union[Variation_1049, Variation_1049_Arg],
    '090': Union[Variation_1051, Variation_1051_Arg],
    '130': Union[Variation_1054, Variation_1054_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '240': Union[Variation_201, Variation_201_Arg],
    '250': Union[Variation_1056, Variation_1056_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '042': Union[Variation_1057, Variation_1057_Arg],
    '200': Union[Variation_68, Variation_68_Arg],
    '170': Union[Variation_1066, Variation_1066_Arg],
    '210': Union[Variation_1070, Variation_1070_Arg],
    '030': Union[Variation_1096, Variation_1096_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '110': Union[Variation_1074, Variation_1074_Arg],
    '120': Union[Variation_1082, Variation_1082_Arg],
    '230': Union[Variation_1086, Variation_1086_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '055': Union[Variation_1088, Variation_1088_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '065': Union[Variation_1093, Variation_1093_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1097(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('140', Variation_81),
        ('020', Variation_1048),
        ('040', Variation_582),
        ('070', Variation_1049),
        ('090', Variation_1051),
        ('130', Variation_1054),
        ('220', Variation_279),
        ('240', Variation_201),
        ('250', Variation_1056),
        ('161', Variation_638),
        ('042', Variation_1057),
        ('200', Variation_68),
        ('170', Variation_1066),
        ('210', Variation_1070),
        ('030', Variation_1096),
        ('080', Variation_42),
        ('100', Variation_55),
        ('110', Variation_1074),
        ('120', Variation_1082),
        ('230', Variation_1086),
        ('260', Variation_282),
        ('055', Variation_1088),
        ('050', Variation_27),
        ('065', Variation_1093),
        ('060', Variation_42),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '140': (Variation_81, 0x40000000),
        '020': (Variation_1048, 0x20000000),
        '040': (Variation_582, 0x10000000),
        '070': (Variation_1049, 0x08000000),
        '090': (Variation_1051, 0x04000000),
        '130': (Variation_1054, 0x02000000),
        '220': (Variation_279, 0x01800000),
        '240': (Variation_201, 0x01400000),
        '250': (Variation_1056, 0x01200000),
        '161': (Variation_638, 0x01100000),
        '042': (Variation_1057, 0x01080000),
        '200': (Variation_68, 0x01040000),
        '170': (Variation_1066, 0x01020000),
        '210': (Variation_1070, 0x01018000),
        '030': (Variation_1096, 0x01014000),
        '080': (Variation_42, 0x01012000),
        '100': (Variation_55, 0x01011000),
        '110': (Variation_1074, 0x01010800),
        '120': (Variation_1082, 0x01010400),
        '230': (Variation_1086, 0x01010200),
        '260': (Variation_282, 0x01010180),
        '055': (Variation_1088, 0x01010140),
        '050': (Variation_27, 0x01010120),
        '065': (Variation_1093, 0x01010110),
        '060': (Variation_42, 0x01010108),
        'SP': (Variation_62, 0x01010104),
        'RE': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_1048]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_582]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1049]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1051]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_1054]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['240']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_1056]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_1057]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_68]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_1066]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_1070]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_1096]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1074]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1082]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_1086]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_1088]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['065']) -> Type[Variation_1093]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['140'], Literal['020'], Literal['040'], Literal['070'], Literal['090'], Literal['130'], Literal['220'], Literal['240'], Literal['250'], Literal['161'], Literal['042'], Literal['200'], Literal['170'], Literal['210'], Literal['030'], Literal['080'], Literal['100'], Literal['110'], Literal['120'], Literal['230'], Literal['260'], Literal['055'], Literal['050'], Literal['065'], Literal['060'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_81'], Type['Variation_1048'], Type['Variation_582'], Type['Variation_1049'], Type['Variation_1051'], Type['Variation_1054'], Type['Variation_279'], Type['Variation_201'], Type['Variation_1056'], Type['Variation_638'], Type['Variation_1057'], Type['Variation_68'], Type['Variation_1066'], Type['Variation_1070'], Type['Variation_1096'], Type['Variation_42'], Type['Variation_55'], Type['Variation_1074'], Type['Variation_1082'], Type['Variation_1086'], Type['Variation_282'], Type['Variation_1088'], Type['Variation_27'], Type['Variation_1093'], Type['Variation_42'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '140':
            return Variation_81
        if key == '020':
            return Variation_1048
        if key == '040':
            return Variation_582
        if key == '070':
            return Variation_1049
        if key == '090':
            return Variation_1051
        if key == '130':
            return Variation_1054
        if key == '220':
            return Variation_279
        if key == '240':
            return Variation_201
        if key == '250':
            return Variation_1056
        if key == '161':
            return Variation_638
        if key == '042':
            return Variation_1057
        if key == '200':
            return Variation_68
        if key == '170':
            return Variation_1066
        if key == '210':
            return Variation_1070
        if key == '030':
            return Variation_1096
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '110':
            return Variation_1074
        if key == '120':
            return Variation_1082
        if key == '230':
            return Variation_1086
        if key == '260':
            return Variation_282
        if key == '055':
            return Variation_1088
        if key == '050':
            return Variation_27
        if key == '065':
            return Variation_1093
        if key == '060':
            return Variation_42
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1097_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_1048, Variation_1048_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_582, Variation_582_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1049, Variation_1049_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1051, Variation_1051_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_1054, Variation_1054_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['240'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_1056, Variation_1056_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_1057, Variation_1057_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_68, Variation_68_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_1066, Variation_1066_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_1070, Variation_1070_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_1096, Variation_1096_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1074, Variation_1074_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1082, Variation_1082_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_1086, Variation_1086_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_1088, Variation_1088_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['065'], val : Union[Variation_1093, Variation_1093_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1097':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1097':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['240']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['065']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1097':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1097':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_1048:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_582:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1049:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1051:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_1054:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['240']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_1056:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_1057:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_68:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_1066:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_1070:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_1096:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1074:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1082:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_1086:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_1088:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['065']) -> Variation_1093:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1098_Arg = TypedDict('Variation_1098_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_1048, Variation_1048_Arg],
    '040': Union[Variation_582, Variation_582_Arg],
    '070': Union[Variation_1049, Variation_1049_Arg],
    '090': Union[Variation_1051, Variation_1051_Arg],
    '130': Union[Variation_1054, Variation_1054_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '240': Union[Variation_201, Variation_201_Arg],
    '250': Union[Variation_1056, Variation_1056_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '042': Union[Variation_1057, Variation_1057_Arg],
    '200': Union[Variation_68, Variation_68_Arg],
    '170': Union[Variation_1066, Variation_1066_Arg],
    '210': Union[Variation_1070, Variation_1070_Arg],
    '030': Union[Variation_1096, Variation_1096_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '110': Union[Variation_1074, Variation_1074_Arg],
    '120': Union[Variation_1082, Variation_1082_Arg],
    '230': Union[Variation_1086, Variation_1086_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '055': Union[Variation_1088, Variation_1088_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '065': Union[Variation_1093, Variation_1093_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1098(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('140', Variation_81),
        ('020', Variation_1048),
        ('040', Variation_582),
        ('070', Variation_1049),
        ('090', Variation_1051),
        ('130', Variation_1054),
        ('220', Variation_279),
        ('240', Variation_201),
        ('250', Variation_1056),
        ('161', Variation_638),
        ('042', Variation_1057),
        ('200', Variation_68),
        ('170', Variation_1066),
        ('210', Variation_1070),
        ('030', Variation_1096),
        ('080', Variation_42),
        ('100', Variation_55),
        ('110', Variation_1074),
        ('120', Variation_1082),
        ('230', Variation_1086),
        ('260', Variation_282),
        ('055', Variation_1088),
        ('050', Variation_27),
        ('065', Variation_1093),
        ('060', Variation_42),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '140': (Variation_81, 0x40000000),
        '020': (Variation_1048, 0x20000000),
        '040': (Variation_582, 0x10000000),
        '070': (Variation_1049, 0x08000000),
        '090': (Variation_1051, 0x04000000),
        '130': (Variation_1054, 0x02000000),
        '220': (Variation_279, 0x01800000),
        '240': (Variation_201, 0x01400000),
        '250': (Variation_1056, 0x01200000),
        '161': (Variation_638, 0x01100000),
        '042': (Variation_1057, 0x01080000),
        '200': (Variation_68, 0x01040000),
        '170': (Variation_1066, 0x01020000),
        '210': (Variation_1070, 0x01018000),
        '030': (Variation_1096, 0x01014000),
        '080': (Variation_42, 0x01012000),
        '100': (Variation_55, 0x01011000),
        '110': (Variation_1074, 0x01010800),
        '120': (Variation_1082, 0x01010400),
        '230': (Variation_1086, 0x01010200),
        '260': (Variation_282, 0x01010180),
        '055': (Variation_1088, 0x01010140),
        '050': (Variation_27, 0x01010120),
        '065': (Variation_1093, 0x01010110),
        '060': (Variation_42, 0x01010108),
        'SP': (Variation_62, 0x01010104),
        'RE': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_1048]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_582]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1049]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1051]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_1054]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['240']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_1056]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_1057]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_68]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_1066]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_1070]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_1096]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1074]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1082]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_1086]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_1088]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['065']) -> Type[Variation_1093]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['140'], Literal['020'], Literal['040'], Literal['070'], Literal['090'], Literal['130'], Literal['220'], Literal['240'], Literal['250'], Literal['161'], Literal['042'], Literal['200'], Literal['170'], Literal['210'], Literal['030'], Literal['080'], Literal['100'], Literal['110'], Literal['120'], Literal['230'], Literal['260'], Literal['055'], Literal['050'], Literal['065'], Literal['060'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_81'], Type['Variation_1048'], Type['Variation_582'], Type['Variation_1049'], Type['Variation_1051'], Type['Variation_1054'], Type['Variation_279'], Type['Variation_201'], Type['Variation_1056'], Type['Variation_638'], Type['Variation_1057'], Type['Variation_68'], Type['Variation_1066'], Type['Variation_1070'], Type['Variation_1096'], Type['Variation_42'], Type['Variation_55'], Type['Variation_1074'], Type['Variation_1082'], Type['Variation_1086'], Type['Variation_282'], Type['Variation_1088'], Type['Variation_27'], Type['Variation_1093'], Type['Variation_42'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '140':
            return Variation_81
        if key == '020':
            return Variation_1048
        if key == '040':
            return Variation_582
        if key == '070':
            return Variation_1049
        if key == '090':
            return Variation_1051
        if key == '130':
            return Variation_1054
        if key == '220':
            return Variation_279
        if key == '240':
            return Variation_201
        if key == '250':
            return Variation_1056
        if key == '161':
            return Variation_638
        if key == '042':
            return Variation_1057
        if key == '200':
            return Variation_68
        if key == '170':
            return Variation_1066
        if key == '210':
            return Variation_1070
        if key == '030':
            return Variation_1096
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '110':
            return Variation_1074
        if key == '120':
            return Variation_1082
        if key == '230':
            return Variation_1086
        if key == '260':
            return Variation_282
        if key == '055':
            return Variation_1088
        if key == '050':
            return Variation_27
        if key == '065':
            return Variation_1093
        if key == '060':
            return Variation_42
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1098_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_1048, Variation_1048_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_582, Variation_582_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1049, Variation_1049_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1051, Variation_1051_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_1054, Variation_1054_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['240'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_1056, Variation_1056_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_1057, Variation_1057_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_68, Variation_68_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_1066, Variation_1066_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_1070, Variation_1070_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_1096, Variation_1096_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1074, Variation_1074_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1082, Variation_1082_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_1086, Variation_1086_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_1088, Variation_1088_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['065'], val : Union[Variation_1093, Variation_1093_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1098':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1098':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['240']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['065']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1098':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1098':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_1048:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_582:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1049:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1051:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_1054:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['240']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_1056:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_1057:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_68:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_1066:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_1070:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_1096:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1074:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1082:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_1086:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_1088:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['065']) -> Variation_1093:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1099_Arg : TypeAlias = Raw
class Variation_1099(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'ADSB not populated',
        1: 'ADSB populated',
    }

    def __init__(self, arg : Variation_1099_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1100_Arg : TypeAlias = Raw
class Variation_1100(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Not available',
        1: 'Available',
    }

    def __init__(self, arg : Variation_1100_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1101_Arg_Group = TypedDict('Variation_1101_Arg_Group', {
    'EP': Union[Variation_1099, Variation_1099_Arg],
    'VAL': Union[Variation_1100, Variation_1100_Arg],
})
Variation_1101_Arg : TypeAlias = Union[Raw, Variation_1101_Arg_Group]
class Variation_1101(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_1099),
        ('VAL', Variation_1100),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('ADSB Element Populated Bit', Variation_1099, 0, 1),
        'VAL': ('On-Site ADS-B Information', Variation_1100, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_1099]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_1100]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_1099'], Type['Variation_1100']]:
        if key == 'EP':
            return Variation_1099
        if key == 'VAL':
            return Variation_1100
        assert_never(key)

    def __init__(self, arg : Variation_1101_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_1099:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_1100:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_1099, Variation_1099_Arg]) -> 'Variation_1101':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_1100, Variation_1100_Arg]) -> 'Variation_1101':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1102_Arg : TypeAlias = Raw
class Variation_1102(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'SCN not populated',
        1: 'SCN populated',
    }

    def __init__(self, arg : Variation_1102_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1103_Arg : TypeAlias = Raw
class Variation_1103(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Not available',
        1: 'Available',
    }

    def __init__(self, arg : Variation_1103_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1104_Arg_Group = TypedDict('Variation_1104_Arg_Group', {
    'EP': Union[Variation_1102, Variation_1102_Arg],
    'VAL': Union[Variation_1103, Variation_1103_Arg],
})
Variation_1104_Arg : TypeAlias = Union[Raw, Variation_1104_Arg_Group]
class Variation_1104(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_1102),
        ('VAL', Variation_1103),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('SCN Element Populated Bit', Variation_1102, 0, 1),
        'VAL': ('Surveillance Cluster Network Information', Variation_1103, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_1102]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_1103]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_1102'], Type['Variation_1103']]:
        if key == 'EP':
            return Variation_1102
        if key == 'VAL':
            return Variation_1103
        assert_never(key)

    def __init__(self, arg : Variation_1104_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_1102:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_1103:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_1102, Variation_1102_Arg]) -> 'Variation_1104':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_1103, Variation_1103_Arg]) -> 'Variation_1104':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1105_Arg : TypeAlias = Raw
class Variation_1105(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'PAI not populated',
        1: 'PAI populated',
    }

    def __init__(self, arg : Variation_1105_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1106_Arg : TypeAlias = Raw
class Variation_1106(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Not available',
        1: 'Available',
    }

    def __init__(self, arg : Variation_1106_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1107_Arg_Group = TypedDict('Variation_1107_Arg_Group', {
    'EP': Union[Variation_1105, Variation_1105_Arg],
    'VAL': Union[Variation_1106, Variation_1106_Arg],
})
Variation_1107_Arg : TypeAlias = Union[Raw, Variation_1107_Arg_Group]
class Variation_1107(Group):
    variation = 'Group'

    bit_size = 2

    subitems_list = [
        ('EP', Variation_1105),
        ('VAL', Variation_1106),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EP': ('PAI Element Populated Bit', Variation_1105, 0, 1),
        'VAL': ('Passive Acquisition Interface Information', Variation_1106, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['EP']) -> Type[Variation_1105]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VAL']) -> Type[Variation_1106]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['EP'], Literal['VAL']]) -> Union[Type['Variation_1105'], Type['Variation_1106']]:
        if key == 'EP':
            return Variation_1105
        if key == 'VAL':
            return Variation_1106
        assert_never(key)

    def __init__(self, arg : Variation_1107_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['EP']) -> Variation_1105:
        ...

    @overload
    def get_item(self, name : Literal['VAL']) -> Variation_1106:
        ...

    def get_item(self, name : Union[Literal['EP'], Literal['VAL']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['EP'], val : Union[Variation_1105, Variation_1105_Arg]) -> 'Variation_1107':
        ...

    @overload
    def set_item(self, name : Literal['VAL'], val : Union[Variation_1106, Variation_1106_Arg]) -> 'Variation_1107':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1108_Arg_Group_1 = TypedDict('Variation_1108_Arg_Group_1', {
    'TYP': Union[Variation_1037, Variation_1037_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RDP': Union[Variation_1039, Variation_1039_Arg],
    'SPI': Union[Variation_1040, Variation_1040_Arg],
    'RAB': Union[Variation_1041, Variation_1041_Arg],
})
Variation_1108_Arg_Group_2 = TypedDict('Variation_1108_Arg_Group_2', {
    'TYP': Union[Variation_1037, Variation_1037_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RDP': Union[Variation_1039, Variation_1039_Arg],
    'SPI': Union[Variation_1040, Variation_1040_Arg],
    'RAB': Union[Variation_1041, Variation_1041_Arg],
    'TST': Union[Variation_1042, Variation_1042_Arg],
    'ERR': Union[Variation_1043, Variation_1043_Arg],
    'XPP': Union[Variation_1044, Variation_1044_Arg],
    'ME': Union[Variation_1045, Variation_1045_Arg],
    'MI': Union[Variation_1046, Variation_1046_Arg],
    'FOEFRI': Union[Variation_1047, Variation_1047_Arg],
})
Variation_1108_Arg_Group_3 = TypedDict('Variation_1108_Arg_Group_3', {
    'TYP': Union[Variation_1037, Variation_1037_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RDP': Union[Variation_1039, Variation_1039_Arg],
    'SPI': Union[Variation_1040, Variation_1040_Arg],
    'RAB': Union[Variation_1041, Variation_1041_Arg],
    'TST': Union[Variation_1042, Variation_1042_Arg],
    'ERR': Union[Variation_1043, Variation_1043_Arg],
    'XPP': Union[Variation_1044, Variation_1044_Arg],
    'ME': Union[Variation_1045, Variation_1045_Arg],
    'MI': Union[Variation_1046, Variation_1046_Arg],
    'FOEFRI': Union[Variation_1047, Variation_1047_Arg],
    'ADSB': Union[Variation_1101, Variation_1101_Arg],
    'SCN': Union[Variation_1104, Variation_1104_Arg],
    'PAI': Union[Variation_1107, Variation_1107_Arg],
})
Variation_1108_Arg : TypeAlias = Union[
    int,
    Variation_1108_Arg_Group_1,
    Tuple[int],
    Variation_1108_Arg_Group_2,
    Tuple[int,int],
    Variation_1108_Arg_Group_3,
    Tuple[int,int,int],
]
class Variation_1108(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('TYP', Variation_1037),
            ('SIM', Variation_1038),
            ('RDP', Variation_1039),
            ('SPI', Variation_1040),
            ('RAB', Variation_1041),
        ],
        [
            ('TST', Variation_1042),
            ('ERR', Variation_1043),
            ('XPP', Variation_1044),
            ('ME', Variation_1045),
            ('MI', Variation_1046),
            ('FOEFRI', Variation_1047),
        ],
        [
            ('ADSB', Variation_1101),
            ('SCN', Variation_1104),
            ('PAI', Variation_1107),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_1037, 0, 3),
        'SIM': ('', Variation_1038, 3, 1),
        'RDP': ('', Variation_1039, 4, 1),
        'SPI': ('', Variation_1040, 5, 1),
        'RAB': ('', Variation_1041, 6, 1),
        'TST': ('', Variation_1042, 0, 1),
        'ERR': ('', Variation_1043, 1, 1),
        'XPP': ('', Variation_1044, 2, 1),
        'ME': ('', Variation_1045, 3, 1),
        'MI': ('', Variation_1046, 4, 1),
        'FOEFRI': ('', Variation_1047, 5, 2),
        'ADSB': ('On-Site ADS-B Information', Variation_1101, 0, 2),
        'SCN': ('Surveillance Cluster Network Information', Variation_1104, 2, 2),
        'PAI': ('Passive Acquisition Interface Information', Variation_1107, 4, 2),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1037]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_1038]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDP']) -> Type[Variation_1039]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_1040]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_1041]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_1042]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ERR']) -> Type[Variation_1043]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XPP']) -> Type[Variation_1044]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_1045]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_1046]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FOEFRI']) -> Type[Variation_1047]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADSB']) -> Type[Variation_1101]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SCN']) -> Type[Variation_1104]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PAI']) -> Type[Variation_1107]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['SIM'], Literal['RDP'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['ERR'], Literal['XPP'], Literal['ME'], Literal['MI'], Literal['FOEFRI'], Literal['ADSB'], Literal['SCN'], Literal['PAI']]) -> Union[Type['Variation_1037'], Type['Variation_1038'], Type['Variation_1039'], Type['Variation_1040'], Type['Variation_1041'], Type['Variation_1042'], Type['Variation_1043'], Type['Variation_1044'], Type['Variation_1045'], Type['Variation_1046'], Type['Variation_1047'], Type['Variation_1101'], Type['Variation_1104'], Type['Variation_1107']]:
        if key == 'TYP':
            return Variation_1037
        if key == 'SIM':
            return Variation_1038
        if key == 'RDP':
            return Variation_1039
        if key == 'SPI':
            return Variation_1040
        if key == 'RAB':
            return Variation_1041
        if key == 'TST':
            return Variation_1042
        if key == 'ERR':
            return Variation_1043
        if key == 'XPP':
            return Variation_1044
        if key == 'ME':
            return Variation_1045
        if key == 'MI':
            return Variation_1046
        if key == 'FOEFRI':
            return Variation_1047
        if key == 'ADSB':
            return Variation_1101
        if key == 'SCN':
            return Variation_1104
        if key == 'PAI':
            return Variation_1107
        assert_never(key)

    def __init__(self, arg : Variation_1108_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1108_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1108_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_1108_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1037:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_1038:
        ...

    @overload
    def get_item(self, name : Literal['RDP']) -> Variation_1039:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_1040:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_1041:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_1042:
        ...

    @overload
    def get_item(self, name : Literal['ERR']) -> Variation_1043:
        ...

    @overload
    def get_item(self, name : Literal['XPP']) -> Variation_1044:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_1045:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_1046:
        ...

    @overload
    def get_item(self, name : Literal['FOEFRI']) -> Variation_1047:
        ...

    @overload
    def get_item(self, name : Literal['ADSB']) -> Variation_1101:
        ...

    @overload
    def get_item(self, name : Literal['SCN']) -> Variation_1104:
        ...

    @overload
    def get_item(self, name : Literal['PAI']) -> Variation_1107:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['SIM'], Literal['RDP'], Literal['SPI'], Literal['RAB'], Literal['TST'], Literal['ERR'], Literal['XPP'], Literal['ME'], Literal['MI'], Literal['FOEFRI'], Literal['ADSB'], Literal['SCN'], Literal['PAI']]) -> Any:
        return self._get_item(name)

Variation_1109_Arg : TypeAlias = Raw
class Variation_1109(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 7
    table = {
        0: 'Not defined; never used',
        1: 'Multipath Reply (Reflection)',
        2: 'Reply due to sidelobe interrogation/reception',
        3: 'Split plot',
        4: 'Second time around reply',
        5: 'Angel',
        6: 'Slow moving target correlated with road infrastructure (terrestrial vehicle)',
        7: 'Fixed PSR plot',
        8: 'Slow PSR target',
        9: 'Low quality PSR plot',
        10: 'Phantom SSR plot',
        11: 'Non-Matching Mode-3/A Code',
        12: 'Mode C code / Mode S altitude code abnormal value compared to the track',
        13: 'Target in Clutter Area',
        14: 'Maximum Doppler Response in Zero Filter',
        15: 'Transponder anomaly detected',
        16: 'Duplicated or Illegal Mode S Aircraft Address',
        17: 'Mode S error correction applied',
        18: 'Undecodable Mode C code / Mode S altitude code',
        19: 'Birds',
        20: 'Flock of Birds',
        21: 'Mode-1 was present in original reply',
        22: 'Mode-2 was present in original reply',
        23: 'Plot potentially caused by Wind Turbine',
        24: 'Helicopter',
        25: 'Maximum number of re-interrogations reached (surveillance information)',
        26: 'Maximum number of re-interrogations reached (BDS Extractions)',
        27: 'BDS Overlay Incoherence',
        28: 'Potential BDS Swap Detected',
        29: 'Track Update in the Zenithal Gap',
        30: 'Mode S Track re-acquired',
        31: 'Duplicated Mode 5 Pair NO/PIN detected',
        32: 'Wrong DF reply format detected',
        33: 'Transponder anomaly (MS XPD replies with Mode A/C to Mode A/C-only all-call)',
        34: 'Transponder anomaly (SI capability report wrong)',
        35: 'Potential IC Conflict',
        36: 'IC Conflict detection possible-no conflict currently detected',
    }

    def __init__(self, arg : Variation_1109_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1110_Arg_Group_1 = TypedDict('Variation_1110_Arg_Group_1', {
    'CODE': Union[Variation_1109, Variation_1109_Arg],
})
Variation_1110_Arg : TypeAlias = Union[
    int,
    Variation_1110_Arg_Group_1,
    Tuple[int],
]
class Variation_1110(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('CODE', Variation_1109),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CODE': ('', Variation_1109, 0, 7),
    }

    @classmethod
    def spec(cls, key : Union[Literal['CODE']]) -> Union[Type['Variation_1109']]:
        if key == 'CODE':
            return Variation_1109
        assert_never(key)

    def __init__(self, arg : Variation_1110_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1110_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['CODE']) -> Any:
        return self._get_item(name)

Variation_1111_Arg = TypedDict('Variation_1111_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_1108, Variation_1108_Arg],
    '040': Union[Variation_582, Variation_582_Arg],
    '070': Union[Variation_1049, Variation_1049_Arg],
    '090': Union[Variation_1051, Variation_1051_Arg],
    '130': Union[Variation_1054, Variation_1054_Arg],
    '220': Union[Variation_279, Variation_279_Arg],
    '240': Union[Variation_201, Variation_201_Arg],
    '250': Union[Variation_1056, Variation_1056_Arg],
    '161': Union[Variation_638, Variation_638_Arg],
    '042': Union[Variation_1057, Variation_1057_Arg],
    '200': Union[Variation_68, Variation_68_Arg],
    '170': Union[Variation_1066, Variation_1066_Arg],
    '210': Union[Variation_1070, Variation_1070_Arg],
    '030': Union[Variation_1110, Variation_1110_Arg],
    '080': Union[Variation_42, Variation_42_Arg],
    '100': Union[Variation_55, Variation_55_Arg],
    '110': Union[Variation_1074, Variation_1074_Arg],
    '120': Union[Variation_1082, Variation_1082_Arg],
    '230': Union[Variation_1086, Variation_1086_Arg],
    '260': Union[Variation_282, Variation_282_Arg],
    '055': Union[Variation_1088, Variation_1088_Arg],
    '050': Union[Variation_27, Variation_27_Arg],
    '065': Union[Variation_1093, Variation_1093_Arg],
    '060': Union[Variation_42, Variation_42_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1111(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('010', Variation_1),
        ('140', Variation_81),
        ('020', Variation_1108),
        ('040', Variation_582),
        ('070', Variation_1049),
        ('090', Variation_1051),
        ('130', Variation_1054),
        ('220', Variation_279),
        ('240', Variation_201),
        ('250', Variation_1056),
        ('161', Variation_638),
        ('042', Variation_1057),
        ('200', Variation_68),
        ('170', Variation_1066),
        ('210', Variation_1070),
        ('030', Variation_1110),
        ('080', Variation_42),
        ('100', Variation_55),
        ('110', Variation_1074),
        ('120', Variation_1082),
        ('230', Variation_1086),
        ('260', Variation_282),
        ('055', Variation_1088),
        ('050', Variation_27),
        ('065', Variation_1093),
        ('060', Variation_42),
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80000000),
        '140': (Variation_81, 0x40000000),
        '020': (Variation_1108, 0x20000000),
        '040': (Variation_582, 0x10000000),
        '070': (Variation_1049, 0x08000000),
        '090': (Variation_1051, 0x04000000),
        '130': (Variation_1054, 0x02000000),
        '220': (Variation_279, 0x01800000),
        '240': (Variation_201, 0x01400000),
        '250': (Variation_1056, 0x01200000),
        '161': (Variation_638, 0x01100000),
        '042': (Variation_1057, 0x01080000),
        '200': (Variation_68, 0x01040000),
        '170': (Variation_1066, 0x01020000),
        '210': (Variation_1070, 0x01018000),
        '030': (Variation_1110, 0x01014000),
        '080': (Variation_42, 0x01012000),
        '100': (Variation_55, 0x01011000),
        '110': (Variation_1074, 0x01010800),
        '120': (Variation_1082, 0x01010400),
        '230': (Variation_1086, 0x01010200),
        '260': (Variation_282, 0x01010180),
        '055': (Variation_1088, 0x01010140),
        '050': (Variation_27, 0x01010120),
        '065': (Variation_1093, 0x01010110),
        '060': (Variation_42, 0x01010108),
        'SP': (Variation_62, 0x01010104),
        'RE': (Variation_62, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_1108]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_582]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1049]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1051]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_1054]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['240']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['250']) -> Type[Variation_1056]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['161']) -> Type[Variation_638]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['042']) -> Type[Variation_1057]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_68]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['170']) -> Type[Variation_1066]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_1070]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_1110]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_55]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1074]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1082]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['230']) -> Type[Variation_1086]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['260']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['055']) -> Type[Variation_1088]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_27]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['065']) -> Type[Variation_1093]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_42]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['140'], Literal['020'], Literal['040'], Literal['070'], Literal['090'], Literal['130'], Literal['220'], Literal['240'], Literal['250'], Literal['161'], Literal['042'], Literal['200'], Literal['170'], Literal['210'], Literal['030'], Literal['080'], Literal['100'], Literal['110'], Literal['120'], Literal['230'], Literal['260'], Literal['055'], Literal['050'], Literal['065'], Literal['060'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_81'], Type['Variation_1108'], Type['Variation_582'], Type['Variation_1049'], Type['Variation_1051'], Type['Variation_1054'], Type['Variation_279'], Type['Variation_201'], Type['Variation_1056'], Type['Variation_638'], Type['Variation_1057'], Type['Variation_68'], Type['Variation_1066'], Type['Variation_1070'], Type['Variation_1110'], Type['Variation_42'], Type['Variation_55'], Type['Variation_1074'], Type['Variation_1082'], Type['Variation_1086'], Type['Variation_282'], Type['Variation_1088'], Type['Variation_27'], Type['Variation_1093'], Type['Variation_42'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '140':
            return Variation_81
        if key == '020':
            return Variation_1108
        if key == '040':
            return Variation_582
        if key == '070':
            return Variation_1049
        if key == '090':
            return Variation_1051
        if key == '130':
            return Variation_1054
        if key == '220':
            return Variation_279
        if key == '240':
            return Variation_201
        if key == '250':
            return Variation_1056
        if key == '161':
            return Variation_638
        if key == '042':
            return Variation_1057
        if key == '200':
            return Variation_68
        if key == '170':
            return Variation_1066
        if key == '210':
            return Variation_1070
        if key == '030':
            return Variation_1110
        if key == '080':
            return Variation_42
        if key == '100':
            return Variation_55
        if key == '110':
            return Variation_1074
        if key == '120':
            return Variation_1082
        if key == '230':
            return Variation_1086
        if key == '260':
            return Variation_282
        if key == '055':
            return Variation_1088
        if key == '050':
            return Variation_27
        if key == '065':
            return Variation_1093
        if key == '060':
            return Variation_42
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1111_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_1108, Variation_1108_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_582, Variation_582_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1049, Variation_1049_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1051, Variation_1051_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_1054, Variation_1054_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['240'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['250'], val : Union[Variation_1056, Variation_1056_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['161'], val : Union[Variation_638, Variation_638_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['042'], val : Union[Variation_1057, Variation_1057_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_68, Variation_68_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['170'], val : Union[Variation_1066, Variation_1066_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_1070, Variation_1070_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_1110, Variation_1110_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_55, Variation_55_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1074, Variation_1074_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1082, Variation_1082_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['230'], val : Union[Variation_1086, Variation_1086_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['260'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['055'], val : Union[Variation_1088, Variation_1088_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_27, Variation_27_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['065'], val : Union[Variation_1093, Variation_1093_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_42, Variation_42_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1111':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1111':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['240']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['250']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['161']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['042']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['170']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['230']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['260']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['055']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['065']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1111':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1111':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_1108:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_582:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1049:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1051:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_1054:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['240']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['250']) -> Variation_1056:
        ...

    @overload
    def get_item(self, name : Literal['161']) -> Variation_638:
        ...

    @overload
    def get_item(self, name : Literal['042']) -> Variation_1057:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_68:
        ...

    @overload
    def get_item(self, name : Literal['170']) -> Variation_1066:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_1070:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_1110:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_55:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1074:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1082:
        ...

    @overload
    def get_item(self, name : Literal['230']) -> Variation_1086:
        ...

    @overload
    def get_item(self, name : Literal['260']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['055']) -> Variation_1088:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_27:
        ...

    @overload
    def get_item(self, name : Literal['065']) -> Variation_1093:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_42:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1112_Arg : TypeAlias = Raw
class Variation_1112(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 4
    table = {
        0: 'No detection',
        1: 'Single PSR detection',
        2: 'Single SSR detection',
        3: 'SSR+PSR detection',
        4: 'Single Mode S All-Call',
        5: 'Single Mode S Roll-Call',
        6: 'Mode S All-Call + PSR',
        7: 'Mode S Roll-Call + PSR',
        8: 'ADS-B',
        9: 'WAM',
    }

    def __init__(self, arg : Variation_1112_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1113_Arg_Group = TypedDict('Variation_1113_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
    'TYP': Union[Variation_1112, Variation_1112_Arg],
    'LTN': Union[Variation_64, Variation_64_Arg],
})
Variation_1113_Arg : TypeAlias = Union[Raw, Variation_1113_Arg_Group]
class Variation_1113(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
        Spare(0, 4),
        ('TYP', Variation_1112),
        ('LTN', Variation_64),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('System Area Code', Variation_0, 0, 8),
        'SIC': ('System Identification Code', Variation_0, 8, 8),
        'TYP': ('', Variation_1112, 20, 4),
        'LTN': ('Local Track Number', Variation_64, 24, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1112]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LTN']) -> Type[Variation_64]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC'], Literal['TYP'], Literal['LTN']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_1112'], Type['Variation_64']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        if key == 'TYP':
            return Variation_1112
        if key == 'LTN':
            return Variation_64
        assert_never(key)

    def __init__(self, arg : Variation_1113_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1112:
        ...

    @overload
    def get_item(self, name : Literal['LTN']) -> Variation_64:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC'], Literal['TYP'], Literal['LTN']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1113':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1113':
        ...

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1112, Variation_1112_Arg]) -> 'Variation_1113':
        ...

    @overload
    def set_item(self, name : Literal['LTN'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_1113':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1114_Arg : TypeAlias = List[Union[Variation_1113, Variation_1113_Arg]]
class Variation_1114(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 40
    variation_type = Variation_1113

    @classmethod
    def spec(cls) -> Type[Variation_1113]:
        return Variation_1113

    def __init__(self, arg : List[Union[Variation_1113, Variation_1113_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1115_Arg_Group = TypedDict('Variation_1115_Arg_Group', {
    'SAC': Union[Variation_0, Variation_0_Arg],
    'SIC': Union[Variation_0, Variation_0_Arg],
    'TYP': Union[Variation_1112, Variation_1112_Arg],
})
Variation_1115_Arg : TypeAlias = Union[Raw, Variation_1115_Arg_Group]
class Variation_1115(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('SAC', Variation_0),
        ('SIC', Variation_0),
        Spare(0, 4),
        ('TYP', Variation_1112),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAC': ('System Area Code', Variation_0, 0, 8),
        'SIC': ('System Identification Code', Variation_0, 8, 8),
        'TYP': ('', Variation_1112, 20, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIC']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1112]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAC'], Literal['SIC'], Literal['TYP']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_1112']]:
        if key == 'SAC':
            return Variation_0
        if key == 'SIC':
            return Variation_0
        if key == 'TYP':
            return Variation_1112
        assert_never(key)

    def __init__(self, arg : Variation_1115_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SIC']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1112:
        ...

    def get_item(self, name : Union[Literal['SAC'], Literal['SIC'], Literal['TYP']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1115':
        ...

    @overload
    def set_item(self, name : Literal['SIC'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1115':
        ...

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1112, Variation_1112_Arg]) -> 'Variation_1115':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1116_Arg : TypeAlias = List[Union[Variation_1115, Variation_1115_Arg]]
class Variation_1116(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_1115

    @classmethod
    def spec(cls) -> Type[Variation_1115]:
        return Variation_1115

    def __init__(self, arg : List[Union[Variation_1115, Variation_1115_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1117_Arg : TypeAlias = Raw
class Variation_1117(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Flight plan data from active FDPS',
        1: 'Flight plan data retained from no longer active FDPS',
    }

    def __init__(self, arg : Variation_1117_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1118_Arg_Group_1 = TypedDict('Variation_1118_Arg_Group_1', {
    'FDR': Union[Variation_1117, Variation_1117_Arg],
})
Variation_1118_Arg : TypeAlias = Union[
    int,
    Variation_1118_Arg_Group_1,
    Tuple[int],
]
class Variation_1118(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('FDR', Variation_1117),
            Spare(1, 6),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'FDR': ('Flight Data Retained', Variation_1117, 0, 1),
    }

    @classmethod
    def spec(cls, key : Union[Literal['FDR']]) -> Union[Type['Variation_1117']]:
        if key == 'FDR':
            return Variation_1117
        assert_never(key)

    def __init__(self, arg : Variation_1118_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1118_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    def get_item(self, name : Literal['FDR']) -> Any:
        return self._get_item(name)

Variation_1119_Arg = TypedDict('Variation_1119_Arg', {
    'CST': Union[Variation_1114, Variation_1114_Arg],
    'CSN': Union[Variation_1116, Variation_1116_Arg],
    'TVS': Union[Variation_646, Variation_646_Arg],
    'STS': Union[Variation_1118, Variation_1118_Arg],
}, total=False)
class Variation_1119(Compound):
    variation = 'Compound'

    fspec_fx = False
    fspec_max_bytes = 1

    subitems_list = [
        ('CST', Variation_1114),
        ('CSN', Variation_1116),
        ('TVS', Variation_646),
        ('STS', Variation_1118),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'CST': (Variation_1114, 0x80),
        'CSN': (Variation_1116, 0x40),
        'TVS': (Variation_646, 0x20),
        'STS': (Variation_1118, 0x10),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_1114]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CSN']) -> Type[Variation_1116]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TVS']) -> Type[Variation_646]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STS']) -> Type[Variation_1118]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CST'], Literal['CSN'], Literal['TVS'], Literal['STS']]) -> Union[Type['Variation_1114'], Type['Variation_1116'], Type['Variation_646'], Type['Variation_1118']]:
        if key == 'CST':
            return Variation_1114
        if key == 'CSN':
            return Variation_1116
        if key == 'TVS':
            return Variation_646
        if key == 'STS':
            return Variation_1118
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1119_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['CST'], val : Union[Variation_1114, Variation_1114_Arg]) -> 'Variation_1119':
        ...

    @overload
    def set_item(self, name : Literal['CSN'], val : Union[Variation_1116, Variation_1116_Arg]) -> 'Variation_1119':
        ...

    @overload
    def set_item(self, name : Literal['TVS'], val : Union[Variation_646, Variation_646_Arg]) -> 'Variation_1119':
        ...

    @overload
    def set_item(self, name : Literal['STS'], val : Union[Variation_1118, Variation_1118_Arg]) -> 'Variation_1119':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['CST']) -> 'Variation_1119':
        ...

    @overload
    def del_item(self, name : Literal['CSN']) -> 'Variation_1119':
        ...

    @overload
    def del_item(self, name : Literal['TVS']) -> 'Variation_1119':
        ...

    @overload
    def del_item(self, name : Literal['STS']) -> 'Variation_1119':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_1114:
        ...

    @overload
    def get_item(self, name : Literal['CSN']) -> Variation_1116:
        ...

    @overload
    def get_item(self, name : Literal['TVS']) -> Variation_646:
        ...

    @overload
    def get_item(self, name : Literal['STS']) -> Variation_1118:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1120_Arg_Group = TypedDict('Variation_1120_Arg_Group', {
    'X': Union[Variation_154, Variation_154_Arg],
    'Y': Union[Variation_154, Variation_154_Arg],
})
Variation_1120_Arg : TypeAlias = Union[Raw, Variation_1120_Arg_Group]
class Variation_1120(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('X', Variation_154),
        ('Y', Variation_154),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('X Coordinate', Variation_154, 0, 24),
        'Y': ('Y Coordinate', Variation_154, 24, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_154]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_154'], Type['Variation_154']]:
        if key == 'X':
            return Variation_154
        if key == 'Y':
            return Variation_154
        assert_never(key)

    def __init__(self, arg : Variation_1120_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_154:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_154:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_1120':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_154, Variation_154_Arg]) -> 'Variation_1120':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1121_Arg_Group = TypedDict('Variation_1121_Arg_Group', {
    'VX': Union[Variation_315, Variation_315_Arg],
    'VY': Union[Variation_315, Variation_315_Arg],
})
Variation_1121_Arg : TypeAlias = Union[Raw, Variation_1121_Arg_Group]
class Variation_1121(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('VX', Variation_315),
        ('VY', Variation_315),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VX': ('Velocity (X-component)', Variation_315, 0, 16),
        'VY': ('Velocity (Y-component)', Variation_315, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VX']) -> Type[Variation_315]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VY']) -> Type[Variation_315]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VX'], Literal['VY']]) -> Union[Type['Variation_315'], Type['Variation_315']]:
        if key == 'VX':
            return Variation_315
        if key == 'VY':
            return Variation_315
        assert_never(key)

    def __init__(self, arg : Variation_1121_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VX']) -> Variation_315:
        ...

    @overload
    def get_item(self, name : Literal['VY']) -> Variation_315:
        ...

    def get_item(self, name : Union[Literal['VX'], Literal['VY']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VX'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_1121':
        ...

    @overload
    def set_item(self, name : Literal['VY'], val : Union[Variation_315, Variation_315_Arg]) -> 'Variation_1121':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1122_Arg : TypeAlias = Raw
class Variation_1122(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'No change',
        1: 'Mode 3/A has changed',
    }

    def __init__(self, arg : Variation_1122_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1123_Arg_Group = TypedDict('Variation_1123_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'CH': Union[Variation_1122, Variation_1122_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_1123_Arg : TypeAlias = Union[Raw, Variation_1123_Arg_Group]
class Variation_1123(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('CH', Variation_1122),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'CH': ('Change in Mode 3/A', Variation_1122, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CH']) -> Type[Variation_1122]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['CH'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_1122'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'CH':
            return Variation_1122
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1123_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['CH']) -> Variation_1122:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['CH'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1123':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1123':
        ...

    @overload
    def set_item(self, name : Literal['CH'], val : Union[Variation_1122, Variation_1122_Arg]) -> 'Variation_1123':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1123':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1124_Arg : TypeAlias = Raw
class Variation_1124(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Callsign or registration downlinked from target',
        1: 'Callsign not downlinked from target',
        2: 'Registration not downlinked from target',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_1124_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1125_Arg_Group = TypedDict('Variation_1125_Arg_Group', {
    'STI': Union[Variation_1124, Variation_1124_Arg],
    'CHR': Union[Variation_201, Variation_201_Arg],
})
Variation_1125_Arg : TypeAlias = Union[Raw, Variation_1125_Arg_Group]
class Variation_1125(Group):
    variation = 'Group'

    bit_size = 56

    subitems_list = [
        ('STI', Variation_1124),
        Spare(2, 6),
        ('CHR', Variation_201),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STI': ('', Variation_1124, 0, 2),
        'CHR': ('Characters 1-8 (Coded on 6 Bits Each) Defining Target Identification', Variation_201, 8, 48),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STI']) -> Type[Variation_1124]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CHR']) -> Type[Variation_201]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STI'], Literal['CHR']]) -> Union[Type['Variation_1124'], Type['Variation_201']]:
        if key == 'STI':
            return Variation_1124
        if key == 'CHR':
            return Variation_201
        assert_never(key)

    def __init__(self, arg : Variation_1125_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STI']) -> Variation_1124:
        ...

    @overload
    def get_item(self, name : Literal['CHR']) -> Variation_201:
        ...

    def get_item(self, name : Union[Literal['STI'], Literal['CHR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STI'], val : Union[Variation_1124, Variation_1124_Arg]) -> 'Variation_1125':
        ...

    @overload
    def set_item(self, name : Literal['CHR'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1125':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1126_Arg : TypeAlias = Raw
class Variation_1126(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Air Speed = IAS, LSB (Bit-1) = 2^-14 NM/s',
        1: 'Air Speed = Mach, LSB (Bit-1) = 0.001',
    }

    def __init__(self, arg : Variation_1126_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1127_Arg_Group = TypedDict('Variation_1127_Arg_Group', {
    'IM': Union[Variation_1126, Variation_1126_Arg],
    'IAS': Union[Variation_338, Variation_338_Arg],
})
Variation_1127_Arg : TypeAlias = Union[Raw, Variation_1127_Arg_Group]
class Variation_1127(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('IM', Variation_1126),
        ('IAS', Variation_338),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'IM': ('', Variation_1126, 0, 1),
        'IAS': ('', Variation_338, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['IM']) -> Type[Variation_1126]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAS']) -> Type[Variation_338]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['IM'], Literal['IAS']]) -> Union[Type['Variation_1126'], Type['Variation_338']]:
        if key == 'IM':
            return Variation_1126
        if key == 'IAS':
            return Variation_338
        assert_never(key)

    def __init__(self, arg : Variation_1127_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['IM']) -> Variation_1126:
        ...

    @overload
    def get_item(self, name : Literal['IAS']) -> Variation_338:
        ...

    def get_item(self, name : Union[Literal['IM'], Literal['IAS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['IM'], val : Union[Variation_1126, Variation_1126_Arg]) -> 'Variation_1127':
        ...

    @overload
    def set_item(self, name : Literal['IAS'], val : Union[Variation_338, Variation_338_Arg]) -> 'Variation_1127':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1128_Arg : TypeAlias = Raw
class Variation_1128(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No source information provided',
        1: 'Source information provided',
    }

    def __init__(self, arg : Variation_1128_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1129_Arg : TypeAlias = Raw
class Variation_1129(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Aircraft altitude',
        2: 'FCU/MCP selected altitude',
        3: 'FMS selected altitude',
    }

    def __init__(self, arg : Variation_1129_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1130_Arg_Group = TypedDict('Variation_1130_Arg_Group', {
    'SAS': Union[Variation_1128, Variation_1128_Arg],
    'SRC': Union[Variation_1129, Variation_1129_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_1130_Arg : TypeAlias = Union[Raw, Variation_1130_Arg_Group]
class Variation_1130(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('SAS', Variation_1128),
        ('SRC', Variation_1129),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SAS': ('', Variation_1128, 0, 1),
        'SRC': ('', Variation_1129, 1, 2),
        'ALT': ('Altitude in Two\'s Complement Form', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SAS']) -> Type[Variation_1128]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_1129]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SAS'], Literal['SRC'], Literal['ALT']]) -> Union[Type['Variation_1128'], Type['Variation_1129'], Type['Variation_721']]:
        if key == 'SAS':
            return Variation_1128
        if key == 'SRC':
            return Variation_1129
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_1130_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SAS']) -> Variation_1128:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_1129:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['SAS'], Literal['SRC'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SAS'], val : Union[Variation_1128, Variation_1128_Arg]) -> 'Variation_1130':
        ...

    @overload
    def set_item(self, name : Literal['SRC'], val : Union[Variation_1129, Variation_1129_Arg]) -> 'Variation_1130':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_1130':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1131_Arg_Group = TypedDict('Variation_1131_Arg_Group', {
    'MV': Union[Variation_723, Variation_723_Arg],
    'AH': Union[Variation_724, Variation_724_Arg],
    'AM': Union[Variation_725, Variation_725_Arg],
    'ALT': Union[Variation_721, Variation_721_Arg],
})
Variation_1131_Arg : TypeAlias = Union[Raw, Variation_1131_Arg_Group]
class Variation_1131(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('MV', Variation_723),
        ('AH', Variation_724),
        ('AM', Variation_725),
        ('ALT', Variation_721),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MV': ('Manage Vertical Mode', Variation_723, 0, 1),
        'AH': ('Altitude Hold', Variation_724, 1, 1),
        'AM': ('Approach Mode', Variation_725, 2, 1),
        'ALT': ('Altitude in Two\'s Complement Form', Variation_721, 3, 13),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MV']) -> Type[Variation_723]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AH']) -> Type[Variation_724]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AM']) -> Type[Variation_725]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_721]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Union[Type['Variation_723'], Type['Variation_724'], Type['Variation_725'], Type['Variation_721']]:
        if key == 'MV':
            return Variation_723
        if key == 'AH':
            return Variation_724
        if key == 'AM':
            return Variation_725
        if key == 'ALT':
            return Variation_721
        assert_never(key)

    def __init__(self, arg : Variation_1131_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MV']) -> Variation_723:
        ...

    @overload
    def get_item(self, name : Literal['AH']) -> Variation_724:
        ...

    @overload
    def get_item(self, name : Literal['AM']) -> Variation_725:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_721:
        ...

    def get_item(self, name : Union[Literal['MV'], Literal['AH'], Literal['AM'], Literal['ALT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['MV'], val : Union[Variation_723, Variation_723_Arg]) -> 'Variation_1131':
        ...

    @overload
    def set_item(self, name : Literal['AH'], val : Union[Variation_724, Variation_724_Arg]) -> 'Variation_1131':
        ...

    @overload
    def set_item(self, name : Literal['AM'], val : Union[Variation_725, Variation_725_Arg]) -> 'Variation_1131':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_721, Variation_721_Arg]) -> 'Variation_1131':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1132_Arg : TypeAlias = Raw
class Variation_1132(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Trajectory intent data is available for this aircraft',
        1: 'Trajectory intent data is not available for this aircraft',
    }

    def __init__(self, arg : Variation_1132_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1133_Arg : TypeAlias = Raw
class Variation_1133(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Trajectory intent data is valid',
        1: 'Trajectory intent data is not valid',
    }

    def __init__(self, arg : Variation_1133_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1134_Arg_Group_1 = TypedDict('Variation_1134_Arg_Group_1', {
    'NAV': Union[Variation_1132, Variation_1132_Arg],
    'NVB': Union[Variation_1133, Variation_1133_Arg],
})
Variation_1134_Arg : TypeAlias = Union[
    int,
    Variation_1134_Arg_Group_1,
    Tuple[int],
]
class Variation_1134(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
    ]

    subitems_list = [
        [
            ('NAV', Variation_1132),
            ('NVB', Variation_1133),
            Spare(2, 5),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NAV': ('TID Available', Variation_1132, 0, 1),
        'NVB': ('TID Valid', Variation_1133, 1, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NAV']) -> Type[Variation_1132]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NVB']) -> Type[Variation_1133]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NAV'], Literal['NVB']]) -> Union[Type['Variation_1132'], Type['Variation_1133']]:
        if key == 'NAV':
            return Variation_1132
        if key == 'NVB':
            return Variation_1133
        assert_never(key)

    def __init__(self, arg : Variation_1134_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1134_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NAV']) -> Variation_1132:
        ...

    @overload
    def get_item(self, name : Literal['NVB']) -> Variation_1133:
        ...

    def get_item(self, name : Union[Literal['NAV'], Literal['NVB']]) -> Any:
        return self._get_item(name)

Variation_1135_Arg_Group = TypedDict('Variation_1135_Arg_Group', {
    'TCA': Union[Variation_730, Variation_730_Arg],
    'NC': Union[Variation_731, Variation_731_Arg],
    'TCPN': Union[Variation_377, Variation_377_Arg],
    'ALT': Union[Variation_732, Variation_732_Arg],
    'LAT': Union[Variation_691, Variation_691_Arg],
    'LON': Union[Variation_691, Variation_691_Arg],
    'PT': Union[Variation_733, Variation_733_Arg],
    'TD': Union[Variation_734, Variation_734_Arg],
    'TRA': Union[Variation_735, Variation_735_Arg],
    'TOA': Union[Variation_736, Variation_736_Arg],
    'TOV': Union[Variation_737, Variation_737_Arg],
    'TTR': Union[Variation_738, Variation_738_Arg],
})
Variation_1135_Arg : TypeAlias = Union[Raw, Variation_1135_Arg_Group]
class Variation_1135(Group):
    variation = 'Group'

    bit_size = 120

    subitems_list = [
        ('TCA', Variation_730),
        ('NC', Variation_731),
        ('TCPN', Variation_377),
        ('ALT', Variation_732),
        ('LAT', Variation_691),
        ('LON', Variation_691),
        ('PT', Variation_733),
        ('TD', Variation_734),
        ('TRA', Variation_735),
        ('TOA', Variation_736),
        ('TOV', Variation_737),
        ('TTR', Variation_738),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TCA': ('TCP Number Availability', Variation_730, 0, 1),
        'NC': ('TCP Compliance', Variation_731, 1, 1),
        'TCPN': ('Trajectory Change Point Number', Variation_377, 2, 6),
        'ALT': ('Altitude in Two\'s Complement Form', Variation_732, 8, 16),
        'LAT': ('Latitude in WGS.84 in Two\'s Complement', Variation_691, 24, 24),
        'LON': ('Longitude in WGS.84 in Two\'s Complement', Variation_691, 48, 24),
        'PT': ('Point Type', Variation_733, 72, 4),
        'TD': ('Turn Direction', Variation_734, 76, 2),
        'TRA': ('Turn Radius Availability', Variation_735, 78, 1),
        'TOA': ('TOV Available', Variation_736, 79, 1),
        'TOV': ('Time Over Point', Variation_737, 80, 24),
        'TTR': ('TCP Turn Radius', Variation_738, 104, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TCA']) -> Type[Variation_730]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NC']) -> Type[Variation_731]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TCPN']) -> Type[Variation_377]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ALT']) -> Type[Variation_732]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PT']) -> Type[Variation_733]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TD']) -> Type[Variation_734]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRA']) -> Type[Variation_735]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOA']) -> Type[Variation_736]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOV']) -> Type[Variation_737]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TTR']) -> Type[Variation_738]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TCA'], Literal['NC'], Literal['TCPN'], Literal['ALT'], Literal['LAT'], Literal['LON'], Literal['PT'], Literal['TD'], Literal['TRA'], Literal['TOA'], Literal['TOV'], Literal['TTR']]) -> Union[Type['Variation_730'], Type['Variation_731'], Type['Variation_377'], Type['Variation_732'], Type['Variation_691'], Type['Variation_691'], Type['Variation_733'], Type['Variation_734'], Type['Variation_735'], Type['Variation_736'], Type['Variation_737'], Type['Variation_738']]:
        if key == 'TCA':
            return Variation_730
        if key == 'NC':
            return Variation_731
        if key == 'TCPN':
            return Variation_377
        if key == 'ALT':
            return Variation_732
        if key == 'LAT':
            return Variation_691
        if key == 'LON':
            return Variation_691
        if key == 'PT':
            return Variation_733
        if key == 'TD':
            return Variation_734
        if key == 'TRA':
            return Variation_735
        if key == 'TOA':
            return Variation_736
        if key == 'TOV':
            return Variation_737
        if key == 'TTR':
            return Variation_738
        assert_never(key)

    def __init__(self, arg : Variation_1135_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TCA']) -> Variation_730:
        ...

    @overload
    def get_item(self, name : Literal['NC']) -> Variation_731:
        ...

    @overload
    def get_item(self, name : Literal['TCPN']) -> Variation_377:
        ...

    @overload
    def get_item(self, name : Literal['ALT']) -> Variation_732:
        ...

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['PT']) -> Variation_733:
        ...

    @overload
    def get_item(self, name : Literal['TD']) -> Variation_734:
        ...

    @overload
    def get_item(self, name : Literal['TRA']) -> Variation_735:
        ...

    @overload
    def get_item(self, name : Literal['TOA']) -> Variation_736:
        ...

    @overload
    def get_item(self, name : Literal['TOV']) -> Variation_737:
        ...

    @overload
    def get_item(self, name : Literal['TTR']) -> Variation_738:
        ...

    def get_item(self, name : Union[Literal['TCA'], Literal['NC'], Literal['TCPN'], Literal['ALT'], Literal['LAT'], Literal['LON'], Literal['PT'], Literal['TD'], Literal['TRA'], Literal['TOA'], Literal['TOV'], Literal['TTR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TCA'], val : Union[Variation_730, Variation_730_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['NC'], val : Union[Variation_731, Variation_731_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TCPN'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['ALT'], val : Union[Variation_732, Variation_732_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['PT'], val : Union[Variation_733, Variation_733_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TD'], val : Union[Variation_734, Variation_734_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TRA'], val : Union[Variation_735, Variation_735_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TOA'], val : Union[Variation_736, Variation_736_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TOV'], val : Union[Variation_737, Variation_737_Arg]) -> 'Variation_1135':
        ...

    @overload
    def set_item(self, name : Literal['TTR'], val : Union[Variation_738, Variation_738_Arg]) -> 'Variation_1135':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1136_Arg : TypeAlias = List[Union[Variation_1135, Variation_1135_Arg]]
class Variation_1136(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 120
    variation_type = Variation_1135

    @classmethod
    def spec(cls) -> Type[Variation_1135]:
        return Variation_1135

    def __init__(self, arg : List[Union[Variation_1135, Variation_1135_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1137_Arg : TypeAlias = Raw
class Variation_1137(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
    }

    def __init__(self, arg : Variation_1137_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1138_Arg_Group = TypedDict('Variation_1138_Arg_Group', {
    'COM': Union[Variation_323, Variation_323_Arg],
    'STAT': Union[Variation_1137, Variation_1137_Arg],
    'SSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
})
Variation_1138_Arg : TypeAlias = Union[Raw, Variation_1138_Arg_Group]
class Variation_1138(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('COM', Variation_323),
        ('STAT', Variation_1137),
        Spare(6, 2),
        ('SSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_323, 0, 3),
        'STAT': ('Flight Status', Variation_1137, 3, 3),
        'SSC': ('Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS BDS 1,0 Bits 37/40', Variation_283, 12, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_323]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_1137]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Union[Type['Variation_323'], Type['Variation_1137'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283']]:
        if key == 'COM':
            return Variation_323
        if key == 'STAT':
            return Variation_1137
        if key == 'SSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_1138_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_323:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_1137:
        ...

    @overload
    def get_item(self, name : Literal['SSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_323, Variation_323_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_1137, Variation_1137_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['SSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_1138':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_1138':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1139_Arg : TypeAlias = Raw
class Variation_1139(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'ACAS not operational',
        2: 'ACAS operational',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_1139_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1140_Arg : TypeAlias = Raw
class Variation_1140(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Multiple navigational aids not operating',
        2: 'Multiple navigational aids operating',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_1140_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1141_Arg : TypeAlias = Raw
class Variation_1141(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Unknown',
        1: 'Differential correction',
        2: 'No differential correction',
        3: 'Invalid',
    }

    def __init__(self, arg : Variation_1141_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1142_Arg : TypeAlias = Raw
class Variation_1142(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Transponder ground bit not set or unknown',
        1: 'Transponder Ground Bit set',
    }

    def __init__(self, arg : Variation_1142_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1143_Arg : TypeAlias = Raw
class Variation_1143(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 3
    table = {
        0: 'No emergency',
        1: 'General emergency',
        2: 'Lifeguard / medical',
        3: 'Minimum fuel',
        4: 'No communications',
        5: 'Unlawful interference',
        6: 'Downed Aircraft',
        7: 'Unknown',
    }

    def __init__(self, arg : Variation_1143_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1144_Arg_Group = TypedDict('Variation_1144_Arg_Group', {
    'AC': Union[Variation_1139, Variation_1139_Arg],
    'MN': Union[Variation_1140, Variation_1140_Arg],
    'DC': Union[Variation_1141, Variation_1141_Arg],
    'GBS': Union[Variation_1142, Variation_1142_Arg],
    'STAT': Union[Variation_1143, Variation_1143_Arg],
})
Variation_1144_Arg : TypeAlias = Union[Raw, Variation_1144_Arg_Group]
class Variation_1144(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('AC', Variation_1139),
        ('MN', Variation_1140),
        ('DC', Variation_1141),
        ('GBS', Variation_1142),
        Spare(7, 6),
        ('STAT', Variation_1143),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'AC': ('ACAS Status', Variation_1139, 0, 2),
        'MN': ('Multiple Navigational Aids Status', Variation_1140, 2, 2),
        'DC': ('Differential Correction Status', Variation_1141, 4, 2),
        'GBS': ('Ground Bit Set', Variation_1142, 6, 1),
        'STAT': ('Flight Status', Variation_1143, 13, 3),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['AC']) -> Type[Variation_1139]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MN']) -> Type[Variation_1140]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DC']) -> Type[Variation_1141]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GBS']) -> Type[Variation_1142]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_1143]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['AC'], Literal['MN'], Literal['DC'], Literal['GBS'], Literal['STAT']]) -> Union[Type['Variation_1139'], Type['Variation_1140'], Type['Variation_1141'], Type['Variation_1142'], Type['Variation_1143']]:
        if key == 'AC':
            return Variation_1139
        if key == 'MN':
            return Variation_1140
        if key == 'DC':
            return Variation_1141
        if key == 'GBS':
            return Variation_1142
        if key == 'STAT':
            return Variation_1143
        assert_never(key)

    def __init__(self, arg : Variation_1144_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['AC']) -> Variation_1139:
        ...

    @overload
    def get_item(self, name : Literal['MN']) -> Variation_1140:
        ...

    @overload
    def get_item(self, name : Literal['DC']) -> Variation_1141:
        ...

    @overload
    def get_item(self, name : Literal['GBS']) -> Variation_1142:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_1143:
        ...

    def get_item(self, name : Union[Literal['AC'], Literal['MN'], Literal['DC'], Literal['GBS'], Literal['STAT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['AC'], val : Union[Variation_1139, Variation_1139_Arg]) -> 'Variation_1144':
        ...

    @overload
    def set_item(self, name : Literal['MN'], val : Union[Variation_1140, Variation_1140_Arg]) -> 'Variation_1144':
        ...

    @overload
    def set_item(self, name : Literal['DC'], val : Union[Variation_1141, Variation_1141_Arg]) -> 'Variation_1144':
        ...

    @overload
    def set_item(self, name : Literal['GBS'], val : Union[Variation_1142, Variation_1142_Arg]) -> 'Variation_1144':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_1143, Variation_1143_Arg]) -> 'Variation_1144':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1145_Arg_Group = TypedDict('Variation_1145_Arg_Group', {
    'TI': Union[Variation_710, Variation_710_Arg],
    'ROT': Union[Variation_711, Variation_711_Arg],
})
Variation_1145_Arg : TypeAlias = Union[Raw, Variation_1145_Arg_Group]
class Variation_1145(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('TI', Variation_710),
        Spare(2, 6),
        ('ROT', Variation_711),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TI': ('Turn Indicator', Variation_710, 0, 2),
        'ROT': ('Rate of Turn in Two\'s Complement Form', Variation_711, 8, 7),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TI']) -> Type[Variation_710]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ROT']) -> Type[Variation_711]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TI'], Literal['ROT']]) -> Union[Type['Variation_710'], Type['Variation_711']]:
        if key == 'TI':
            return Variation_710
        if key == 'ROT':
            return Variation_711
        assert_never(key)

    def __init__(self, arg : Variation_1145_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TI']) -> Variation_710:
        ...

    @overload
    def get_item(self, name : Literal['ROT']) -> Variation_711:
        ...

    def get_item(self, name : Union[Literal['TI'], Literal['ROT']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TI'], val : Union[Variation_710, Variation_710_Arg]) -> 'Variation_1145':
        ...

    @overload
    def set_item(self, name : Literal['ROT'], val : Union[Variation_711, Variation_711_Arg]) -> 'Variation_1145':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1146_Arg : TypeAlias = Raw
class Variation_1146(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Not valid Wind Speed',
        1: 'Valid Wind Speed',
    }

    def __init__(self, arg : Variation_1146_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1147_Arg : TypeAlias = Raw
class Variation_1147(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Not valid Wind Direction',
        1: 'Valid Wind Direction',
    }

    def __init__(self, arg : Variation_1147_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1148_Arg : TypeAlias = Raw
class Variation_1148(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Not valid Temperature',
        1: 'Valid Temperature',
    }

    def __init__(self, arg : Variation_1148_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1149_Arg : TypeAlias = Raw
class Variation_1149(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Not valid Turbulence',
        1: 'Valid Turbulence',
    }

    def __init__(self, arg : Variation_1149_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1150_Arg_Group = TypedDict('Variation_1150_Arg_Group', {
    'WS': Union[Variation_1146, Variation_1146_Arg],
    'WD': Union[Variation_1147, Variation_1147_Arg],
    'TMP': Union[Variation_1148, Variation_1148_Arg],
    'TRB': Union[Variation_1149, Variation_1149_Arg],
    'WSD': Union[Variation_707, Variation_707_Arg],
    'WDD': Union[Variation_716, Variation_716_Arg],
    'TMPD': Union[Variation_717, Variation_717_Arg],
    'TRBD': Union[Variation_0, Variation_0_Arg],
})
Variation_1150_Arg : TypeAlias = Union[Raw, Variation_1150_Arg_Group]
class Variation_1150(Group):
    variation = 'Group'

    bit_size = 64

    subitems_list = [
        ('WS', Variation_1146),
        ('WD', Variation_1147),
        ('TMP', Variation_1148),
        ('TRB', Variation_1149),
        Spare(4, 4),
        ('WSD', Variation_707),
        ('WDD', Variation_716),
        ('TMPD', Variation_717),
        ('TRBD', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'WS': ('Wind Speed Valid Flag', Variation_1146, 0, 1),
        'WD': ('Wind Direction Valid Flag', Variation_1147, 1, 1),
        'TMP': ('Temperature Valid Flag', Variation_1148, 2, 1),
        'TRB': ('Turbulence Valid Flag', Variation_1149, 3, 1),
        'WSD': ('Wind Speed', Variation_707, 8, 16),
        'WDD': ('Wind Direction', Variation_716, 24, 16),
        'TMPD': ('Temperature in Degrees Celsius', Variation_717, 40, 16),
        'TRBD': ('Turbulence', Variation_0, 56, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['WS']) -> Type[Variation_1146]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WD']) -> Type[Variation_1147]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TMP']) -> Type[Variation_1148]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRB']) -> Type[Variation_1149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WSD']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WDD']) -> Type[Variation_716]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TMPD']) -> Type[Variation_717]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TRBD']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['WS'], Literal['WD'], Literal['TMP'], Literal['TRB'], Literal['WSD'], Literal['WDD'], Literal['TMPD'], Literal['TRBD']]) -> Union[Type['Variation_1146'], Type['Variation_1147'], Type['Variation_1148'], Type['Variation_1149'], Type['Variation_707'], Type['Variation_716'], Type['Variation_717'], Type['Variation_0']]:
        if key == 'WS':
            return Variation_1146
        if key == 'WD':
            return Variation_1147
        if key == 'TMP':
            return Variation_1148
        if key == 'TRB':
            return Variation_1149
        if key == 'WSD':
            return Variation_707
        if key == 'WDD':
            return Variation_716
        if key == 'TMPD':
            return Variation_717
        if key == 'TRBD':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_1150_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['WS']) -> Variation_1146:
        ...

    @overload
    def get_item(self, name : Literal['WD']) -> Variation_1147:
        ...

    @overload
    def get_item(self, name : Literal['TMP']) -> Variation_1148:
        ...

    @overload
    def get_item(self, name : Literal['TRB']) -> Variation_1149:
        ...

    @overload
    def get_item(self, name : Literal['WSD']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['WDD']) -> Variation_716:
        ...

    @overload
    def get_item(self, name : Literal['TMPD']) -> Variation_717:
        ...

    @overload
    def get_item(self, name : Literal['TRBD']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['WS'], Literal['WD'], Literal['TMP'], Literal['TRB'], Literal['WSD'], Literal['WDD'], Literal['TMPD'], Literal['TRBD']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['WS'], val : Union[Variation_1146, Variation_1146_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['WD'], val : Union[Variation_1147, Variation_1147_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['TMP'], val : Union[Variation_1148, Variation_1148_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['TRB'], val : Union[Variation_1149, Variation_1149_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['WSD'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['WDD'], val : Union[Variation_716, Variation_716_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['TMPD'], val : Union[Variation_717, Variation_717_Arg]) -> 'Variation_1150':
        ...

    @overload
    def set_item(self, name : Literal['TRBD'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1150':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1151_Arg : TypeAlias = Raw
class Variation_1151(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Light aircraft =< 7000 kg',
        2: 'Reserved',
        3: '7000 kg < medium aircraft < 136000 kg',
        4: 'Reserved',
        5: '136000 kg <= heavy aircraft',
        6: 'Highly manoeuvrable (5g acceleration capability) and high speed (>400 knots cruise)',
        7: 'Reserved',
        8: 'Reserved',
        9: 'Reserved',
        10: 'Rotocraft',
        11: 'Glider / sailplane',
        12: 'Lighter-than-air',
        13: 'Unmanned aerial vehicle',
        14: 'Space / transatmospheric vehicle',
        15: 'Ultralight / handglider / paraglider',
        16: 'Parachutist / skydiver',
        17: 'Reserved',
        18: 'Reserved',
        19: 'Reserved',
        20: 'Surface emergency vehicle',
        21: 'Surface service vehicle',
        22: 'Fixed ground or tethered obstruction',
        23: 'Reserved',
        24: 'Reserved',
    }

    def __init__(self, arg : Variation_1151_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1152_Arg_Group = TypedDict('Variation_1152_Arg_Group', {
    'LAT': Union[Variation_691, Variation_691_Arg],
    'LON': Union[Variation_691, Variation_691_Arg],
})
Variation_1152_Arg : TypeAlias = Union[Raw, Variation_1152_Arg_Group]
class Variation_1152(Group):
    variation = 'Group'

    bit_size = 48

    subitems_list = [
        ('LAT', Variation_691),
        ('LON', Variation_691),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('Latitude in WGS.84 in Two\'s Complement Form', Variation_691, 0, 24),
        'LON': ('Longitude in WGS.84 in Two\'s Complement Form', Variation_691, 24, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_691]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_691]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_691'], Type['Variation_691']]:
        if key == 'LAT':
            return Variation_691
        if key == 'LON':
            return Variation_691
        assert_never(key)

    def __init__(self, arg : Variation_1152_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_691:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_691:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1152':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_691, Variation_691_Arg]) -> 'Variation_1152':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1153_Arg_Group = TypedDict('Variation_1153_Arg_Group', {
    'PUN': Union[Variation_283, Variation_283_Arg],
})
Variation_1153_Arg : TypeAlias = Union[Raw, Variation_1153_Arg_Group]
class Variation_1153(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 4),
        ('PUN', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PUN': ('Position Uncertainty', Variation_283, 4, 4),
    }

    @classmethod
    def spec(cls, key : Union[Literal['PUN']]) -> Union[Type['Variation_283']]:
        if key == 'PUN':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_1153_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['PUN']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['PUN'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_1153':
        return self._set_item(name, val) # type: ignore

Variation_1154_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['Mach']]]
class Variation_1154(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 8.0e-3, 0, 'Mach')

    def __init__(self, arg : Variation_1154_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1155_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['mb']]]
class Variation_1155(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 12
    quantity = Quantity('Unsigned', 0.1, 0, 'mb')

    def __init__(self, arg : Variation_1155_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1156_Arg_Group = TypedDict('Variation_1156_Arg_Group', {
    'BPS': Union[Variation_1155, Variation_1155_Arg],
})
Variation_1156_Arg : TypeAlias = Union[Raw, Variation_1156_Arg_Group]
class Variation_1156(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('BPS', Variation_1155),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'BPS': ('', Variation_1155, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['BPS']]) -> Union[Type['Variation_1155']]:
        if key == 'BPS':
            return Variation_1155
        assert_never(key)

    def __init__(self, arg : Variation_1156_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['BPS']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['BPS'], val : Union[Variation_1155, Variation_1155_Arg]) -> 'Variation_1156':
        return self._set_item(name, val) # type: ignore

Variation_1157_Arg = TypedDict('Variation_1157_Arg', {
    'ADR': Union[Variation_279, Variation_279_Arg],
    'ID': Union[Variation_201, Variation_201_Arg],
    'MHG': Union[Variation_14, Variation_14_Arg],
    'IAS': Union[Variation_1127, Variation_1127_Arg],
    'TAS': Union[Variation_707, Variation_707_Arg],
    'SAL': Union[Variation_1130, Variation_1130_Arg],
    'FSS': Union[Variation_1131, Variation_1131_Arg],
    'TIS': Union[Variation_1134, Variation_1134_Arg],
    'TID': Union[Variation_1136, Variation_1136_Arg],
    'COM': Union[Variation_1138, Variation_1138_Arg],
    'SAB': Union[Variation_1144, Variation_1144_Arg],
    'ACS': Union[Variation_282, Variation_282_Arg],
    'BVR': Union[Variation_365, Variation_365_Arg],
    'GVR': Union[Variation_365, Variation_365_Arg],
    'RAN': Union[Variation_704, Variation_704_Arg],
    'TAR': Union[Variation_1145, Variation_1145_Arg],
    'TAN': Union[Variation_14, Variation_14_Arg],
    'GS': Union[Variation_708, Variation_708_Arg],
    'VUN': Union[Variation_0, Variation_0_Arg],
    'MET': Union[Variation_1150, Variation_1150_Arg],
    'EMC': Union[Variation_1151, Variation_1151_Arg],
    'POS': Union[Variation_1152, Variation_1152_Arg],
    'GAL': Union[Variation_288, Variation_288_Arg],
    'PUN': Union[Variation_1153, Variation_1153_Arg],
    'MB': Union[Variation_322, Variation_322_Arg],
    'IAR': Union[Variation_707, Variation_707_Arg],
    'MAC': Union[Variation_1154, Variation_1154_Arg],
    'BPS': Union[Variation_1156, Variation_1156_Arg],
}, total=False)
class Variation_1157(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('ADR', Variation_279),
        ('ID', Variation_201),
        ('MHG', Variation_14),
        ('IAS', Variation_1127),
        ('TAS', Variation_707),
        ('SAL', Variation_1130),
        ('FSS', Variation_1131),
        ('TIS', Variation_1134),
        ('TID', Variation_1136),
        ('COM', Variation_1138),
        ('SAB', Variation_1144),
        ('ACS', Variation_282),
        ('BVR', Variation_365),
        ('GVR', Variation_365),
        ('RAN', Variation_704),
        ('TAR', Variation_1145),
        ('TAN', Variation_14),
        ('GS', Variation_708),
        ('VUN', Variation_0),
        ('MET', Variation_1150),
        ('EMC', Variation_1151),
        ('POS', Variation_1152),
        ('GAL', Variation_288),
        ('PUN', Variation_1153),
        ('MB', Variation_322),
        ('IAR', Variation_707),
        ('MAC', Variation_1154),
        ('BPS', Variation_1156),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'ADR': (Variation_279, 0x80000000),
        'ID': (Variation_201, 0x40000000),
        'MHG': (Variation_14, 0x20000000),
        'IAS': (Variation_1127, 0x10000000),
        'TAS': (Variation_707, 0x08000000),
        'SAL': (Variation_1130, 0x04000000),
        'FSS': (Variation_1131, 0x02000000),
        'TIS': (Variation_1134, 0x01800000),
        'TID': (Variation_1136, 0x01400000),
        'COM': (Variation_1138, 0x01200000),
        'SAB': (Variation_1144, 0x01100000),
        'ACS': (Variation_282, 0x01080000),
        'BVR': (Variation_365, 0x01040000),
        'GVR': (Variation_365, 0x01020000),
        'RAN': (Variation_704, 0x01018000),
        'TAR': (Variation_1145, 0x01014000),
        'TAN': (Variation_14, 0x01012000),
        'GS': (Variation_708, 0x01011000),
        'VUN': (Variation_0, 0x01010800),
        'MET': (Variation_1150, 0x01010400),
        'EMC': (Variation_1151, 0x01010200),
        'POS': (Variation_1152, 0x01010180),
        'GAL': (Variation_288, 0x01010140),
        'PUN': (Variation_1153, 0x01010120),
        'MB': (Variation_322, 0x01010110),
        'IAR': (Variation_707, 0x01010108),
        'MAC': (Variation_1154, 0x01010104),
        'BPS': (Variation_1156, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ADR']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MHG']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAS']) -> Type[Variation_1127]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAL']) -> Type[Variation_1130]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSS']) -> Type[Variation_1131]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TIS']) -> Type[Variation_1134]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_1136]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_1138]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAB']) -> Type[Variation_1144]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACS']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAN']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_1145]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAN']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GS']) -> Type[Variation_708]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VUN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_1150]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMC']) -> Type[Variation_1151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_1152]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAL']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PUN']) -> Type[Variation_1153]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAR']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAC']) -> Type[Variation_1154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_1156]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ADR'], Literal['ID'], Literal['MHG'], Literal['IAS'], Literal['TAS'], Literal['SAL'], Literal['FSS'], Literal['TIS'], Literal['TID'], Literal['COM'], Literal['SAB'], Literal['ACS'], Literal['BVR'], Literal['GVR'], Literal['RAN'], Literal['TAR'], Literal['TAN'], Literal['GS'], Literal['VUN'], Literal['MET'], Literal['EMC'], Literal['POS'], Literal['GAL'], Literal['PUN'], Literal['MB'], Literal['IAR'], Literal['MAC'], Literal['BPS']]) -> Union[Type['Variation_279'], Type['Variation_201'], Type['Variation_14'], Type['Variation_1127'], Type['Variation_707'], Type['Variation_1130'], Type['Variation_1131'], Type['Variation_1134'], Type['Variation_1136'], Type['Variation_1138'], Type['Variation_1144'], Type['Variation_282'], Type['Variation_365'], Type['Variation_365'], Type['Variation_704'], Type['Variation_1145'], Type['Variation_14'], Type['Variation_708'], Type['Variation_0'], Type['Variation_1150'], Type['Variation_1151'], Type['Variation_1152'], Type['Variation_288'], Type['Variation_1153'], Type['Variation_322'], Type['Variation_707'], Type['Variation_1154'], Type['Variation_1156']]:
        if key == 'ADR':
            return Variation_279
        if key == 'ID':
            return Variation_201
        if key == 'MHG':
            return Variation_14
        if key == 'IAS':
            return Variation_1127
        if key == 'TAS':
            return Variation_707
        if key == 'SAL':
            return Variation_1130
        if key == 'FSS':
            return Variation_1131
        if key == 'TIS':
            return Variation_1134
        if key == 'TID':
            return Variation_1136
        if key == 'COM':
            return Variation_1138
        if key == 'SAB':
            return Variation_1144
        if key == 'ACS':
            return Variation_282
        if key == 'BVR':
            return Variation_365
        if key == 'GVR':
            return Variation_365
        if key == 'RAN':
            return Variation_704
        if key == 'TAR':
            return Variation_1145
        if key == 'TAN':
            return Variation_14
        if key == 'GS':
            return Variation_708
        if key == 'VUN':
            return Variation_0
        if key == 'MET':
            return Variation_1150
        if key == 'EMC':
            return Variation_1151
        if key == 'POS':
            return Variation_1152
        if key == 'GAL':
            return Variation_288
        if key == 'PUN':
            return Variation_1153
        if key == 'MB':
            return Variation_322
        if key == 'IAR':
            return Variation_707
        if key == 'MAC':
            return Variation_1154
        if key == 'BPS':
            return Variation_1156
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1157_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['ADR'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['ID'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['MHG'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['IAS'], val : Union[Variation_1127, Variation_1127_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['SAL'], val : Union[Variation_1130, Variation_1130_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['FSS'], val : Union[Variation_1131, Variation_1131_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['TIS'], val : Union[Variation_1134, Variation_1134_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_1136, Variation_1136_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_1138, Variation_1138_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['SAB'], val : Union[Variation_1144, Variation_1144_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['ACS'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['RAN'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_1145, Variation_1145_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['TAN'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['GS'], val : Union[Variation_708, Variation_708_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['VUN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_1150, Variation_1150_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['EMC'], val : Union[Variation_1151, Variation_1151_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_1152, Variation_1152_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['GAL'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['PUN'], val : Union[Variation_1153, Variation_1153_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['IAR'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['MAC'], val : Union[Variation_1154, Variation_1154_Arg]) -> 'Variation_1157':
        ...

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_1156, Variation_1156_Arg]) -> 'Variation_1157':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['ADR']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['ID']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['MHG']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['IAS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['SAL']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['FSS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['TIS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['TID']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['SAB']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['ACS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['RAN']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['TAN']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['GS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['VUN']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['EMC']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['GAL']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['PUN']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['IAR']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['MAC']) -> 'Variation_1157':
        ...

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_1157':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['ADR']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['MHG']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['IAS']) -> Variation_1127:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['SAL']) -> Variation_1130:
        ...

    @overload
    def get_item(self, name : Literal['FSS']) -> Variation_1131:
        ...

    @overload
    def get_item(self, name : Literal['TIS']) -> Variation_1134:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_1136:
        ...

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_1138:
        ...

    @overload
    def get_item(self, name : Literal['SAB']) -> Variation_1144:
        ...

    @overload
    def get_item(self, name : Literal['ACS']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['RAN']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_1145:
        ...

    @overload
    def get_item(self, name : Literal['TAN']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['GS']) -> Variation_708:
        ...

    @overload
    def get_item(self, name : Literal['VUN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_1150:
        ...

    @overload
    def get_item(self, name : Literal['EMC']) -> Variation_1151:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_1152:
        ...

    @overload
    def get_item(self, name : Literal['GAL']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['PUN']) -> Variation_1153:
        ...

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['IAR']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['MAC']) -> Variation_1154:
        ...

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_1156:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1158_Arg : TypeAlias = Raw
class Variation_1158(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Multisensor track',
        1: 'Monosensor track',
    }

    def __init__(self, arg : Variation_1158_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1159_Arg : TypeAlias = Raw
class Variation_1159(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No source',
        1: 'GNSS',
        2: '3D radar',
        3: 'Triangulation',
        4: 'Height from coverage',
        5: 'Speed look-up table',
        6: 'Default height',
        7: 'Multilateration',
    }

    def __init__(self, arg : Variation_1159_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1160_Arg : TypeAlias = Raw
class Variation_1160(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Actual track',
        1: 'Simulated track',
    }

    def __init__(self, arg : Variation_1160_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1161_Arg : TypeAlias = Raw
class Variation_1161(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Last message transmitted to the user for the track',
    }

    def __init__(self, arg : Variation_1161_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1162_Arg : TypeAlias = Raw
class Variation_1162(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'First message transmitted to the user for the track',
    }

    def __init__(self, arg : Variation_1162_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1163_Arg : TypeAlias = Raw
class Variation_1163(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Slave Track Promotion',
    }

    def __init__(self, arg : Variation_1163_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1164_Arg : TypeAlias = Raw
class Variation_1164(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Complementary service used',
        1: 'Background service used',
    }

    def __init__(self, arg : Variation_1164_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1165_Arg : TypeAlias = Raw
class Variation_1165(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 2
    table = {
        0: 'No Mode 4 interrogation',
        1: 'Friendly target',
        2: 'Unknown target',
        3: 'No reply',
    }

    def __init__(self, arg : Variation_1165_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1166_Arg : TypeAlias = Raw
class Variation_1166(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Military Emergency present in the last report received from a sensor capable of decoding this data',
    }

    def __init__(self, arg : Variation_1166_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1167_Arg : TypeAlias = Raw
class Variation_1167(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Military Identification present in the last report received from a sensor capable of decoding this data',
    }

    def __init__(self, arg : Variation_1167_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1168_Arg : TypeAlias = Raw
class Variation_1168(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 2
    table = {
        0: 'No Mode 5 interrogation',
        1: 'Friendly target',
        2: 'Unknown target',
        3: 'No reply',
    }

    def __init__(self, arg : Variation_1168_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1169_Arg : TypeAlias = Raw
class Variation_1169(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received track update is higher than system dependent threshold (coasting)',
    }

    def __init__(self, arg : Variation_1169_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1170_Arg : TypeAlias = Raw
class Variation_1170(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Age of the last received ADS-B track update is higher than system dependent threshold',
    }

    def __init__(self, arg : Variation_1170_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1171_Arg : TypeAlias = Raw
class Variation_1171(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Assigned Mode A Code Conflict (same discrete Mode A Code assigned to another track)',
    }

    def __init__(self, arg : Variation_1171_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1172_Arg : TypeAlias = Raw
class Variation_1172(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Combined',
        1: 'Co-operative only',
        2: 'Non-Cooperative only',
        3: 'Not defined',
    }

    def __init__(self, arg : Variation_1172_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1173_Arg : TypeAlias = Raw
class Variation_1173(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 3
    table = {
        0: 'No emergency',
        1: 'General emergency',
        2: 'Lifeguard / medical',
        3: 'Minimum fuel',
        4: 'No communications',
        5: 'Unlawful interference',
        6: 'Downed Aircraft',
        7: 'Undefined',
    }

    def __init__(self, arg : Variation_1173_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1174_Arg : TypeAlias = Raw
class Variation_1174(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'No indication',
        1: 'Potential False Track Indication',
    }

    def __init__(self, arg : Variation_1174_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1175_Arg : TypeAlias = Raw
class Variation_1175(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Track created / updated with FPL data',
    }

    def __init__(self, arg : Variation_1175_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1176_Arg : TypeAlias = Raw
class Variation_1176(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Duplicate Mode 3/A Code',
    }

    def __init__(self, arg : Variation_1176_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1177_Arg : TypeAlias = Raw
class Variation_1177(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Duplicate Flight Plan',
    }

    def __init__(self, arg : Variation_1177_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1178_Arg : TypeAlias = Raw
class Variation_1178(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Duplicate Flight Plan due to manual correlation',
    }

    def __init__(self, arg : Variation_1178_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1179_Arg_Group_1 = TypedDict('Variation_1179_Arg_Group_1', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
})
Variation_1179_Arg_Group_2 = TypedDict('Variation_1179_Arg_Group_2', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
})
Variation_1179_Arg_Group_3 = TypedDict('Variation_1179_Arg_Group_3', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
})
Variation_1179_Arg_Group_4 = TypedDict('Variation_1179_Arg_Group_4', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
})
Variation_1179_Arg_Group_5 = TypedDict('Variation_1179_Arg_Group_5', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
    'SDS': Union[Variation_1172, Variation_1172_Arg],
    'EMS': Union[Variation_1173, Variation_1173_Arg],
    'PFT': Union[Variation_1174, Variation_1174_Arg],
    'FPLT': Union[Variation_1175, Variation_1175_Arg],
})
Variation_1179_Arg_Group_6 = TypedDict('Variation_1179_Arg_Group_6', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
    'SDS': Union[Variation_1172, Variation_1172_Arg],
    'EMS': Union[Variation_1173, Variation_1173_Arg],
    'PFT': Union[Variation_1174, Variation_1174_Arg],
    'FPLT': Union[Variation_1175, Variation_1175_Arg],
    'DUPT': Union[Variation_1176, Variation_1176_Arg],
    'DUPF': Union[Variation_1177, Variation_1177_Arg],
    'DUPM': Union[Variation_1178, Variation_1178_Arg],
})
Variation_1179_Arg : TypeAlias = Union[
    int,
    Variation_1179_Arg_Group_1,
    Tuple[int],
    Variation_1179_Arg_Group_2,
    Tuple[int,int],
    Variation_1179_Arg_Group_3,
    Tuple[int,int,int],
    Variation_1179_Arg_Group_4,
    Tuple[int,int,int,int],
    Variation_1179_Arg_Group_5,
    Tuple[int,int,int,int,int],
    Variation_1179_Arg_Group_6,
    Tuple[int,int,int,int,int,int],
]
class Variation_1179(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MON', Variation_1158),
            ('SPI', Variation_352),
            ('MRH', Variation_342),
            ('SRC', Variation_1159),
            ('CNF', Variation_344),
        ],
        [
            ('SIM', Variation_1160),
            ('TSE', Variation_1161),
            ('TSB', Variation_1162),
            ('FPC', Variation_354),
            ('AFF', Variation_355),
            ('STP', Variation_1163),
            ('KOS', Variation_1164),
        ],
        [
            ('AMA', Variation_351),
            ('MD4', Variation_1165),
            ('ME', Variation_1166),
            ('MI', Variation_1167),
            ('MD5', Variation_1168),
        ],
        [
            ('CST', Variation_1169),
            ('PSR', Variation_417),
            ('SSR', Variation_418),
            ('MDS', Variation_419),
            ('ADS', Variation_1170),
            ('SUC', Variation_421),
            ('AAC', Variation_1171),
        ],
        [
            ('SDS', Variation_1172),
            ('EMS', Variation_1173),
            ('PFT', Variation_1174),
            ('FPLT', Variation_1175),
        ],
        [
            ('DUPT', Variation_1176),
            ('DUPF', Variation_1177),
            ('DUPM', Variation_1178),
            Spare(3, 4),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MON': ('', Variation_1158, 0, 1),
        'SPI': ('', Variation_352, 1, 1),
        'MRH': ('Most Reliable Height', Variation_342, 2, 1),
        'SRC': ('Source of Calculated Track Altitude for I062/130', Variation_1159, 3, 3),
        'CNF': ('', Variation_344, 6, 1),
        'SIM': ('', Variation_1160, 0, 1),
        'TSE': ('', Variation_1161, 1, 1),
        'TSB': ('', Variation_1162, 2, 1),
        'FPC': ('', Variation_354, 3, 1),
        'AFF': ('', Variation_355, 4, 1),
        'STP': ('', Variation_1163, 5, 1),
        'KOS': ('', Variation_1164, 6, 1),
        'AMA': ('', Variation_351, 0, 1),
        'MD4': ('', Variation_1165, 1, 2),
        'ME': ('', Variation_1166, 3, 1),
        'MI': ('', Variation_1167, 4, 1),
        'MD5': ('', Variation_1168, 5, 2),
        'CST': ('', Variation_1169, 0, 1),
        'PSR': ('', Variation_417, 1, 1),
        'SSR': ('', Variation_418, 2, 1),
        'MDS': ('', Variation_419, 3, 1),
        'ADS': ('', Variation_1170, 4, 1),
        'SUC': ('', Variation_421, 5, 1),
        'AAC': ('', Variation_1171, 6, 1),
        'SDS': ('', Variation_1172, 0, 2),
        'EMS': ('', Variation_1173, 2, 3),
        'PFT': ('', Variation_1174, 5, 1),
        'FPLT': ('', Variation_1175, 6, 1),
        'DUPT': ('', Variation_1176, 0, 1),
        'DUPF': ('', Variation_1177, 1, 1),
        'DUPM': ('', Variation_1178, 2, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MON']) -> Type[Variation_1158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_352]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRH']) -> Type[Variation_342]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_1159]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_344]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_1160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSE']) -> Type[Variation_1161]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSB']) -> Type[Variation_1162]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPC']) -> Type[Variation_354]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AFF']) -> Type[Variation_355]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STP']) -> Type[Variation_1163]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['KOS']) -> Type[Variation_1164]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AMA']) -> Type[Variation_351]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD4']) -> Type[Variation_1165]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_1166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_1167]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD5']) -> Type[Variation_1168]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_1169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_417]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_418]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_419]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_1170]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SUC']) -> Type[Variation_421]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AAC']) -> Type[Variation_1171]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDS']) -> Type[Variation_1172]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMS']) -> Type[Variation_1173]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PFT']) -> Type[Variation_1174]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPLT']) -> Type[Variation_1175]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPT']) -> Type[Variation_1176]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPF']) -> Type[Variation_1177]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPM']) -> Type[Variation_1178]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MON'], Literal['SPI'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FPC'], Literal['AFF'], Literal['STP'], Literal['KOS'], Literal['AMA'], Literal['MD4'], Literal['ME'], Literal['MI'], Literal['MD5'], Literal['CST'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC'], Literal['SDS'], Literal['EMS'], Literal['PFT'], Literal['FPLT'], Literal['DUPT'], Literal['DUPF'], Literal['DUPM']]) -> Union[Type['Variation_1158'], Type['Variation_352'], Type['Variation_342'], Type['Variation_1159'], Type['Variation_344'], Type['Variation_1160'], Type['Variation_1161'], Type['Variation_1162'], Type['Variation_354'], Type['Variation_355'], Type['Variation_1163'], Type['Variation_1164'], Type['Variation_351'], Type['Variation_1165'], Type['Variation_1166'], Type['Variation_1167'], Type['Variation_1168'], Type['Variation_1169'], Type['Variation_417'], Type['Variation_418'], Type['Variation_419'], Type['Variation_1170'], Type['Variation_421'], Type['Variation_1171'], Type['Variation_1172'], Type['Variation_1173'], Type['Variation_1174'], Type['Variation_1175'], Type['Variation_1176'], Type['Variation_1177'], Type['Variation_1178']]:
        if key == 'MON':
            return Variation_1158
        if key == 'SPI':
            return Variation_352
        if key == 'MRH':
            return Variation_342
        if key == 'SRC':
            return Variation_1159
        if key == 'CNF':
            return Variation_344
        if key == 'SIM':
            return Variation_1160
        if key == 'TSE':
            return Variation_1161
        if key == 'TSB':
            return Variation_1162
        if key == 'FPC':
            return Variation_354
        if key == 'AFF':
            return Variation_355
        if key == 'STP':
            return Variation_1163
        if key == 'KOS':
            return Variation_1164
        if key == 'AMA':
            return Variation_351
        if key == 'MD4':
            return Variation_1165
        if key == 'ME':
            return Variation_1166
        if key == 'MI':
            return Variation_1167
        if key == 'MD5':
            return Variation_1168
        if key == 'CST':
            return Variation_1169
        if key == 'PSR':
            return Variation_417
        if key == 'SSR':
            return Variation_418
        if key == 'MDS':
            return Variation_419
        if key == 'ADS':
            return Variation_1170
        if key == 'SUC':
            return Variation_421
        if key == 'AAC':
            return Variation_1171
        if key == 'SDS':
            return Variation_1172
        if key == 'EMS':
            return Variation_1173
        if key == 'PFT':
            return Variation_1174
        if key == 'FPLT':
            return Variation_1175
        if key == 'DUPT':
            return Variation_1176
        if key == 'DUPF':
            return Variation_1177
        if key == 'DUPM':
            return Variation_1178
        assert_never(key)

    def __init__(self, arg : Variation_1179_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1179_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1179_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_1179_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_1179_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            if Variation_1179_Arg_Group_5.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(5, arg)); return
            if Variation_1179_Arg_Group_6.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(6, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MON']) -> Variation_1158:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_352:
        ...

    @overload
    def get_item(self, name : Literal['MRH']) -> Variation_342:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_1159:
        ...

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_344:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_1160:
        ...

    @overload
    def get_item(self, name : Literal['TSE']) -> Variation_1161:
        ...

    @overload
    def get_item(self, name : Literal['TSB']) -> Variation_1162:
        ...

    @overload
    def get_item(self, name : Literal['FPC']) -> Variation_354:
        ...

    @overload
    def get_item(self, name : Literal['AFF']) -> Variation_355:
        ...

    @overload
    def get_item(self, name : Literal['STP']) -> Variation_1163:
        ...

    @overload
    def get_item(self, name : Literal['KOS']) -> Variation_1164:
        ...

    @overload
    def get_item(self, name : Literal['AMA']) -> Variation_351:
        ...

    @overload
    def get_item(self, name : Literal['MD4']) -> Variation_1165:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_1166:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_1167:
        ...

    @overload
    def get_item(self, name : Literal['MD5']) -> Variation_1168:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_1169:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_417:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_418:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_419:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_1170:
        ...

    @overload
    def get_item(self, name : Literal['SUC']) -> Variation_421:
        ...

    @overload
    def get_item(self, name : Literal['AAC']) -> Variation_1171:
        ...

    @overload
    def get_item(self, name : Literal['SDS']) -> Variation_1172:
        ...

    @overload
    def get_item(self, name : Literal['EMS']) -> Variation_1173:
        ...

    @overload
    def get_item(self, name : Literal['PFT']) -> Variation_1174:
        ...

    @overload
    def get_item(self, name : Literal['FPLT']) -> Variation_1175:
        ...

    @overload
    def get_item(self, name : Literal['DUPT']) -> Variation_1176:
        ...

    @overload
    def get_item(self, name : Literal['DUPF']) -> Variation_1177:
        ...

    @overload
    def get_item(self, name : Literal['DUPM']) -> Variation_1178:
        ...

    def get_item(self, name : Union[Literal['MON'], Literal['SPI'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FPC'], Literal['AFF'], Literal['STP'], Literal['KOS'], Literal['AMA'], Literal['MD4'], Literal['ME'], Literal['MI'], Literal['MD5'], Literal['CST'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC'], Literal['SDS'], Literal['EMS'], Literal['PFT'], Literal['FPLT'], Literal['DUPT'], Literal['DUPF'], Literal['DUPM']]) -> Any:
        return self._get_item(name)

Variation_1180_Arg = TypedDict('Variation_1180_Arg', {
    'TRK': Union[Variation_357, Variation_357_Arg],
    'PSR': Union[Variation_357, Variation_357_Arg],
    'SSR': Union[Variation_357, Variation_357_Arg],
    'MDS': Union[Variation_357, Variation_357_Arg],
    'ADS': Union[Variation_358, Variation_358_Arg],
    'ES': Union[Variation_357, Variation_357_Arg],
    'VDL': Union[Variation_357, Variation_357_Arg],
    'UAT': Union[Variation_357, Variation_357_Arg],
    'LOP': Union[Variation_357, Variation_357_Arg],
    'MLT': Union[Variation_357, Variation_357_Arg],
}, total=False)
class Variation_1180(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('TRK', Variation_357),
        ('PSR', Variation_357),
        ('SSR', Variation_357),
        ('MDS', Variation_357),
        ('ADS', Variation_358),
        ('ES', Variation_357),
        ('VDL', Variation_357),
        ('UAT', Variation_357),
        ('LOP', Variation_357),
        ('MLT', Variation_357),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'TRK': (Variation_357, 0x8000),
        'PSR': (Variation_357, 0x4000),
        'SSR': (Variation_357, 0x2000),
        'MDS': (Variation_357, 0x1000),
        'ADS': (Variation_358, 0x0800),
        'ES': (Variation_357, 0x0400),
        'VDL': (Variation_357, 0x0200),
        'UAT': (Variation_357, 0x0180),
        'LOP': (Variation_357, 0x0140),
        'MLT': (Variation_357, 0x0120),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TRK']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_358]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ES']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VDL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['UAT']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LOP']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MLT']) -> Type[Variation_357]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TRK'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['ES'], Literal['VDL'], Literal['UAT'], Literal['LOP'], Literal['MLT']]) -> Union[Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_358'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357']]:
        if key == 'TRK':
            return Variation_357
        if key == 'PSR':
            return Variation_357
        if key == 'SSR':
            return Variation_357
        if key == 'MDS':
            return Variation_357
        if key == 'ADS':
            return Variation_358
        if key == 'ES':
            return Variation_357
        if key == 'VDL':
            return Variation_357
        if key == 'UAT':
            return Variation_357
        if key == 'LOP':
            return Variation_357
        if key == 'MLT':
            return Variation_357
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1180_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['TRK'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['PSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['SSR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['MDS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['ADS'], val : Union[Variation_358, Variation_358_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['ES'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['VDL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['UAT'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['LOP'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    @overload
    def set_item(self, name : Literal['MLT'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1180':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['TRK']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['PSR']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['SSR']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['MDS']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['ADS']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['ES']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['VDL']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['UAT']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['LOP']) -> 'Variation_1180':
        ...

    @overload
    def del_item(self, name : Literal['MLT']) -> 'Variation_1180':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['TRK']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_358:
        ...

    @overload
    def get_item(self, name : Literal['ES']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['VDL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['UAT']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['LOP']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MLT']) -> Variation_357:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1181_Arg : TypeAlias = Raw
class Variation_1181(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Constant course',
        1: 'Right turn',
        2: 'Left turn',
        3: 'Undetermined',
    }

    def __init__(self, arg : Variation_1181_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1182_Arg : TypeAlias = Raw
class Variation_1182(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 2
    table = {
        0: 'Constant groundspeed',
        1: 'Increasing groundspeed',
        2: 'Decreasing groundspeed',
        3: 'Undetermined',
    }

    def __init__(self, arg : Variation_1182_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1183_Arg : TypeAlias = Raw
class Variation_1183(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Level',
        1: 'Climb',
        2: 'Descent',
        3: 'Undetermined',
    }

    def __init__(self, arg : Variation_1183_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1184_Arg : TypeAlias = Raw
class Variation_1184(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'No altitude discrepancy',
        1: 'Altitude discrepancy',
    }

    def __init__(self, arg : Variation_1184_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1185_Arg_Group = TypedDict('Variation_1185_Arg_Group', {
    'TRANS': Union[Variation_1181, Variation_1181_Arg],
    'LONG': Union[Variation_1182, Variation_1182_Arg],
    'VERT': Union[Variation_1183, Variation_1183_Arg],
    'ADF': Union[Variation_1184, Variation_1184_Arg],
})
Variation_1185_Arg : TypeAlias = Union[Raw, Variation_1185_Arg_Group]
class Variation_1185(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TRANS', Variation_1181),
        ('LONG', Variation_1182),
        ('VERT', Variation_1183),
        ('ADF', Variation_1184),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TRANS': ('Transversal Acceleration', Variation_1181, 0, 2),
        'LONG': ('Longitudinal Acceleration', Variation_1182, 2, 2),
        'VERT': ('Transversal Acceleration', Variation_1183, 4, 2),
        'ADF': ('Altitude Discrepancy Flag', Variation_1184, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TRANS']) -> Type[Variation_1181]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LONG']) -> Type[Variation_1182]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VERT']) -> Type[Variation_1183]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADF']) -> Type[Variation_1184]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TRANS'], Literal['LONG'], Literal['VERT'], Literal['ADF']]) -> Union[Type['Variation_1181'], Type['Variation_1182'], Type['Variation_1183'], Type['Variation_1184']]:
        if key == 'TRANS':
            return Variation_1181
        if key == 'LONG':
            return Variation_1182
        if key == 'VERT':
            return Variation_1183
        if key == 'ADF':
            return Variation_1184
        assert_never(key)

    def __init__(self, arg : Variation_1185_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TRANS']) -> Variation_1181:
        ...

    @overload
    def get_item(self, name : Literal['LONG']) -> Variation_1182:
        ...

    @overload
    def get_item(self, name : Literal['VERT']) -> Variation_1183:
        ...

    @overload
    def get_item(self, name : Literal['ADF']) -> Variation_1184:
        ...

    def get_item(self, name : Union[Literal['TRANS'], Literal['LONG'], Literal['VERT'], Literal['ADF']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TRANS'], val : Union[Variation_1181, Variation_1181_Arg]) -> 'Variation_1185':
        ...

    @overload
    def set_item(self, name : Literal['LONG'], val : Union[Variation_1182, Variation_1182_Arg]) -> 'Variation_1185':
        ...

    @overload
    def set_item(self, name : Literal['VERT'], val : Union[Variation_1183, Variation_1183_Arg]) -> 'Variation_1185':
        ...

    @overload
    def set_item(self, name : Literal['ADF'], val : Union[Variation_1184, Variation_1184_Arg]) -> 'Variation_1185':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1186_Arg = TypedDict('Variation_1186_Arg', {
    'MFL': Union[Variation_357, Variation_357_Arg],
    'MD1': Union[Variation_357, Variation_357_Arg],
    'MD2': Union[Variation_357, Variation_357_Arg],
    'MDA': Union[Variation_357, Variation_357_Arg],
    'MD4': Union[Variation_357, Variation_357_Arg],
    'MD5': Union[Variation_357, Variation_357_Arg],
    'MHG': Union[Variation_357, Variation_357_Arg],
    'IAS': Union[Variation_357, Variation_357_Arg],
    'TAS': Union[Variation_357, Variation_357_Arg],
    'SAL': Union[Variation_357, Variation_357_Arg],
    'FSS': Union[Variation_357, Variation_357_Arg],
    'TID': Union[Variation_357, Variation_357_Arg],
    'COM': Union[Variation_357, Variation_357_Arg],
    'SAB': Union[Variation_357, Variation_357_Arg],
    'ACS': Union[Variation_357, Variation_357_Arg],
    'BVR': Union[Variation_357, Variation_357_Arg],
    'GVR': Union[Variation_357, Variation_357_Arg],
    'RAN': Union[Variation_357, Variation_357_Arg],
    'TAR': Union[Variation_357, Variation_357_Arg],
    'TAN': Union[Variation_357, Variation_357_Arg],
    'GSP': Union[Variation_357, Variation_357_Arg],
    'VUN': Union[Variation_357, Variation_357_Arg],
    'MET': Union[Variation_357, Variation_357_Arg],
    'EMC': Union[Variation_357, Variation_357_Arg],
    'POS': Union[Variation_357, Variation_357_Arg],
    'GAL': Union[Variation_357, Variation_357_Arg],
    'PUN': Union[Variation_357, Variation_357_Arg],
    'MB': Union[Variation_357, Variation_357_Arg],
    'IAR': Union[Variation_357, Variation_357_Arg],
    'MAC': Union[Variation_357, Variation_357_Arg],
    'BPS': Union[Variation_357, Variation_357_Arg],
}, total=False)
class Variation_1186(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('MFL', Variation_357),
        ('MD1', Variation_357),
        ('MD2', Variation_357),
        ('MDA', Variation_357),
        ('MD4', Variation_357),
        ('MD5', Variation_357),
        ('MHG', Variation_357),
        ('IAS', Variation_357),
        ('TAS', Variation_357),
        ('SAL', Variation_357),
        ('FSS', Variation_357),
        ('TID', Variation_357),
        ('COM', Variation_357),
        ('SAB', Variation_357),
        ('ACS', Variation_357),
        ('BVR', Variation_357),
        ('GVR', Variation_357),
        ('RAN', Variation_357),
        ('TAR', Variation_357),
        ('TAN', Variation_357),
        ('GSP', Variation_357),
        ('VUN', Variation_357),
        ('MET', Variation_357),
        ('EMC', Variation_357),
        ('POS', Variation_357),
        ('GAL', Variation_357),
        ('PUN', Variation_357),
        ('MB', Variation_357),
        ('IAR', Variation_357),
        ('MAC', Variation_357),
        ('BPS', Variation_357),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'MFL': (Variation_357, 0x8000000000),
        'MD1': (Variation_357, 0x4000000000),
        'MD2': (Variation_357, 0x2000000000),
        'MDA': (Variation_357, 0x1000000000),
        'MD4': (Variation_357, 0x0800000000),
        'MD5': (Variation_357, 0x0400000000),
        'MHG': (Variation_357, 0x0200000000),
        'IAS': (Variation_357, 0x0180000000),
        'TAS': (Variation_357, 0x0140000000),
        'SAL': (Variation_357, 0x0120000000),
        'FSS': (Variation_357, 0x0110000000),
        'TID': (Variation_357, 0x0108000000),
        'COM': (Variation_357, 0x0104000000),
        'SAB': (Variation_357, 0x0102000000),
        'ACS': (Variation_357, 0x0101800000),
        'BVR': (Variation_357, 0x0101400000),
        'GVR': (Variation_357, 0x0101200000),
        'RAN': (Variation_357, 0x0101100000),
        'TAR': (Variation_357, 0x0101080000),
        'TAN': (Variation_357, 0x0101040000),
        'GSP': (Variation_357, 0x0101020000),
        'VUN': (Variation_357, 0x0101018000),
        'MET': (Variation_357, 0x0101014000),
        'EMC': (Variation_357, 0x0101012000),
        'POS': (Variation_357, 0x0101011000),
        'GAL': (Variation_357, 0x0101010800),
        'PUN': (Variation_357, 0x0101010400),
        'MB': (Variation_357, 0x0101010200),
        'IAR': (Variation_357, 0x0101010180),
        'MAC': (Variation_357, 0x0101010140),
        'BPS': (Variation_357, 0x0101010120),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MFL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD1']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD2']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDA']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD4']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD5']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MHG']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAB']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAN']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAN']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GSP']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VUN']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMC']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAL']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PUN']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAR']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAC']) -> Type[Variation_357]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_357]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MFL'], Literal['MD1'], Literal['MD2'], Literal['MDA'], Literal['MD4'], Literal['MD5'], Literal['MHG'], Literal['IAS'], Literal['TAS'], Literal['SAL'], Literal['FSS'], Literal['TID'], Literal['COM'], Literal['SAB'], Literal['ACS'], Literal['BVR'], Literal['GVR'], Literal['RAN'], Literal['TAR'], Literal['TAN'], Literal['GSP'], Literal['VUN'], Literal['MET'], Literal['EMC'], Literal['POS'], Literal['GAL'], Literal['PUN'], Literal['MB'], Literal['IAR'], Literal['MAC'], Literal['BPS']]) -> Union[Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357'], Type['Variation_357']]:
        if key == 'MFL':
            return Variation_357
        if key == 'MD1':
            return Variation_357
        if key == 'MD2':
            return Variation_357
        if key == 'MDA':
            return Variation_357
        if key == 'MD4':
            return Variation_357
        if key == 'MD5':
            return Variation_357
        if key == 'MHG':
            return Variation_357
        if key == 'IAS':
            return Variation_357
        if key == 'TAS':
            return Variation_357
        if key == 'SAL':
            return Variation_357
        if key == 'FSS':
            return Variation_357
        if key == 'TID':
            return Variation_357
        if key == 'COM':
            return Variation_357
        if key == 'SAB':
            return Variation_357
        if key == 'ACS':
            return Variation_357
        if key == 'BVR':
            return Variation_357
        if key == 'GVR':
            return Variation_357
        if key == 'RAN':
            return Variation_357
        if key == 'TAR':
            return Variation_357
        if key == 'TAN':
            return Variation_357
        if key == 'GSP':
            return Variation_357
        if key == 'VUN':
            return Variation_357
        if key == 'MET':
            return Variation_357
        if key == 'EMC':
            return Variation_357
        if key == 'POS':
            return Variation_357
        if key == 'GAL':
            return Variation_357
        if key == 'PUN':
            return Variation_357
        if key == 'MB':
            return Variation_357
        if key == 'IAR':
            return Variation_357
        if key == 'MAC':
            return Variation_357
        if key == 'BPS':
            return Variation_357
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1186_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['MFL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MD1'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MD2'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MDA'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MD4'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MD5'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MHG'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['IAS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['SAL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['FSS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['SAB'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['ACS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['RAN'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['TAN'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['GSP'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['VUN'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['EMC'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['GAL'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['PUN'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['IAR'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['MAC'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_357, Variation_357_Arg]) -> 'Variation_1186':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['MFL']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MD1']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MD2']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MDA']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MD4']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MD5']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MHG']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['IAS']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['SAL']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['FSS']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['TID']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['SAB']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['ACS']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['RAN']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['TAN']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['GSP']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['VUN']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['EMC']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['GAL']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['PUN']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['IAR']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['MAC']) -> 'Variation_1186':
        ...

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_1186':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['MFL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD1']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD2']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MDA']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD4']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MD5']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MHG']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['IAS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['SAL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['FSS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['SAB']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['ACS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['RAN']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['TAN']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['GSP']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['VUN']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['EMC']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['GAL']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['PUN']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['IAR']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['MAC']) -> Variation_357:
        ...

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_357:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1187_Arg_Group = TypedDict('Variation_1187_Arg_Group', {
    'QNH': Union[Variation_362, Variation_362_Arg],
    'CTB': Union[Variation_363, Variation_363_Arg],
})
Variation_1187_Arg : TypeAlias = Union[Raw, Variation_1187_Arg_Group]
class Variation_1187(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('QNH', Variation_362),
        ('CTB', Variation_363),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'QNH': ('', Variation_362, 0, 1),
        'CTB': ('Calculated Track Barometric Altitude', Variation_363, 1, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['QNH']) -> Type[Variation_362]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CTB']) -> Type[Variation_363]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['QNH'], Literal['CTB']]) -> Union[Type['Variation_362'], Type['Variation_363']]:
        if key == 'QNH':
            return Variation_362
        if key == 'CTB':
            return Variation_363
        assert_never(key)

    def __init__(self, arg : Variation_1187_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['QNH']) -> Variation_362:
        ...

    @overload
    def get_item(self, name : Literal['CTB']) -> Variation_363:
        ...

    def get_item(self, name : Union[Literal['QNH'], Literal['CTB']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['QNH'], val : Union[Variation_362, Variation_362_Arg]) -> 'Variation_1187':
        ...

    @overload
    def set_item(self, name : Literal['CTB'], val : Union[Variation_363, Variation_363_Arg]) -> 'Variation_1187':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1188_Arg_Group = TypedDict('Variation_1188_Arg_Group', {
    'TYP': Union[Variation_972, Variation_972_Arg],
    'NBR': Union[Variation_368, Variation_368_Arg],
})
Variation_1188_Arg : TypeAlias = Union[Raw, Variation_1188_Arg_Group]
class Variation_1188(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_972),
        Spare(2, 3),
        ('NBR', Variation_368),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_972, 0, 2),
        'NBR': ('Number from 0 to 99 999 999', Variation_368, 5, 27),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_972]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NBR']) -> Type[Variation_368]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['NBR']]) -> Union[Type['Variation_972'], Type['Variation_368']]:
        if key == 'TYP':
            return Variation_972
        if key == 'NBR':
            return Variation_368
        assert_never(key)

    def __init__(self, arg : Variation_1188_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_972:
        ...

    @overload
    def get_item(self, name : Literal['NBR']) -> Variation_368:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['NBR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_972, Variation_972_Arg]) -> 'Variation_1188':
        ...

    @overload
    def set_item(self, name : Literal['NBR'], val : Union[Variation_368, Variation_368_Arg]) -> 'Variation_1188':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1189_Arg_Group = TypedDict('Variation_1189_Arg_Group', {
    'GATOAT': Union[Variation_158, Variation_158_Arg],
    'FR1FR2': Union[Variation_427, Variation_427_Arg],
    'RVSM': Union[Variation_160, Variation_160_Arg],
    'HPR': Union[Variation_161, Variation_161_Arg],
})
Variation_1189_Arg : TypeAlias = Union[Raw, Variation_1189_Arg_Group]
class Variation_1189(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('GATOAT', Variation_158),
        ('FR1FR2', Variation_427),
        ('RVSM', Variation_160),
        ('HPR', Variation_161),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'GATOAT': ('', Variation_158, 0, 2),
        'FR1FR2': ('', Variation_427, 2, 2),
        'RVSM': ('', Variation_160, 4, 2),
        'HPR': ('', Variation_161, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['GATOAT']) -> Type[Variation_158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FR1FR2']) -> Type[Variation_427]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RVSM']) -> Type[Variation_160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HPR']) -> Type[Variation_161]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Union[Type['Variation_158'], Type['Variation_427'], Type['Variation_160'], Type['Variation_161']]:
        if key == 'GATOAT':
            return Variation_158
        if key == 'FR1FR2':
            return Variation_427
        if key == 'RVSM':
            return Variation_160
        if key == 'HPR':
            return Variation_161
        assert_never(key)

    def __init__(self, arg : Variation_1189_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['GATOAT']) -> Variation_158:
        ...

    @overload
    def get_item(self, name : Literal['FR1FR2']) -> Variation_427:
        ...

    @overload
    def get_item(self, name : Literal['RVSM']) -> Variation_160:
        ...

    @overload
    def get_item(self, name : Literal['HPR']) -> Variation_161:
        ...

    def get_item(self, name : Union[Literal['GATOAT'], Literal['FR1FR2'], Literal['RVSM'], Literal['HPR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['GATOAT'], val : Union[Variation_158, Variation_158_Arg]) -> 'Variation_1189':
        ...

    @overload
    def set_item(self, name : Literal['FR1FR2'], val : Union[Variation_427, Variation_427_Arg]) -> 'Variation_1189':
        ...

    @overload
    def set_item(self, name : Literal['RVSM'], val : Union[Variation_160, Variation_160_Arg]) -> 'Variation_1189':
        ...

    @overload
    def set_item(self, name : Literal['HPR'], val : Union[Variation_161, Variation_161_Arg]) -> 'Variation_1189':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1190_Arg_Group = TypedDict('Variation_1190_Arg_Group', {
    'TYP': Union[Variation_374, Variation_374_Arg],
    'DAY': Union[Variation_980, Variation_980_Arg],
    'HOR': Union[Variation_376, Variation_376_Arg],
    'MIN': Union[Variation_377, Variation_377_Arg],
    'AVS': Union[Variation_378, Variation_378_Arg],
    'SEC': Union[Variation_377, Variation_377_Arg],
})
Variation_1190_Arg : TypeAlias = Union[Raw, Variation_1190_Arg_Group]
class Variation_1190(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('TYP', Variation_374),
        ('DAY', Variation_980),
        Spare(7, 4),
        ('HOR', Variation_376),
        Spare(0, 2),
        ('MIN', Variation_377),
        ('AVS', Variation_378),
        Spare(1, 1),
        ('SEC', Variation_377),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('', Variation_374, 0, 5),
        'DAY': ('', Variation_980, 5, 2),
        'HOR': ('Hours', Variation_376, 11, 5),
        'MIN': ('Minutes', Variation_377, 18, 6),
        'AVS': ('Seconds Available Flag', Variation_378, 24, 1),
        'SEC': ('Seconds', Variation_377, 26, 6),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_374]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DAY']) -> Type[Variation_980]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HOR']) -> Type[Variation_376]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MIN']) -> Type[Variation_377]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AVS']) -> Type[Variation_378]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SEC']) -> Type[Variation_377]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Union[Type['Variation_374'], Type['Variation_980'], Type['Variation_376'], Type['Variation_377'], Type['Variation_378'], Type['Variation_377']]:
        if key == 'TYP':
            return Variation_374
        if key == 'DAY':
            return Variation_980
        if key == 'HOR':
            return Variation_376
        if key == 'MIN':
            return Variation_377
        if key == 'AVS':
            return Variation_378
        if key == 'SEC':
            return Variation_377
        assert_never(key)

    def __init__(self, arg : Variation_1190_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_374:
        ...

    @overload
    def get_item(self, name : Literal['DAY']) -> Variation_980:
        ...

    @overload
    def get_item(self, name : Literal['HOR']) -> Variation_376:
        ...

    @overload
    def get_item(self, name : Literal['MIN']) -> Variation_377:
        ...

    @overload
    def get_item(self, name : Literal['AVS']) -> Variation_378:
        ...

    @overload
    def get_item(self, name : Literal['SEC']) -> Variation_377:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['DAY'], Literal['HOR'], Literal['MIN'], Literal['AVS'], Literal['SEC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_374, Variation_374_Arg]) -> 'Variation_1190':
        ...

    @overload
    def set_item(self, name : Literal['DAY'], val : Union[Variation_980, Variation_980_Arg]) -> 'Variation_1190':
        ...

    @overload
    def set_item(self, name : Literal['HOR'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_1190':
        ...

    @overload
    def set_item(self, name : Literal['MIN'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_1190':
        ...

    @overload
    def set_item(self, name : Literal['AVS'], val : Union[Variation_378, Variation_378_Arg]) -> 'Variation_1190':
        ...

    @overload
    def set_item(self, name : Literal['SEC'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_1190':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1191_Arg : TypeAlias = List[Union[Variation_1190, Variation_1190_Arg]]
class Variation_1191(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 32
    variation_type = Variation_1190

    @classmethod
    def spec(cls) -> Type[Variation_1190]:
        return Variation_1190

    def __init__(self, arg : List[Union[Variation_1190, Variation_1190_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1192_Arg : TypeAlias = Raw
class Variation_1192(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'No valid Mode 3/A available',
        1: 'Valid Mode 3/A available',
    }

    def __init__(self, arg : Variation_1192_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1193_Arg_Group = TypedDict('Variation_1193_Arg_Group', {
    'VA': Union[Variation_1192, Variation_1192_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_1193_Arg : TypeAlias = Union[Raw, Variation_1193_Arg_Group]
class Variation_1193(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 3),
        ('VA', Variation_1192),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'VA': ('', Variation_1192, 3, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['VA']) -> Type[Variation_1192]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['VA'], Literal['MODE3A']]) -> Union[Type['Variation_1192'], Type['Variation_19']]:
        if key == 'VA':
            return Variation_1192
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1193_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['VA']) -> Variation_1192:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['VA'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['VA'], val : Union[Variation_1192, Variation_1192_Arg]) -> 'Variation_1193':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1193':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1194_Arg = TypedDict('Variation_1194_Arg', {
    'TAG': Union[Variation_1, Variation_1_Arg],
    'CS': Union[Variation_149, Variation_149_Arg],
    'IFI': Union[Variation_1188, Variation_1188_Arg],
    'FCT': Union[Variation_1189, Variation_1189_Arg],
    'TAC': Union[Variation_331, Variation_331_Arg],
    'WTC': Union[Variation_977, Variation_977_Arg],
    'DEP': Union[Variation_331, Variation_331_Arg],
    'DST': Union[Variation_331, Variation_331_Arg],
    'RDS': Union[Variation_978, Variation_978_Arg],
    'CFL': Union[Variation_169, Variation_169_Arg],
    'CTL': Union[Variation_373, Variation_373_Arg],
    'TOD': Union[Variation_1191, Variation_1191_Arg],
    'AST': Union[Variation_166, Variation_166_Arg],
    'STS': Union[Variation_985, Variation_985_Arg],
    'STD': Union[Variation_149, Variation_149_Arg],
    'STA': Union[Variation_149, Variation_149_Arg],
    'PEM': Union[Variation_1193, Variation_1193_Arg],
    'PEC': Union[Variation_149, Variation_149_Arg],
}, total=False)
class Variation_1194(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 3

    subitems_list = [
        ('TAG', Variation_1),
        ('CS', Variation_149),
        ('IFI', Variation_1188),
        ('FCT', Variation_1189),
        ('TAC', Variation_331),
        ('WTC', Variation_977),
        ('DEP', Variation_331),
        ('DST', Variation_331),
        ('RDS', Variation_978),
        ('CFL', Variation_169),
        ('CTL', Variation_373),
        ('TOD', Variation_1191),
        ('AST', Variation_166),
        ('STS', Variation_985),
        ('STD', Variation_149),
        ('STA', Variation_149),
        ('PEM', Variation_1193),
        ('PEC', Variation_149),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'TAG': (Variation_1, 0x800000),
        'CS': (Variation_149, 0x400000),
        'IFI': (Variation_1188, 0x200000),
        'FCT': (Variation_1189, 0x100000),
        'TAC': (Variation_331, 0x080000),
        'WTC': (Variation_977, 0x040000),
        'DEP': (Variation_331, 0x020000),
        'DST': (Variation_331, 0x018000),
        'RDS': (Variation_978, 0x014000),
        'CFL': (Variation_169, 0x012000),
        'CTL': (Variation_373, 0x011000),
        'TOD': (Variation_1191, 0x010800),
        'AST': (Variation_166, 0x010400),
        'STS': (Variation_985, 0x010200),
        'STD': (Variation_149, 0x010180),
        'STA': (Variation_149, 0x010140),
        'PEM': (Variation_1193, 0x010120),
        'PEC': (Variation_149, 0x010110),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TAG']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CS']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IFI']) -> Type[Variation_1188]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FCT']) -> Type[Variation_1189]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAC']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['WTC']) -> Type[Variation_977]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DEP']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DST']) -> Type[Variation_331]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RDS']) -> Type[Variation_978]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CFL']) -> Type[Variation_169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CTL']) -> Type[Variation_373]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOD']) -> Type[Variation_1191]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AST']) -> Type[Variation_166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STS']) -> Type[Variation_985]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STD']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STA']) -> Type[Variation_149]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PEM']) -> Type[Variation_1193]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PEC']) -> Type[Variation_149]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TAG'], Literal['CS'], Literal['IFI'], Literal['FCT'], Literal['TAC'], Literal['WTC'], Literal['DEP'], Literal['DST'], Literal['RDS'], Literal['CFL'], Literal['CTL'], Literal['TOD'], Literal['AST'], Literal['STS'], Literal['STD'], Literal['STA'], Literal['PEM'], Literal['PEC']]) -> Union[Type['Variation_1'], Type['Variation_149'], Type['Variation_1188'], Type['Variation_1189'], Type['Variation_331'], Type['Variation_977'], Type['Variation_331'], Type['Variation_331'], Type['Variation_978'], Type['Variation_169'], Type['Variation_373'], Type['Variation_1191'], Type['Variation_166'], Type['Variation_985'], Type['Variation_149'], Type['Variation_149'], Type['Variation_1193'], Type['Variation_149']]:
        if key == 'TAG':
            return Variation_1
        if key == 'CS':
            return Variation_149
        if key == 'IFI':
            return Variation_1188
        if key == 'FCT':
            return Variation_1189
        if key == 'TAC':
            return Variation_331
        if key == 'WTC':
            return Variation_977
        if key == 'DEP':
            return Variation_331
        if key == 'DST':
            return Variation_331
        if key == 'RDS':
            return Variation_978
        if key == 'CFL':
            return Variation_169
        if key == 'CTL':
            return Variation_373
        if key == 'TOD':
            return Variation_1191
        if key == 'AST':
            return Variation_166
        if key == 'STS':
            return Variation_985
        if key == 'STD':
            return Variation_149
        if key == 'STA':
            return Variation_149
        if key == 'PEM':
            return Variation_1193
        if key == 'PEC':
            return Variation_149
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1194_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['TAG'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['CS'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['IFI'], val : Union[Variation_1188, Variation_1188_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['FCT'], val : Union[Variation_1189, Variation_1189_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['TAC'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['WTC'], val : Union[Variation_977, Variation_977_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['DEP'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['DST'], val : Union[Variation_331, Variation_331_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['RDS'], val : Union[Variation_978, Variation_978_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['CFL'], val : Union[Variation_169, Variation_169_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['CTL'], val : Union[Variation_373, Variation_373_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['TOD'], val : Union[Variation_1191, Variation_1191_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['AST'], val : Union[Variation_166, Variation_166_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['STS'], val : Union[Variation_985, Variation_985_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['STD'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['STA'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['PEM'], val : Union[Variation_1193, Variation_1193_Arg]) -> 'Variation_1194':
        ...

    @overload
    def set_item(self, name : Literal['PEC'], val : Union[Variation_149, Variation_149_Arg]) -> 'Variation_1194':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['TAG']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['CS']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['IFI']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['FCT']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['TAC']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['WTC']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['DEP']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['DST']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['RDS']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['CFL']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['CTL']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['TOD']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['AST']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['STS']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['STD']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['STA']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['PEM']) -> 'Variation_1194':
        ...

    @overload
    def del_item(self, name : Literal['PEC']) -> 'Variation_1194':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['TAG']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['CS']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['IFI']) -> Variation_1188:
        ...

    @overload
    def get_item(self, name : Literal['FCT']) -> Variation_1189:
        ...

    @overload
    def get_item(self, name : Literal['TAC']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['WTC']) -> Variation_977:
        ...

    @overload
    def get_item(self, name : Literal['DEP']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['DST']) -> Variation_331:
        ...

    @overload
    def get_item(self, name : Literal['RDS']) -> Variation_978:
        ...

    @overload
    def get_item(self, name : Literal['CFL']) -> Variation_169:
        ...

    @overload
    def get_item(self, name : Literal['CTL']) -> Variation_373:
        ...

    @overload
    def get_item(self, name : Literal['TOD']) -> Variation_1191:
        ...

    @overload
    def get_item(self, name : Literal['AST']) -> Variation_166:
        ...

    @overload
    def get_item(self, name : Literal['STS']) -> Variation_985:
        ...

    @overload
    def get_item(self, name : Literal['STD']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['STA']) -> Variation_149:
        ...

    @overload
    def get_item(self, name : Literal['PEM']) -> Variation_1193:
        ...

    @overload
    def get_item(self, name : Literal['PEC']) -> Variation_149:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1195_Arg : TypeAlias = Raw
class Variation_1195(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'No authenticated Mode 5 ID reply',
        1: 'Authenticated Mode 5 ID reply',
    }

    def __init__(self, arg : Variation_1195_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1196_Arg : TypeAlias = Raw
class Variation_1196(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Mode 1 code not present or not from Mode 5 reply',
        1: 'Mode 1 code from Mode 5 reply',
    }

    def __init__(self, arg : Variation_1196_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1197_Arg : TypeAlias = Raw
class Variation_1197(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Mode 2 code not present or not from Mode 5 reply',
        1: 'Mode 2 code from Mode 5 reply',
    }

    def __init__(self, arg : Variation_1197_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1198_Arg : TypeAlias = Raw
class Variation_1198(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Mode 3 code not present or not from Mode 5 reply',
        1: 'Mode 3 code from Mode 5 reply',
    }

    def __init__(self, arg : Variation_1198_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1199_Arg : TypeAlias = Raw
class Variation_1199(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'Mode C altitude code not present or not from Mode 5 reply',
        1: 'Mode C altitude from Mode 5 reply',
    }

    def __init__(self, arg : Variation_1199_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1200_Arg : TypeAlias = Raw
class Variation_1200(Element):
    variation = 'Element'

    bit_offset8 = 7
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no authenticated Data reply or Report received',
        1: 'X-pulse set to one',
    }

    def __init__(self, arg : Variation_1200_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1201_Arg_Group = TypedDict('Variation_1201_Arg_Group', {
    'M5': Union[Variation_768, Variation_768_Arg],
    'ID': Union[Variation_1195, Variation_1195_Arg],
    'DA': Union[Variation_770, Variation_770_Arg],
    'M1': Union[Variation_1196, Variation_1196_Arg],
    'M2': Union[Variation_1197, Variation_1197_Arg],
    'M3': Union[Variation_1198, Variation_1198_Arg],
    'MC': Union[Variation_1199, Variation_1199_Arg],
    'X': Union[Variation_1200, Variation_1200_Arg],
})
Variation_1201_Arg : TypeAlias = Union[Raw, Variation_1201_Arg_Group]
class Variation_1201(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('M5', Variation_768),
        ('ID', Variation_1195),
        ('DA', Variation_770),
        ('M1', Variation_1196),
        ('M2', Variation_1197),
        ('M3', Variation_1198),
        ('MC', Variation_1199),
        ('X', Variation_1200),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'M5': ('', Variation_768, 0, 1),
        'ID': ('', Variation_1195, 1, 1),
        'DA': ('', Variation_770, 2, 1),
        'M1': ('', Variation_1196, 3, 1),
        'M2': ('', Variation_1197, 4, 1),
        'M3': ('', Variation_1198, 5, 1),
        'MC': ('', Variation_1199, 6, 1),
        'X': ('X-pulse from Mode 5 Data Reply or Report', Variation_1200, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['M5']) -> Type[Variation_768]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_1195]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DA']) -> Type[Variation_770]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M1']) -> Type[Variation_1196]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M2']) -> Type[Variation_1197]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['M3']) -> Type[Variation_1198]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MC']) -> Type[Variation_1199]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_1200]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['M5'], Literal['ID'], Literal['DA'], Literal['M1'], Literal['M2'], Literal['M3'], Literal['MC'], Literal['X']]) -> Union[Type['Variation_768'], Type['Variation_1195'], Type['Variation_770'], Type['Variation_1196'], Type['Variation_1197'], Type['Variation_1198'], Type['Variation_1199'], Type['Variation_1200']]:
        if key == 'M5':
            return Variation_768
        if key == 'ID':
            return Variation_1195
        if key == 'DA':
            return Variation_770
        if key == 'M1':
            return Variation_1196
        if key == 'M2':
            return Variation_1197
        if key == 'M3':
            return Variation_1198
        if key == 'MC':
            return Variation_1199
        if key == 'X':
            return Variation_1200
        assert_never(key)

    def __init__(self, arg : Variation_1201_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['M5']) -> Variation_768:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_1195:
        ...

    @overload
    def get_item(self, name : Literal['DA']) -> Variation_770:
        ...

    @overload
    def get_item(self, name : Literal['M1']) -> Variation_1196:
        ...

    @overload
    def get_item(self, name : Literal['M2']) -> Variation_1197:
        ...

    @overload
    def get_item(self, name : Literal['M3']) -> Variation_1198:
        ...

    @overload
    def get_item(self, name : Literal['MC']) -> Variation_1199:
        ...

    @overload
    def get_item(self, name : Literal['X']) -> Variation_1200:
        ...

    def get_item(self, name : Union[Literal['M5'], Literal['ID'], Literal['DA'], Literal['M1'], Literal['M2'], Literal['M3'], Literal['MC'], Literal['X']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['M5'], val : Union[Variation_768, Variation_768_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['ID'], val : Union[Variation_1195, Variation_1195_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['DA'], val : Union[Variation_770, Variation_770_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['M1'], val : Union[Variation_1196, Variation_1196_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['M2'], val : Union[Variation_1197, Variation_1197_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['M3'], val : Union[Variation_1198, Variation_1198_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['MC'], val : Union[Variation_1199, Variation_1199_Arg]) -> 'Variation_1201':
        ...

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_1200, Variation_1200_Arg]) -> 'Variation_1201':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1202_Arg_Group = TypedDict('Variation_1202_Arg_Group', {
    'PIN': Union[Variation_777, Variation_777_Arg],
    'NAT': Union[Variation_376, Variation_376_Arg],
    'MIS': Union[Variation_377, Variation_377_Arg],
})
Variation_1202_Arg : TypeAlias = Union[Raw, Variation_1202_Arg_Group]
class Variation_1202(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        Spare(0, 2),
        ('PIN', Variation_777),
        Spare(0, 3),
        ('NAT', Variation_376),
        Spare(0, 2),
        ('MIS', Variation_377),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PIN': ('PIN Code', Variation_777, 2, 14),
        'NAT': ('National Origin', Variation_376, 19, 5),
        'MIS': ('Mission Code', Variation_377, 26, 6),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PIN']) -> Type[Variation_777]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NAT']) -> Type[Variation_376]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MIS']) -> Type[Variation_377]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PIN'], Literal['NAT'], Literal['MIS']]) -> Union[Type['Variation_777'], Type['Variation_376'], Type['Variation_377']]:
        if key == 'PIN':
            return Variation_777
        if key == 'NAT':
            return Variation_376
        if key == 'MIS':
            return Variation_377
        assert_never(key)

    def __init__(self, arg : Variation_1202_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PIN']) -> Variation_777:
        ...

    @overload
    def get_item(self, name : Literal['NAT']) -> Variation_376:
        ...

    @overload
    def get_item(self, name : Literal['MIS']) -> Variation_377:
        ...

    def get_item(self, name : Union[Literal['PIN'], Literal['NAT'], Literal['MIS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PIN'], val : Union[Variation_777, Variation_777_Arg]) -> 'Variation_1202':
        ...

    @overload
    def set_item(self, name : Literal['NAT'], val : Union[Variation_376, Variation_376_Arg]) -> 'Variation_1202':
        ...

    @overload
    def set_item(self, name : Literal['MIS'], val : Union[Variation_377, Variation_377_Arg]) -> 'Variation_1202':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1203_Arg : TypeAlias = Raw
class Variation_1203(Element):
    variation = 'Element'

    bit_offset8 = 1
    bit_size = 1
    table = {
        0: 'GA reported in 100 ft increments',
        1: 'GA reported in 25 ft increments',
    }

    def __init__(self, arg : Variation_1203_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1204_Arg_Group = TypedDict('Variation_1204_Arg_Group', {
    'RES': Union[Variation_1203, Variation_1203_Arg],
    'GA': Union[Variation_1073, Variation_1073_Arg],
})
Variation_1204_Arg : TypeAlias = Union[Raw, Variation_1204_Arg_Group]
class Variation_1204(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 1),
        ('RES', Variation_1203),
        ('GA', Variation_1073),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RES': ('Resolution with which the GNSS-derived Altitude (GA) is Reported', Variation_1203, 1, 1),
        'GA': ('GNSS-derived Altitude of Target, Expressed as Height Above WGS 84 Ellipsoid', Variation_1073, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RES']) -> Type[Variation_1203]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GA']) -> Type[Variation_1073]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RES'], Literal['GA']]) -> Union[Type['Variation_1203'], Type['Variation_1073']]:
        if key == 'RES':
            return Variation_1203
        if key == 'GA':
            return Variation_1073
        assert_never(key)

    def __init__(self, arg : Variation_1204_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RES']) -> Variation_1203:
        ...

    @overload
    def get_item(self, name : Literal['GA']) -> Variation_1073:
        ...

    def get_item(self, name : Union[Literal['RES'], Literal['GA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RES'], val : Union[Variation_1203, Variation_1203_Arg]) -> 'Variation_1204':
        ...

    @overload
    def set_item(self, name : Literal['GA'], val : Union[Variation_1073, Variation_1073_Arg]) -> 'Variation_1204':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1205_Arg_Group = TypedDict('Variation_1205_Arg_Group', {
    'EM1': Union[Variation_19, Variation_19_Arg],
})
Variation_1205_Arg : TypeAlias = Union[Raw, Variation_1205_Arg_Group]
class Variation_1205(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('EM1', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'EM1': ('Extended Mode 1 Reply in Octal Representation', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['EM1']]) -> Union[Type['Variation_19']]:
        if key == 'EM1':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1205_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['EM1']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['EM1'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1205':
        return self._set_item(name, val) # type: ignore

Variation_1206_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['s']]]
class Variation_1206(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Signed', 1.0, 7, 's')

    def __init__(self, arg : Variation_1206_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1207_Arg : TypeAlias = Raw
class Variation_1207(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'X-pulse set to zero or no Mode 2 reply',
        1: 'X-pulse set to one (present)',
    }

    def __init__(self, arg : Variation_1207_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1208_Arg_Group = TypedDict('Variation_1208_Arg_Group', {
    'X5': Union[Variation_783, Variation_783_Arg],
    'XC': Union[Variation_784, Variation_784_Arg],
    'X3': Union[Variation_785, Variation_785_Arg],
    'X2': Union[Variation_1207, Variation_1207_Arg],
    'X1': Union[Variation_787, Variation_787_Arg],
})
Variation_1208_Arg : TypeAlias = Union[Raw, Variation_1208_Arg_Group]
class Variation_1208(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        Spare(0, 3),
        ('X5', Variation_783),
        ('XC', Variation_784),
        ('X3', Variation_785),
        ('X2', Variation_1207),
        ('X1', Variation_787),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X5': ('X-pulse from Mode 5 Data Reply or Report', Variation_783, 3, 1),
        'XC': ('X-pulse from Mode C Reply', Variation_784, 4, 1),
        'X3': ('X-pulse from Mode 3/A Reply', Variation_785, 5, 1),
        'X2': ('X-pulse from Mode 2 Reply', Variation_1207, 6, 1),
        'X1': ('X-pulse from Mode 1 Reply', Variation_787, 7, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X5']) -> Type[Variation_783]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XC']) -> Type[Variation_784]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X3']) -> Type[Variation_785]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X2']) -> Type[Variation_1207]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['X1']) -> Type[Variation_787]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X5'], Literal['XC'], Literal['X3'], Literal['X2'], Literal['X1']]) -> Union[Type['Variation_783'], Type['Variation_784'], Type['Variation_785'], Type['Variation_1207'], Type['Variation_787']]:
        if key == 'X5':
            return Variation_783
        if key == 'XC':
            return Variation_784
        if key == 'X3':
            return Variation_785
        if key == 'X2':
            return Variation_1207
        if key == 'X1':
            return Variation_787
        assert_never(key)

    def __init__(self, arg : Variation_1208_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X5']) -> Variation_783:
        ...

    @overload
    def get_item(self, name : Literal['XC']) -> Variation_784:
        ...

    @overload
    def get_item(self, name : Literal['X3']) -> Variation_785:
        ...

    @overload
    def get_item(self, name : Literal['X2']) -> Variation_1207:
        ...

    @overload
    def get_item(self, name : Literal['X1']) -> Variation_787:
        ...

    def get_item(self, name : Union[Literal['X5'], Literal['XC'], Literal['X3'], Literal['X2'], Literal['X1']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X5'], val : Union[Variation_783, Variation_783_Arg]) -> 'Variation_1208':
        ...

    @overload
    def set_item(self, name : Literal['XC'], val : Union[Variation_784, Variation_784_Arg]) -> 'Variation_1208':
        ...

    @overload
    def set_item(self, name : Literal['X3'], val : Union[Variation_785, Variation_785_Arg]) -> 'Variation_1208':
        ...

    @overload
    def set_item(self, name : Literal['X2'], val : Union[Variation_1207, Variation_1207_Arg]) -> 'Variation_1208':
        ...

    @overload
    def set_item(self, name : Literal['X1'], val : Union[Variation_787, Variation_787_Arg]) -> 'Variation_1208':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1209_Arg = TypedDict('Variation_1209_Arg', {
    'SUM': Union[Variation_1201, Variation_1201_Arg],
    'PMN': Union[Variation_1202, Variation_1202_Arg],
    'POS': Union[Variation_692, Variation_692_Arg],
    'GA': Union[Variation_1204, Variation_1204_Arg],
    'EM1': Union[Variation_1205, Variation_1205_Arg],
    'TOS': Union[Variation_1206, Variation_1206_Arg],
    'XP': Union[Variation_1208, Variation_1208_Arg],
}, total=False)
class Variation_1209(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('SUM', Variation_1201),
        ('PMN', Variation_1202),
        ('POS', Variation_692),
        ('GA', Variation_1204),
        ('EM1', Variation_1205),
        ('TOS', Variation_1206),
        ('XP', Variation_1208),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'SUM': (Variation_1201, 0x80),
        'PMN': (Variation_1202, 0x40),
        'POS': (Variation_692, 0x20),
        'GA': (Variation_1204, 0x10),
        'EM1': (Variation_1205, 0x08),
        'TOS': (Variation_1206, 0x04),
        'XP': (Variation_1208, 0x02),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SUM']) -> Type[Variation_1201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PMN']) -> Type[Variation_1202]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_692]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GA']) -> Type[Variation_1204]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EM1']) -> Type[Variation_1205]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TOS']) -> Type[Variation_1206]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['XP']) -> Type[Variation_1208]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SUM'], Literal['PMN'], Literal['POS'], Literal['GA'], Literal['EM1'], Literal['TOS'], Literal['XP']]) -> Union[Type['Variation_1201'], Type['Variation_1202'], Type['Variation_692'], Type['Variation_1204'], Type['Variation_1205'], Type['Variation_1206'], Type['Variation_1208']]:
        if key == 'SUM':
            return Variation_1201
        if key == 'PMN':
            return Variation_1202
        if key == 'POS':
            return Variation_692
        if key == 'GA':
            return Variation_1204
        if key == 'EM1':
            return Variation_1205
        if key == 'TOS':
            return Variation_1206
        if key == 'XP':
            return Variation_1208
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1209_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['SUM'], val : Union[Variation_1201, Variation_1201_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['PMN'], val : Union[Variation_1202, Variation_1202_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_692, Variation_692_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['GA'], val : Union[Variation_1204, Variation_1204_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['EM1'], val : Union[Variation_1205, Variation_1205_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['TOS'], val : Union[Variation_1206, Variation_1206_Arg]) -> 'Variation_1209':
        ...

    @overload
    def set_item(self, name : Literal['XP'], val : Union[Variation_1208, Variation_1208_Arg]) -> 'Variation_1209':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['SUM']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['PMN']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['GA']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['EM1']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['TOS']) -> 'Variation_1209':
        ...

    @overload
    def del_item(self, name : Literal['XP']) -> 'Variation_1209':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['SUM']) -> Variation_1201:
        ...

    @overload
    def get_item(self, name : Literal['PMN']) -> Variation_1202:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_692:
        ...

    @overload
    def get_item(self, name : Literal['GA']) -> Variation_1204:
        ...

    @overload
    def get_item(self, name : Literal['EM1']) -> Variation_1205:
        ...

    @overload
    def get_item(self, name : Literal['TOS']) -> Variation_1206:
        ...

    @overload
    def get_item(self, name : Literal['XP']) -> Variation_1208:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1210_Arg_Group = TypedDict('Variation_1210_Arg_Group', {
    'MODE2': Union[Variation_19, Variation_19_Arg],
})
Variation_1210_Arg : TypeAlias = Union[Raw, Variation_1210_Arg_Group]
class Variation_1210(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        Spare(0, 4),
        ('MODE2', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MODE2': ('Mode-2 Code in Octal Representation', Variation_19, 4, 12),
    }

    @classmethod
    def spec(cls, key : Union[Literal['MODE2']]) -> Union[Type['Variation_19']]:
        if key == 'MODE2':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1210_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    def get_item(self, name : Literal['MODE2']) -> Any:
        return self._get_item(name)

    def set_item(self, name : Literal['MODE2'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1210':
        return self._set_item(name, val) # type: ignore

Variation_1211_Arg_Group_1 = TypedDict('Variation_1211_Arg_Group_1', {
    'MIDENT': Union[Variation_0, Variation_0_Arg],
    'MTRACK': Union[Variation_225, Variation_225_Arg],
})
Variation_1211_Arg_Group_2 = TypedDict('Variation_1211_Arg_Group_2', {
    'MIDENT': Union[Variation_0, Variation_0_Arg],
    'MTRACK': Union[Variation_225, Variation_225_Arg],
    'SIDENT': Union[Variation_0, Variation_0_Arg],
    'STRACK': Union[Variation_225, Variation_225_Arg],
})
Variation_1211_Arg : TypeAlias = Union[
    int,
    Variation_1211_Arg_Group_1,
    Tuple[int],
    Variation_1211_Arg_Group_2,
    Tuple[int,int],
]
class Variation_1211(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 24
    ext_bit_size = 24
    groups_bit_sizes = [
        23,
        23,
    ]

    subitems_list = [
        [
            ('MIDENT', Variation_0),
            ('MTRACK', Variation_225),
        ],
        [
            ('SIDENT', Variation_0),
            ('STRACK', Variation_225),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MIDENT': ('Master System Unit Identification', Variation_0, 0, 8),
        'MTRACK': ('Master System Track Number', Variation_225, 0, 15),
        'SIDENT': ('Slave System Unit Identification', Variation_0, 0, 8),
        'STRACK': ('Slave System Track Number', Variation_225, 0, 15),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MIDENT']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MTRACK']) -> Type[Variation_225]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIDENT']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STRACK']) -> Type[Variation_225]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MIDENT'], Literal['MTRACK'], Literal['SIDENT'], Literal['STRACK']]) -> Union[Type['Variation_0'], Type['Variation_225'], Type['Variation_0'], Type['Variation_225']]:
        if key == 'MIDENT':
            return Variation_0
        if key == 'MTRACK':
            return Variation_225
        if key == 'SIDENT':
            return Variation_0
        if key == 'STRACK':
            return Variation_225
        assert_never(key)

    def __init__(self, arg : Variation_1211_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1211_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1211_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MIDENT']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['MTRACK']) -> Variation_225:
        ...

    @overload
    def get_item(self, name : Literal['SIDENT']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['STRACK']) -> Variation_225:
        ...

    def get_item(self, name : Union[Literal['MIDENT'], Literal['MTRACK'], Literal['SIDENT'], Literal['STRACK']]) -> Any:
        return self._get_item(name)

Variation_1212_Arg_Group = TypedDict('Variation_1212_Arg_Group', {
    'X': Union[Variation_157, Variation_157_Arg],
    'Y': Union[Variation_157, Variation_157_Arg],
})
Variation_1212_Arg : TypeAlias = Union[Raw, Variation_1212_Arg_Group]
class Variation_1212(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('X', Variation_157),
        ('Y', Variation_157),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('APC (X-Component)', Variation_157, 0, 16),
        'Y': ('APC (Y-Component)', Variation_157, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_157]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_157'], Type['Variation_157']]:
        if key == 'X':
            return Variation_157
        if key == 'Y':
            return Variation_157
        assert_never(key)

    def __init__(self, arg : Variation_1212_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_157:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_157:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_1212':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_157, Variation_157_Arg]) -> 'Variation_1212':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1213_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_1213(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Unsigned', 180.0, 25, '°')

    def __init__(self, arg : Variation_1213_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1214_Arg_Group = TypedDict('Variation_1214_Arg_Group', {
    'LAT': Union[Variation_1213, Variation_1213_Arg],
    'LON': Union[Variation_1213, Variation_1213_Arg],
})
Variation_1214_Arg : TypeAlias = Union[Raw, Variation_1214_Arg_Group]
class Variation_1214(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('LAT', Variation_1213),
        ('LON', Variation_1213),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'LAT': ('APW (Latitude Component)', Variation_1213, 0, 16),
        'LON': ('APW (Longitude Component)', Variation_1213, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['LAT']) -> Type[Variation_1213]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LON']) -> Type[Variation_1213]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['LAT'], Literal['LON']]) -> Union[Type['Variation_1213'], Type['Variation_1213']]:
        if key == 'LAT':
            return Variation_1213
        if key == 'LON':
            return Variation_1213
        assert_never(key)

    def __init__(self, arg : Variation_1214_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['LAT']) -> Variation_1213:
        ...

    @overload
    def get_item(self, name : Literal['LON']) -> Variation_1213:
        ...

    def get_item(self, name : Union[Literal['LAT'], Literal['LON']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['LAT'], val : Union[Variation_1213, Variation_1213_Arg]) -> 'Variation_1214':
        ...

    @overload
    def set_item(self, name : Literal['LON'], val : Union[Variation_1213, Variation_1213_Arg]) -> 'Variation_1214':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1215_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft']]]
class Variation_1215(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 25.0, 2, 'ft')

    def __init__(self, arg : Variation_1215_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1216_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['FL']]]
class Variation_1216(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 2, 'FL')

    def __init__(self, arg : Variation_1216_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1217_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s']]]
class Variation_1217(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 2, 'm/s')

    def __init__(self, arg : Variation_1217_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1218_Arg_Group = TypedDict('Variation_1218_Arg_Group', {
    'X': Union[Variation_1217, Variation_1217_Arg],
    'Y': Union[Variation_1217, Variation_1217_Arg],
})
Variation_1218_Arg : TypeAlias = Union[Raw, Variation_1218_Arg_Group]
class Variation_1218(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_1217),
        ('Y', Variation_1217),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('ATV (X-Component)', Variation_1217, 0, 8),
        'Y': ('ATV (Y-Component)', Variation_1217, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_1217]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_1217]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_1217'], Type['Variation_1217']]:
        if key == 'X':
            return Variation_1217
        if key == 'Y':
            return Variation_1217
        assert_never(key)

    def __init__(self, arg : Variation_1218_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_1217:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_1217:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_1217, Variation_1217_Arg]) -> 'Variation_1218':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_1217, Variation_1217_Arg]) -> 'Variation_1218':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1219_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['m/s2']]]
class Variation_1219(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 1.0, 2, 'm/s2')

    def __init__(self, arg : Variation_1219_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1220_Arg_Group = TypedDict('Variation_1220_Arg_Group', {
    'X': Union[Variation_1219, Variation_1219_Arg],
    'Y': Union[Variation_1219, Variation_1219_Arg],
})
Variation_1220_Arg : TypeAlias = Union[Raw, Variation_1220_Arg_Group]
class Variation_1220(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('X', Variation_1219),
        ('Y', Variation_1219),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'X': ('AA (X-Component)', Variation_1219, 0, 8),
        'Y': ('AA (Y-Component)', Variation_1219, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['X']) -> Type[Variation_1219]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['Y']) -> Type[Variation_1219]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['X'], Literal['Y']]) -> Union[Type['Variation_1219'], Type['Variation_1219']]:
        if key == 'X':
            return Variation_1219
        if key == 'Y':
            return Variation_1219
        assert_never(key)

    def __init__(self, arg : Variation_1220_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['X']) -> Variation_1219:
        ...

    @overload
    def get_item(self, name : Literal['Y']) -> Variation_1219:
        ...

    def get_item(self, name : Union[Literal['X'], Literal['Y']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['X'], val : Union[Variation_1219, Variation_1219_Arg]) -> 'Variation_1220':
        ...

    @overload
    def set_item(self, name : Literal['Y'], val : Union[Variation_1219, Variation_1219_Arg]) -> 'Variation_1220':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1221_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ft/min']]]
class Variation_1221(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    quantity = Quantity('Unsigned', 25.0, 2, 'ft/min')

    def __init__(self, arg : Variation_1221_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1222_Arg = TypedDict('Variation_1222_Arg', {
    'APC': Union[Variation_1212, Variation_1212_Arg],
    'COV': Union[Variation_391, Variation_391_Arg],
    'APW': Union[Variation_1214, Variation_1214_Arg],
    'AGA': Union[Variation_1215, Variation_1215_Arg],
    'ABA': Union[Variation_1216, Variation_1216_Arg],
    'ATV': Union[Variation_1218, Variation_1218_Arg],
    'AA': Union[Variation_1220, Variation_1220_Arg],
    'ARC': Union[Variation_1221, Variation_1221_Arg],
}, total=False)
class Variation_1222(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('APC', Variation_1212),
        ('COV', Variation_391),
        ('APW', Variation_1214),
        ('AGA', Variation_1215),
        ('ABA', Variation_1216),
        ('ATV', Variation_1218),
        ('AA', Variation_1220),
        ('ARC', Variation_1221),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'APC': (Variation_1212, 0x8000),
        'COV': (Variation_391, 0x4000),
        'APW': (Variation_1214, 0x2000),
        'AGA': (Variation_1215, 0x1000),
        'ABA': (Variation_1216, 0x0800),
        'ATV': (Variation_1218, 0x0400),
        'AA': (Variation_1220, 0x0200),
        'ARC': (Variation_1221, 0x0180),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['APC']) -> Type[Variation_1212]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COV']) -> Type[Variation_391]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['APW']) -> Type[Variation_1214]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AGA']) -> Type[Variation_1215]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ABA']) -> Type[Variation_1216]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ATV']) -> Type[Variation_1218]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AA']) -> Type[Variation_1220]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_1221]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['APC'], Literal['COV'], Literal['APW'], Literal['AGA'], Literal['ABA'], Literal['ATV'], Literal['AA'], Literal['ARC']]) -> Union[Type['Variation_1212'], Type['Variation_391'], Type['Variation_1214'], Type['Variation_1215'], Type['Variation_1216'], Type['Variation_1218'], Type['Variation_1220'], Type['Variation_1221']]:
        if key == 'APC':
            return Variation_1212
        if key == 'COV':
            return Variation_391
        if key == 'APW':
            return Variation_1214
        if key == 'AGA':
            return Variation_1215
        if key == 'ABA':
            return Variation_1216
        if key == 'ATV':
            return Variation_1218
        if key == 'AA':
            return Variation_1220
        if key == 'ARC':
            return Variation_1221
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1222_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['APC'], val : Union[Variation_1212, Variation_1212_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['COV'], val : Union[Variation_391, Variation_391_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['APW'], val : Union[Variation_1214, Variation_1214_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['AGA'], val : Union[Variation_1215, Variation_1215_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['ABA'], val : Union[Variation_1216, Variation_1216_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['ATV'], val : Union[Variation_1218, Variation_1218_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['AA'], val : Union[Variation_1220, Variation_1220_Arg]) -> 'Variation_1222':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_1221, Variation_1221_Arg]) -> 'Variation_1222':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['APC']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['COV']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['APW']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['AGA']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['ABA']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['ATV']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['AA']) -> 'Variation_1222':
        ...

    @overload
    def del_item(self, name : Literal['ARC']) -> 'Variation_1222':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['APC']) -> Variation_1212:
        ...

    @overload
    def get_item(self, name : Literal['COV']) -> Variation_391:
        ...

    @overload
    def get_item(self, name : Literal['APW']) -> Variation_1214:
        ...

    @overload
    def get_item(self, name : Literal['AGA']) -> Variation_1215:
        ...

    @overload
    def get_item(self, name : Literal['ABA']) -> Variation_1216:
        ...

    @overload
    def get_item(self, name : Literal['ATV']) -> Variation_1218:
        ...

    @overload
    def get_item(self, name : Literal['AA']) -> Variation_1220:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_1221:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1223_Arg_Group = TypedDict('Variation_1223_Arg_Group', {
    'RHO': Union[Variation_581, Variation_581_Arg],
    'THETA': Union[Variation_14, Variation_14_Arg],
})
Variation_1223_Arg : TypeAlias = Union[Raw, Variation_1223_Arg_Group]
class Variation_1223(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('RHO', Variation_581),
        ('THETA', Variation_14),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'RHO': ('Measured Distance', Variation_581, 0, 16),
        'THETA': ('Measured Azimuth', Variation_14, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['RHO']) -> Type[Variation_581]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['THETA']) -> Type[Variation_14]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['RHO'], Literal['THETA']]) -> Union[Type['Variation_581'], Type['Variation_14']]:
        if key == 'RHO':
            return Variation_581
        if key == 'THETA':
            return Variation_14
        assert_never(key)

    def __init__(self, arg : Variation_1223_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['RHO']) -> Variation_581:
        ...

    @overload
    def get_item(self, name : Literal['THETA']) -> Variation_14:
        ...

    def get_item(self, name : Union[Literal['RHO'], Literal['THETA']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['RHO'], val : Union[Variation_581, Variation_581_Arg]) -> 'Variation_1223':
        ...

    @overload
    def set_item(self, name : Literal['THETA'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1223':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1224_Arg_Group = TypedDict('Variation_1224_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'LMC': Union[Variation_21, Variation_21_Arg],
})
Variation_1224_Arg : TypeAlias = Union[Raw, Variation_1224_Arg_Group]
class Variation_1224(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('LMC', Variation_21),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'LMC': ('Last Measured Mode C Code', Variation_21, 2, 14),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['LMC']) -> Type[Variation_21]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['LMC']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_21']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'LMC':
            return Variation_21
        assert_never(key)

    def __init__(self, arg : Variation_1224_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['LMC']) -> Variation_21:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['LMC']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1224':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1224':
        ...

    @overload
    def set_item(self, name : Literal['LMC'], val : Union[Variation_21, Variation_21_Arg]) -> 'Variation_1224':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1225_Arg : TypeAlias = Raw
class Variation_1225(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Mode 3/A code as derived from the reply of the transponder',
        1: 'Mode 3/A code as provided by a sensor local tracker',
    }

    def __init__(self, arg : Variation_1225_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1226_Arg_Group = TypedDict('Variation_1226_Arg_Group', {
    'V': Union[Variation_16, Variation_16_Arg],
    'G': Union[Variation_17, Variation_17_Arg],
    'L': Union[Variation_1225, Variation_1225_Arg],
    'MODE3A': Union[Variation_19, Variation_19_Arg],
})
Variation_1226_Arg : TypeAlias = Union[Raw, Variation_1226_Arg_Group]
class Variation_1226(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('V', Variation_16),
        ('G', Variation_17),
        ('L', Variation_1225),
        Spare(3, 1),
        ('MODE3A', Variation_19),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'V': ('Validated', Variation_16, 0, 1),
        'G': ('Garbled', Variation_17, 1, 1),
        'L': ('', Variation_1225, 2, 1),
        'MODE3A': ('Mode-3/A Reply in Octal Representation', Variation_19, 4, 12),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['V']) -> Type[Variation_16]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['G']) -> Type[Variation_17]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['L']) -> Type[Variation_1225]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MODE3A']) -> Type[Variation_19]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Union[Type['Variation_16'], Type['Variation_17'], Type['Variation_1225'], Type['Variation_19']]:
        if key == 'V':
            return Variation_16
        if key == 'G':
            return Variation_17
        if key == 'L':
            return Variation_1225
        if key == 'MODE3A':
            return Variation_19
        assert_never(key)

    def __init__(self, arg : Variation_1226_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['V']) -> Variation_16:
        ...

    @overload
    def get_item(self, name : Literal['G']) -> Variation_17:
        ...

    @overload
    def get_item(self, name : Literal['L']) -> Variation_1225:
        ...

    @overload
    def get_item(self, name : Literal['MODE3A']) -> Variation_19:
        ...

    def get_item(self, name : Union[Literal['V'], Literal['G'], Literal['L'], Literal['MODE3A']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['V'], val : Union[Variation_16, Variation_16_Arg]) -> 'Variation_1226':
        ...

    @overload
    def set_item(self, name : Literal['G'], val : Union[Variation_17, Variation_17_Arg]) -> 'Variation_1226':
        ...

    @overload
    def set_item(self, name : Literal['L'], val : Union[Variation_1225, Variation_1225_Arg]) -> 'Variation_1226':
        ...

    @overload
    def set_item(self, name : Literal['MODE3A'], val : Union[Variation_19, Variation_19_Arg]) -> 'Variation_1226':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1227_Arg : TypeAlias = Raw
class Variation_1227(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 3
    table = {
        0: 'No detection',
        1: 'Single PSR detection',
        2: 'Single SSR detection',
        3: 'SSR + PSR detection',
        4: 'Single ModeS All-Call',
        5: 'Single ModeS Roll-Call',
        6: 'ModeS All-Call + PSR',
        7: 'ModeS Roll-Call + PSR',
    }

    def __init__(self, arg : Variation_1227_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1228_Arg : TypeAlias = Raw
class Variation_1228(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'Report from target transponder',
        1: 'Report from field monitor (item transponder)',
    }

    def __init__(self, arg : Variation_1228_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1229_Arg : TypeAlias = Raw
class Variation_1229(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Real target report',
        1: 'Test target report',
    }

    def __init__(self, arg : Variation_1229_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1230_Arg_Group = TypedDict('Variation_1230_Arg_Group', {
    'TYP': Union[Variation_1227, Variation_1227_Arg],
    'SIM': Union[Variation_1038, Variation_1038_Arg],
    'RAB': Union[Variation_1228, Variation_1228_Arg],
    'TST': Union[Variation_1229, Variation_1229_Arg],
})
Variation_1230_Arg : TypeAlias = Union[Raw, Variation_1230_Arg_Group]
class Variation_1230(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('TYP', Variation_1227),
        ('SIM', Variation_1038),
        ('RAB', Variation_1228),
        ('TST', Variation_1229),
        Spare(6, 2),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'TYP': ('Report Type', Variation_1227, 0, 3),
        'SIM': ('', Variation_1038, 3, 1),
        'RAB': ('', Variation_1228, 4, 1),
        'TST': ('', Variation_1229, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1227]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_1038]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAB']) -> Type[Variation_1228]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TST']) -> Type[Variation_1229]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['TYP'], Literal['SIM'], Literal['RAB'], Literal['TST']]) -> Union[Type['Variation_1227'], Type['Variation_1038'], Type['Variation_1228'], Type['Variation_1229']]:
        if key == 'TYP':
            return Variation_1227
        if key == 'SIM':
            return Variation_1038
        if key == 'RAB':
            return Variation_1228
        if key == 'TST':
            return Variation_1229
        assert_never(key)

    def __init__(self, arg : Variation_1230_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1227:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_1038:
        ...

    @overload
    def get_item(self, name : Literal['RAB']) -> Variation_1228:
        ...

    @overload
    def get_item(self, name : Literal['TST']) -> Variation_1229:
        ...

    def get_item(self, name : Union[Literal['TYP'], Literal['SIM'], Literal['RAB'], Literal['TST']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1227, Variation_1227_Arg]) -> 'Variation_1230':
        ...

    @overload
    def set_item(self, name : Literal['SIM'], val : Union[Variation_1038, Variation_1038_Arg]) -> 'Variation_1230':
        ...

    @overload
    def set_item(self, name : Literal['RAB'], val : Union[Variation_1228, Variation_1228_Arg]) -> 'Variation_1230':
        ...

    @overload
    def set_item(self, name : Literal['TST'], val : Union[Variation_1229, Variation_1229_Arg]) -> 'Variation_1230':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1231_Arg = TypedDict('Variation_1231_Arg', {
    'SID': Union[Variation_1, Variation_1_Arg],
    'POS': Union[Variation_1223, Variation_1223_Arg],
    'HEIGHT': Union[Variation_198, Variation_198_Arg],
    'MDC': Union[Variation_1224, Variation_1224_Arg],
    'MDA': Union[Variation_1226, Variation_1226_Arg],
    'TYP': Union[Variation_1230, Variation_1230_Arg],
}, total=False)
class Variation_1231(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('SID', Variation_1),
        ('POS', Variation_1223),
        ('HEIGHT', Variation_198),
        ('MDC', Variation_1224),
        ('MDA', Variation_1226),
        ('TYP', Variation_1230),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'SID': (Variation_1, 0x80),
        'POS': (Variation_1223, 0x40),
        'HEIGHT': (Variation_198, 0x20),
        'MDC': (Variation_1224, 0x10),
        'MDA': (Variation_1226, 0x08),
        'TYP': (Variation_1230, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SID']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_1223]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HEIGHT']) -> Type[Variation_198]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDC']) -> Type[Variation_1224]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDA']) -> Type[Variation_1226]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1230]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SID'], Literal['POS'], Literal['HEIGHT'], Literal['MDC'], Literal['MDA'], Literal['TYP']]) -> Union[Type['Variation_1'], Type['Variation_1223'], Type['Variation_198'], Type['Variation_1224'], Type['Variation_1226'], Type['Variation_1230']]:
        if key == 'SID':
            return Variation_1
        if key == 'POS':
            return Variation_1223
        if key == 'HEIGHT':
            return Variation_198
        if key == 'MDC':
            return Variation_1224
        if key == 'MDA':
            return Variation_1226
        if key == 'TYP':
            return Variation_1230
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1231_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['SID'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1231':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_1223, Variation_1223_Arg]) -> 'Variation_1231':
        ...

    @overload
    def set_item(self, name : Literal['HEIGHT'], val : Union[Variation_198, Variation_198_Arg]) -> 'Variation_1231':
        ...

    @overload
    def set_item(self, name : Literal['MDC'], val : Union[Variation_1224, Variation_1224_Arg]) -> 'Variation_1231':
        ...

    @overload
    def set_item(self, name : Literal['MDA'], val : Union[Variation_1226, Variation_1226_Arg]) -> 'Variation_1231':
        ...

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1230, Variation_1230_Arg]) -> 'Variation_1231':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['SID']) -> 'Variation_1231':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1231':
        ...

    @overload
    def del_item(self, name : Literal['HEIGHT']) -> 'Variation_1231':
        ...

    @overload
    def del_item(self, name : Literal['MDC']) -> 'Variation_1231':
        ...

    @overload
    def del_item(self, name : Literal['MDA']) -> 'Variation_1231':
        ...

    @overload
    def del_item(self, name : Literal['TYP']) -> 'Variation_1231':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['SID']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_1223:
        ...

    @overload
    def get_item(self, name : Literal['HEIGHT']) -> Variation_198:
        ...

    @overload
    def get_item(self, name : Literal['MDC']) -> Variation_1224:
        ...

    @overload
    def get_item(self, name : Literal['MDA']) -> Variation_1226:
        ...

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1230:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1232_Arg = TypedDict('Variation_1232_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '105': Union[Variation_636, Variation_636_Arg],
    '100': Union[Variation_1120, Variation_1120_Arg],
    '185': Union[Variation_1121, Variation_1121_Arg],
    '210': Union[Variation_651, Variation_651_Arg],
    '060': Union[Variation_1123, Variation_1123_Arg],
    '245': Union[Variation_1125, Variation_1125_Arg],
    '380': Union[Variation_1157, Variation_1157_Arg],
    '040': Union[Variation_64, Variation_64_Arg],
    '080': Union[Variation_1179, Variation_1179_Arg],
    '290': Union[Variation_1180, Variation_1180_Arg],
    '200': Union[Variation_1185, Variation_1185_Arg],
    '295': Union[Variation_1186, Variation_1186_Arg],
    '136': Union[Variation_361, Variation_361_Arg],
    '130': Union[Variation_288, Variation_288_Arg],
    '135': Union[Variation_1187, Variation_1187_Arg],
    '220': Union[Variation_365, Variation_365_Arg],
    '390': Union[Variation_1194, Variation_1194_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '110': Union[Variation_1209, Variation_1209_Arg],
    '120': Union[Variation_1210, Variation_1210_Arg],
    '510': Union[Variation_1211, Variation_1211_Arg],
    '500': Union[Variation_1222, Variation_1222_Arg],
    '340': Union[Variation_1231, Variation_1231_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1232(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        None,
        ('015', Variation_0),
        ('070', Variation_81),
        ('105', Variation_636),
        ('100', Variation_1120),
        ('185', Variation_1121),
        ('210', Variation_651),
        ('060', Variation_1123),
        ('245', Variation_1125),
        ('380', Variation_1157),
        ('040', Variation_64),
        ('080', Variation_1179),
        ('290', Variation_1180),
        ('200', Variation_1185),
        ('295', Variation_1186),
        ('136', Variation_361),
        ('130', Variation_288),
        ('135', Variation_1187),
        ('220', Variation_365),
        ('390', Variation_1194),
        ('270', Variation_291),
        ('300', Variation_286),
        ('110', Variation_1209),
        ('120', Variation_1210),
        ('510', Variation_1211),
        ('500', Variation_1222),
        ('340', Variation_1231),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '015': (Variation_0, 0x2000000000),
        '070': (Variation_81, 0x1000000000),
        '105': (Variation_636, 0x0800000000),
        '100': (Variation_1120, 0x0400000000),
        '185': (Variation_1121, 0x0200000000),
        '210': (Variation_651, 0x0180000000),
        '060': (Variation_1123, 0x0140000000),
        '245': (Variation_1125, 0x0120000000),
        '380': (Variation_1157, 0x0110000000),
        '040': (Variation_64, 0x0108000000),
        '080': (Variation_1179, 0x0104000000),
        '290': (Variation_1180, 0x0102000000),
        '200': (Variation_1185, 0x0101800000),
        '295': (Variation_1186, 0x0101400000),
        '136': (Variation_361, 0x0101200000),
        '130': (Variation_288, 0x0101100000),
        '135': (Variation_1187, 0x0101080000),
        '220': (Variation_365, 0x0101040000),
        '390': (Variation_1194, 0x0101020000),
        '270': (Variation_291, 0x0101018000),
        '300': (Variation_286, 0x0101014000),
        '110': (Variation_1209, 0x0101012000),
        '120': (Variation_1210, 0x0101011000),
        '510': (Variation_1211, 0x0101010800),
        '500': (Variation_1222, 0x0101010400),
        '340': (Variation_1231, 0x0101010200),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1120]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['185']) -> Type[Variation_1121]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_651]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1123]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_1125]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['380']) -> Type[Variation_1157]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_1179]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['290']) -> Type[Variation_1180]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_1185]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_1186]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['136']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['135']) -> Type[Variation_1187]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['390']) -> Type[Variation_1194]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['510']) -> Type[Variation_1211]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_1222]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['340']) -> Type[Variation_1231]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['070'], Literal['105'], Literal['100'], Literal['185'], Literal['210'], Literal['060'], Literal['245'], Literal['380'], Literal['040'], Literal['080'], Literal['290'], Literal['200'], Literal['295'], Literal['136'], Literal['130'], Literal['135'], Literal['220'], Literal['390'], Literal['270'], Literal['300'], Literal['110'], Literal['120'], Literal['510'], Literal['500'], Literal['340'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_81'], Type['Variation_636'], Type['Variation_1120'], Type['Variation_1121'], Type['Variation_651'], Type['Variation_1123'], Type['Variation_1125'], Type['Variation_1157'], Type['Variation_64'], Type['Variation_1179'], Type['Variation_1180'], Type['Variation_1185'], Type['Variation_1186'], Type['Variation_361'], Type['Variation_288'], Type['Variation_1187'], Type['Variation_365'], Type['Variation_1194'], Type['Variation_291'], Type['Variation_286'], Type['Variation_1209'], Type['Variation_1210'], Type['Variation_1211'], Type['Variation_1222'], Type['Variation_1231'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '070':
            return Variation_81
        if key == '105':
            return Variation_636
        if key == '100':
            return Variation_1120
        if key == '185':
            return Variation_1121
        if key == '210':
            return Variation_651
        if key == '060':
            return Variation_1123
        if key == '245':
            return Variation_1125
        if key == '380':
            return Variation_1157
        if key == '040':
            return Variation_64
        if key == '080':
            return Variation_1179
        if key == '290':
            return Variation_1180
        if key == '200':
            return Variation_1185
        if key == '295':
            return Variation_1186
        if key == '136':
            return Variation_361
        if key == '130':
            return Variation_288
        if key == '135':
            return Variation_1187
        if key == '220':
            return Variation_365
        if key == '390':
            return Variation_1194
        if key == '270':
            return Variation_291
        if key == '300':
            return Variation_286
        if key == '110':
            return Variation_1209
        if key == '120':
            return Variation_1210
        if key == '510':
            return Variation_1211
        if key == '500':
            return Variation_1222
        if key == '340':
            return Variation_1231
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1232_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1120, Variation_1120_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['185'], val : Union[Variation_1121, Variation_1121_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_651, Variation_651_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1123, Variation_1123_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_1125, Variation_1125_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['380'], val : Union[Variation_1157, Variation_1157_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_1179, Variation_1179_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['290'], val : Union[Variation_1180, Variation_1180_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_1185, Variation_1185_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_1186, Variation_1186_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['136'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['135'], val : Union[Variation_1187, Variation_1187_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['390'], val : Union[Variation_1194, Variation_1194_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1209, Variation_1209_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1210, Variation_1210_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['510'], val : Union[Variation_1211, Variation_1211_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_1222, Variation_1222_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['340'], val : Union[Variation_1231, Variation_1231_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1232':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1232':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['185']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['380']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['290']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['136']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['135']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['390']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['510']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['340']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1232':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1232':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1120:
        ...

    @overload
    def get_item(self, name : Literal['185']) -> Variation_1121:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_651:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1123:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_1125:
        ...

    @overload
    def get_item(self, name : Literal['380']) -> Variation_1157:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_1179:
        ...

    @overload
    def get_item(self, name : Literal['290']) -> Variation_1180:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_1185:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_1186:
        ...

    @overload
    def get_item(self, name : Literal['136']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['135']) -> Variation_1187:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['390']) -> Variation_1194:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1209:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1210:
        ...

    @overload
    def get_item(self, name : Literal['510']) -> Variation_1211:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_1222:
        ...

    @overload
    def get_item(self, name : Literal['340']) -> Variation_1231:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1233_Arg : TypeAlias = Raw
class Variation_1233(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 3
    table = {
        0: 'No alert, no SPI, aircraft airborne',
        1: 'No alert, no SPI, aircraft on ground',
        2: 'Alert, no SPI, aircraft airborne',
        3: 'Alert, no SPI, aircraft on ground',
        4: 'Alert, SPI, aircraft airborne or on ground',
        5: 'No alert, SPI, aircraft airborne or on ground',
        6: 'Not defined',
        7: 'Unknown or not yet extracted',
    }

    def __init__(self, arg : Variation_1233_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1234_Arg_Group = TypedDict('Variation_1234_Arg_Group', {
    'COM': Union[Variation_323, Variation_323_Arg],
    'STAT': Union[Variation_1233, Variation_1233_Arg],
    'SSC': Union[Variation_325, Variation_325_Arg],
    'ARC': Union[Variation_326, Variation_326_Arg],
    'AIC': Union[Variation_327, Variation_327_Arg],
    'B1A': Union[Variation_238, Variation_238_Arg],
    'B1B': Union[Variation_283, Variation_283_Arg],
})
Variation_1234_Arg : TypeAlias = Union[Raw, Variation_1234_Arg_Group]
class Variation_1234(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('COM', Variation_323),
        ('STAT', Variation_1233),
        Spare(6, 2),
        ('SSC', Variation_325),
        ('ARC', Variation_326),
        ('AIC', Variation_327),
        ('B1A', Variation_238),
        ('B1B', Variation_283),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'COM': ('Communications Capability of the Transponder', Variation_323, 0, 3),
        'STAT': ('Flight Status', Variation_1233, 3, 3),
        'SSC': ('Specific Service Capability', Variation_325, 8, 1),
        'ARC': ('Altitude Reporting Capability', Variation_326, 9, 1),
        'AIC': ('Aircraft Identification Capability', Variation_327, 10, 1),
        'B1A': ('BDS 1,0 Bit 16', Variation_238, 11, 1),
        'B1B': ('BDS BDS 1,0 Bits 37/40', Variation_283, 12, 4),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_323]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STAT']) -> Type[Variation_1233]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSC']) -> Type[Variation_325]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ARC']) -> Type[Variation_326]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AIC']) -> Type[Variation_327]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1A']) -> Type[Variation_238]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['B1B']) -> Type[Variation_283]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Union[Type['Variation_323'], Type['Variation_1233'], Type['Variation_325'], Type['Variation_326'], Type['Variation_327'], Type['Variation_238'], Type['Variation_283']]:
        if key == 'COM':
            return Variation_323
        if key == 'STAT':
            return Variation_1233
        if key == 'SSC':
            return Variation_325
        if key == 'ARC':
            return Variation_326
        if key == 'AIC':
            return Variation_327
        if key == 'B1A':
            return Variation_238
        if key == 'B1B':
            return Variation_283
        assert_never(key)

    def __init__(self, arg : Variation_1234_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_323:
        ...

    @overload
    def get_item(self, name : Literal['STAT']) -> Variation_1233:
        ...

    @overload
    def get_item(self, name : Literal['SSC']) -> Variation_325:
        ...

    @overload
    def get_item(self, name : Literal['ARC']) -> Variation_326:
        ...

    @overload
    def get_item(self, name : Literal['AIC']) -> Variation_327:
        ...

    @overload
    def get_item(self, name : Literal['B1A']) -> Variation_238:
        ...

    @overload
    def get_item(self, name : Literal['B1B']) -> Variation_283:
        ...

    def get_item(self, name : Union[Literal['COM'], Literal['STAT'], Literal['SSC'], Literal['ARC'], Literal['AIC'], Literal['B1A'], Literal['B1B']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_323, Variation_323_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['STAT'], val : Union[Variation_1233, Variation_1233_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['SSC'], val : Union[Variation_325, Variation_325_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['ARC'], val : Union[Variation_326, Variation_326_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['AIC'], val : Union[Variation_327, Variation_327_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['B1A'], val : Union[Variation_238, Variation_238_Arg]) -> 'Variation_1234':
        ...

    @overload
    def set_item(self, name : Literal['B1B'], val : Union[Variation_283, Variation_283_Arg]) -> 'Variation_1234':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1235_Arg = TypedDict('Variation_1235_Arg', {
    'ADR': Union[Variation_279, Variation_279_Arg],
    'ID': Union[Variation_201, Variation_201_Arg],
    'MHG': Union[Variation_14, Variation_14_Arg],
    'IAS': Union[Variation_1127, Variation_1127_Arg],
    'TAS': Union[Variation_707, Variation_707_Arg],
    'SAL': Union[Variation_1130, Variation_1130_Arg],
    'FSS': Union[Variation_1131, Variation_1131_Arg],
    'TIS': Union[Variation_1134, Variation_1134_Arg],
    'TID': Union[Variation_1136, Variation_1136_Arg],
    'COM': Union[Variation_1234, Variation_1234_Arg],
    'SAB': Union[Variation_1144, Variation_1144_Arg],
    'ACS': Union[Variation_282, Variation_282_Arg],
    'BVR': Union[Variation_365, Variation_365_Arg],
    'GVR': Union[Variation_365, Variation_365_Arg],
    'RAN': Union[Variation_704, Variation_704_Arg],
    'TAR': Union[Variation_1145, Variation_1145_Arg],
    'TAN': Union[Variation_14, Variation_14_Arg],
    'GS': Union[Variation_708, Variation_708_Arg],
    'VUN': Union[Variation_0, Variation_0_Arg],
    'MET': Union[Variation_1150, Variation_1150_Arg],
    'EMC': Union[Variation_1151, Variation_1151_Arg],
    'POS': Union[Variation_1152, Variation_1152_Arg],
    'GAL': Union[Variation_288, Variation_288_Arg],
    'PUN': Union[Variation_1153, Variation_1153_Arg],
    'MB': Union[Variation_322, Variation_322_Arg],
    'IAR': Union[Variation_707, Variation_707_Arg],
    'MAC': Union[Variation_1154, Variation_1154_Arg],
    'BPS': Union[Variation_1156, Variation_1156_Arg],
}, total=False)
class Variation_1235(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('ADR', Variation_279),
        ('ID', Variation_201),
        ('MHG', Variation_14),
        ('IAS', Variation_1127),
        ('TAS', Variation_707),
        ('SAL', Variation_1130),
        ('FSS', Variation_1131),
        ('TIS', Variation_1134),
        ('TID', Variation_1136),
        ('COM', Variation_1234),
        ('SAB', Variation_1144),
        ('ACS', Variation_282),
        ('BVR', Variation_365),
        ('GVR', Variation_365),
        ('RAN', Variation_704),
        ('TAR', Variation_1145),
        ('TAN', Variation_14),
        ('GS', Variation_708),
        ('VUN', Variation_0),
        ('MET', Variation_1150),
        ('EMC', Variation_1151),
        ('POS', Variation_1152),
        ('GAL', Variation_288),
        ('PUN', Variation_1153),
        ('MB', Variation_322),
        ('IAR', Variation_707),
        ('MAC', Variation_1154),
        ('BPS', Variation_1156),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'ADR': (Variation_279, 0x80000000),
        'ID': (Variation_201, 0x40000000),
        'MHG': (Variation_14, 0x20000000),
        'IAS': (Variation_1127, 0x10000000),
        'TAS': (Variation_707, 0x08000000),
        'SAL': (Variation_1130, 0x04000000),
        'FSS': (Variation_1131, 0x02000000),
        'TIS': (Variation_1134, 0x01800000),
        'TID': (Variation_1136, 0x01400000),
        'COM': (Variation_1234, 0x01200000),
        'SAB': (Variation_1144, 0x01100000),
        'ACS': (Variation_282, 0x01080000),
        'BVR': (Variation_365, 0x01040000),
        'GVR': (Variation_365, 0x01020000),
        'RAN': (Variation_704, 0x01018000),
        'TAR': (Variation_1145, 0x01014000),
        'TAN': (Variation_14, 0x01012000),
        'GS': (Variation_708, 0x01011000),
        'VUN': (Variation_0, 0x01010800),
        'MET': (Variation_1150, 0x01010400),
        'EMC': (Variation_1151, 0x01010200),
        'POS': (Variation_1152, 0x01010180),
        'GAL': (Variation_288, 0x01010140),
        'PUN': (Variation_1153, 0x01010120),
        'MB': (Variation_322, 0x01010110),
        'IAR': (Variation_707, 0x01010108),
        'MAC': (Variation_1154, 0x01010104),
        'BPS': (Variation_1156, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ADR']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MHG']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAS']) -> Type[Variation_1127]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAL']) -> Type[Variation_1130]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSS']) -> Type[Variation_1131]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TIS']) -> Type[Variation_1134]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_1136]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_1234]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAB']) -> Type[Variation_1144]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACS']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAN']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_1145]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAN']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GS']) -> Type[Variation_708]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VUN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_1150]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMC']) -> Type[Variation_1151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_1152]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAL']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PUN']) -> Type[Variation_1153]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAR']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAC']) -> Type[Variation_1154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_1156]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ADR'], Literal['ID'], Literal['MHG'], Literal['IAS'], Literal['TAS'], Literal['SAL'], Literal['FSS'], Literal['TIS'], Literal['TID'], Literal['COM'], Literal['SAB'], Literal['ACS'], Literal['BVR'], Literal['GVR'], Literal['RAN'], Literal['TAR'], Literal['TAN'], Literal['GS'], Literal['VUN'], Literal['MET'], Literal['EMC'], Literal['POS'], Literal['GAL'], Literal['PUN'], Literal['MB'], Literal['IAR'], Literal['MAC'], Literal['BPS']]) -> Union[Type['Variation_279'], Type['Variation_201'], Type['Variation_14'], Type['Variation_1127'], Type['Variation_707'], Type['Variation_1130'], Type['Variation_1131'], Type['Variation_1134'], Type['Variation_1136'], Type['Variation_1234'], Type['Variation_1144'], Type['Variation_282'], Type['Variation_365'], Type['Variation_365'], Type['Variation_704'], Type['Variation_1145'], Type['Variation_14'], Type['Variation_708'], Type['Variation_0'], Type['Variation_1150'], Type['Variation_1151'], Type['Variation_1152'], Type['Variation_288'], Type['Variation_1153'], Type['Variation_322'], Type['Variation_707'], Type['Variation_1154'], Type['Variation_1156']]:
        if key == 'ADR':
            return Variation_279
        if key == 'ID':
            return Variation_201
        if key == 'MHG':
            return Variation_14
        if key == 'IAS':
            return Variation_1127
        if key == 'TAS':
            return Variation_707
        if key == 'SAL':
            return Variation_1130
        if key == 'FSS':
            return Variation_1131
        if key == 'TIS':
            return Variation_1134
        if key == 'TID':
            return Variation_1136
        if key == 'COM':
            return Variation_1234
        if key == 'SAB':
            return Variation_1144
        if key == 'ACS':
            return Variation_282
        if key == 'BVR':
            return Variation_365
        if key == 'GVR':
            return Variation_365
        if key == 'RAN':
            return Variation_704
        if key == 'TAR':
            return Variation_1145
        if key == 'TAN':
            return Variation_14
        if key == 'GS':
            return Variation_708
        if key == 'VUN':
            return Variation_0
        if key == 'MET':
            return Variation_1150
        if key == 'EMC':
            return Variation_1151
        if key == 'POS':
            return Variation_1152
        if key == 'GAL':
            return Variation_288
        if key == 'PUN':
            return Variation_1153
        if key == 'MB':
            return Variation_322
        if key == 'IAR':
            return Variation_707
        if key == 'MAC':
            return Variation_1154
        if key == 'BPS':
            return Variation_1156
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1235_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['ADR'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['ID'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['MHG'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['IAS'], val : Union[Variation_1127, Variation_1127_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['SAL'], val : Union[Variation_1130, Variation_1130_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['FSS'], val : Union[Variation_1131, Variation_1131_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['TIS'], val : Union[Variation_1134, Variation_1134_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_1136, Variation_1136_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_1234, Variation_1234_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['SAB'], val : Union[Variation_1144, Variation_1144_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['ACS'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['RAN'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_1145, Variation_1145_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['TAN'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['GS'], val : Union[Variation_708, Variation_708_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['VUN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_1150, Variation_1150_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['EMC'], val : Union[Variation_1151, Variation_1151_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_1152, Variation_1152_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['GAL'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['PUN'], val : Union[Variation_1153, Variation_1153_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['IAR'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['MAC'], val : Union[Variation_1154, Variation_1154_Arg]) -> 'Variation_1235':
        ...

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_1156, Variation_1156_Arg]) -> 'Variation_1235':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['ADR']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['ID']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['MHG']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['IAS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['SAL']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['FSS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['TIS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['TID']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['SAB']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['ACS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['RAN']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['TAN']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['GS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['VUN']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['EMC']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['GAL']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['PUN']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['IAR']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['MAC']) -> 'Variation_1235':
        ...

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_1235':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['ADR']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['MHG']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['IAS']) -> Variation_1127:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['SAL']) -> Variation_1130:
        ...

    @overload
    def get_item(self, name : Literal['FSS']) -> Variation_1131:
        ...

    @overload
    def get_item(self, name : Literal['TIS']) -> Variation_1134:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_1136:
        ...

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_1234:
        ...

    @overload
    def get_item(self, name : Literal['SAB']) -> Variation_1144:
        ...

    @overload
    def get_item(self, name : Literal['ACS']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['RAN']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_1145:
        ...

    @overload
    def get_item(self, name : Literal['TAN']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['GS']) -> Variation_708:
        ...

    @overload
    def get_item(self, name : Literal['VUN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_1150:
        ...

    @overload
    def get_item(self, name : Literal['EMC']) -> Variation_1151:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_1152:
        ...

    @overload
    def get_item(self, name : Literal['GAL']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['PUN']) -> Variation_1153:
        ...

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['IAR']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['MAC']) -> Variation_1154:
        ...

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_1156:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1236_Arg : TypeAlias = Raw
class Variation_1236(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Surface target',
    }

    def __init__(self, arg : Variation_1236_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1237_Arg : TypeAlias = Raw
class Variation_1237(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'No indication',
        1: 'Duplicate Flight-ID',
    }

    def __init__(self, arg : Variation_1237_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1238_Arg : TypeAlias = Raw
class Variation_1238(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default value',
        1: 'Inconsistent Emergency Code',
    }

    def __init__(self, arg : Variation_1238_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1239_Arg_Group_1 = TypedDict('Variation_1239_Arg_Group_1', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
})
Variation_1239_Arg_Group_2 = TypedDict('Variation_1239_Arg_Group_2', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
})
Variation_1239_Arg_Group_3 = TypedDict('Variation_1239_Arg_Group_3', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
})
Variation_1239_Arg_Group_4 = TypedDict('Variation_1239_Arg_Group_4', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
})
Variation_1239_Arg_Group_5 = TypedDict('Variation_1239_Arg_Group_5', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
    'SDS': Union[Variation_1172, Variation_1172_Arg],
    'EMS': Union[Variation_1173, Variation_1173_Arg],
    'PFT': Union[Variation_1174, Variation_1174_Arg],
    'FPLT': Union[Variation_1175, Variation_1175_Arg],
})
Variation_1239_Arg_Group_6 = TypedDict('Variation_1239_Arg_Group_6', {
    'MON': Union[Variation_1158, Variation_1158_Arg],
    'SPI': Union[Variation_352, Variation_352_Arg],
    'MRH': Union[Variation_342, Variation_342_Arg],
    'SRC': Union[Variation_1159, Variation_1159_Arg],
    'CNF': Union[Variation_344, Variation_344_Arg],
    'SIM': Union[Variation_1160, Variation_1160_Arg],
    'TSE': Union[Variation_1161, Variation_1161_Arg],
    'TSB': Union[Variation_1162, Variation_1162_Arg],
    'FPC': Union[Variation_354, Variation_354_Arg],
    'AFF': Union[Variation_355, Variation_355_Arg],
    'STP': Union[Variation_1163, Variation_1163_Arg],
    'KOS': Union[Variation_1164, Variation_1164_Arg],
    'AMA': Union[Variation_351, Variation_351_Arg],
    'MD4': Union[Variation_1165, Variation_1165_Arg],
    'ME': Union[Variation_1166, Variation_1166_Arg],
    'MI': Union[Variation_1167, Variation_1167_Arg],
    'MD5': Union[Variation_1168, Variation_1168_Arg],
    'CST': Union[Variation_1169, Variation_1169_Arg],
    'PSR': Union[Variation_417, Variation_417_Arg],
    'SSR': Union[Variation_418, Variation_418_Arg],
    'MDS': Union[Variation_419, Variation_419_Arg],
    'ADS': Union[Variation_1170, Variation_1170_Arg],
    'SUC': Union[Variation_421, Variation_421_Arg],
    'AAC': Union[Variation_1171, Variation_1171_Arg],
    'SDS': Union[Variation_1172, Variation_1172_Arg],
    'EMS': Union[Variation_1173, Variation_1173_Arg],
    'PFT': Union[Variation_1174, Variation_1174_Arg],
    'FPLT': Union[Variation_1175, Variation_1175_Arg],
    'DUPT': Union[Variation_1176, Variation_1176_Arg],
    'DUPF': Union[Variation_1177, Variation_1177_Arg],
    'DUPM': Union[Variation_1178, Variation_1178_Arg],
    'SFC': Union[Variation_1236, Variation_1236_Arg],
    'IDD': Union[Variation_1237, Variation_1237_Arg],
    'IEC': Union[Variation_1238, Variation_1238_Arg],
})
Variation_1239_Arg : TypeAlias = Union[
    int,
    Variation_1239_Arg_Group_1,
    Tuple[int],
    Variation_1239_Arg_Group_2,
    Tuple[int,int],
    Variation_1239_Arg_Group_3,
    Tuple[int,int,int],
    Variation_1239_Arg_Group_4,
    Tuple[int,int,int,int],
    Variation_1239_Arg_Group_5,
    Tuple[int,int,int,int,int],
    Variation_1239_Arg_Group_6,
    Tuple[int,int,int,int,int,int],
]
class Variation_1239(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
        7,
        7,
        7,
        7,
    ]

    subitems_list = [
        [
            ('MON', Variation_1158),
            ('SPI', Variation_352),
            ('MRH', Variation_342),
            ('SRC', Variation_1159),
            ('CNF', Variation_344),
        ],
        [
            ('SIM', Variation_1160),
            ('TSE', Variation_1161),
            ('TSB', Variation_1162),
            ('FPC', Variation_354),
            ('AFF', Variation_355),
            ('STP', Variation_1163),
            ('KOS', Variation_1164),
        ],
        [
            ('AMA', Variation_351),
            ('MD4', Variation_1165),
            ('ME', Variation_1166),
            ('MI', Variation_1167),
            ('MD5', Variation_1168),
        ],
        [
            ('CST', Variation_1169),
            ('PSR', Variation_417),
            ('SSR', Variation_418),
            ('MDS', Variation_419),
            ('ADS', Variation_1170),
            ('SUC', Variation_421),
            ('AAC', Variation_1171),
        ],
        [
            ('SDS', Variation_1172),
            ('EMS', Variation_1173),
            ('PFT', Variation_1174),
            ('FPLT', Variation_1175),
        ],
        [
            ('DUPT', Variation_1176),
            ('DUPF', Variation_1177),
            ('DUPM', Variation_1178),
            ('SFC', Variation_1236),
            ('IDD', Variation_1237),
            ('IEC', Variation_1238),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'MON': ('', Variation_1158, 0, 1),
        'SPI': ('', Variation_352, 1, 1),
        'MRH': ('Most Reliable Height', Variation_342, 2, 1),
        'SRC': ('Source of Calculated Track Altitude for I062/130', Variation_1159, 3, 3),
        'CNF': ('', Variation_344, 6, 1),
        'SIM': ('', Variation_1160, 0, 1),
        'TSE': ('', Variation_1161, 1, 1),
        'TSB': ('', Variation_1162, 2, 1),
        'FPC': ('', Variation_354, 3, 1),
        'AFF': ('', Variation_355, 4, 1),
        'STP': ('', Variation_1163, 5, 1),
        'KOS': ('', Variation_1164, 6, 1),
        'AMA': ('', Variation_351, 0, 1),
        'MD4': ('', Variation_1165, 1, 2),
        'ME': ('', Variation_1166, 3, 1),
        'MI': ('', Variation_1167, 4, 1),
        'MD5': ('', Variation_1168, 5, 2),
        'CST': ('', Variation_1169, 0, 1),
        'PSR': ('', Variation_417, 1, 1),
        'SSR': ('', Variation_418, 2, 1),
        'MDS': ('', Variation_419, 3, 1),
        'ADS': ('', Variation_1170, 4, 1),
        'SUC': ('', Variation_421, 5, 1),
        'AAC': ('', Variation_1171, 6, 1),
        'SDS': ('', Variation_1172, 0, 2),
        'EMS': ('', Variation_1173, 2, 3),
        'PFT': ('', Variation_1174, 5, 1),
        'FPLT': ('', Variation_1175, 6, 1),
        'DUPT': ('', Variation_1176, 0, 1),
        'DUPF': ('', Variation_1177, 1, 1),
        'DUPM': ('', Variation_1178, 2, 1),
        'SFC': ('', Variation_1236, 3, 1),
        'IDD': ('', Variation_1237, 4, 1),
        'IEC': ('', Variation_1238, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['MON']) -> Type[Variation_1158]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SPI']) -> Type[Variation_352]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MRH']) -> Type[Variation_342]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRC']) -> Type[Variation_1159]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CNF']) -> Type[Variation_344]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SIM']) -> Type[Variation_1160]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSE']) -> Type[Variation_1161]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSB']) -> Type[Variation_1162]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPC']) -> Type[Variation_354]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AFF']) -> Type[Variation_355]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STP']) -> Type[Variation_1163]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['KOS']) -> Type[Variation_1164]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AMA']) -> Type[Variation_351]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD4']) -> Type[Variation_1165]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ME']) -> Type[Variation_1166]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MI']) -> Type[Variation_1167]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MD5']) -> Type[Variation_1168]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CST']) -> Type[Variation_1169]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_417]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_418]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_419]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_1170]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SUC']) -> Type[Variation_421]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['AAC']) -> Type[Variation_1171]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SDS']) -> Type[Variation_1172]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMS']) -> Type[Variation_1173]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PFT']) -> Type[Variation_1174]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FPLT']) -> Type[Variation_1175]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPT']) -> Type[Variation_1176]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPF']) -> Type[Variation_1177]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['DUPM']) -> Type[Variation_1178]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SFC']) -> Type[Variation_1236]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IDD']) -> Type[Variation_1237]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IEC']) -> Type[Variation_1238]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['MON'], Literal['SPI'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FPC'], Literal['AFF'], Literal['STP'], Literal['KOS'], Literal['AMA'], Literal['MD4'], Literal['ME'], Literal['MI'], Literal['MD5'], Literal['CST'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC'], Literal['SDS'], Literal['EMS'], Literal['PFT'], Literal['FPLT'], Literal['DUPT'], Literal['DUPF'], Literal['DUPM'], Literal['SFC'], Literal['IDD'], Literal['IEC']]) -> Union[Type['Variation_1158'], Type['Variation_352'], Type['Variation_342'], Type['Variation_1159'], Type['Variation_344'], Type['Variation_1160'], Type['Variation_1161'], Type['Variation_1162'], Type['Variation_354'], Type['Variation_355'], Type['Variation_1163'], Type['Variation_1164'], Type['Variation_351'], Type['Variation_1165'], Type['Variation_1166'], Type['Variation_1167'], Type['Variation_1168'], Type['Variation_1169'], Type['Variation_417'], Type['Variation_418'], Type['Variation_419'], Type['Variation_1170'], Type['Variation_421'], Type['Variation_1171'], Type['Variation_1172'], Type['Variation_1173'], Type['Variation_1174'], Type['Variation_1175'], Type['Variation_1176'], Type['Variation_1177'], Type['Variation_1178'], Type['Variation_1236'], Type['Variation_1237'], Type['Variation_1238']]:
        if key == 'MON':
            return Variation_1158
        if key == 'SPI':
            return Variation_352
        if key == 'MRH':
            return Variation_342
        if key == 'SRC':
            return Variation_1159
        if key == 'CNF':
            return Variation_344
        if key == 'SIM':
            return Variation_1160
        if key == 'TSE':
            return Variation_1161
        if key == 'TSB':
            return Variation_1162
        if key == 'FPC':
            return Variation_354
        if key == 'AFF':
            return Variation_355
        if key == 'STP':
            return Variation_1163
        if key == 'KOS':
            return Variation_1164
        if key == 'AMA':
            return Variation_351
        if key == 'MD4':
            return Variation_1165
        if key == 'ME':
            return Variation_1166
        if key == 'MI':
            return Variation_1167
        if key == 'MD5':
            return Variation_1168
        if key == 'CST':
            return Variation_1169
        if key == 'PSR':
            return Variation_417
        if key == 'SSR':
            return Variation_418
        if key == 'MDS':
            return Variation_419
        if key == 'ADS':
            return Variation_1170
        if key == 'SUC':
            return Variation_421
        if key == 'AAC':
            return Variation_1171
        if key == 'SDS':
            return Variation_1172
        if key == 'EMS':
            return Variation_1173
        if key == 'PFT':
            return Variation_1174
        if key == 'FPLT':
            return Variation_1175
        if key == 'DUPT':
            return Variation_1176
        if key == 'DUPF':
            return Variation_1177
        if key == 'DUPM':
            return Variation_1178
        if key == 'SFC':
            return Variation_1236
        if key == 'IDD':
            return Variation_1237
        if key == 'IEC':
            return Variation_1238
        assert_never(key)

    def __init__(self, arg : Variation_1239_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1239_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1239_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            if Variation_1239_Arg_Group_3.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(3, arg)); return
            if Variation_1239_Arg_Group_4.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(4, arg)); return
            if Variation_1239_Arg_Group_5.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(5, arg)); return
            if Variation_1239_Arg_Group_6.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(6, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['MON']) -> Variation_1158:
        ...

    @overload
    def get_item(self, name : Literal['SPI']) -> Variation_352:
        ...

    @overload
    def get_item(self, name : Literal['MRH']) -> Variation_342:
        ...

    @overload
    def get_item(self, name : Literal['SRC']) -> Variation_1159:
        ...

    @overload
    def get_item(self, name : Literal['CNF']) -> Variation_344:
        ...

    @overload
    def get_item(self, name : Literal['SIM']) -> Variation_1160:
        ...

    @overload
    def get_item(self, name : Literal['TSE']) -> Variation_1161:
        ...

    @overload
    def get_item(self, name : Literal['TSB']) -> Variation_1162:
        ...

    @overload
    def get_item(self, name : Literal['FPC']) -> Variation_354:
        ...

    @overload
    def get_item(self, name : Literal['AFF']) -> Variation_355:
        ...

    @overload
    def get_item(self, name : Literal['STP']) -> Variation_1163:
        ...

    @overload
    def get_item(self, name : Literal['KOS']) -> Variation_1164:
        ...

    @overload
    def get_item(self, name : Literal['AMA']) -> Variation_351:
        ...

    @overload
    def get_item(self, name : Literal['MD4']) -> Variation_1165:
        ...

    @overload
    def get_item(self, name : Literal['ME']) -> Variation_1166:
        ...

    @overload
    def get_item(self, name : Literal['MI']) -> Variation_1167:
        ...

    @overload
    def get_item(self, name : Literal['MD5']) -> Variation_1168:
        ...

    @overload
    def get_item(self, name : Literal['CST']) -> Variation_1169:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_417:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_418:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_419:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_1170:
        ...

    @overload
    def get_item(self, name : Literal['SUC']) -> Variation_421:
        ...

    @overload
    def get_item(self, name : Literal['AAC']) -> Variation_1171:
        ...

    @overload
    def get_item(self, name : Literal['SDS']) -> Variation_1172:
        ...

    @overload
    def get_item(self, name : Literal['EMS']) -> Variation_1173:
        ...

    @overload
    def get_item(self, name : Literal['PFT']) -> Variation_1174:
        ...

    @overload
    def get_item(self, name : Literal['FPLT']) -> Variation_1175:
        ...

    @overload
    def get_item(self, name : Literal['DUPT']) -> Variation_1176:
        ...

    @overload
    def get_item(self, name : Literal['DUPF']) -> Variation_1177:
        ...

    @overload
    def get_item(self, name : Literal['DUPM']) -> Variation_1178:
        ...

    @overload
    def get_item(self, name : Literal['SFC']) -> Variation_1236:
        ...

    @overload
    def get_item(self, name : Literal['IDD']) -> Variation_1237:
        ...

    @overload
    def get_item(self, name : Literal['IEC']) -> Variation_1238:
        ...

    def get_item(self, name : Union[Literal['MON'], Literal['SPI'], Literal['MRH'], Literal['SRC'], Literal['CNF'], Literal['SIM'], Literal['TSE'], Literal['TSB'], Literal['FPC'], Literal['AFF'], Literal['STP'], Literal['KOS'], Literal['AMA'], Literal['MD4'], Literal['ME'], Literal['MI'], Literal['MD5'], Literal['CST'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['SUC'], Literal['AAC'], Literal['SDS'], Literal['EMS'], Literal['PFT'], Literal['FPLT'], Literal['DUPT'], Literal['DUPF'], Literal['DUPM'], Literal['SFC'], Literal['IDD'], Literal['IEC']]) -> Any:
        return self._get_item(name)

Variation_1240_Arg = TypedDict('Variation_1240_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '105': Union[Variation_636, Variation_636_Arg],
    '100': Union[Variation_1120, Variation_1120_Arg],
    '185': Union[Variation_1121, Variation_1121_Arg],
    '210': Union[Variation_651, Variation_651_Arg],
    '060': Union[Variation_1123, Variation_1123_Arg],
    '245': Union[Variation_1125, Variation_1125_Arg],
    '380': Union[Variation_1235, Variation_1235_Arg],
    '040': Union[Variation_64, Variation_64_Arg],
    '080': Union[Variation_1239, Variation_1239_Arg],
    '290': Union[Variation_1180, Variation_1180_Arg],
    '200': Union[Variation_1185, Variation_1185_Arg],
    '295': Union[Variation_1186, Variation_1186_Arg],
    '136': Union[Variation_361, Variation_361_Arg],
    '130': Union[Variation_288, Variation_288_Arg],
    '135': Union[Variation_1187, Variation_1187_Arg],
    '220': Union[Variation_365, Variation_365_Arg],
    '390': Union[Variation_1194, Variation_1194_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '110': Union[Variation_1209, Variation_1209_Arg],
    '120': Union[Variation_1210, Variation_1210_Arg],
    '510': Union[Variation_1211, Variation_1211_Arg],
    '500': Union[Variation_1222, Variation_1222_Arg],
    '340': Union[Variation_1231, Variation_1231_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1240(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        None,
        ('015', Variation_0),
        ('070', Variation_81),
        ('105', Variation_636),
        ('100', Variation_1120),
        ('185', Variation_1121),
        ('210', Variation_651),
        ('060', Variation_1123),
        ('245', Variation_1125),
        ('380', Variation_1235),
        ('040', Variation_64),
        ('080', Variation_1239),
        ('290', Variation_1180),
        ('200', Variation_1185),
        ('295', Variation_1186),
        ('136', Variation_361),
        ('130', Variation_288),
        ('135', Variation_1187),
        ('220', Variation_365),
        ('390', Variation_1194),
        ('270', Variation_291),
        ('300', Variation_286),
        ('110', Variation_1209),
        ('120', Variation_1210),
        ('510', Variation_1211),
        ('500', Variation_1222),
        ('340', Variation_1231),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '015': (Variation_0, 0x2000000000),
        '070': (Variation_81, 0x1000000000),
        '105': (Variation_636, 0x0800000000),
        '100': (Variation_1120, 0x0400000000),
        '185': (Variation_1121, 0x0200000000),
        '210': (Variation_651, 0x0180000000),
        '060': (Variation_1123, 0x0140000000),
        '245': (Variation_1125, 0x0120000000),
        '380': (Variation_1235, 0x0110000000),
        '040': (Variation_64, 0x0108000000),
        '080': (Variation_1239, 0x0104000000),
        '290': (Variation_1180, 0x0102000000),
        '200': (Variation_1185, 0x0101800000),
        '295': (Variation_1186, 0x0101400000),
        '136': (Variation_361, 0x0101200000),
        '130': (Variation_288, 0x0101100000),
        '135': (Variation_1187, 0x0101080000),
        '220': (Variation_365, 0x0101040000),
        '390': (Variation_1194, 0x0101020000),
        '270': (Variation_291, 0x0101018000),
        '300': (Variation_286, 0x0101014000),
        '110': (Variation_1209, 0x0101012000),
        '120': (Variation_1210, 0x0101011000),
        '510': (Variation_1211, 0x0101010800),
        '500': (Variation_1222, 0x0101010400),
        '340': (Variation_1231, 0x0101010200),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1120]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['185']) -> Type[Variation_1121]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_651]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1123]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_1125]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['380']) -> Type[Variation_1235]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_1239]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['290']) -> Type[Variation_1180]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_1185]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_1186]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['136']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['135']) -> Type[Variation_1187]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['390']) -> Type[Variation_1194]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['510']) -> Type[Variation_1211]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_1222]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['340']) -> Type[Variation_1231]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['070'], Literal['105'], Literal['100'], Literal['185'], Literal['210'], Literal['060'], Literal['245'], Literal['380'], Literal['040'], Literal['080'], Literal['290'], Literal['200'], Literal['295'], Literal['136'], Literal['130'], Literal['135'], Literal['220'], Literal['390'], Literal['270'], Literal['300'], Literal['110'], Literal['120'], Literal['510'], Literal['500'], Literal['340'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_81'], Type['Variation_636'], Type['Variation_1120'], Type['Variation_1121'], Type['Variation_651'], Type['Variation_1123'], Type['Variation_1125'], Type['Variation_1235'], Type['Variation_64'], Type['Variation_1239'], Type['Variation_1180'], Type['Variation_1185'], Type['Variation_1186'], Type['Variation_361'], Type['Variation_288'], Type['Variation_1187'], Type['Variation_365'], Type['Variation_1194'], Type['Variation_291'], Type['Variation_286'], Type['Variation_1209'], Type['Variation_1210'], Type['Variation_1211'], Type['Variation_1222'], Type['Variation_1231'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '070':
            return Variation_81
        if key == '105':
            return Variation_636
        if key == '100':
            return Variation_1120
        if key == '185':
            return Variation_1121
        if key == '210':
            return Variation_651
        if key == '060':
            return Variation_1123
        if key == '245':
            return Variation_1125
        if key == '380':
            return Variation_1235
        if key == '040':
            return Variation_64
        if key == '080':
            return Variation_1239
        if key == '290':
            return Variation_1180
        if key == '200':
            return Variation_1185
        if key == '295':
            return Variation_1186
        if key == '136':
            return Variation_361
        if key == '130':
            return Variation_288
        if key == '135':
            return Variation_1187
        if key == '220':
            return Variation_365
        if key == '390':
            return Variation_1194
        if key == '270':
            return Variation_291
        if key == '300':
            return Variation_286
        if key == '110':
            return Variation_1209
        if key == '120':
            return Variation_1210
        if key == '510':
            return Variation_1211
        if key == '500':
            return Variation_1222
        if key == '340':
            return Variation_1231
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1240_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1120, Variation_1120_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['185'], val : Union[Variation_1121, Variation_1121_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_651, Variation_651_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1123, Variation_1123_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_1125, Variation_1125_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['380'], val : Union[Variation_1235, Variation_1235_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_1239, Variation_1239_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['290'], val : Union[Variation_1180, Variation_1180_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_1185, Variation_1185_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_1186, Variation_1186_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['136'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['135'], val : Union[Variation_1187, Variation_1187_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['390'], val : Union[Variation_1194, Variation_1194_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1209, Variation_1209_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1210, Variation_1210_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['510'], val : Union[Variation_1211, Variation_1211_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_1222, Variation_1222_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['340'], val : Union[Variation_1231, Variation_1231_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1240':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1240':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['185']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['380']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['290']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['136']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['135']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['390']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['510']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['340']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1240':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1240':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1120:
        ...

    @overload
    def get_item(self, name : Literal['185']) -> Variation_1121:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_651:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1123:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_1125:
        ...

    @overload
    def get_item(self, name : Literal['380']) -> Variation_1235:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_1239:
        ...

    @overload
    def get_item(self, name : Literal['290']) -> Variation_1180:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_1185:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_1186:
        ...

    @overload
    def get_item(self, name : Literal['136']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['135']) -> Variation_1187:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['390']) -> Variation_1194:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1209:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1210:
        ...

    @overload
    def get_item(self, name : Literal['510']) -> Variation_1211:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_1222:
        ...

    @overload
    def get_item(self, name : Literal['340']) -> Variation_1231:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1241_Arg = TypedDict('Variation_1241_Arg', {
    'ADR': Union[Variation_279, Variation_279_Arg],
    'ID': Union[Variation_201, Variation_201_Arg],
    'MHG': Union[Variation_14, Variation_14_Arg],
    'IAS': Union[Variation_1127, Variation_1127_Arg],
    'TAS': Union[Variation_707, Variation_707_Arg],
    'SAL': Union[Variation_1130, Variation_1130_Arg],
    'FSS': Union[Variation_1131, Variation_1131_Arg],
    'TIS': Union[Variation_1134, Variation_1134_Arg],
    'TID': Union[Variation_1136, Variation_1136_Arg],
    'COM': Union[Variation_1234, Variation_1234_Arg],
    'SAB': Union[Variation_1144, Variation_1144_Arg],
    'ACS': Union[Variation_282, Variation_282_Arg],
    'BVR': Union[Variation_365, Variation_365_Arg],
    'GVR': Union[Variation_365, Variation_365_Arg],
    'RAN': Union[Variation_704, Variation_704_Arg],
    'TAR': Union[Variation_1145, Variation_1145_Arg],
    'TAN': Union[Variation_14, Variation_14_Arg],
    'GS': Union[Variation_708, Variation_708_Arg],
    'VUN': Union[Variation_0, Variation_0_Arg],
    'MET': Union[Variation_1150, Variation_1150_Arg],
    'EMC': Union[Variation_1151, Variation_1151_Arg],
    'POS': Union[Variation_1152, Variation_1152_Arg],
    'GAL': Union[Variation_288, Variation_288_Arg],
    'PUN': Union[Variation_1153, Variation_1153_Arg],
    'MB': Union[Variation_322, Variation_322_Arg],
    'IAR': Union[Variation_707, Variation_707_Arg],
    'MAC': Union[Variation_1154, Variation_1154_Arg],
    'BPS': Union[Variation_1156, Variation_1156_Arg],
}, total=False)
class Variation_1241(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 4

    subitems_list = [
        ('ADR', Variation_279),
        ('ID', Variation_201),
        ('MHG', Variation_14),
        ('IAS', Variation_1127),
        ('TAS', Variation_707),
        ('SAL', Variation_1130),
        ('FSS', Variation_1131),
        ('TIS', Variation_1134),
        ('TID', Variation_1136),
        ('COM', Variation_1234),
        ('SAB', Variation_1144),
        ('ACS', Variation_282),
        ('BVR', Variation_365),
        ('GVR', Variation_365),
        ('RAN', Variation_704),
        ('TAR', Variation_1145),
        ('TAN', Variation_14),
        ('GS', Variation_708),
        ('VUN', Variation_0),
        ('MET', Variation_1150),
        ('EMC', Variation_1151),
        ('POS', Variation_1152),
        ('GAL', Variation_288),
        ('PUN', Variation_1153),
        ('MB', Variation_322),
        ('IAR', Variation_707),
        ('MAC', Variation_1154),
        ('BPS', Variation_1156),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'ADR': (Variation_279, 0x80000000),
        'ID': (Variation_201, 0x40000000),
        'MHG': (Variation_14, 0x20000000),
        'IAS': (Variation_1127, 0x10000000),
        'TAS': (Variation_707, 0x08000000),
        'SAL': (Variation_1130, 0x04000000),
        'FSS': (Variation_1131, 0x02000000),
        'TIS': (Variation_1134, 0x01800000),
        'TID': (Variation_1136, 0x01400000),
        'COM': (Variation_1234, 0x01200000),
        'SAB': (Variation_1144, 0x01100000),
        'ACS': (Variation_282, 0x01080000),
        'BVR': (Variation_365, 0x01040000),
        'GVR': (Variation_365, 0x01020000),
        'RAN': (Variation_704, 0x01018000),
        'TAR': (Variation_1145, 0x01014000),
        'TAN': (Variation_14, 0x01012000),
        'GS': (Variation_708, 0x01011000),
        'VUN': (Variation_0, 0x01010800),
        'MET': (Variation_1150, 0x01010400),
        'EMC': (Variation_1151, 0x01010200),
        'POS': (Variation_1152, 0x01010180),
        'GAL': (Variation_288, 0x01010140),
        'PUN': (Variation_1153, 0x01010120),
        'MB': (Variation_322, 0x01010110),
        'IAR': (Variation_707, 0x01010108),
        'MAC': (Variation_1154, 0x01010104),
        'BPS': (Variation_1156, 0x01010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['ADR']) -> Type[Variation_279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ID']) -> Type[Variation_201]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MHG']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAS']) -> Type[Variation_1127]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAS']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAL']) -> Type[Variation_1130]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['FSS']) -> Type[Variation_1131]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TIS']) -> Type[Variation_1134]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TID']) -> Type[Variation_1136]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['COM']) -> Type[Variation_1234]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SAB']) -> Type[Variation_1144]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ACS']) -> Type[Variation_282]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GVR']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RAN']) -> Type[Variation_704]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAR']) -> Type[Variation_1145]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TAN']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GS']) -> Type[Variation_708]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['VUN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MET']) -> Type[Variation_1150]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['EMC']) -> Type[Variation_1151]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_1152]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['GAL']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PUN']) -> Type[Variation_1153]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MB']) -> Type[Variation_322]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['IAR']) -> Type[Variation_707]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAC']) -> Type[Variation_1154]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['BPS']) -> Type[Variation_1156]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['ADR'], Literal['ID'], Literal['MHG'], Literal['IAS'], Literal['TAS'], Literal['SAL'], Literal['FSS'], Literal['TIS'], Literal['TID'], Literal['COM'], Literal['SAB'], Literal['ACS'], Literal['BVR'], Literal['GVR'], Literal['RAN'], Literal['TAR'], Literal['TAN'], Literal['GS'], Literal['VUN'], Literal['MET'], Literal['EMC'], Literal['POS'], Literal['GAL'], Literal['PUN'], Literal['MB'], Literal['IAR'], Literal['MAC'], Literal['BPS']]) -> Union[Type['Variation_279'], Type['Variation_201'], Type['Variation_14'], Type['Variation_1127'], Type['Variation_707'], Type['Variation_1130'], Type['Variation_1131'], Type['Variation_1134'], Type['Variation_1136'], Type['Variation_1234'], Type['Variation_1144'], Type['Variation_282'], Type['Variation_365'], Type['Variation_365'], Type['Variation_704'], Type['Variation_1145'], Type['Variation_14'], Type['Variation_708'], Type['Variation_0'], Type['Variation_1150'], Type['Variation_1151'], Type['Variation_1152'], Type['Variation_288'], Type['Variation_1153'], Type['Variation_322'], Type['Variation_707'], Type['Variation_1154'], Type['Variation_1156']]:
        if key == 'ADR':
            return Variation_279
        if key == 'ID':
            return Variation_201
        if key == 'MHG':
            return Variation_14
        if key == 'IAS':
            return Variation_1127
        if key == 'TAS':
            return Variation_707
        if key == 'SAL':
            return Variation_1130
        if key == 'FSS':
            return Variation_1131
        if key == 'TIS':
            return Variation_1134
        if key == 'TID':
            return Variation_1136
        if key == 'COM':
            return Variation_1234
        if key == 'SAB':
            return Variation_1144
        if key == 'ACS':
            return Variation_282
        if key == 'BVR':
            return Variation_365
        if key == 'GVR':
            return Variation_365
        if key == 'RAN':
            return Variation_704
        if key == 'TAR':
            return Variation_1145
        if key == 'TAN':
            return Variation_14
        if key == 'GS':
            return Variation_708
        if key == 'VUN':
            return Variation_0
        if key == 'MET':
            return Variation_1150
        if key == 'EMC':
            return Variation_1151
        if key == 'POS':
            return Variation_1152
        if key == 'GAL':
            return Variation_288
        if key == 'PUN':
            return Variation_1153
        if key == 'MB':
            return Variation_322
        if key == 'IAR':
            return Variation_707
        if key == 'MAC':
            return Variation_1154
        if key == 'BPS':
            return Variation_1156
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1241_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['ADR'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['ID'], val : Union[Variation_201, Variation_201_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['MHG'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['IAS'], val : Union[Variation_1127, Variation_1127_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['TAS'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['SAL'], val : Union[Variation_1130, Variation_1130_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['FSS'], val : Union[Variation_1131, Variation_1131_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['TIS'], val : Union[Variation_1134, Variation_1134_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['TID'], val : Union[Variation_1136, Variation_1136_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['COM'], val : Union[Variation_1234, Variation_1234_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['SAB'], val : Union[Variation_1144, Variation_1144_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['ACS'], val : Union[Variation_282, Variation_282_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['BVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['GVR'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['RAN'], val : Union[Variation_704, Variation_704_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['TAR'], val : Union[Variation_1145, Variation_1145_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['TAN'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['GS'], val : Union[Variation_708, Variation_708_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['VUN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['MET'], val : Union[Variation_1150, Variation_1150_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['EMC'], val : Union[Variation_1151, Variation_1151_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_1152, Variation_1152_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['GAL'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['PUN'], val : Union[Variation_1153, Variation_1153_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['MB'], val : Union[Variation_322, Variation_322_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['IAR'], val : Union[Variation_707, Variation_707_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['MAC'], val : Union[Variation_1154, Variation_1154_Arg]) -> 'Variation_1241':
        ...

    @overload
    def set_item(self, name : Literal['BPS'], val : Union[Variation_1156, Variation_1156_Arg]) -> 'Variation_1241':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['ADR']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['ID']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['MHG']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['IAS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['TAS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['SAL']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['FSS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['TIS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['TID']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['COM']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['SAB']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['ACS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['BVR']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['GVR']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['RAN']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['TAR']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['TAN']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['GS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['VUN']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['MET']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['EMC']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['GAL']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['PUN']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['MB']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['IAR']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['MAC']) -> 'Variation_1241':
        ...

    @overload
    def del_item(self, name : Literal['BPS']) -> 'Variation_1241':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['ADR']) -> Variation_279:
        ...

    @overload
    def get_item(self, name : Literal['ID']) -> Variation_201:
        ...

    @overload
    def get_item(self, name : Literal['MHG']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['IAS']) -> Variation_1127:
        ...

    @overload
    def get_item(self, name : Literal['TAS']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['SAL']) -> Variation_1130:
        ...

    @overload
    def get_item(self, name : Literal['FSS']) -> Variation_1131:
        ...

    @overload
    def get_item(self, name : Literal['TIS']) -> Variation_1134:
        ...

    @overload
    def get_item(self, name : Literal['TID']) -> Variation_1136:
        ...

    @overload
    def get_item(self, name : Literal['COM']) -> Variation_1234:
        ...

    @overload
    def get_item(self, name : Literal['SAB']) -> Variation_1144:
        ...

    @overload
    def get_item(self, name : Literal['ACS']) -> Variation_282:
        ...

    @overload
    def get_item(self, name : Literal['BVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['GVR']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['RAN']) -> Variation_704:
        ...

    @overload
    def get_item(self, name : Literal['TAR']) -> Variation_1145:
        ...

    @overload
    def get_item(self, name : Literal['TAN']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['GS']) -> Variation_708:
        ...

    @overload
    def get_item(self, name : Literal['VUN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['MET']) -> Variation_1150:
        ...

    @overload
    def get_item(self, name : Literal['EMC']) -> Variation_1151:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_1152:
        ...

    @overload
    def get_item(self, name : Literal['GAL']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['PUN']) -> Variation_1153:
        ...

    @overload
    def get_item(self, name : Literal['MB']) -> Variation_322:
        ...

    @overload
    def get_item(self, name : Literal['IAR']) -> Variation_707:
        ...

    @overload
    def get_item(self, name : Literal['MAC']) -> Variation_1154:
        ...

    @overload
    def get_item(self, name : Literal['BPS']) -> Variation_1156:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1242_Arg = TypedDict('Variation_1242_Arg', {
    'SID': Union[Variation_1, Variation_1_Arg],
    'POS': Union[Variation_1223, Variation_1223_Arg],
    'HEIGHT': Union[Variation_155, Variation_155_Arg],
    'MDC': Union[Variation_1224, Variation_1224_Arg],
    'MDA': Union[Variation_1226, Variation_1226_Arg],
    'TYP': Union[Variation_1230, Variation_1230_Arg],
}, total=False)
class Variation_1242(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('SID', Variation_1),
        ('POS', Variation_1223),
        ('HEIGHT', Variation_155),
        ('MDC', Variation_1224),
        ('MDA', Variation_1226),
        ('TYP', Variation_1230),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        'SID': (Variation_1, 0x80),
        'POS': (Variation_1223, 0x40),
        'HEIGHT': (Variation_155, 0x20),
        'MDC': (Variation_1224, 0x10),
        'MDA': (Variation_1226, 0x08),
        'TYP': (Variation_1230, 0x04),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SID']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['POS']) -> Type[Variation_1223]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['HEIGHT']) -> Type[Variation_155]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDC']) -> Type[Variation_1224]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDA']) -> Type[Variation_1226]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TYP']) -> Type[Variation_1230]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SID'], Literal['POS'], Literal['HEIGHT'], Literal['MDC'], Literal['MDA'], Literal['TYP']]) -> Union[Type['Variation_1'], Type['Variation_1223'], Type['Variation_155'], Type['Variation_1224'], Type['Variation_1226'], Type['Variation_1230']]:
        if key == 'SID':
            return Variation_1
        if key == 'POS':
            return Variation_1223
        if key == 'HEIGHT':
            return Variation_155
        if key == 'MDC':
            return Variation_1224
        if key == 'MDA':
            return Variation_1226
        if key == 'TYP':
            return Variation_1230
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1242_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['SID'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1242':
        ...

    @overload
    def set_item(self, name : Literal['POS'], val : Union[Variation_1223, Variation_1223_Arg]) -> 'Variation_1242':
        ...

    @overload
    def set_item(self, name : Literal['HEIGHT'], val : Union[Variation_155, Variation_155_Arg]) -> 'Variation_1242':
        ...

    @overload
    def set_item(self, name : Literal['MDC'], val : Union[Variation_1224, Variation_1224_Arg]) -> 'Variation_1242':
        ...

    @overload
    def set_item(self, name : Literal['MDA'], val : Union[Variation_1226, Variation_1226_Arg]) -> 'Variation_1242':
        ...

    @overload
    def set_item(self, name : Literal['TYP'], val : Union[Variation_1230, Variation_1230_Arg]) -> 'Variation_1242':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['SID']) -> 'Variation_1242':
        ...

    @overload
    def del_item(self, name : Literal['POS']) -> 'Variation_1242':
        ...

    @overload
    def del_item(self, name : Literal['HEIGHT']) -> 'Variation_1242':
        ...

    @overload
    def del_item(self, name : Literal['MDC']) -> 'Variation_1242':
        ...

    @overload
    def del_item(self, name : Literal['MDA']) -> 'Variation_1242':
        ...

    @overload
    def del_item(self, name : Literal['TYP']) -> 'Variation_1242':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['SID']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['POS']) -> Variation_1223:
        ...

    @overload
    def get_item(self, name : Literal['HEIGHT']) -> Variation_155:
        ...

    @overload
    def get_item(self, name : Literal['MDC']) -> Variation_1224:
        ...

    @overload
    def get_item(self, name : Literal['MDA']) -> Variation_1226:
        ...

    @overload
    def get_item(self, name : Literal['TYP']) -> Variation_1230:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1243_Arg = TypedDict('Variation_1243_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '070': Union[Variation_81, Variation_81_Arg],
    '105': Union[Variation_636, Variation_636_Arg],
    '100': Union[Variation_1120, Variation_1120_Arg],
    '185': Union[Variation_1121, Variation_1121_Arg],
    '210': Union[Variation_651, Variation_651_Arg],
    '060': Union[Variation_1123, Variation_1123_Arg],
    '245': Union[Variation_1125, Variation_1125_Arg],
    '380': Union[Variation_1241, Variation_1241_Arg],
    '040': Union[Variation_64, Variation_64_Arg],
    '080': Union[Variation_1239, Variation_1239_Arg],
    '290': Union[Variation_1180, Variation_1180_Arg],
    '200': Union[Variation_1185, Variation_1185_Arg],
    '295': Union[Variation_1186, Variation_1186_Arg],
    '136': Union[Variation_361, Variation_361_Arg],
    '130': Union[Variation_288, Variation_288_Arg],
    '135': Union[Variation_1187, Variation_1187_Arg],
    '220': Union[Variation_365, Variation_365_Arg],
    '390': Union[Variation_1194, Variation_1194_Arg],
    '270': Union[Variation_291, Variation_291_Arg],
    '300': Union[Variation_286, Variation_286_Arg],
    '110': Union[Variation_1209, Variation_1209_Arg],
    '120': Union[Variation_1210, Variation_1210_Arg],
    '510': Union[Variation_1211, Variation_1211_Arg],
    '500': Union[Variation_1222, Variation_1222_Arg],
    '340': Union[Variation_1242, Variation_1242_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1243(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 5

    subitems_list = [
        ('010', Variation_1),
        None,
        ('015', Variation_0),
        ('070', Variation_81),
        ('105', Variation_636),
        ('100', Variation_1120),
        ('185', Variation_1121),
        ('210', Variation_651),
        ('060', Variation_1123),
        ('245', Variation_1125),
        ('380', Variation_1241),
        ('040', Variation_64),
        ('080', Variation_1239),
        ('290', Variation_1180),
        ('200', Variation_1185),
        ('295', Variation_1186),
        ('136', Variation_361),
        ('130', Variation_288),
        ('135', Variation_1187),
        ('220', Variation_365),
        ('390', Variation_1194),
        ('270', Variation_291),
        ('300', Variation_286),
        ('110', Variation_1209),
        ('120', Variation_1210),
        ('510', Variation_1211),
        ('500', Variation_1222),
        ('340', Variation_1242),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000000000),
        '015': (Variation_0, 0x2000000000),
        '070': (Variation_81, 0x1000000000),
        '105': (Variation_636, 0x0800000000),
        '100': (Variation_1120, 0x0400000000),
        '185': (Variation_1121, 0x0200000000),
        '210': (Variation_651, 0x0180000000),
        '060': (Variation_1123, 0x0140000000),
        '245': (Variation_1125, 0x0120000000),
        '380': (Variation_1241, 0x0110000000),
        '040': (Variation_64, 0x0108000000),
        '080': (Variation_1239, 0x0104000000),
        '290': (Variation_1180, 0x0102000000),
        '200': (Variation_1185, 0x0101800000),
        '295': (Variation_1186, 0x0101400000),
        '136': (Variation_361, 0x0101200000),
        '130': (Variation_288, 0x0101100000),
        '135': (Variation_1187, 0x0101080000),
        '220': (Variation_365, 0x0101040000),
        '390': (Variation_1194, 0x0101020000),
        '270': (Variation_291, 0x0101018000),
        '300': (Variation_286, 0x0101014000),
        '110': (Variation_1209, 0x0101012000),
        '120': (Variation_1210, 0x0101011000),
        '510': (Variation_1211, 0x0101010800),
        '500': (Variation_1222, 0x0101010400),
        '340': (Variation_1242, 0x0101010200),
        'RE': (Variation_62, 0x0101010104),
        'SP': (Variation_62, 0x0101010102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['105']) -> Type[Variation_636]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['100']) -> Type[Variation_1120]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['185']) -> Type[Variation_1121]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['210']) -> Type[Variation_651]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1123]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['245']) -> Type[Variation_1125]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['380']) -> Type[Variation_1241]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_1239]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['290']) -> Type[Variation_1180]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['200']) -> Type[Variation_1185]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['295']) -> Type[Variation_1186]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['136']) -> Type[Variation_361]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['130']) -> Type[Variation_288]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['135']) -> Type[Variation_1187]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['220']) -> Type[Variation_365]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['390']) -> Type[Variation_1194]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['270']) -> Type[Variation_291]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['300']) -> Type[Variation_286]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['110']) -> Type[Variation_1209]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['120']) -> Type[Variation_1210]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['510']) -> Type[Variation_1211]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['500']) -> Type[Variation_1222]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['340']) -> Type[Variation_1242]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['070'], Literal['105'], Literal['100'], Literal['185'], Literal['210'], Literal['060'], Literal['245'], Literal['380'], Literal['040'], Literal['080'], Literal['290'], Literal['200'], Literal['295'], Literal['136'], Literal['130'], Literal['135'], Literal['220'], Literal['390'], Literal['270'], Literal['300'], Literal['110'], Literal['120'], Literal['510'], Literal['500'], Literal['340'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_81'], Type['Variation_636'], Type['Variation_1120'], Type['Variation_1121'], Type['Variation_651'], Type['Variation_1123'], Type['Variation_1125'], Type['Variation_1241'], Type['Variation_64'], Type['Variation_1239'], Type['Variation_1180'], Type['Variation_1185'], Type['Variation_1186'], Type['Variation_361'], Type['Variation_288'], Type['Variation_1187'], Type['Variation_365'], Type['Variation_1194'], Type['Variation_291'], Type['Variation_286'], Type['Variation_1209'], Type['Variation_1210'], Type['Variation_1211'], Type['Variation_1222'], Type['Variation_1242'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '070':
            return Variation_81
        if key == '105':
            return Variation_636
        if key == '100':
            return Variation_1120
        if key == '185':
            return Variation_1121
        if key == '210':
            return Variation_651
        if key == '060':
            return Variation_1123
        if key == '245':
            return Variation_1125
        if key == '380':
            return Variation_1241
        if key == '040':
            return Variation_64
        if key == '080':
            return Variation_1239
        if key == '290':
            return Variation_1180
        if key == '200':
            return Variation_1185
        if key == '295':
            return Variation_1186
        if key == '136':
            return Variation_361
        if key == '130':
            return Variation_288
        if key == '135':
            return Variation_1187
        if key == '220':
            return Variation_365
        if key == '390':
            return Variation_1194
        if key == '270':
            return Variation_291
        if key == '300':
            return Variation_286
        if key == '110':
            return Variation_1209
        if key == '120':
            return Variation_1210
        if key == '510':
            return Variation_1211
        if key == '500':
            return Variation_1222
        if key == '340':
            return Variation_1242
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1243_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['105'], val : Union[Variation_636, Variation_636_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['100'], val : Union[Variation_1120, Variation_1120_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['185'], val : Union[Variation_1121, Variation_1121_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['210'], val : Union[Variation_651, Variation_651_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1123, Variation_1123_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['245'], val : Union[Variation_1125, Variation_1125_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['380'], val : Union[Variation_1241, Variation_1241_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_1239, Variation_1239_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['290'], val : Union[Variation_1180, Variation_1180_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['200'], val : Union[Variation_1185, Variation_1185_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['295'], val : Union[Variation_1186, Variation_1186_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['136'], val : Union[Variation_361, Variation_361_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['130'], val : Union[Variation_288, Variation_288_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['135'], val : Union[Variation_1187, Variation_1187_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['220'], val : Union[Variation_365, Variation_365_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['390'], val : Union[Variation_1194, Variation_1194_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['270'], val : Union[Variation_291, Variation_291_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['300'], val : Union[Variation_286, Variation_286_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['110'], val : Union[Variation_1209, Variation_1209_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['120'], val : Union[Variation_1210, Variation_1210_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['510'], val : Union[Variation_1211, Variation_1211_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['500'], val : Union[Variation_1222, Variation_1222_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['340'], val : Union[Variation_1242, Variation_1242_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1243':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1243':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['105']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['100']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['185']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['210']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['245']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['380']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['290']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['200']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['295']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['136']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['130']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['135']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['220']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['390']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['270']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['300']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['110']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['120']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['510']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['500']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['340']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1243':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1243':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['105']) -> Variation_636:
        ...

    @overload
    def get_item(self, name : Literal['100']) -> Variation_1120:
        ...

    @overload
    def get_item(self, name : Literal['185']) -> Variation_1121:
        ...

    @overload
    def get_item(self, name : Literal['210']) -> Variation_651:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1123:
        ...

    @overload
    def get_item(self, name : Literal['245']) -> Variation_1125:
        ...

    @overload
    def get_item(self, name : Literal['380']) -> Variation_1241:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_1239:
        ...

    @overload
    def get_item(self, name : Literal['290']) -> Variation_1180:
        ...

    @overload
    def get_item(self, name : Literal['200']) -> Variation_1185:
        ...

    @overload
    def get_item(self, name : Literal['295']) -> Variation_1186:
        ...

    @overload
    def get_item(self, name : Literal['136']) -> Variation_361:
        ...

    @overload
    def get_item(self, name : Literal['130']) -> Variation_288:
        ...

    @overload
    def get_item(self, name : Literal['135']) -> Variation_1187:
        ...

    @overload
    def get_item(self, name : Literal['220']) -> Variation_365:
        ...

    @overload
    def get_item(self, name : Literal['390']) -> Variation_1194:
        ...

    @overload
    def get_item(self, name : Literal['270']) -> Variation_291:
        ...

    @overload
    def get_item(self, name : Literal['300']) -> Variation_286:
        ...

    @overload
    def get_item(self, name : Literal['110']) -> Variation_1209:
        ...

    @overload
    def get_item(self, name : Literal['120']) -> Variation_1210:
        ...

    @overload
    def get_item(self, name : Literal['510']) -> Variation_1211:
        ...

    @overload
    def get_item(self, name : Literal['500']) -> Variation_1222:
        ...

    @overload
    def get_item(self, name : Literal['340']) -> Variation_1242:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1244_Arg : TypeAlias = Raw
class Variation_1244(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Operational',
        1: 'Degraded',
        2: 'Initialization',
        3: 'Not currently connected',
    }

    def __init__(self, arg : Variation_1244_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1245_Arg : TypeAlias = Raw
class Variation_1245(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'PSR GO',
        1: 'PSR NOGO',
    }

    def __init__(self, arg : Variation_1245_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1246_Arg : TypeAlias = Raw
class Variation_1246(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'SSR GO',
        1: 'SSR NOGO',
    }

    def __init__(self, arg : Variation_1246_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1247_Arg : TypeAlias = Raw
class Variation_1247(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 1
    table = {
        0: 'MDS GO',
        1: 'MDS NOGO',
    }

    def __init__(self, arg : Variation_1247_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1248_Arg : TypeAlias = Raw
class Variation_1248(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'ADS GO',
        1: 'ADS NOGO',
    }

    def __init__(self, arg : Variation_1248_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1249_Arg : TypeAlias = Raw
class Variation_1249(Element):
    variation = 'Element'

    bit_offset8 = 6
    bit_size = 1
    table = {
        0: 'MLT GO',
        1: 'MLT NOGO',
    }

    def __init__(self, arg : Variation_1249_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1250_Arg : TypeAlias = Raw
class Variation_1250(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'System is released for operational use',
        1: 'Operational use of System is inhibited',
    }

    def __init__(self, arg : Variation_1250_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1251_Arg : TypeAlias = Raw
class Variation_1251(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Monitoring system connected',
        1: 'Monitoring system disconnected',
    }

    def __init__(self, arg : Variation_1251_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1252_Arg : TypeAlias = Raw
class Variation_1252(Element):
    variation = 'Element'

    bit_offset8 = 5
    bit_size = 1
    table = {
        0: 'Default (no meaning)',
        1: 'No plots being received',
    }

    def __init__(self, arg : Variation_1252_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1253_Arg_Group_1 = TypedDict('Variation_1253_Arg_Group_1', {
    'CON': Union[Variation_1244, Variation_1244_Arg],
    'PSR': Union[Variation_1245, Variation_1245_Arg],
    'SSR': Union[Variation_1246, Variation_1246_Arg],
    'MDS': Union[Variation_1247, Variation_1247_Arg],
    'ADS': Union[Variation_1248, Variation_1248_Arg],
    'MLT': Union[Variation_1249, Variation_1249_Arg],
})
Variation_1253_Arg_Group_2 = TypedDict('Variation_1253_Arg_Group_2', {
    'CON': Union[Variation_1244, Variation_1244_Arg],
    'PSR': Union[Variation_1245, Variation_1245_Arg],
    'SSR': Union[Variation_1246, Variation_1246_Arg],
    'MDS': Union[Variation_1247, Variation_1247_Arg],
    'ADS': Union[Variation_1248, Variation_1248_Arg],
    'MLT': Union[Variation_1249, Variation_1249_Arg],
    'OPS': Union[Variation_1250, Variation_1250_Arg],
    'ODP': Union[Variation_922, Variation_922_Arg],
    'OXT': Union[Variation_923, Variation_923_Arg],
    'MSC': Union[Variation_1251, Variation_1251_Arg],
    'TSV': Union[Variation_925, Variation_925_Arg],
    'NPW': Union[Variation_1252, Variation_1252_Arg],
})
Variation_1253_Arg : TypeAlias = Union[
    int,
    Variation_1253_Arg_Group_1,
    Tuple[int],
    Variation_1253_Arg_Group_2,
    Tuple[int,int],
]
class Variation_1253(Extended):
    variation = 'Extended'

    no_trailing_fx = False
    prim_bit_size = 8
    ext_bit_size = 8
    groups_bit_sizes = [
        7,
        7,
    ]

    subitems_list = [
        [
            ('CON', Variation_1244),
            ('PSR', Variation_1245),
            ('SSR', Variation_1246),
            ('MDS', Variation_1247),
            ('ADS', Variation_1248),
            ('MLT', Variation_1249),
        ],
        [
            ('OPS', Variation_1250),
            ('ODP', Variation_922),
            ('OXT', Variation_923),
            ('MSC', Variation_1251),
            ('TSV', Variation_925),
            ('NPW', Variation_1252),
            Spare(6, 1),
        ],
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CON': ('', Variation_1244, 0, 2),
        'PSR': ('', Variation_1245, 2, 1),
        'SSR': ('', Variation_1246, 3, 1),
        'MDS': ('', Variation_1247, 4, 1),
        'ADS': ('', Variation_1248, 5, 1),
        'MLT': ('', Variation_1249, 6, 1),
        'OPS': ('Operational Release Status of the System', Variation_1250, 0, 1),
        'ODP': ('Data Processor Overload Indicator', Variation_922, 1, 1),
        'OXT': ('Transmission Subsystem Overload Status', Variation_923, 2, 1),
        'MSC': ('Monitoring System Connected Status', Variation_1251, 3, 1),
        'TSV': ('Time Source Validity', Variation_925, 4, 1),
        'NPW': ('No Plot Warning', Variation_1252, 5, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CON']) -> Type[Variation_1244]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSR']) -> Type[Variation_1245]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SSR']) -> Type[Variation_1246]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MDS']) -> Type[Variation_1247]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ADS']) -> Type[Variation_1248]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MLT']) -> Type[Variation_1249]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OPS']) -> Type[Variation_1250]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ODP']) -> Type[Variation_922]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OXT']) -> Type[Variation_923]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MSC']) -> Type[Variation_1251]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_925]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NPW']) -> Type[Variation_1252]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CON'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['MLT'], Literal['OPS'], Literal['ODP'], Literal['OXT'], Literal['MSC'], Literal['TSV'], Literal['NPW']]) -> Union[Type['Variation_1244'], Type['Variation_1245'], Type['Variation_1246'], Type['Variation_1247'], Type['Variation_1248'], Type['Variation_1249'], Type['Variation_1250'], Type['Variation_922'], Type['Variation_923'], Type['Variation_1251'], Type['Variation_925'], Type['Variation_1252']]:
        if key == 'CON':
            return Variation_1244
        if key == 'PSR':
            return Variation_1245
        if key == 'SSR':
            return Variation_1246
        if key == 'MDS':
            return Variation_1247
        if key == 'ADS':
            return Variation_1248
        if key == 'MLT':
            return Variation_1249
        if key == 'OPS':
            return Variation_1250
        if key == 'ODP':
            return Variation_922
        if key == 'OXT':
            return Variation_923
        if key == 'MSC':
            return Variation_1251
        if key == 'TSV':
            return Variation_925
        if key == 'NPW':
            return Variation_1252
        assert_never(key)

    def __init__(self, arg : Variation_1253_Arg) -> None:
        if isinstance(arg, int):
            super().__init__(*self._from_single_int(0, arg, False)); return
        if isinstance(arg, tuple):
            if isinstance(arg[0], Bits):
                super().__init__(*arg); return
            super().__init__(*self._from_tuple_int(arg)); return
        if isinstance(arg, dict):
            if Variation_1253_Arg_Group_1.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(1, arg)); return
            if Variation_1253_Arg_Group_2.__required_keys__ == arg.keys():
                super().__init__(*self._from_dict(2, arg)); return
            raise Exception('internal error: unexpected argument')
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CON']) -> Variation_1244:
        ...

    @overload
    def get_item(self, name : Literal['PSR']) -> Variation_1245:
        ...

    @overload
    def get_item(self, name : Literal['SSR']) -> Variation_1246:
        ...

    @overload
    def get_item(self, name : Literal['MDS']) -> Variation_1247:
        ...

    @overload
    def get_item(self, name : Literal['ADS']) -> Variation_1248:
        ...

    @overload
    def get_item(self, name : Literal['MLT']) -> Variation_1249:
        ...

    @overload
    def get_item(self, name : Literal['OPS']) -> Variation_1250:
        ...

    @overload
    def get_item(self, name : Literal['ODP']) -> Variation_922:
        ...

    @overload
    def get_item(self, name : Literal['OXT']) -> Variation_923:
        ...

    @overload
    def get_item(self, name : Literal['MSC']) -> Variation_1251:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_925:
        ...

    @overload
    def get_item(self, name : Literal['NPW']) -> Variation_1252:
        ...

    def get_item(self, name : Union[Literal['CON'], Literal['PSR'], Literal['SSR'], Literal['MDS'], Literal['ADS'], Literal['MLT'], Literal['OPS'], Literal['ODP'], Literal['OXT'], Literal['MSC'], Literal['TSV'], Literal['NPW']]) -> Any:
        return self._get_item(name)

Variation_1254_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ms']]]
class Variation_1254(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0, 0, 'ms')

    def __init__(self, arg : Variation_1254_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1255_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['']]]
class Variation_1255(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 1.0e-5, 0, '')

    def __init__(self, arg : Variation_1255_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1256_Arg_Group = TypedDict('Variation_1256_Arg_Group', {
    'SRG': Union[Variation_1255, Variation_1255_Arg],
    'SRB': Union[Variation_583, Variation_583_Arg],
})
Variation_1256_Arg : TypeAlias = Union[Raw, Variation_1256_Arg_Group]
class Variation_1256(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('SRG', Variation_1255),
        ('SRB', Variation_583),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'SRG': ('Mode S Range Gain', Variation_1255, 0, 16),
        'SRB': ('Mode S Range Bias', Variation_583, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['SRG']) -> Type[Variation_1255]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SRB']) -> Type[Variation_583]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['SRG'], Literal['SRB']]) -> Union[Type['Variation_1255'], Type['Variation_583']]:
        if key == 'SRG':
            return Variation_1255
        if key == 'SRB':
            return Variation_583
        assert_never(key)

    def __init__(self, arg : Variation_1256_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['SRG']) -> Variation_1255:
        ...

    @overload
    def get_item(self, name : Literal['SRB']) -> Variation_583:
        ...

    def get_item(self, name : Union[Literal['SRG'], Literal['SRB']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['SRG'], val : Union[Variation_1255, Variation_1255_Arg]) -> 'Variation_1256':
        ...

    @overload
    def set_item(self, name : Literal['SRB'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_1256':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1257_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['°']]]
class Variation_1257(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 16
    quantity = Quantity('Signed', 360.0, 16, '°')

    def __init__(self, arg : Variation_1257_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1258_Arg_Group = TypedDict('Variation_1258_Arg_Group', {
    'PRG': Union[Variation_1255, Variation_1255_Arg],
    'PRB': Union[Variation_583, Variation_583_Arg],
})
Variation_1258_Arg : TypeAlias = Union[Raw, Variation_1258_Arg_Group]
class Variation_1258(Group):
    variation = 'Group'

    bit_size = 32

    subitems_list = [
        ('PRG', Variation_1255),
        ('PRB', Variation_583),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'PRG': ('PSR Range Gain', Variation_1255, 0, 16),
        'PRB': ('PSR Range Bias', Variation_583, 16, 16),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['PRG']) -> Type[Variation_1255]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PRB']) -> Type[Variation_583]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['PRG'], Literal['PRB']]) -> Union[Type['Variation_1255'], Type['Variation_583']]:
        if key == 'PRG':
            return Variation_1255
        if key == 'PRB':
            return Variation_583
        assert_never(key)

    def __init__(self, arg : Variation_1258_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['PRG']) -> Variation_1255:
        ...

    @overload
    def get_item(self, name : Literal['PRB']) -> Variation_583:
        ...

    def get_item(self, name : Union[Literal['PRG'], Literal['PRB']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['PRG'], val : Union[Variation_1255, Variation_1255_Arg]) -> 'Variation_1258':
        ...

    @overload
    def set_item(self, name : Literal['PRB'], val : Union[Variation_583, Variation_583_Arg]) -> 'Variation_1258':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1259_Arg = TypedDict('Variation_1259_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '050': Union[Variation_1, Variation_1_Arg],
    '060': Union[Variation_1253, Variation_1253_Arg],
    '070': Union[Variation_1254, Variation_1254_Arg],
    '080': Union[Variation_1256, Variation_1256_Arg],
    '081': Union[Variation_1257, Variation_1257_Arg],
    '090': Union[Variation_1258, Variation_1258_Arg],
    '091': Union[Variation_1257, Variation_1257_Arg],
    '092': Union[Variation_1257, Variation_1257_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1259(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('015', Variation_0),
        ('030', Variation_81),
        ('050', Variation_1),
        ('060', Variation_1253),
        ('070', Variation_1254),
        ('080', Variation_1256),
        ('081', Variation_1257),
        ('090', Variation_1258),
        ('091', Variation_1257),
        ('092', Variation_1257),
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '015': (Variation_0, 0x4000),
        '030': (Variation_81, 0x2000),
        '050': (Variation_1, 0x1000),
        '060': (Variation_1253, 0x0800),
        '070': (Variation_1254, 0x0400),
        '080': (Variation_1256, 0x0200),
        '081': (Variation_1257, 0x0180),
        '090': (Variation_1258, 0x0140),
        '091': (Variation_1257, 0x0120),
        '092': (Variation_1257, 0x0110),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['060']) -> Type[Variation_1253]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['070']) -> Type[Variation_1254]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['080']) -> Type[Variation_1256]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['081']) -> Type[Variation_1257]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['090']) -> Type[Variation_1258]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['091']) -> Type[Variation_1257]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['092']) -> Type[Variation_1257]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['030'], Literal['050'], Literal['060'], Literal['070'], Literal['080'], Literal['081'], Literal['090'], Literal['091'], Literal['092'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_81'], Type['Variation_1'], Type['Variation_1253'], Type['Variation_1254'], Type['Variation_1256'], Type['Variation_1257'], Type['Variation_1258'], Type['Variation_1257'], Type['Variation_1257'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '030':
            return Variation_81
        if key == '050':
            return Variation_1
        if key == '060':
            return Variation_1253
        if key == '070':
            return Variation_1254
        if key == '080':
            return Variation_1256
        if key == '081':
            return Variation_1257
        if key == '090':
            return Variation_1258
        if key == '091':
            return Variation_1257
        if key == '092':
            return Variation_1257
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1259_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['060'], val : Union[Variation_1253, Variation_1253_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['070'], val : Union[Variation_1254, Variation_1254_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['080'], val : Union[Variation_1256, Variation_1256_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['081'], val : Union[Variation_1257, Variation_1257_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['090'], val : Union[Variation_1258, Variation_1258_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['091'], val : Union[Variation_1257, Variation_1257_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['092'], val : Union[Variation_1257, Variation_1257_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1259':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1259':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['060']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['070']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['080']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['081']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['090']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['091']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['092']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1259':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1259':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['060']) -> Variation_1253:
        ...

    @overload
    def get_item(self, name : Literal['070']) -> Variation_1254:
        ...

    @overload
    def get_item(self, name : Literal['080']) -> Variation_1256:
        ...

    @overload
    def get_item(self, name : Literal['081']) -> Variation_1257:
        ...

    @overload
    def get_item(self, name : Literal['090']) -> Variation_1258:
        ...

    @overload
    def get_item(self, name : Literal['091']) -> Variation_1257:
        ...

    @overload
    def get_item(self, name : Literal['092']) -> Variation_1257:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1260_Arg : TypeAlias = Raw
class Variation_1260(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'SDPS Status',
        2: 'End of Batch',
        3: 'Service Status Report',
    }

    def __init__(self, arg : Variation_1260_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1261_Arg : TypeAlias = Raw
class Variation_1261(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2
    table = {
        0: 'Operational',
        1: 'Degraded',
        2: 'Not currently connected',
        3: 'Unknown',
    }

    def __init__(self, arg : Variation_1261_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1262_Arg : TypeAlias = Raw
class Variation_1262(Element):
    variation = 'Element'

    bit_offset8 = 2
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Overload',
    }

    def __init__(self, arg : Variation_1262_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1263_Arg : TypeAlias = Raw
class Variation_1263(Element):
    variation = 'Element'

    bit_offset8 = 3
    bit_size = 1
    table = {
        0: 'Default',
        1: 'Invalid Time Source',
    }

    def __init__(self, arg : Variation_1263_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1264_Arg : TypeAlias = Raw
class Variation_1264(Element):
    variation = 'Element'

    bit_offset8 = 4
    bit_size = 2
    table = {
        0: 'Not applicable',
        1: 'SDPS-1 selected',
        2: 'SDPS-2 selected',
        3: 'SDPS-3 selected',
    }

    def __init__(self, arg : Variation_1264_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1265_Arg_Group = TypedDict('Variation_1265_Arg_Group', {
    'NOGO': Union[Variation_1261, Variation_1261_Arg],
    'OVL': Union[Variation_1262, Variation_1262_Arg],
    'TSV': Union[Variation_1263, Variation_1263_Arg],
    'PSS': Union[Variation_1264, Variation_1264_Arg],
    'STTN': Union[Variation_965, Variation_965_Arg],
})
Variation_1265_Arg : TypeAlias = Union[Raw, Variation_1265_Arg_Group]
class Variation_1265(Group):
    variation = 'Group'

    bit_size = 8

    subitems_list = [
        ('NOGO', Variation_1261),
        ('OVL', Variation_1262),
        ('TSV', Variation_1263),
        ('PSS', Variation_1264),
        ('STTN', Variation_965),
        Spare(7, 1),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NOGO': ('', Variation_1261, 0, 2),
        'OVL': ('', Variation_1262, 2, 1),
        'TSV': ('', Variation_1263, 3, 1),
        'PSS': ('Processing System Status', Variation_1264, 4, 2),
        'STTN': ('Track Re-numbering Indication', Variation_965, 6, 1),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NOGO']) -> Type[Variation_1261]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['OVL']) -> Type[Variation_1262]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['TSV']) -> Type[Variation_1263]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['PSS']) -> Type[Variation_1264]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STTN']) -> Type[Variation_965]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['PSS'], Literal['STTN']]) -> Union[Type['Variation_1261'], Type['Variation_1262'], Type['Variation_1263'], Type['Variation_1264'], Type['Variation_965']]:
        if key == 'NOGO':
            return Variation_1261
        if key == 'OVL':
            return Variation_1262
        if key == 'TSV':
            return Variation_1263
        if key == 'PSS':
            return Variation_1264
        if key == 'STTN':
            return Variation_965
        assert_never(key)

    def __init__(self, arg : Variation_1265_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NOGO']) -> Variation_1261:
        ...

    @overload
    def get_item(self, name : Literal['OVL']) -> Variation_1262:
        ...

    @overload
    def get_item(self, name : Literal['TSV']) -> Variation_1263:
        ...

    @overload
    def get_item(self, name : Literal['PSS']) -> Variation_1264:
        ...

    @overload
    def get_item(self, name : Literal['STTN']) -> Variation_965:
        ...

    def get_item(self, name : Union[Literal['NOGO'], Literal['OVL'], Literal['TSV'], Literal['PSS'], Literal['STTN']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NOGO'], val : Union[Variation_1261, Variation_1261_Arg]) -> 'Variation_1265':
        ...

    @overload
    def set_item(self, name : Literal['OVL'], val : Union[Variation_1262, Variation_1262_Arg]) -> 'Variation_1265':
        ...

    @overload
    def set_item(self, name : Literal['TSV'], val : Union[Variation_1263, Variation_1263_Arg]) -> 'Variation_1265':
        ...

    @overload
    def set_item(self, name : Literal['PSS'], val : Union[Variation_1264, Variation_1264_Arg]) -> 'Variation_1265':
        ...

    @overload
    def set_item(self, name : Literal['STTN'], val : Union[Variation_965, Variation_965_Arg]) -> 'Variation_1265':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1266_Arg : TypeAlias = Raw
class Variation_1266(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Service degradation',
        2: 'Service degradation ended',
        3: 'Main radar out of service',
        4: 'Service interrupted by the operator',
        5: 'Service interrupted due to contingency',
        6: 'Ready for service restart after contingency',
        7: 'Service ended by the operator',
        8: 'Failure of user main radar',
        9: 'Service restarted by the operator',
        10: 'Main radar becoming operational',
        11: 'Main radar becoming degraded',
        12: 'Service continuity interrupted due to disconnection with adjacent unit',
        13: 'Service continuity restarted',
        14: 'Service synchronised on backup radar',
        15: 'Service synchronised on main radar',
        16: 'Main and backup radar, if any, failed',
    }

    def __init__(self, arg : Variation_1266_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1267_Arg = TypedDict('Variation_1267_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_1260, Variation_1260_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '030': Union[Variation_81, Variation_81_Arg],
    '020': Union[Variation_0, Variation_0_Arg],
    '040': Union[Variation_1265, Variation_1265_Arg],
    '050': Union[Variation_1266, Variation_1266_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1267(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_1260),
        ('015', Variation_0),
        ('030', Variation_81),
        ('020', Variation_0),
        ('040', Variation_1265),
        ('050', Variation_1266),
        None,
        None,
        None,
        None,
        None,
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_1260, 0x4000),
        '015': (Variation_0, 0x2000),
        '030': (Variation_81, 0x1000),
        '020': (Variation_0, 0x0800),
        '040': (Variation_1265, 0x0400),
        '050': (Variation_1266, 0x0200),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_1260]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_1265]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_1266]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['015'], Literal['030'], Literal['020'], Literal['040'], Literal['050'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_1260'], Type['Variation_0'], Type['Variation_81'], Type['Variation_0'], Type['Variation_1265'], Type['Variation_1266'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_1260
        if key == '015':
            return Variation_0
        if key == '030':
            return Variation_81
        if key == '020':
            return Variation_0
        if key == '040':
            return Variation_1265
        if key == '050':
            return Variation_1266
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1267_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_1260, Variation_1260_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_1265, Variation_1265_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_1266, Variation_1266_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1267':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1267':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1267':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1267':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_1260:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_1265:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_1266:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1268_Arg : TypeAlias = Raw
class Variation_1268(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Video Summary message',
        2: 'Video message',
    }

    def __init__(self, arg : Variation_1268_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1269_Arg : TypeAlias = List[Union[Variation_977, Variation_977_Arg]]
class Variation_1269(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 8
    variation_type = Variation_977

    @classmethod
    def spec(cls) -> Type[Variation_977]:
        return Variation_977

    def __init__(self, arg : List[Union[Variation_977, Variation_977_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1270_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['ns']]]
class Variation_1270(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Unsigned', 1.0, 0, 'ns')

    def __init__(self, arg : Variation_1270_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1271_Arg_Group = TypedDict('Variation_1271_Arg_Group', {
    'STARTAZ': Union[Variation_14, Variation_14_Arg],
    'ENDAZ': Union[Variation_14, Variation_14_Arg],
    'STARTRG': Union[Variation_541, Variation_541_Arg],
    'CELLDUR': Union[Variation_1270, Variation_1270_Arg],
})
Variation_1271_Arg : TypeAlias = Union[Raw, Variation_1271_Arg_Group]
class Variation_1271(Group):
    variation = 'Group'

    bit_size = 96

    subitems_list = [
        ('STARTAZ', Variation_14),
        ('ENDAZ', Variation_14),
        ('STARTRG', Variation_541),
        ('CELLDUR', Variation_1270),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STARTAZ': ('Start Azimuth of the Cells Group', Variation_14, 0, 16),
        'ENDAZ': ('End Azimuth of the Cells Group', Variation_14, 16, 16),
        'STARTRG': ('Starting Range of the Cells Group, Expressed in Number of Cells', Variation_541, 32, 32),
        'CELLDUR': ('Video Cell Duration in Nano-seconds', Variation_1270, 64, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STARTAZ']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ENDAZ']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STARTRG']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CELLDUR']) -> Type[Variation_1270]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STARTAZ'], Literal['ENDAZ'], Literal['STARTRG'], Literal['CELLDUR']]) -> Union[Type['Variation_14'], Type['Variation_14'], Type['Variation_541'], Type['Variation_1270']]:
        if key == 'STARTAZ':
            return Variation_14
        if key == 'ENDAZ':
            return Variation_14
        if key == 'STARTRG':
            return Variation_541
        if key == 'CELLDUR':
            return Variation_1270
        assert_never(key)

    def __init__(self, arg : Variation_1271_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STARTAZ']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['ENDAZ']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['STARTRG']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['CELLDUR']) -> Variation_1270:
        ...

    def get_item(self, name : Union[Literal['STARTAZ'], Literal['ENDAZ'], Literal['STARTRG'], Literal['CELLDUR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STARTAZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1271':
        ...

    @overload
    def set_item(self, name : Literal['ENDAZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1271':
        ...

    @overload
    def set_item(self, name : Literal['STARTRG'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_1271':
        ...

    @overload
    def set_item(self, name : Literal['CELLDUR'], val : Union[Variation_1270, Variation_1270_Arg]) -> 'Variation_1271':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1272_Arg : TypeAlias = Union[Raw,float,Tuple[float,Literal['fs']]]
class Variation_1272(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 32
    quantity = Quantity('Unsigned', 1.0, 0, 'fs')

    def __init__(self, arg : Variation_1272_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        if isinstance(arg, float):
            super().__init__(self._from_float(arg)); return
        if isinstance(arg, tuple):
            super().__init__(self._from_float(arg[0])); return
        assert_never(arg)

    def to_quantity(self) -> float:
        return self._to_quantity()

Variation_1273_Arg_Group = TypedDict('Variation_1273_Arg_Group', {
    'STARTAZ': Union[Variation_14, Variation_14_Arg],
    'ENDAZ': Union[Variation_14, Variation_14_Arg],
    'STARTRG': Union[Variation_541, Variation_541_Arg],
    'CELLDUR': Union[Variation_1272, Variation_1272_Arg],
})
Variation_1273_Arg : TypeAlias = Union[Raw, Variation_1273_Arg_Group]
class Variation_1273(Group):
    variation = 'Group'

    bit_size = 96

    subitems_list = [
        ('STARTAZ', Variation_14),
        ('ENDAZ', Variation_14),
        ('STARTRG', Variation_541),
        ('CELLDUR', Variation_1272),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'STARTAZ': ('Start Azimuth of the Cells Group', Variation_14, 0, 16),
        'ENDAZ': ('End Azimuth of the Cells Group', Variation_14, 16, 16),
        'STARTRG': ('Starting Range of the Cells Group, Expressed in Number of Cells', Variation_541, 32, 32),
        'CELLDUR': ('Video Cell Duration in Femto-seconds', Variation_1272, 64, 32),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['STARTAZ']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['ENDAZ']) -> Type[Variation_14]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['STARTRG']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['CELLDUR']) -> Type[Variation_1272]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['STARTAZ'], Literal['ENDAZ'], Literal['STARTRG'], Literal['CELLDUR']]) -> Union[Type['Variation_14'], Type['Variation_14'], Type['Variation_541'], Type['Variation_1272']]:
        if key == 'STARTAZ':
            return Variation_14
        if key == 'ENDAZ':
            return Variation_14
        if key == 'STARTRG':
            return Variation_541
        if key == 'CELLDUR':
            return Variation_1272
        assert_never(key)

    def __init__(self, arg : Variation_1273_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['STARTAZ']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['ENDAZ']) -> Variation_14:
        ...

    @overload
    def get_item(self, name : Literal['STARTRG']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['CELLDUR']) -> Variation_1272:
        ...

    def get_item(self, name : Union[Literal['STARTAZ'], Literal['ENDAZ'], Literal['STARTRG'], Literal['CELLDUR']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['STARTAZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1273':
        ...

    @overload
    def set_item(self, name : Literal['ENDAZ'], val : Union[Variation_14, Variation_14_Arg]) -> 'Variation_1273':
        ...

    @overload
    def set_item(self, name : Literal['STARTRG'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_1273':
        ...

    @overload
    def set_item(self, name : Literal['CELLDUR'], val : Union[Variation_1272, Variation_1272_Arg]) -> 'Variation_1273':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1274_Arg : TypeAlias = Raw
class Variation_1274(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 1
    table = {
        0: 'No compression applied',
        1: 'Compression applied',
    }

    def __init__(self, arg : Variation_1274_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1275_Arg : TypeAlias = Raw
class Variation_1275(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 8
    table = {
        1: 'Monobit Resolution (1 bit)',
        2: 'Low Resolution (2 bits)',
        3: 'Medium Resolution (4 bits)',
        4: 'High Resolution (8 bits)',
        5: 'Very High Resolution (16 bits)',
        6: 'Ultra High Resolution (32 bits)',
    }

    def __init__(self, arg : Variation_1275_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

    @property
    def table_value(self) -> Optional[str]:
        return self.__class__.table.get(self.to_uinteger())

Variation_1276_Arg_Group = TypedDict('Variation_1276_Arg_Group', {
    'C': Union[Variation_1274, Variation_1274_Arg],
    'RES': Union[Variation_1275, Variation_1275_Arg],
})
Variation_1276_Arg : TypeAlias = Union[Raw, Variation_1276_Arg_Group]
class Variation_1276(Group):
    variation = 'Group'

    bit_size = 16

    subitems_list = [
        ('C', Variation_1274),
        Spare(1, 7),
        ('RES', Variation_1275),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'C': ('Data Compression Indicator', Variation_1274, 0, 1),
        'RES': ('Bit Resolution', Variation_1275, 8, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['C']) -> Type[Variation_1274]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RES']) -> Type[Variation_1275]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['C'], Literal['RES']]) -> Union[Type['Variation_1274'], Type['Variation_1275']]:
        if key == 'C':
            return Variation_1274
        if key == 'RES':
            return Variation_1275
        assert_never(key)

    def __init__(self, arg : Variation_1276_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['C']) -> Variation_1274:
        ...

    @overload
    def get_item(self, name : Literal['RES']) -> Variation_1275:
        ...

    def get_item(self, name : Union[Literal['C'], Literal['RES']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['C'], val : Union[Variation_1274, Variation_1274_Arg]) -> 'Variation_1276':
        ...

    @overload
    def set_item(self, name : Literal['RES'], val : Union[Variation_1275, Variation_1275_Arg]) -> 'Variation_1276':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1277_Arg_Group = TypedDict('Variation_1277_Arg_Group', {
    'NBVB': Union[Variation_64, Variation_64_Arg],
    'NBCELLS': Union[Variation_279, Variation_279_Arg],
})
Variation_1277_Arg : TypeAlias = Union[Raw, Variation_1277_Arg_Group]
class Variation_1277(Group):
    variation = 'Group'

    bit_size = 40

    subitems_list = [
        ('NBVB', Variation_64),
        ('NBCELLS', Variation_279),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'NBVB': ('Number of \'valid\' Octets', Variation_64, 0, 16),
        'NBCELLS': ('Number of \'valid\' Cells', Variation_279, 16, 24),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['NBVB']) -> Type[Variation_64]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['NBCELLS']) -> Type[Variation_279]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['NBVB'], Literal['NBCELLS']]) -> Union[Type['Variation_64'], Type['Variation_279']]:
        if key == 'NBVB':
            return Variation_64
        if key == 'NBCELLS':
            return Variation_279
        assert_never(key)

    def __init__(self, arg : Variation_1277_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['NBVB']) -> Variation_64:
        ...

    @overload
    def get_item(self, name : Literal['NBCELLS']) -> Variation_279:
        ...

    def get_item(self, name : Union[Literal['NBVB'], Literal['NBCELLS']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['NBVB'], val : Union[Variation_64, Variation_64_Arg]) -> 'Variation_1277':
        ...

    @overload
    def set_item(self, name : Literal['NBCELLS'], val : Union[Variation_279, Variation_279_Arg]) -> 'Variation_1277':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1278_Arg : TypeAlias = Raw
class Variation_1278(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 512

    def __init__(self, arg : Variation_1278_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_1279_Arg : TypeAlias = List[Union[Variation_1278, Variation_1278_Arg]]
class Variation_1279(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 512
    variation_type = Variation_1278

    @classmethod
    def spec(cls) -> Type[Variation_1278]:
        return Variation_1278

    def __init__(self, arg : List[Union[Variation_1278, Variation_1278_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1280_Arg : TypeAlias = Raw
class Variation_1280(Element):
    variation = 'Element'

    bit_offset8 = 0
    bit_size = 2048

    def __init__(self, arg : Variation_1280_Arg) -> None:
        if isinstance(arg, Bits):
            super().__init__(arg); return
        if isinstance(arg, Raw):
            super().__init__(self._from_raw(arg)); return
        assert_never(arg)

Variation_1281_Arg : TypeAlias = List[Union[Variation_1280, Variation_1280_Arg]]
class Variation_1281(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 2048
    variation_type = Variation_1280

    @classmethod
    def spec(cls) -> Type[Variation_1280]:
        return Variation_1280

    def __init__(self, arg : List[Union[Variation_1280, Variation_1280_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1282_Arg = TypedDict('Variation_1282_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '000': Union[Variation_1268, Variation_1268_Arg],
    '020': Union[Variation_541, Variation_541_Arg],
    '030': Union[Variation_1269, Variation_1269_Arg],
    '040': Union[Variation_1271, Variation_1271_Arg],
    '041': Union[Variation_1273, Variation_1273_Arg],
    '048': Union[Variation_1276, Variation_1276_Arg],
    '049': Union[Variation_1277, Variation_1277_Arg],
    '050': Union[Variation_542, Variation_542_Arg],
    '051': Union[Variation_1279, Variation_1279_Arg],
    '052': Union[Variation_1281, Variation_1281_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1282(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 2

    subitems_list = [
        ('010', Variation_1),
        ('000', Variation_1268),
        ('020', Variation_541),
        ('030', Variation_1269),
        ('040', Variation_1271),
        ('041', Variation_1273),
        ('048', Variation_1276),
        ('049', Variation_1277),
        ('050', Variation_542),
        ('051', Variation_1279),
        ('052', Variation_1281),
        ('140', Variation_81),
        ('RE', Variation_62),
        ('SP', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x8000),
        '000': (Variation_1268, 0x4000),
        '020': (Variation_541, 0x2000),
        '030': (Variation_1269, 0x1000),
        '040': (Variation_1271, 0x0800),
        '041': (Variation_1273, 0x0400),
        '048': (Variation_1276, 0x0200),
        '049': (Variation_1277, 0x0180),
        '050': (Variation_542, 0x0140),
        '051': (Variation_1279, 0x0120),
        '052': (Variation_1281, 0x0110),
        '140': (Variation_81, 0x0108),
        'RE': (Variation_62, 0x0104),
        'SP': (Variation_62, 0x0102),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['000']) -> Type[Variation_1268]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['020']) -> Type[Variation_541]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['030']) -> Type[Variation_1269]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['040']) -> Type[Variation_1271]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['041']) -> Type[Variation_1273]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['048']) -> Type[Variation_1276]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['049']) -> Type[Variation_1277]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['050']) -> Type[Variation_542]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['051']) -> Type[Variation_1279]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['052']) -> Type[Variation_1281]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['000'], Literal['020'], Literal['030'], Literal['040'], Literal['041'], Literal['048'], Literal['049'], Literal['050'], Literal['051'], Literal['052'], Literal['140'], Literal['RE'], Literal['SP']]) -> Union[Type['Variation_1'], Type['Variation_1268'], Type['Variation_541'], Type['Variation_1269'], Type['Variation_1271'], Type['Variation_1273'], Type['Variation_1276'], Type['Variation_1277'], Type['Variation_542'], Type['Variation_1279'], Type['Variation_1281'], Type['Variation_81'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '000':
            return Variation_1268
        if key == '020':
            return Variation_541
        if key == '030':
            return Variation_1269
        if key == '040':
            return Variation_1271
        if key == '041':
            return Variation_1273
        if key == '048':
            return Variation_1276
        if key == '049':
            return Variation_1277
        if key == '050':
            return Variation_542
        if key == '051':
            return Variation_1279
        if key == '052':
            return Variation_1281
        if key == '140':
            return Variation_81
        if key == 'RE':
            return Variation_62
        if key == 'SP':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1282_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['000'], val : Union[Variation_1268, Variation_1268_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['020'], val : Union[Variation_541, Variation_541_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['030'], val : Union[Variation_1269, Variation_1269_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['040'], val : Union[Variation_1271, Variation_1271_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['041'], val : Union[Variation_1273, Variation_1273_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['048'], val : Union[Variation_1276, Variation_1276_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['049'], val : Union[Variation_1277, Variation_1277_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['050'], val : Union[Variation_542, Variation_542_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['051'], val : Union[Variation_1279, Variation_1279_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['052'], val : Union[Variation_1281, Variation_1281_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1282':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1282':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['000']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['020']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['030']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['040']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['041']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['048']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['049']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['050']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['051']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['052']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1282':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1282':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['000']) -> Variation_1268:
        ...

    @overload
    def get_item(self, name : Literal['020']) -> Variation_541:
        ...

    @overload
    def get_item(self, name : Literal['030']) -> Variation_1269:
        ...

    @overload
    def get_item(self, name : Literal['040']) -> Variation_1271:
        ...

    @overload
    def get_item(self, name : Literal['041']) -> Variation_1273:
        ...

    @overload
    def get_item(self, name : Literal['048']) -> Variation_1276:
        ...

    @overload
    def get_item(self, name : Literal['049']) -> Variation_1277:
        ...

    @overload
    def get_item(self, name : Literal['050']) -> Variation_542:
        ...

    @overload
    def get_item(self, name : Literal['051']) -> Variation_1279:
        ...

    @overload
    def get_item(self, name : Literal['052']) -> Variation_1281:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

Variation_1283_Arg_Group = TypedDict('Variation_1283_Arg_Group', {
    'CAT': Union[Variation_0, Variation_0_Arg],
    'MAIN': Union[Variation_0, Variation_0_Arg],
    'SUB': Union[Variation_0, Variation_0_Arg],
})
Variation_1283_Arg : TypeAlias = Union[Raw, Variation_1283_Arg_Group]
class Variation_1283(Group):
    variation = 'Group'

    bit_size = 24

    subitems_list = [
        ('CAT', Variation_0),
        ('MAIN', Variation_0),
        ('SUB', Variation_0),
    ]

    # name: (title, cls, group_offset, bit_size)
    subitems_dict = {
        'CAT': ('Category', Variation_0, 0, 8),
        'MAIN': ('Main Version Number', Variation_0, 8, 8),
        'SUB': ('Sub Version Number', Variation_0, 16, 8),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['CAT']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['MAIN']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SUB']) -> Type[Variation_0]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['CAT'], Literal['MAIN'], Literal['SUB']]) -> Union[Type['Variation_0'], Type['Variation_0'], Type['Variation_0']]:
        if key == 'CAT':
            return Variation_0
        if key == 'MAIN':
            return Variation_0
        if key == 'SUB':
            return Variation_0
        assert_never(key)

    def __init__(self, arg : Variation_1283_Arg) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, dict):
            super().__init__(*self._from_items(arg)); return
        if isinstance(arg, Raw):
            super().__init__(*self._from_raw(arg)); return
        assert_never(arg)

    @overload
    def get_item(self, name : Literal['CAT']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['MAIN']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['SUB']) -> Variation_0:
        ...

    def get_item(self, name : Union[Literal['CAT'], Literal['MAIN'], Literal['SUB']]) -> Any:
        return self._get_item(name)

    @overload
    def set_item(self, name : Literal['CAT'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1283':
        ...

    @overload
    def set_item(self, name : Literal['MAIN'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1283':
        ...

    @overload
    def set_item(self, name : Literal['SUB'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1283':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

Variation_1284_Arg : TypeAlias = List[Union[Variation_1283, Variation_1283_Arg]]
class Variation_1284(Repetitive):
    variation = 'Repetitive'

    rep_byte_size = 1
    variation_bit_size = 24
    variation_type = Variation_1283

    @classmethod
    def spec(cls) -> Type[Variation_1283]:
        return Variation_1283

    def __init__(self, arg : List[Union[Variation_1283, Variation_1283_Arg]]) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        if isinstance(arg, list):
            super().__init__(*self._from_list(arg)); return
        assert_never(arg)

Variation_1285_Arg = TypedDict('Variation_1285_Arg', {
    '010': Union[Variation_1, Variation_1_Arg],
    '015': Union[Variation_0, Variation_0_Arg],
    '140': Union[Variation_81, Variation_81_Arg],
    '550': Union[Variation_1284, Variation_1284_Arg],
    'SP': Union[Variation_62, Variation_62_Arg],
    'RE': Union[Variation_62, Variation_62_Arg],
}, total=False)
class Variation_1285(Compound):
    variation = 'Compound'

    fspec_fx = True
    fspec_max_bytes = 1

    subitems_list = [
        ('010', Variation_1),
        ('015', Variation_0),
        ('140', Variation_81),
        ('550', Variation_1284),
        None,
        ('SP', Variation_62),
        ('RE', Variation_62),
    ]

    # name: (cls, fspec)
    subitems_dict = {
        '010': (Variation_1, 0x80),
        '015': (Variation_0, 0x40),
        '140': (Variation_81, 0x20),
        '550': (Variation_1284, 0x10),
        'SP': (Variation_62, 0x04),
        'RE': (Variation_62, 0x02),
    }

    @overload
    @classmethod
    def spec(cls, key : Literal['010']) -> Type[Variation_1]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['015']) -> Type[Variation_0]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['140']) -> Type[Variation_81]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['550']) -> Type[Variation_1284]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['SP']) -> Type[Variation_62]:
        ...

    @overload
    @classmethod
    def spec(cls, key : Literal['RE']) -> Type[Variation_62]:
        ...

    @classmethod
    def spec(cls, key : Union[Literal['010'], Literal['015'], Literal['140'], Literal['550'], Literal['SP'], Literal['RE']]) -> Union[Type['Variation_1'], Type['Variation_0'], Type['Variation_81'], Type['Variation_1284'], Type['Variation_62'], Type['Variation_62']]:
        if key == '010':
            return Variation_1
        if key == '015':
            return Variation_0
        if key == '140':
            return Variation_81
        if key == '550':
            return Variation_1284
        if key == 'SP':
            return Variation_62
        if key == 'RE':
            return Variation_62
        assert_never(key)

    def __init__(self, arg : Optional[Variation_1285_Arg] = None) -> None:
        if isinstance(arg, tuple):
            super().__init__(*arg); return
        super().__init__()
        if arg is not None: self._update(arg)

    @overload
    def set_item(self, name : Literal['010'], val : Union[Variation_1, Variation_1_Arg]) -> 'Variation_1285':
        ...

    @overload
    def set_item(self, name : Literal['015'], val : Union[Variation_0, Variation_0_Arg]) -> 'Variation_1285':
        ...

    @overload
    def set_item(self, name : Literal['140'], val : Union[Variation_81, Variation_81_Arg]) -> 'Variation_1285':
        ...

    @overload
    def set_item(self, name : Literal['550'], val : Union[Variation_1284, Variation_1284_Arg]) -> 'Variation_1285':
        ...

    @overload
    def set_item(self, name : Literal['SP'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1285':
        ...

    @overload
    def set_item(self, name : Literal['RE'], val : Union[Variation_62, Variation_62_Arg]) -> 'Variation_1285':
        ...

    def set_item(self, name : Any, val : Any) -> Any:
        return self._set_item(name, val)

    @overload
    def del_item(self, name : Literal['010']) -> 'Variation_1285':
        ...

    @overload
    def del_item(self, name : Literal['015']) -> 'Variation_1285':
        ...

    @overload
    def del_item(self, name : Literal['140']) -> 'Variation_1285':
        ...

    @overload
    def del_item(self, name : Literal['550']) -> 'Variation_1285':
        ...

    @overload
    def del_item(self, name : Literal['SP']) -> 'Variation_1285':
        ...

    @overload
    def del_item(self, name : Literal['RE']) -> 'Variation_1285':
        ...

    def del_item(self, name : Any) -> Any:
        return self._del_item(name)

    @overload
    def get_item(self, name : Literal['010']) -> Variation_1:
        ...

    @overload
    def get_item(self, name : Literal['015']) -> Variation_0:
        ...

    @overload
    def get_item(self, name : Literal['140']) -> Variation_81:
        ...

    @overload
    def get_item(self, name : Literal['550']) -> Variation_1284:
        ...

    @overload
    def get_item(self, name : Literal['SP']) -> Variation_62:
        ...

    @overload
    def get_item(self, name : Literal['RE']) -> Variation_62:
        ...

    def get_item(self, name : Any) -> Any:
        return self._get_item(name)

class CAT_247_1_2(Basic):
    cat = 247
    variation = Variation_1285

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1285_Arg) -> Variation_1285:
        return Variation_1285(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1285, List[Variation_1285]]) -> Datablock[Variation_1285]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1285]:
        return cls._parse(val) # type: ignore

class CAT_247_1_3(Basic):
    cat = 247
    variation = Variation_1285

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1285_Arg) -> Variation_1285:
        return Variation_1285(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1285, List[Variation_1285]]) -> Datablock[Variation_1285]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1285]:
        return cls._parse(val) # type: ignore

class CAT_034_1_27(Basic):
    cat = 34
    variation = Variation_1029

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1029_Arg) -> Variation_1029:
        return Variation_1029(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1029, List[Variation_1029]]) -> Datablock[Variation_1029]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1029]:
        return cls._parse(val) # type: ignore

class CAT_034_1_28(Basic):
    cat = 34
    variation = Variation_1034

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1034_Arg) -> Variation_1034:
        return Variation_1034(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1034, List[Variation_1034]]) -> Datablock[Variation_1034]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1034]:
        return cls._parse(val) # type: ignore

class CAT_034_1_29(Basic):
    cat = 34
    variation = Variation_1036

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1036_Arg) -> Variation_1036:
        return Variation_1036(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1036, List[Variation_1036]]) -> Datablock[Variation_1036]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1036]:
        return cls._parse(val) # type: ignore

class CAT_002_1_0(Basic):
    cat = 2
    variation = Variation_94

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_94_Arg) -> Variation_94:
        return Variation_94(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_94, List[Variation_94]]) -> Datablock[Variation_94]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_94]:
        return cls._parse(val) # type: ignore

class CAT_002_1_1(Basic):
    cat = 2
    variation = Variation_94

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_94_Arg) -> Variation_94:
        return Variation_94(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_94, List[Variation_94]]) -> Datablock[Variation_94]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_94]:
        return cls._parse(val) # type: ignore

class CAT_008_1_2(Basic):
    cat = 8
    variation = Variation_230

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_230_Arg) -> Variation_230:
        return Variation_230(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_230, List[Variation_230]]) -> Datablock[Variation_230]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_230]:
        return cls._parse(val) # type: ignore

class CAT_008_1_3(Basic):
    cat = 8
    variation = Variation_230

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_230_Arg) -> Variation_230:
        return Variation_230(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_230, List[Variation_230]]) -> Datablock[Variation_230]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_230]:
        return cls._parse(val) # type: ignore

class CAT_065_1_4(Basic):
    cat = 65
    variation = Variation_1267

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1267_Arg) -> Variation_1267:
        return Variation_1267(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1267, List[Variation_1267]]) -> Datablock[Variation_1267]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1267]:
        return cls._parse(val) # type: ignore

class CAT_065_1_5(Basic):
    cat = 65
    variation = Variation_1267

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1267_Arg) -> Variation_1267:
        return Variation_1267(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1267, List[Variation_1267]]) -> Datablock[Variation_1267]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1267]:
        return cls._parse(val) # type: ignore

class CAT_019_1_3(Basic):
    cat = 19
    variation = Variation_620

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_620_Arg) -> Variation_620:
        return Variation_620(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_620, List[Variation_620]]) -> Datablock[Variation_620]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_620]:
        return cls._parse(val) # type: ignore

class CAT_240_1_3(Basic):
    cat = 240
    variation = Variation_1282

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1282_Arg) -> Variation_1282:
        return Variation_1282(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1282, List[Variation_1282]]) -> Datablock[Variation_1282]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1282]:
        return cls._parse(val) # type: ignore

class CAT_009_2_1(Basic):
    cat = 9
    variation = Variation_242

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_242_Arg) -> Variation_242:
        return Variation_242(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_242, List[Variation_242]]) -> Datablock[Variation_242]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_242]:
        return cls._parse(val) # type: ignore

class CAT_023_1_2(Basic):
    cat = 23
    variation = Variation_939

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_939_Arg) -> Variation_939:
        return Variation_939(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_939, List[Variation_939]]) -> Datablock[Variation_939]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_939]:
        return cls._parse(val) # type: ignore

class CAT_023_1_3(Basic):
    cat = 23
    variation = Variation_939

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_939_Arg) -> Variation_939:
        return Variation_939(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_939, List[Variation_939]]) -> Datablock[Variation_939]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_939]:
        return cls._parse(val) # type: ignore

class CAT_025_1_5(Basic):
    cat = 25
    variation = Variation_958

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_958_Arg) -> Variation_958:
        return Variation_958(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_958, List[Variation_958]]) -> Datablock[Variation_958]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_958]:
        return cls._parse(val) # type: ignore

class CAT_016_1_0(Basic):
    cat = 16
    variation = Variation_536

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_536_Arg) -> Variation_536:
        return Variation_536(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_536, List[Variation_536]]) -> Datablock[Variation_536]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_536]:
        return cls._parse(val) # type: ignore

class CAT_063_1_6(Basic):
    cat = 63
    variation = Variation_1259

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1259_Arg) -> Variation_1259:
        return Variation_1259(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1259, List[Variation_1259]]) -> Datablock[Variation_1259]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1259]:
        return cls._parse(val) # type: ignore

class CAT_004_1_12(Basic):
    cat = 4
    variation = Variation_207

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_207_Arg) -> Variation_207:
        return Variation_207(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_207, List[Variation_207]]) -> Datablock[Variation_207]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_207]:
        return cls._parse(val) # type: ignore

class CAT_032_1_1(Basic):
    cat = 32
    variation = Variation_987

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_987_Arg) -> Variation_987:
        return Variation_987(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_987, List[Variation_987]]) -> Datablock[Variation_987]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_987]:
        return cls._parse(val) # type: ignore

class CAT_010_1_1(Basic):
    cat = 10
    variation = Variation_310

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_310_Arg) -> Variation_310:
        return Variation_310(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_310, List[Variation_310]]) -> Datablock[Variation_310]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_310]:
        return cls._parse(val) # type: ignore

class CAT_015_1_0(Basic):
    cat = 15
    variation = Variation_525

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_525_Arg) -> Variation_525:
        return Variation_525(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_525, List[Variation_525]]) -> Datablock[Variation_525]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_525]:
        return cls._parse(val) # type: ignore

class CAT_015_1_1(Basic):
    cat = 15
    variation = Variation_525

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_525_Arg) -> Variation_525:
        return Variation_525(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_525, List[Variation_525]]) -> Datablock[Variation_525]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_525]:
        return cls._parse(val) # type: ignore

class CAT_020_1_10(Basic):
    cat = 20
    variation = Variation_680

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_680_Arg) -> Variation_680:
        return Variation_680(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_680, List[Variation_680]]) -> Datablock[Variation_680]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_680]:
        return cls._parse(val) # type: ignore

class CAT_020_1_9(Basic):
    cat = 20
    variation = Variation_677

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_677_Arg) -> Variation_677:
        return Variation_677(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_677, List[Variation_677]]) -> Datablock[Variation_677]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_677]:
        return cls._parse(val) # type: ignore

class CAT_048_1_29(Basic):
    cat = 48
    variation = Variation_1098

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1098_Arg) -> Variation_1098:
        return Variation_1098(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1098, List[Variation_1098]]) -> Datablock[Variation_1098]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1098]:
        return cls._parse(val) # type: ignore

class CAT_048_1_30(Basic):
    cat = 48
    variation = Variation_1098

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1098_Arg) -> Variation_1098:
        return Variation_1098(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1098, List[Variation_1098]]) -> Datablock[Variation_1098]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1098]:
        return cls._parse(val) # type: ignore

class CAT_048_1_27(Basic):
    cat = 48
    variation = Variation_1094

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1094_Arg) -> Variation_1094:
        return Variation_1094(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1094, List[Variation_1094]]) -> Datablock[Variation_1094]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1094]:
        return cls._parse(val) # type: ignore

class CAT_048_1_28(Basic):
    cat = 48
    variation = Variation_1097

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1097_Arg) -> Variation_1097:
        return Variation_1097(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1097, List[Variation_1097]]) -> Datablock[Variation_1097]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1097]:
        return cls._parse(val) # type: ignore

class CAT_048_1_31(Basic):
    cat = 48
    variation = Variation_1111

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1111_Arg) -> Variation_1111:
        return Variation_1111(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1111, List[Variation_1111]]) -> Datablock[Variation_1111]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1111]:
        return cls._parse(val) # type: ignore

class CAT_021_0_23(Basic):
    cat = 21
    variation = Variation_742

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_742_Arg) -> Variation_742:
        return Variation_742(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_742, List[Variation_742]]) -> Datablock[Variation_742]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_742]:
        return cls._parse(val) # type: ignore

class CAT_021_0_24(Basic):
    cat = 21
    variation = Variation_743

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_743_Arg) -> Variation_743:
        return Variation_743(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_743, List[Variation_743]]) -> Datablock[Variation_743]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_743]:
        return cls._parse(val) # type: ignore

class CAT_021_0_25(Basic):
    cat = 21
    variation = Variation_743

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_743_Arg) -> Variation_743:
        return Variation_743(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_743, List[Variation_743]]) -> Datablock[Variation_743]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_743]:
        return cls._parse(val) # type: ignore

class CAT_021_0_26(Basic):
    cat = 21
    variation = Variation_746

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_746_Arg) -> Variation_746:
        return Variation_746(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_746, List[Variation_746]]) -> Datablock[Variation_746]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_746]:
        return cls._parse(val) # type: ignore

class CAT_062_1_17(Basic):
    cat = 62
    variation = Variation_1232

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1232_Arg) -> Variation_1232:
        return Variation_1232(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1232, List[Variation_1232]]) -> Datablock[Variation_1232]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1232]:
        return cls._parse(val) # type: ignore

class CAT_062_1_19(Basic):
    cat = 62
    variation = Variation_1243

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1243_Arg) -> Variation_1243:
        return Variation_1243(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1243, List[Variation_1243]]) -> Datablock[Variation_1243]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1243]:
        return cls._parse(val) # type: ignore

class CAT_062_1_18(Basic):
    cat = 62
    variation = Variation_1240

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_1240_Arg) -> Variation_1240:
        return Variation_1240(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_1240, List[Variation_1240]]) -> Datablock[Variation_1240]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_1240]:
        return cls._parse(val) # type: ignore

class CAT_011_1_2(Basic):
    cat = 11
    variation = Variation_413

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_413_Arg) -> Variation_413:
        return Variation_413(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_413, List[Variation_413]]) -> Datablock[Variation_413]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_413]:
        return cls._parse(val) # type: ignore

class CAT_011_1_3(Basic):
    cat = 11
    variation = Variation_430

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_430_Arg) -> Variation_430:
        return Variation_430(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_430, List[Variation_430]]) -> Datablock[Variation_430]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_430]:
        return cls._parse(val) # type: ignore

class CAT_018_1_7(Basic):
    cat = 18
    variation = Variation_594

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_594_Arg) -> Variation_594:
        return Variation_594(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_594, List[Variation_594]]) -> Datablock[Variation_594]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_594]:
        return cls._parse(val) # type: ignore

class CAT_021_2_5(Basic):
    cat = 21
    variation = Variation_912

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_912_Arg) -> Variation_912:
        return Variation_912(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_912, List[Variation_912]]) -> Datablock[Variation_912]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_912]:
        return cls._parse(val) # type: ignore

class CAT_021_2_3(Basic):
    cat = 21
    variation = Variation_909

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_909_Arg) -> Variation_909:
        return Variation_909(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_909, List[Variation_909]]) -> Datablock[Variation_909]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_909]:
        return cls._parse(val) # type: ignore

class CAT_021_2_4(Basic):
    cat = 21
    variation = Variation_909

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_909_Arg) -> Variation_909:
        return Variation_909(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_909, List[Variation_909]]) -> Datablock[Variation_909]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_909]:
        return cls._parse(val) # type: ignore

class CAT_021_2_6(Basic):
    cat = 21
    variation = Variation_917

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_917_Arg) -> Variation_917:
        return Variation_917(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_917, List[Variation_917]]) -> Datablock[Variation_917]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_917]:
        return cls._parse(val) # type: ignore

class CAT_021_2_1(Basic):
    cat = 21
    variation = Variation_902

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_902_Arg) -> Variation_902:
        return Variation_902(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_902, List[Variation_902]]) -> Datablock[Variation_902]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_902]:
        return cls._parse(val) # type: ignore

class CAT_021_2_2(Basic):
    cat = 21
    variation = Variation_906

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_record(cls, val : Variation_906_Arg) -> Variation_906:
        return Variation_906(val)

    @classmethod
    def make_datablock(cls, val : Union[Variation_906, List[Variation_906]]) -> Datablock[Variation_906]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock) -> Datablock[Variation_906]:
        return cls._parse(val) # type: ignore

class CAT_001_1_2(Basic):
    cat = 1

    uaps = {
        'plot': Variation_63,
        'track': Variation_78,
    }

    uap_selector_item = ["020", "TYP"]

    uap_selector_table = {
        0: 'plot',
        1: 'track',
    }

    @classmethod
    def spec(cls, val : Literal["plot", "track"]) -> Any:
        return cls.uaps[val]

    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['plot'], arg : Variation_63_Arg) -> Variation_63:
        ...
    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['track'], arg : Variation_78_Arg) -> Variation_78:
        ...

    @classmethod
    def make_record_unsafe(cls, uap : Any, arg : Any) -> Any:
        return cls.uaps[uap](arg)

    @classmethod
    def make_datablock(cls, val : Union[Union[Variation_63, Variation_78], List[Union[Variation_63, Variation_78]]]) -> Datablock[Union[Variation_63, Variation_78]]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock, uap : Optional[Literal["plot", "track"]] = None) -> Any:
        return cls._parse(val, uap=uap)

    @classmethod
    def is_valid(cls, arg : Union[Variation_63, Variation_78]) -> bool:
        return cls._is_valid(arg)

class CAT_001_1_3(Basic):
    cat = 1

    uaps = {
        'plot': Variation_63,
        'track': Variation_78,
    }

    uap_selector_item = ["020", "TYP"]

    uap_selector_table = {
        0: 'plot',
        1: 'track',
    }

    @classmethod
    def spec(cls, val : Literal["plot", "track"]) -> Any:
        return cls.uaps[val]

    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['plot'], arg : Variation_63_Arg) -> Variation_63:
        ...
    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['track'], arg : Variation_78_Arg) -> Variation_78:
        ...

    @classmethod
    def make_record_unsafe(cls, uap : Any, arg : Any) -> Any:
        return cls.uaps[uap](arg)

    @classmethod
    def make_datablock(cls, val : Union[Union[Variation_63, Variation_78], List[Union[Variation_63, Variation_78]]]) -> Datablock[Union[Variation_63, Variation_78]]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock, uap : Optional[Literal["plot", "track"]] = None) -> Any:
        return cls._parse(val, uap=uap)

    @classmethod
    def is_valid(cls, arg : Union[Variation_63, Variation_78]) -> bool:
        return cls._is_valid(arg)

class CAT_001_1_4(Basic):
    cat = 1

    uaps = {
        'plot': Variation_63,
        'track': Variation_78,
    }

    uap_selector_item = ["020", "TYP"]

    uap_selector_table = {
        0: 'plot',
        1: 'track',
    }

    @classmethod
    def spec(cls, val : Literal["plot", "track"]) -> Any:
        return cls.uaps[val]

    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['plot'], arg : Variation_63_Arg) -> Variation_63:
        ...
    @overload
    @classmethod
    def make_record_unsafe(cls, uap : Literal['track'], arg : Variation_78_Arg) -> Variation_78:
        ...

    @classmethod
    def make_record_unsafe(cls, uap : Any, arg : Any) -> Any:
        return cls.uaps[uap](arg)

    @classmethod
    def make_datablock(cls, val : Union[Union[Variation_63, Variation_78], List[Union[Variation_63, Variation_78]]]) -> Datablock[Union[Variation_63, Variation_78]]:
        return Datablock(cls.cat, val)

    @classmethod
    def parse(cls, val : RawDatablock, uap : Optional[Literal["plot", "track"]] = None) -> Any:
        return cls._parse(val, uap=uap)

    @classmethod
    def is_valid(cls, arg : Union[Variation_63, Variation_78]) -> bool:
        return cls._is_valid(arg)

class REF_021_1_5(Expansion):
    cat = 21
    variation = Variation_826

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_extended(cls, val : Variation_826_Arg) -> Variation_826:
        return Variation_826(val)

    @classmethod
    def parse(cls, val : bytes) -> Variation_826:
        s = Bits.from_bytes(val)
        (rec, s2) = Variation_826.parse_bits(s)
        if len(s2) != 0:
            raise AsterixError('unable to parse expansion')
        return rec # type: ignore

class REF_021_1_4(Expansion):
    cat = 21
    variation = Variation_792

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_extended(cls, val : Variation_792_Arg) -> Variation_792:
        return Variation_792(val)

    @classmethod
    def parse(cls, val : bytes) -> Variation_792:
        s = Bits.from_bytes(val)
        (rec, s2) = Variation_792.parse_bits(s)
        if len(s2) != 0:
            raise AsterixError('unable to parse expansion')
        return rec # type: ignore

class REF_062_1_2(Expansion):
    cat = 62
    variation = Variation_1119

    spec = variation.spec

    parse_bits = variation.parse_bits

    unparse_bits = variation.unparse_bits

    @classmethod
    def make_extended(cls, val : Variation_1119_Arg) -> Variation_1119:
        return Variation_1119(val)

    @classmethod
    def parse(cls, val : bytes) -> Variation_1119:
        s = Bits.from_bytes(val)
        (rec, s2) = Variation_1119.parse_bits(s)
        if len(s2) != 0:
            raise AsterixError('unable to parse expansion')
        return rec # type: ignore

manifest = {
    'CATS': {
        1: {
            '1.2': CAT_001_1_2,
            '1.3': CAT_001_1_3,
            '1.4': CAT_001_1_4,
        },
        2: {
            '1.0': CAT_002_1_0,
            '1.1': CAT_002_1_1,
        },
        4: {
            '1.12': CAT_004_1_12,
        },
        8: {
            '1.2': CAT_008_1_2,
            '1.3': CAT_008_1_3,
        },
        9: {
            '2.1': CAT_009_2_1,
        },
        10: {
            '1.1': CAT_010_1_1,
        },
        11: {
            '1.2': CAT_011_1_2,
            '1.3': CAT_011_1_3,
        },
        15: {
            '1.0': CAT_015_1_0,
            '1.1': CAT_015_1_1,
        },
        16: {
            '1.0': CAT_016_1_0,
        },
        18: {
            '1.7': CAT_018_1_7,
        },
        19: {
            '1.3': CAT_019_1_3,
        },
        20: {
            '1.9': CAT_020_1_9,
            '1.10': CAT_020_1_10,
        },
        21: {
            '0.23': CAT_021_0_23,
            '0.24': CAT_021_0_24,
            '0.25': CAT_021_0_25,
            '0.26': CAT_021_0_26,
            '2.1': CAT_021_2_1,
            '2.2': CAT_021_2_2,
            '2.3': CAT_021_2_3,
            '2.4': CAT_021_2_4,
            '2.5': CAT_021_2_5,
            '2.6': CAT_021_2_6,
        },
        23: {
            '1.2': CAT_023_1_2,
            '1.3': CAT_023_1_3,
        },
        25: {
            '1.5': CAT_025_1_5,
        },
        32: {
            '1.1': CAT_032_1_1,
        },
        34: {
            '1.27': CAT_034_1_27,
            '1.28': CAT_034_1_28,
            '1.29': CAT_034_1_29,
        },
        48: {
            '1.27': CAT_048_1_27,
            '1.28': CAT_048_1_28,
            '1.29': CAT_048_1_29,
            '1.30': CAT_048_1_30,
            '1.31': CAT_048_1_31,
        },
        62: {
            '1.17': CAT_062_1_17,
            '1.18': CAT_062_1_18,
            '1.19': CAT_062_1_19,
        },
        63: {
            '1.6': CAT_063_1_6,
        },
        65: {
            '1.4': CAT_065_1_4,
            '1.5': CAT_065_1_5,
        },
        240: {
            '1.3': CAT_240_1_3,
        },
        247: {
            '1.2': CAT_247_1_2,
            '1.3': CAT_247_1_3,
        },
    },
    'REFS': {
        21: {
            '1.4': REF_021_1_4,
            '1.5': REF_021_1_5,
        },
        62: {
            '1.2': REF_062_1_2,
        },
    },
}

VERSION = '20230329.42291'

REFERENCE = 'c449dddf0d41b342125a7547d5dadf70daf75636'
